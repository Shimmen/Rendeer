/*

    OpenGL loader generated by glad 0.1.11a0 on Fri Jun 24 22:30:08 2016.
    Modified by me (Simon Moos) so that it is confined in a single header file.

    Language/Generator: C/C++ Debug
    Specification: gl
    APIs: gl=3.3
    Profile: core
    Extensions:
        GL_SGIX_pixel_tiles, GL_EXT_post_depth_coverage, GL_APPLE_element_array, GL_AMD_multi_draw_indirect, GL_EXT_blend_subtract, GL_SGIX_tag_sample_buffer, GL_NV_point_sprite, GL_IBM_texture_mirrored_repeat, GL_APPLE_transform_hint, GL_ATI_separate_stencil, GL_NV_shader_atomic_int64, GL_NV_vertex_program2_option, GL_EXT_texture_buffer_object, GL_ARB_vertex_blend, GL_OVR_multiview, GL_NV_vertex_program2, GL_ARB_program_interface_query, GL_EXT_misc_attribute, GL_NV_multisample_coverage, GL_ARB_shading_language_packing, GL_EXT_texture_cube_map, GL_NV_viewport_array2, GL_ARB_texture_stencil8, GL_EXT_index_func, GL_OES_compressed_paletted_texture, GL_NV_depth_clamp, GL_NV_shader_buffer_load, GL_EXT_color_subtable, GL_SUNX_constant_data, GL_EXT_texture_compression_s3tc, GL_EXT_multi_draw_arrays, GL_ARB_shader_atomic_counters, GL_ARB_arrays_of_arrays, GL_NV_conditional_render, GL_EXT_texture_env_combine, GL_NV_fog_distance, GL_SGIX_async_histogram, GL_MESA_resize_buffers, GL_NV_light_max_exponent, GL_NV_texture_env_combine4, GL_ARB_texture_view, GL_ARB_texture_env_combine, GL_ARB_map_buffer_range, GL_EXT_convolution, GL_NV_compute_program5, GL_NV_vertex_attrib_integer_64bit, GL_EXT_paletted_texture, GL_ARB_texture_buffer_object, GL_ATI_pn_triangles, GL_SGIX_resample, GL_SGIX_flush_raster, GL_EXT_light_texture, GL_ARB_point_sprite, GL_SUN_convolution_border_modes, GL_NV_parameter_buffer_object2, GL_ARB_half_float_pixel, GL_NV_tessellation_program5, GL_REND_screen_coordinates, GL_EXT_shared_texture_palette, GL_EXT_packed_float, GL_OML_subsample, GL_SGIX_vertex_preclip, GL_SGIX_texture_scale_bias, GL_AMD_draw_buffers_blend, GL_APPLE_texture_range, GL_EXT_texture_array, GL_NV_texture_barrier, GL_ARB_texture_query_levels, GL_NV_texgen_emboss, GL_EXT_texture_swizzle, GL_ARB_texture_rg, GL_ARB_vertex_type_2_10_10_10_rev, GL_ARB_fragment_shader, GL_3DFX_tbuffer, GL_GREMEDY_frame_terminator, GL_ARB_blend_func_extended, GL_EXT_separate_shader_objects, GL_NV_texture_multisample, GL_ARB_shader_objects, GL_ARB_framebuffer_object, GL_ATI_envmap_bumpmap, GL_AMD_shader_explicit_vertex_parameter, GL_ARB_robust_buffer_access_behavior, GL_ARB_shader_stencil_export, GL_NV_texture_rectangle, GL_ARB_enhanced_layouts, GL_ARB_texture_rectangle, GL_SGI_texture_color_table, GL_NV_viewport_swizzle, GL_ATI_map_object_buffer, GL_ARB_robustness, GL_NV_pixel_data_range, GL_EXT_framebuffer_blit, GL_ARB_gpu_shader_fp64, GL_NV_command_list, GL_SGIX_depth_texture, GL_EXT_vertex_weighting, GL_GREMEDY_string_marker, GL_ARB_texture_compression_bptc, GL_EXT_subtexture, GL_EXT_pixel_transform_color_table, GL_EXT_texture_compression_rgtc, GL_ARB_shader_atomic_counter_ops, GL_SGIX_depth_pass_instrument, GL_EXT_gpu_program_parameters, GL_NV_evaluators, GL_SGIS_texture_filter4, GL_AMD_performance_monitor, GL_NV_geometry_shader4, GL_EXT_stencil_clear_tag, GL_NV_vertex_program1_1, GL_NV_present_video, GL_ARB_texture_compression_rgtc, GL_HP_convolution_border_modes, GL_EXT_shader_integer_mix, GL_SGIX_framezoom, GL_ARB_stencil_texturing, GL_ARB_shader_clock, GL_NV_shader_atomic_fp16_vector, GL_SGIX_fog_offset, GL_ARB_draw_elements_base_vertex, GL_INGR_interlace_read, GL_NV_transform_feedback, GL_NV_fragment_program, GL_AMD_stencil_operation_extended, GL_ARB_seamless_cubemap_per_texture, GL_ARB_instanced_arrays, GL_ARB_get_texture_sub_image, GL_NV_vertex_array_range2, GL_KHR_robustness, GL_AMD_sparse_texture, GL_ARB_clip_control, GL_NV_fragment_coverage_to_color, GL_NV_fence, GL_ARB_texture_buffer_range, GL_SUN_mesh_array, GL_ARB_vertex_attrib_binding, GL_ARB_framebuffer_no_attachments, GL_ARB_cl_event, GL_ARB_derivative_control, GL_NV_packed_depth_stencil, GL_OES_single_precision, GL_NV_primitive_restart, GL_SUN_global_alpha, GL_ARB_fragment_shader_interlock, GL_EXT_texture_object, GL_AMD_name_gen_delete, GL_NV_texture_compression_vtc, GL_NV_sample_mask_override_coverage, GL_NV_texture_shader3, GL_NV_texture_shader2, GL_EXT_texture, GL_ARB_buffer_storage, GL_AMD_shader_atomic_counter_ops, GL_APPLE_vertex_program_evaluators, GL_ARB_multi_bind, GL_ARB_explicit_uniform_location, GL_ARB_depth_buffer_float, GL_NV_path_rendering_shared_edge, GL_SGIX_shadow_ambient, GL_ARB_texture_cube_map, GL_AMD_vertex_shader_viewport_index, GL_SGIX_list_priority, GL_NV_vertex_buffer_unified_memory, GL_NV_uniform_buffer_unified_memory, GL_ARB_clear_texture, GL_ATI_texture_env_combine3, GL_ARB_map_buffer_alignment, GL_NV_blend_equation_advanced, GL_SGIS_sharpen_texture, GL_KHR_robust_buffer_access_behavior, GL_ARB_pipeline_statistics_query, GL_ARB_vertex_program, GL_ARB_texture_rgb10_a2ui, GL_OML_interlace, GL_ATI_pixel_format_float, GL_NV_clip_space_w_scaling, GL_ARB_vertex_buffer_object, GL_EXT_shadow_funcs, GL_ATI_text_fragment_shader, GL_NV_vertex_array_range, GL_SGIX_fragment_lighting, GL_NV_texture_expand_normal, GL_NV_framebuffer_multisample_coverage, GL_EXT_timer_query, GL_EXT_vertex_array_bgra, GL_NV_bindless_texture, GL_KHR_debug, GL_SGIS_texture_border_clamp, GL_ATI_vertex_attrib_array_object, GL_SGIX_clipmap, GL_EXT_geometry_shader4, GL_ARB_shader_texture_image_samples, GL_MESA_ycbcr_texture, GL_MESAX_texture_stack, GL_AMD_seamless_cubemap_per_texture, GL_EXT_bindable_uniform, GL_KHR_texture_compression_astc_hdr, GL_ARB_shader_ballot, GL_KHR_blend_equation_advanced, GL_ARB_fragment_program_shadow, GL_ATI_element_array, GL_AMD_texture_texture4, GL_SGIX_reference_plane, GL_EXT_stencil_two_side, GL_ARB_transform_feedback_overflow_query, GL_SGIX_texture_lod_bias, GL_KHR_no_error, GL_NV_explicit_multisample, GL_NV_stereo_view_rendering, GL_IBM_static_data, GL_EXT_clip_volume_hint, GL_EXT_texture_perturb_normal, GL_NV_fragment_program2, GL_NV_fragment_program4, GL_EXT_point_parameters, GL_PGI_misc_hints, GL_SGIX_subsample, GL_AMD_shader_stencil_export, GL_ARB_shader_texture_lod, GL_ARB_vertex_shader, GL_ARB_depth_clamp, GL_SGIS_texture_select, GL_NV_texture_shader, GL_ARB_tessellation_shader, GL_EXT_draw_buffers2, GL_ARB_vertex_attrib_64bit, GL_EXT_texture_filter_minmax, GL_WIN_specular_fog, GL_AMD_interleaved_elements, GL_ARB_fragment_program, GL_OML_resample, GL_APPLE_ycbcr_422, GL_SGIX_texture_add_env, GL_ARB_shadow_ambient, GL_ARB_texture_storage, GL_EXT_pixel_buffer_object, GL_ARB_copy_image, GL_SGIS_pixel_texture, GL_SGIS_generate_mipmap, GL_SGIX_instruments, GL_HP_texture_lighting, GL_ARB_shader_storage_buffer_object, GL_EXT_sparse_texture2, GL_EXT_blend_minmax, GL_MESA_pack_invert, GL_ARB_base_instance, GL_SGIX_convolution_accuracy, GL_PGI_vertex_hints, GL_AMD_transform_feedback4, GL_ARB_ES3_1_compatibility, GL_EXT_texture_integer, GL_ARB_texture_multisample, GL_AMD_gpu_shader_int64, GL_S3_s3tc, GL_ARB_query_buffer_object, GL_AMD_vertex_shader_tessellator, GL_ARB_invalidate_subdata, GL_EXT_index_material, GL_NV_blend_equation_advanced_coherent, GL_KHR_texture_compression_astc_sliced_3d, GL_INTEL_parallel_arrays, GL_ATI_draw_buffers, GL_EXT_cmyka, GL_SGIX_pixel_texture, GL_APPLE_specular_vector, GL_ARB_compatibility, GL_ARB_timer_query, GL_SGIX_interlace, GL_NV_parameter_buffer_object, GL_AMD_shader_trinary_minmax, GL_ARB_direct_state_access, GL_EXT_rescale_normal, GL_ARB_pixel_buffer_object, GL_ARB_uniform_buffer_object, GL_ARB_vertex_type_10f_11f_11f_rev, GL_ARB_texture_swizzle, GL_NV_transform_feedback2, GL_SGIX_async_pixel, GL_NV_fragment_program_option, GL_ARB_explicit_attrib_location, GL_EXT_blend_color, GL_NV_shader_thread_group, GL_EXT_stencil_wrap, GL_EXT_index_array_formats, GL_OVR_multiview2, GL_EXT_histogram, GL_EXT_polygon_offset, GL_SGIS_point_parameters, GL_SGIX_ycrcb, GL_EXT_direct_state_access, GL_ARB_cull_distance, GL_AMD_sample_positions, GL_NV_vertex_program, GL_NV_shader_thread_shuffle, GL_ARB_shader_precision, GL_EXT_vertex_shader, GL_EXT_blend_func_separate, GL_APPLE_fence, GL_OES_byte_coordinates, GL_ARB_transpose_matrix, GL_ARB_provoking_vertex, GL_EXT_fog_coord, GL_EXT_vertex_array, GL_ARB_half_float_vertex, GL_EXT_blend_equation_separate, GL_NV_framebuffer_mixed_samples, GL_NVX_conditional_render, GL_ARB_multi_draw_indirect, GL_EXT_raster_multisample, GL_NV_copy_image, GL_ARB_fragment_layer_viewport, GL_INTEL_framebuffer_CMAA, GL_ARB_transform_feedback2, GL_ARB_transform_feedback3, GL_SGIX_ycrcba, GL_EXT_debug_marker, GL_EXT_bgra, GL_ARB_sparse_texture_clamp, GL_EXT_pixel_transform, GL_ARB_conservative_depth, GL_ATI_fragment_shader, GL_ARB_vertex_array_object, GL_SUN_triangle_list, GL_EXT_texture_env_add, GL_EXT_packed_depth_stencil, GL_EXT_texture_mirror_clamp, GL_NV_multisample_filter_hint, GL_APPLE_float_pixels, GL_ARB_transform_feedback_instanced, GL_SGIX_async, GL_EXT_texture_compression_latc, GL_NV_robustness_video_memory_purge, GL_ARB_shading_language_100, GL_INTEL_performance_query, GL_ARB_texture_mirror_clamp_to_edge, GL_NV_gpu_shader5, GL_NV_bindless_multi_draw_indirect_count, GL_ARB_ES2_compatibility, GL_ARB_indirect_parameters, GL_EXT_window_rectangles, GL_NV_half_float, GL_ARB_ES3_2_compatibility, GL_ATI_texture_mirror_once, GL_IBM_rasterpos_clip, GL_SGIX_shadow, GL_EXT_polygon_offset_clamp, GL_NV_deep_texture3D, GL_ARB_shader_draw_parameters, GL_SGIX_calligraphic_fragment, GL_ARB_shader_bit_encoding, GL_EXT_compiled_vertex_array, GL_NV_depth_buffer_float, GL_NV_occlusion_query, GL_APPLE_flush_buffer_range, GL_ARB_imaging, GL_NV_shader_atomic_float, GL_ARB_draw_buffers_blend, GL_AMD_gcn_shader, GL_AMD_blend_minmax_factor, GL_EXT_texture_sRGB_decode, GL_ARB_shading_language_420pack, GL_ARB_shader_viewport_layer_array, GL_ATI_meminfo, GL_EXT_abgr, GL_AMD_pinned_memory, GL_EXT_texture_snorm, GL_SGIX_texture_coordinate_clamp, GL_ARB_clear_buffer_object, GL_ARB_multisample, GL_EXT_debug_label, GL_ARB_sample_shading, GL_NV_internalformat_sample_query, GL_INTEL_map_texture, GL_ARB_texture_env_crossbar, GL_EXT_422_pixels, GL_NV_conservative_raster_pre_snap_triangles, GL_ARB_compute_shader, GL_EXT_blend_logic_op, GL_IBM_cull_vertex, GL_IBM_vertex_array_lists, GL_ARB_color_buffer_float, GL_ARB_bindless_texture, GL_ARB_window_pos, GL_ARB_internalformat_query, GL_ARB_shadow, GL_ARB_texture_mirrored_repeat, GL_EXT_shader_image_load_store, GL_EXT_copy_texture, GL_NV_register_combiners2, GL_SGIX_ycrcb_subsample, GL_SGIX_ir_instrument1, GL_NV_draw_texture, GL_EXT_texture_shared_exponent, GL_EXT_draw_instanced, GL_NV_copy_depth_to_color, GL_ARB_viewport_array, GL_ARB_separate_shader_objects, GL_EXT_depth_bounds_test, GL_HP_image_transform, GL_ARB_texture_env_add, GL_NV_video_capture, GL_ARB_sampler_objects, GL_ARB_matrix_palette, GL_SGIS_texture_color_mask, GL_EXT_packed_pixels, GL_EXT_coordinate_frame, GL_ARB_texture_compression, GL_APPLE_aux_depth_stencil, GL_ARB_shader_subroutine, GL_EXT_framebuffer_sRGB, GL_ARB_texture_storage_multisample, GL_KHR_blend_equation_advanced_coherent, GL_EXT_vertex_attrib_64bit, GL_NV_shader_atomic_float64, GL_ARB_depth_texture, GL_NV_shader_buffer_store, GL_OES_query_matrix, GL_MESA_window_pos, GL_NV_fill_rectangle, GL_NV_shader_storage_buffer_object, GL_ARB_texture_query_lod, GL_ARB_copy_buffer, GL_ARB_shader_image_size, GL_NV_shader_atomic_counters, GL_APPLE_object_purgeable, GL_ARB_occlusion_query, GL_INGR_color_clamp, GL_SGI_color_table, GL_NV_gpu_program5_mem_extended, GL_ARB_texture_cube_map_array, GL_SGIX_scalebias_hint, GL_EXT_gpu_shader4, GL_NV_geometry_program4, GL_EXT_framebuffer_multisample_blit_scaled, GL_AMD_debug_output, GL_ARB_texture_border_clamp, GL_ARB_fragment_coord_conventions, GL_ARB_multitexture, GL_SGIX_polynomial_ffd, GL_EXT_provoking_vertex, GL_ARB_point_parameters, GL_ARB_shader_image_load_store, GL_ARB_conditional_render_inverted, GL_HP_occlusion_test, GL_ARB_ES3_compatibility, GL_ARB_texture_barrier, GL_ARB_texture_buffer_object_rgb32, GL_NV_bindless_multi_draw_indirect, GL_SGIX_texture_multi_buffer, GL_EXT_transform_feedback, GL_KHR_texture_compression_astc_ldr, GL_3DFX_multisample, GL_INTEL_fragment_shader_ordering, GL_ARB_texture_env_dot3, GL_NV_gpu_program4, GL_NV_gpu_program5, GL_NV_float_buffer, GL_SGIS_texture_edge_clamp, GL_ARB_framebuffer_sRGB, GL_SUN_slice_accum, GL_EXT_index_texture, GL_EXT_shader_image_load_formatted, GL_ARB_geometry_shader4, GL_EXT_separate_specular_color, GL_AMD_depth_clamp_separate, GL_NV_conservative_raster, GL_ARB_sparse_texture2, GL_SGIX_sprite, GL_ARB_get_program_binary, GL_AMD_occlusion_query_event, GL_SGIS_multisample, GL_EXT_framebuffer_object, GL_ARB_robustness_isolation, GL_ARB_vertex_array_bgra, GL_APPLE_vertex_array_range, GL_AMD_query_buffer_object, GL_NV_register_combiners, GL_ARB_draw_buffers, GL_EXT_texture_env_dot3, GL_ARB_debug_output, GL_SGI_color_matrix, GL_EXT_cull_vertex, GL_EXT_texture_sRGB, GL_APPLE_row_bytes, GL_NV_texgen_reflection, GL_IBM_multimode_draw_arrays, GL_APPLE_vertex_array_object, GL_3DFX_texture_compression_FXT1, GL_NV_fragment_shader_interlock, GL_AMD_conservative_depth, GL_ARB_texture_float, GL_ARB_compressed_texture_pixel_storage, GL_SGIS_detail_texture, GL_NV_geometry_shader_passthrough, GL_ARB_draw_instanced, GL_OES_read_format, GL_ATI_texture_float, GL_ARB_texture_gather, GL_AMD_vertex_shader_layer, GL_ARB_shading_language_include, GL_APPLE_client_storage, GL_WIN_phong_shading, GL_INGR_blend_func_separate, GL_NV_path_rendering, GL_NV_conservative_raster_dilate, GL_ATI_vertex_streams, GL_ARB_post_depth_coverage, GL_ARB_texture_non_power_of_two, GL_APPLE_rgb_422, GL_EXT_texture_lod_bias, GL_ARB_gpu_shader_int64, GL_ARB_seamless_cube_map, GL_ARB_shader_group_vote, GL_NV_vdpau_interop, GL_ARB_occlusion_query2, GL_ARB_internalformat_query2, GL_EXT_texture_filter_anisotropic, GL_SUN_vertex, GL_SGIX_igloo_interface, GL_SGIS_texture_lod, GL_NV_vertex_program3, GL_ARB_draw_indirect, GL_NV_vertex_program4, GL_AMD_transform_feedback3_lines_triangles, GL_SGIS_fog_function, GL_EXT_x11_sync_object, GL_ARB_sync, GL_NV_sample_locations, GL_ARB_compute_variable_group_size, GL_OES_fixed_point, GL_NV_blend_square, GL_EXT_framebuffer_multisample, GL_ARB_gpu_shader5, GL_SGIS_texture4D, GL_EXT_texture3D, GL_EXT_multisample, GL_EXT_secondary_color, GL_ARB_texture_filter_minmax, GL_ATI_vertex_array_object, GL_ARB_parallel_shader_compile, GL_NVX_gpu_memory_info, GL_ARB_sparse_texture, GL_SGIS_point_line_texgen, GL_ARB_sample_locations, GL_ARB_sparse_buffer, GL_EXT_draw_range_elements, GL_SGIX_blend_alpha_minmax, GL_KHR_context_flush_control
    Loader: False
    Local files: False
    Omit khrplatform: True

    Commandline:
        --profile="core" --api="gl=3.3" --generator="c-debug" --spec="gl" --no-loader --omit-khrplatform --extensions="GL_SGIX_pixel_tiles,GL_EXT_post_depth_coverage,GL_APPLE_element_array,GL_AMD_multi_draw_indirect,GL_EXT_blend_subtract,GL_SGIX_tag_sample_buffer,GL_NV_point_sprite,GL_IBM_texture_mirrored_repeat,GL_APPLE_transform_hint,GL_ATI_separate_stencil,GL_NV_shader_atomic_int64,GL_NV_vertex_program2_option,GL_EXT_texture_buffer_object,GL_ARB_vertex_blend,GL_OVR_multiview,GL_NV_vertex_program2,GL_ARB_program_interface_query,GL_EXT_misc_attribute,GL_NV_multisample_coverage,GL_ARB_shading_language_packing,GL_EXT_texture_cube_map,GL_NV_viewport_array2,GL_ARB_texture_stencil8,GL_EXT_index_func,GL_OES_compressed_paletted_texture,GL_NV_depth_clamp,GL_NV_shader_buffer_load,GL_EXT_color_subtable,GL_SUNX_constant_data,GL_EXT_texture_compression_s3tc,GL_EXT_multi_draw_arrays,GL_ARB_shader_atomic_counters,GL_ARB_arrays_of_arrays,GL_NV_conditional_render,GL_EXT_texture_env_combine,GL_NV_fog_distance,GL_SGIX_async_histogram,GL_MESA_resize_buffers,GL_NV_light_max_exponent,GL_NV_texture_env_combine4,GL_ARB_texture_view,GL_ARB_texture_env_combine,GL_ARB_map_buffer_range,GL_EXT_convolution,GL_NV_compute_program5,GL_NV_vertex_attrib_integer_64bit,GL_EXT_paletted_texture,GL_ARB_texture_buffer_object,GL_ATI_pn_triangles,GL_SGIX_resample,GL_SGIX_flush_raster,GL_EXT_light_texture,GL_ARB_point_sprite,GL_SUN_convolution_border_modes,GL_NV_parameter_buffer_object2,GL_ARB_half_float_pixel,GL_NV_tessellation_program5,GL_REND_screen_coordinates,GL_EXT_shared_texture_palette,GL_EXT_packed_float,GL_OML_subsample,GL_SGIX_vertex_preclip,GL_SGIX_texture_scale_bias,GL_AMD_draw_buffers_blend,GL_APPLE_texture_range,GL_EXT_texture_array,GL_NV_texture_barrier,GL_ARB_texture_query_levels,GL_NV_texgen_emboss,GL_EXT_texture_swizzle,GL_ARB_texture_rg,GL_ARB_vertex_type_2_10_10_10_rev,GL_ARB_fragment_shader,GL_3DFX_tbuffer,GL_GREMEDY_frame_terminator,GL_ARB_blend_func_extended,GL_EXT_separate_shader_objects,GL_NV_texture_multisample,GL_ARB_shader_objects,GL_ARB_framebuffer_object,GL_ATI_envmap_bumpmap,GL_AMD_shader_explicit_vertex_parameter,GL_ARB_robust_buffer_access_behavior,GL_ARB_shader_stencil_export,GL_NV_texture_rectangle,GL_ARB_enhanced_layouts,GL_ARB_texture_rectangle,GL_SGI_texture_color_table,GL_NV_viewport_swizzle,GL_ATI_map_object_buffer,GL_ARB_robustness,GL_NV_pixel_data_range,GL_EXT_framebuffer_blit,GL_ARB_gpu_shader_fp64,GL_NV_command_list,GL_SGIX_depth_texture,GL_EXT_vertex_weighting,GL_GREMEDY_string_marker,GL_ARB_texture_compression_bptc,GL_EXT_subtexture,GL_EXT_pixel_transform_color_table,GL_EXT_texture_compression_rgtc,GL_ARB_shader_atomic_counter_ops,GL_SGIX_depth_pass_instrument,GL_EXT_gpu_program_parameters,GL_NV_evaluators,GL_SGIS_texture_filter4,GL_AMD_performance_monitor,GL_NV_geometry_shader4,GL_EXT_stencil_clear_tag,GL_NV_vertex_program1_1,GL_NV_present_video,GL_ARB_texture_compression_rgtc,GL_HP_convolution_border_modes,GL_EXT_shader_integer_mix,GL_SGIX_framezoom,GL_ARB_stencil_texturing,GL_ARB_shader_clock,GL_NV_shader_atomic_fp16_vector,GL_SGIX_fog_offset,GL_ARB_draw_elements_base_vertex,GL_INGR_interlace_read,GL_NV_transform_feedback,GL_NV_fragment_program,GL_AMD_stencil_operation_extended,GL_ARB_seamless_cubemap_per_texture,GL_ARB_instanced_arrays,GL_ARB_get_texture_sub_image,GL_NV_vertex_array_range2,GL_KHR_robustness,GL_AMD_sparse_texture,GL_ARB_clip_control,GL_NV_fragment_coverage_to_color,GL_NV_fence,GL_ARB_texture_buffer_range,GL_SUN_mesh_array,GL_ARB_vertex_attrib_binding,GL_ARB_framebuffer_no_attachments,GL_ARB_cl_event,GL_ARB_derivative_control,GL_NV_packed_depth_stencil,GL_OES_single_precision,GL_NV_primitive_restart,GL_SUN_global_alpha,GL_ARB_fragment_shader_interlock,GL_EXT_texture_object,GL_AMD_name_gen_delete,GL_NV_texture_compression_vtc,GL_NV_sample_mask_override_coverage,GL_NV_texture_shader3,GL_NV_texture_shader2,GL_EXT_texture,GL_ARB_buffer_storage,GL_AMD_shader_atomic_counter_ops,GL_APPLE_vertex_program_evaluators,GL_ARB_multi_bind,GL_ARB_explicit_uniform_location,GL_ARB_depth_buffer_float,GL_NV_path_rendering_shared_edge,GL_SGIX_shadow_ambient,GL_ARB_texture_cube_map,GL_AMD_vertex_shader_viewport_index,GL_SGIX_list_priority,GL_NV_vertex_buffer_unified_memory,GL_NV_uniform_buffer_unified_memory,GL_ARB_clear_texture,GL_ATI_texture_env_combine3,GL_ARB_map_buffer_alignment,GL_NV_blend_equation_advanced,GL_SGIS_sharpen_texture,GL_KHR_robust_buffer_access_behavior,GL_ARB_pipeline_statistics_query,GL_ARB_vertex_program,GL_ARB_texture_rgb10_a2ui,GL_OML_interlace,GL_ATI_pixel_format_float,GL_NV_clip_space_w_scaling,GL_ARB_vertex_buffer_object,GL_EXT_shadow_funcs,GL_ATI_text_fragment_shader,GL_NV_vertex_array_range,GL_SGIX_fragment_lighting,GL_NV_texture_expand_normal,GL_NV_framebuffer_multisample_coverage,GL_EXT_timer_query,GL_EXT_vertex_array_bgra,GL_NV_bindless_texture,GL_KHR_debug,GL_SGIS_texture_border_clamp,GL_ATI_vertex_attrib_array_object,GL_SGIX_clipmap,GL_EXT_geometry_shader4,GL_ARB_shader_texture_image_samples,GL_MESA_ycbcr_texture,GL_MESAX_texture_stack,GL_AMD_seamless_cubemap_per_texture,GL_EXT_bindable_uniform,GL_KHR_texture_compression_astc_hdr,GL_ARB_shader_ballot,GL_KHR_blend_equation_advanced,GL_ARB_fragment_program_shadow,GL_ATI_element_array,GL_AMD_texture_texture4,GL_SGIX_reference_plane,GL_EXT_stencil_two_side,GL_ARB_transform_feedback_overflow_query,GL_SGIX_texture_lod_bias,GL_KHR_no_error,GL_NV_explicit_multisample,GL_NV_stereo_view_rendering,GL_IBM_static_data,GL_EXT_clip_volume_hint,GL_EXT_texture_perturb_normal,GL_NV_fragment_program2,GL_NV_fragment_program4,GL_EXT_point_parameters,GL_PGI_misc_hints,GL_SGIX_subsample,GL_AMD_shader_stencil_export,GL_ARB_shader_texture_lod,GL_ARB_vertex_shader,GL_ARB_depth_clamp,GL_SGIS_texture_select,GL_NV_texture_shader,GL_ARB_tessellation_shader,GL_EXT_draw_buffers2,GL_ARB_vertex_attrib_64bit,GL_EXT_texture_filter_minmax,GL_WIN_specular_fog,GL_AMD_interleaved_elements,GL_ARB_fragment_program,GL_OML_resample,GL_APPLE_ycbcr_422,GL_SGIX_texture_add_env,GL_ARB_shadow_ambient,GL_ARB_texture_storage,GL_EXT_pixel_buffer_object,GL_ARB_copy_image,GL_SGIS_pixel_texture,GL_SGIS_generate_mipmap,GL_SGIX_instruments,GL_HP_texture_lighting,GL_ARB_shader_storage_buffer_object,GL_EXT_sparse_texture2,GL_EXT_blend_minmax,GL_MESA_pack_invert,GL_ARB_base_instance,GL_SGIX_convolution_accuracy,GL_PGI_vertex_hints,GL_AMD_transform_feedback4,GL_ARB_ES3_1_compatibility,GL_EXT_texture_integer,GL_ARB_texture_multisample,GL_AMD_gpu_shader_int64,GL_S3_s3tc,GL_ARB_query_buffer_object,GL_AMD_vertex_shader_tessellator,GL_ARB_invalidate_subdata,GL_EXT_index_material,GL_NV_blend_equation_advanced_coherent,GL_KHR_texture_compression_astc_sliced_3d,GL_INTEL_parallel_arrays,GL_ATI_draw_buffers,GL_EXT_cmyka,GL_SGIX_pixel_texture,GL_APPLE_specular_vector,GL_ARB_compatibility,GL_ARB_timer_query,GL_SGIX_interlace,GL_NV_parameter_buffer_object,GL_AMD_shader_trinary_minmax,GL_ARB_direct_state_access,GL_EXT_rescale_normal,GL_ARB_pixel_buffer_object,GL_ARB_uniform_buffer_object,GL_ARB_vertex_type_10f_11f_11f_rev,GL_ARB_texture_swizzle,GL_NV_transform_feedback2,GL_SGIX_async_pixel,GL_NV_fragment_program_option,GL_ARB_explicit_attrib_location,GL_EXT_blend_color,GL_NV_shader_thread_group,GL_EXT_stencil_wrap,GL_EXT_index_array_formats,GL_OVR_multiview2,GL_EXT_histogram,GL_EXT_polygon_offset,GL_SGIS_point_parameters,GL_SGIX_ycrcb,GL_EXT_direct_state_access,GL_ARB_cull_distance,GL_AMD_sample_positions,GL_NV_vertex_program,GL_NV_shader_thread_shuffle,GL_ARB_shader_precision,GL_EXT_vertex_shader,GL_EXT_blend_func_separate,GL_APPLE_fence,GL_OES_byte_coordinates,GL_ARB_transpose_matrix,GL_ARB_provoking_vertex,GL_EXT_fog_coord,GL_EXT_vertex_array,GL_ARB_half_float_vertex,GL_EXT_blend_equation_separate,GL_NV_framebuffer_mixed_samples,GL_NVX_conditional_render,GL_ARB_multi_draw_indirect,GL_EXT_raster_multisample,GL_NV_copy_image,GL_ARB_fragment_layer_viewport,GL_INTEL_framebuffer_CMAA,GL_ARB_transform_feedback2,GL_ARB_transform_feedback3,GL_SGIX_ycrcba,GL_EXT_debug_marker,GL_EXT_bgra,GL_ARB_sparse_texture_clamp,GL_EXT_pixel_transform,GL_ARB_conservative_depth,GL_ATI_fragment_shader,GL_ARB_vertex_array_object,GL_SUN_triangle_list,GL_EXT_texture_env_add,GL_EXT_packed_depth_stencil,GL_EXT_texture_mirror_clamp,GL_NV_multisample_filter_hint,GL_APPLE_float_pixels,GL_ARB_transform_feedback_instanced,GL_SGIX_async,GL_EXT_texture_compression_latc,GL_NV_robustness_video_memory_purge,GL_ARB_shading_language_100,GL_INTEL_performance_query,GL_ARB_texture_mirror_clamp_to_edge,GL_NV_gpu_shader5,GL_NV_bindless_multi_draw_indirect_count,GL_ARB_ES2_compatibility,GL_ARB_indirect_parameters,GL_EXT_window_rectangles,GL_NV_half_float,GL_ARB_ES3_2_compatibility,GL_ATI_texture_mirror_once,GL_IBM_rasterpos_clip,GL_SGIX_shadow,GL_EXT_polygon_offset_clamp,GL_NV_deep_texture3D,GL_ARB_shader_draw_parameters,GL_SGIX_calligraphic_fragment,GL_ARB_shader_bit_encoding,GL_EXT_compiled_vertex_array,GL_NV_depth_buffer_float,GL_NV_occlusion_query,GL_APPLE_flush_buffer_range,GL_ARB_imaging,GL_NV_shader_atomic_float,GL_ARB_draw_buffers_blend,GL_AMD_gcn_shader,GL_AMD_blend_minmax_factor,GL_EXT_texture_sRGB_decode,GL_ARB_shading_language_420pack,GL_ARB_shader_viewport_layer_array,GL_ATI_meminfo,GL_EXT_abgr,GL_AMD_pinned_memory,GL_EXT_texture_snorm,GL_SGIX_texture_coordinate_clamp,GL_ARB_clear_buffer_object,GL_ARB_multisample,GL_EXT_debug_label,GL_ARB_sample_shading,GL_NV_internalformat_sample_query,GL_INTEL_map_texture,GL_ARB_texture_env_crossbar,GL_EXT_422_pixels,GL_NV_conservative_raster_pre_snap_triangles,GL_ARB_compute_shader,GL_EXT_blend_logic_op,GL_IBM_cull_vertex,GL_IBM_vertex_array_lists,GL_ARB_color_buffer_float,GL_ARB_bindless_texture,GL_ARB_window_pos,GL_ARB_internalformat_query,GL_ARB_shadow,GL_ARB_texture_mirrored_repeat,GL_EXT_shader_image_load_store,GL_EXT_copy_texture,GL_NV_register_combiners2,GL_SGIX_ycrcb_subsample,GL_SGIX_ir_instrument1,GL_NV_draw_texture,GL_EXT_texture_shared_exponent,GL_EXT_draw_instanced,GL_NV_copy_depth_to_color,GL_ARB_viewport_array,GL_ARB_separate_shader_objects,GL_EXT_depth_bounds_test,GL_HP_image_transform,GL_ARB_texture_env_add,GL_NV_video_capture,GL_ARB_sampler_objects,GL_ARB_matrix_palette,GL_SGIS_texture_color_mask,GL_EXT_packed_pixels,GL_EXT_coordinate_frame,GL_ARB_texture_compression,GL_APPLE_aux_depth_stencil,GL_ARB_shader_subroutine,GL_EXT_framebuffer_sRGB,GL_ARB_texture_storage_multisample,GL_KHR_blend_equation_advanced_coherent,GL_EXT_vertex_attrib_64bit,GL_NV_shader_atomic_float64,GL_ARB_depth_texture,GL_NV_shader_buffer_store,GL_OES_query_matrix,GL_MESA_window_pos,GL_NV_fill_rectangle,GL_NV_shader_storage_buffer_object,GL_ARB_texture_query_lod,GL_ARB_copy_buffer,GL_ARB_shader_image_size,GL_NV_shader_atomic_counters,GL_APPLE_object_purgeable,GL_ARB_occlusion_query,GL_INGR_color_clamp,GL_SGI_color_table,GL_NV_gpu_program5_mem_extended,GL_ARB_texture_cube_map_array,GL_SGIX_scalebias_hint,GL_EXT_gpu_shader4,GL_NV_geometry_program4,GL_EXT_framebuffer_multisample_blit_scaled,GL_AMD_debug_output,GL_ARB_texture_border_clamp,GL_ARB_fragment_coord_conventions,GL_ARB_multitexture,GL_SGIX_polynomial_ffd,GL_EXT_provoking_vertex,GL_ARB_point_parameters,GL_ARB_shader_image_load_store,GL_ARB_conditional_render_inverted,GL_HP_occlusion_test,GL_ARB_ES3_compatibility,GL_ARB_texture_barrier,GL_ARB_texture_buffer_object_rgb32,GL_NV_bindless_multi_draw_indirect,GL_SGIX_texture_multi_buffer,GL_EXT_transform_feedback,GL_KHR_texture_compression_astc_ldr,GL_3DFX_multisample,GL_INTEL_fragment_shader_ordering,GL_ARB_texture_env_dot3,GL_NV_gpu_program4,GL_NV_gpu_program5,GL_NV_float_buffer,GL_SGIS_texture_edge_clamp,GL_ARB_framebuffer_sRGB,GL_SUN_slice_accum,GL_EXT_index_texture,GL_EXT_shader_image_load_formatted,GL_ARB_geometry_shader4,GL_EXT_separate_specular_color,GL_AMD_depth_clamp_separate,GL_NV_conservative_raster,GL_ARB_sparse_texture2,GL_SGIX_sprite,GL_ARB_get_program_binary,GL_AMD_occlusion_query_event,GL_SGIS_multisample,GL_EXT_framebuffer_object,GL_ARB_robustness_isolation,GL_ARB_vertex_array_bgra,GL_APPLE_vertex_array_range,GL_AMD_query_buffer_object,GL_NV_register_combiners,GL_ARB_draw_buffers,GL_EXT_texture_env_dot3,GL_ARB_debug_output,GL_SGI_color_matrix,GL_EXT_cull_vertex,GL_EXT_texture_sRGB,GL_APPLE_row_bytes,GL_NV_texgen_reflection,GL_IBM_multimode_draw_arrays,GL_APPLE_vertex_array_object,GL_3DFX_texture_compression_FXT1,GL_NV_fragment_shader_interlock,GL_AMD_conservative_depth,GL_ARB_texture_float,GL_ARB_compressed_texture_pixel_storage,GL_SGIS_detail_texture,GL_NV_geometry_shader_passthrough,GL_ARB_draw_instanced,GL_OES_read_format,GL_ATI_texture_float,GL_ARB_texture_gather,GL_AMD_vertex_shader_layer,GL_ARB_shading_language_include,GL_APPLE_client_storage,GL_WIN_phong_shading,GL_INGR_blend_func_separate,GL_NV_path_rendering,GL_NV_conservative_raster_dilate,GL_ATI_vertex_streams,GL_ARB_post_depth_coverage,GL_ARB_texture_non_power_of_two,GL_APPLE_rgb_422,GL_EXT_texture_lod_bias,GL_ARB_gpu_shader_int64,GL_ARB_seamless_cube_map,GL_ARB_shader_group_vote,GL_NV_vdpau_interop,GL_ARB_occlusion_query2,GL_ARB_internalformat_query2,GL_EXT_texture_filter_anisotropic,GL_SUN_vertex,GL_SGIX_igloo_interface,GL_SGIS_texture_lod,GL_NV_vertex_program3,GL_ARB_draw_indirect,GL_NV_vertex_program4,GL_AMD_transform_feedback3_lines_triangles,GL_SGIS_fog_function,GL_EXT_x11_sync_object,GL_ARB_sync,GL_NV_sample_locations,GL_ARB_compute_variable_group_size,GL_OES_fixed_point,GL_NV_blend_square,GL_EXT_framebuffer_multisample,GL_ARB_gpu_shader5,GL_SGIS_texture4D,GL_EXT_texture3D,GL_EXT_multisample,GL_EXT_secondary_color,GL_ARB_texture_filter_minmax,GL_ATI_vertex_array_object,GL_ARB_parallel_shader_compile,GL_NVX_gpu_memory_info,GL_ARB_sparse_texture,GL_SGIS_point_line_texgen,GL_ARB_sample_locations,GL_ARB_sparse_buffer,GL_EXT_draw_range_elements,GL_SGIX_blend_alpha_minmax,GL_KHR_context_flush_control"
    Online:
        Too many extensions
*/


#ifndef __glad_h_
#define __glad_h_

#ifdef __gl_h_
#error OpenGL header already included, remove this include, glad already provides it
#endif
#define __gl_h_

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN 1
#endif
#include <windows.h>
#endif

#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif

#ifdef __cplusplus
extern "C" {
#endif

struct gladGLversionStruct {
    int major;
    int minor;
};

typedef void* (* GLADloadproc)(const char *name);

#ifndef GLAPI
# if defined(GLAD_GLAPI_EXPORT)
#  if defined(WIN32) || defined(__CYGWIN__)
#   if defined(GLAD_GLAPI_EXPORT_BUILD)
#    if defined(__GNUC__)
#     define GLAPI __attribute__ ((dllexport)) extern
#    else
#     define GLAPI __declspec(dllexport) extern
#    endif
#   else
#    if defined(__GNUC__)
#     define GLAPI __attribute__ ((dllimport)) extern
#    else
#     define GLAPI __declspec(dllimport) extern
#    endif
#   endif
#  elif defined(__GNUC__) && defined(GLAD_GLAPI_EXPORT_BUILD)
#   define GLAPI __attribute__ ((visibility ("default"))) extern
#  else
#   define GLAPI extern
#  endif
# else
#  define GLAPI extern
# endif
#endif

GLAPI struct gladGLversionStruct GLVersion;
GLAPI int gladLoadGLLoader(GLADloadproc);


#define GLAD_DEBUG
typedef void (* GLADcallback)(const char *name, void *funcptr, int len_args, ...);

GLAPI void glad_set_pre_callback(GLADcallback cb);
GLAPI void glad_set_post_callback(GLADcallback cb);
#include <stddef.h>
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLclampx;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_DOUBLE 0x140A
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_REPEAT 0x2901
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_SUBTRACT 0x800A
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_MIN 0x8007
#define GL_MAX 0x8008
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_INDEX 0x8222
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F
#ifndef GL_VERSION_1_0
#define GL_VERSION_1_0 1
GLAPI int GLAD_GL_VERSION_1_0;
typedef void (APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);
GLAPI PFNGLCULLFACEPROC glad_glCullFace;
GLAPI PFNGLCULLFACEPROC glad_debug_glCullFace;
#define glCullFace glad_debug_glCullFace
typedef void (APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);
GLAPI PFNGLFRONTFACEPROC glad_glFrontFace;
GLAPI PFNGLFRONTFACEPROC glad_debug_glFrontFace;
#define glFrontFace glad_debug_glFrontFace
typedef void (APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);
GLAPI PFNGLHINTPROC glad_glHint;
GLAPI PFNGLHINTPROC glad_debug_glHint;
#define glHint glad_debug_glHint
typedef void (APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);
GLAPI PFNGLLINEWIDTHPROC glad_glLineWidth;
GLAPI PFNGLLINEWIDTHPROC glad_debug_glLineWidth;
#define glLineWidth glad_debug_glLineWidth
typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);
GLAPI PFNGLPOINTSIZEPROC glad_glPointSize;
GLAPI PFNGLPOINTSIZEPROC glad_debug_glPointSize;
#define glPointSize glad_debug_glPointSize
typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
GLAPI PFNGLPOLYGONMODEPROC glad_glPolygonMode;
GLAPI PFNGLPOLYGONMODEPROC glad_debug_glPolygonMode;
#define glPolygonMode glad_debug_glPolygonMode
typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORPROC glad_glScissor;
GLAPI PFNGLSCISSORPROC glad_debug_glScissor;
#define glScissor glad_debug_glScissor
typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
GLAPI PFNGLTEXPARAMETERFPROC glad_debug_glTexParameterf;
#define glTexParameterf glad_debug_glTexParameterf
typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
GLAPI PFNGLTEXPARAMETERFVPROC glad_debug_glTexParameterfv;
#define glTexParameterfv glad_debug_glTexParameterfv
typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
GLAPI PFNGLTEXPARAMETERIPROC glad_debug_glTexParameteri;
#define glTexParameteri glad_debug_glTexParameteri
typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
GLAPI PFNGLTEXPARAMETERIVPROC glad_debug_glTexParameteriv;
#define glTexParameteriv glad_debug_glTexParameteriv
typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
GLAPI PFNGLTEXIMAGE1DPROC glad_debug_glTexImage1D;
#define glTexImage1D glad_debug_glTexImage1D
typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
GLAPI PFNGLTEXIMAGE2DPROC glad_debug_glTexImage2D;
#define glTexImage2D glad_debug_glTexImage2D
typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);
GLAPI PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
GLAPI PFNGLDRAWBUFFERPROC glad_debug_glDrawBuffer;
#define glDrawBuffer glad_debug_glDrawBuffer
typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);
GLAPI PFNGLCLEARPROC glad_glClear;
GLAPI PFNGLCLEARPROC glad_debug_glClear;
#define glClear glad_debug_glClear
typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLCLEARCOLORPROC glad_glClearColor;
GLAPI PFNGLCLEARCOLORPROC glad_debug_glClearColor;
#define glClearColor glad_debug_glClearColor
typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);
GLAPI PFNGLCLEARSTENCILPROC glad_glClearStencil;
GLAPI PFNGLCLEARSTENCILPROC glad_debug_glClearStencil;
#define glClearStencil glad_debug_glClearStencil
typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);
GLAPI PFNGLCLEARDEPTHPROC glad_glClearDepth;
GLAPI PFNGLCLEARDEPTHPROC glad_debug_glClearDepth;
#define glClearDepth glad_debug_glClearDepth
typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);
GLAPI PFNGLSTENCILMASKPROC glad_glStencilMask;
GLAPI PFNGLSTENCILMASKPROC glad_debug_glStencilMask;
#define glStencilMask glad_debug_glStencilMask
typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI PFNGLCOLORMASKPROC glad_glColorMask;
GLAPI PFNGLCOLORMASKPROC glad_debug_glColorMask;
#define glColorMask glad_debug_glColorMask
typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);
GLAPI PFNGLDEPTHMASKPROC glad_glDepthMask;
GLAPI PFNGLDEPTHMASKPROC glad_debug_glDepthMask;
#define glDepthMask glad_debug_glDepthMask
typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum cap);
GLAPI PFNGLDISABLEPROC glad_glDisable;
GLAPI PFNGLDISABLEPROC glad_debug_glDisable;
#define glDisable glad_debug_glDisable
typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum cap);
GLAPI PFNGLENABLEPROC glad_glEnable;
GLAPI PFNGLENABLEPROC glad_debug_glEnable;
#define glEnable glad_debug_glEnable
typedef void (APIENTRYP PFNGLFINISHPROC)();
GLAPI PFNGLFINISHPROC glad_glFinish;
GLAPI PFNGLFINISHPROC glad_debug_glFinish;
#define glFinish glad_debug_glFinish
typedef void (APIENTRYP PFNGLFLUSHPROC)();
GLAPI PFNGLFLUSHPROC glad_glFlush;
GLAPI PFNGLFLUSHPROC glad_debug_glFlush;
#define glFlush glad_debug_glFlush
typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
GLAPI PFNGLBLENDFUNCPROC glad_glBlendFunc;
GLAPI PFNGLBLENDFUNCPROC glad_debug_glBlendFunc;
#define glBlendFunc glad_debug_glBlendFunc
typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);
GLAPI PFNGLLOGICOPPROC glad_glLogicOp;
GLAPI PFNGLLOGICOPPROC glad_debug_glLogicOp;
#define glLogicOp glad_debug_glLogicOp
typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCPROC glad_glStencilFunc;
GLAPI PFNGLSTENCILFUNCPROC glad_debug_glStencilFunc;
#define glStencilFunc glad_debug_glStencilFunc
typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI PFNGLSTENCILOPPROC glad_glStencilOp;
GLAPI PFNGLSTENCILOPPROC glad_debug_glStencilOp;
#define glStencilOp glad_debug_glStencilOp
typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);
GLAPI PFNGLDEPTHFUNCPROC glad_glDepthFunc;
GLAPI PFNGLDEPTHFUNCPROC glad_debug_glDepthFunc;
#define glDepthFunc glad_debug_glDepthFunc
typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPIXELSTOREFPROC glad_glPixelStoref;
GLAPI PFNGLPIXELSTOREFPROC glad_debug_glPixelStoref;
#define glPixelStoref glad_debug_glPixelStoref
typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPIXELSTOREIPROC glad_glPixelStorei;
GLAPI PFNGLPIXELSTOREIPROC glad_debug_glPixelStorei;
#define glPixelStorei glad_debug_glPixelStorei
typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);
GLAPI PFNGLREADBUFFERPROC glad_glReadBuffer;
GLAPI PFNGLREADBUFFERPROC glad_debug_glReadBuffer;
#define glReadBuffer glad_debug_glReadBuffer
typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
GLAPI PFNGLREADPIXELSPROC glad_glReadPixels;
GLAPI PFNGLREADPIXELSPROC glad_debug_glReadPixels;
#define glReadPixels glad_debug_glReadPixels
typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean* data);
GLAPI PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
GLAPI PFNGLGETBOOLEANVPROC glad_debug_glGetBooleanv;
#define glGetBooleanv glad_debug_glGetBooleanv
typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble* data);
GLAPI PFNGLGETDOUBLEVPROC glad_glGetDoublev;
GLAPI PFNGLGETDOUBLEVPROC glad_debug_glGetDoublev;
#define glGetDoublev glad_debug_glGetDoublev
typedef GLenum (APIENTRYP PFNGLGETERRORPROC)();
GLAPI PFNGLGETERRORPROC glad_glGetError;
GLAPI PFNGLGETERRORPROC glad_debug_glGetError;
#define glGetError glad_debug_glGetError
typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat* data);
GLAPI PFNGLGETFLOATVPROC glad_glGetFloatv;
GLAPI PFNGLGETFLOATVPROC glad_debug_glGetFloatv;
#define glGetFloatv glad_debug_glGetFloatv
typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint* data);
GLAPI PFNGLGETINTEGERVPROC glad_glGetIntegerv;
GLAPI PFNGLGETINTEGERVPROC glad_debug_glGetIntegerv;
#define glGetIntegerv glad_debug_glGetIntegerv
typedef const GLubyte* (APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);
GLAPI PFNGLGETSTRINGPROC glad_glGetString;
GLAPI PFNGLGETSTRINGPROC glad_debug_glGetString;
#define glGetString glad_debug_glGetString
typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
GLAPI PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
GLAPI PFNGLGETTEXIMAGEPROC glad_debug_glGetTexImage;
#define glGetTexImage glad_debug_glGetTexImage
typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
GLAPI PFNGLGETTEXPARAMETERFVPROC glad_debug_glGetTexParameterfv;
#define glGetTexParameterfv glad_debug_glGetTexParameterfv
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
GLAPI PFNGLGETTEXPARAMETERIVPROC glad_debug_glGetTexParameteriv;
#define glGetTexParameteriv glad_debug_glGetTexParameteriv
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC glad_debug_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv glad_debug_glGetTexLevelParameterfv
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC glad_debug_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv glad_debug_glGetTexLevelParameteriv
typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);
GLAPI PFNGLISENABLEDPROC glad_glIsEnabled;
GLAPI PFNGLISENABLEDPROC glad_debug_glIsEnabled;
#define glIsEnabled glad_debug_glIsEnabled
typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble near, GLdouble far);
GLAPI PFNGLDEPTHRANGEPROC glad_glDepthRange;
GLAPI PFNGLDEPTHRANGEPROC glad_debug_glDepthRange;
#define glDepthRange glad_debug_glDepthRange
typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLVIEWPORTPROC glad_glViewport;
GLAPI PFNGLVIEWPORTPROC glad_debug_glViewport;
#define glViewport glad_debug_glViewport
#endif
#ifndef GL_VERSION_1_1
#define GL_VERSION_1_1 1
GLAPI int GLAD_GL_VERSION_1_1;
typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
GLAPI PFNGLDRAWARRAYSPROC glad_glDrawArrays;
GLAPI PFNGLDRAWARRAYSPROC glad_debug_glDrawArrays;
#define glDrawArrays glad_debug_glDrawArrays
typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices);
GLAPI PFNGLDRAWELEMENTSPROC glad_glDrawElements;
GLAPI PFNGLDRAWELEMENTSPROC glad_debug_glDrawElements;
#define glDrawElements glad_debug_glDrawElements
typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
GLAPI PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
GLAPI PFNGLPOLYGONOFFSETPROC glad_debug_glPolygonOffset;
#define glPolygonOffset glad_debug_glPolygonOffset
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
GLAPI PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D;
#define glCopyTexImage1D glad_debug_glCopyTexImage1D
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
GLAPI PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D;
#define glCopyTexImage2D glad_debug_glCopyTexImage2D
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D;
#define glCopyTexSubImage1D glad_debug_glCopyTexSubImage1D
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D;
#define glCopyTexSubImage2D glad_debug_glCopyTexSubImage2D
typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
GLAPI PFNGLTEXSUBIMAGE1DPROC glad_debug_glTexSubImage1D;
#define glTexSubImage1D glad_debug_glTexSubImage1D
typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
GLAPI PFNGLTEXSUBIMAGE2DPROC glad_debug_glTexSubImage2D;
#define glTexSubImage2D glad_debug_glTexSubImage2D
typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
GLAPI PFNGLBINDTEXTUREPROC glad_glBindTexture;
GLAPI PFNGLBINDTEXTUREPROC glad_debug_glBindTexture;
#define glBindTexture glad_debug_glBindTexture
typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint* textures);
GLAPI PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
GLAPI PFNGLDELETETEXTURESPROC glad_debug_glDeleteTextures;
#define glDeleteTextures glad_debug_glDeleteTextures
typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint* textures);
GLAPI PFNGLGENTEXTURESPROC glad_glGenTextures;
GLAPI PFNGLGENTEXTURESPROC glad_debug_glGenTextures;
#define glGenTextures glad_debug_glGenTextures
typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);
GLAPI PFNGLISTEXTUREPROC glad_glIsTexture;
GLAPI PFNGLISTEXTUREPROC glad_debug_glIsTexture;
#define glIsTexture glad_debug_glIsTexture
#endif
#ifndef GL_VERSION_1_2
#define GL_VERSION_1_2 1
GLAPI int GLAD_GL_VERSION_1_2;
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
GLAPI PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
GLAPI PFNGLDRAWRANGEELEMENTSPROC glad_debug_glDrawRangeElements;
#define glDrawRangeElements glad_debug_glDrawRangeElements
typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
GLAPI PFNGLTEXIMAGE3DPROC glad_debug_glTexImage3D;
#define glTexImage3D glad_debug_glTexImage3D
typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
GLAPI PFNGLTEXSUBIMAGE3DPROC glad_debug_glTexSubImage3D;
#define glTexSubImage3D glad_debug_glTexSubImage3D
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D;
#define glCopyTexSubImage3D glad_debug_glCopyTexSubImage3D
#endif
#ifndef GL_VERSION_1_3
#define GL_VERSION_1_3 1
GLAPI int GLAD_GL_VERSION_1_3;
typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);
GLAPI PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
GLAPI PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture;
#define glActiveTexture glad_debug_glActiveTexture
typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
GLAPI PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
GLAPI PFNGLSAMPLECOVERAGEPROC glad_debug_glSampleCoverage;
#define glSampleCoverage glad_debug_glSampleCoverage
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D;
#define glCompressedTexImage3D glad_debug_glCompressedTexImage3D
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D;
#define glCompressedTexImage2D glad_debug_glCompressedTexImage2D
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D;
#define glCompressedTexImage1D glad_debug_glCompressedTexImage1D
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D glad_debug_glCompressedTexSubImage3D
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D glad_debug_glCompressedTexSubImage2D
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D glad_debug_glCompressedTexSubImage1D
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void* img);
GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_debug_glGetCompressedTexImage;
#define glGetCompressedTexImage glad_debug_glGetCompressedTexImage
#endif
#ifndef GL_VERSION_1_4
#define GL_VERSION_1_4 1
GLAPI int GLAD_GL_VERSION_1_4;
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
GLAPI PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate;
#define glBlendFuncSeparate glad_debug_glBlendFuncSeparate
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
GLAPI PFNGLMULTIDRAWARRAYSPROC glad_debug_glMultiDrawArrays;
#define glMultiDrawArrays glad_debug_glMultiDrawArrays
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei* count, GLenum type, const void** indices, GLsizei drawcount);
GLAPI PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
GLAPI PFNGLMULTIDRAWELEMENTSPROC glad_debug_glMultiDrawElements;
#define glMultiDrawElements glad_debug_glMultiDrawElements
typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
GLAPI PFNGLPOINTPARAMETERFPROC glad_debug_glPointParameterf;
#define glPointParameterf glad_debug_glPointParameterf
typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
GLAPI PFNGLPOINTPARAMETERFVPROC glad_debug_glPointParameterfv;
#define glPointParameterfv glad_debug_glPointParameterfv
typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
GLAPI PFNGLPOINTPARAMETERIPROC glad_debug_glPointParameteri;
#define glPointParameteri glad_debug_glPointParameteri
typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint* params);
GLAPI PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
GLAPI PFNGLPOINTPARAMETERIVPROC glad_debug_glPointParameteriv;
#define glPointParameteriv glad_debug_glPointParameteriv
typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLBLENDCOLORPROC glad_glBlendColor;
GLAPI PFNGLBLENDCOLORPROC glad_debug_glBlendColor;
#define glBlendColor glad_debug_glBlendColor
typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);
GLAPI PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
GLAPI PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation;
#define glBlendEquation glad_debug_glBlendEquation
#endif
#ifndef GL_VERSION_1_5
#define GL_VERSION_1_5 1
GLAPI int GLAD_GL_VERSION_1_5;
typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint* ids);
GLAPI PFNGLGENQUERIESPROC glad_glGenQueries;
GLAPI PFNGLGENQUERIESPROC glad_debug_glGenQueries;
#define glGenQueries glad_debug_glGenQueries
typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint* ids);
GLAPI PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
GLAPI PFNGLDELETEQUERIESPROC glad_debug_glDeleteQueries;
#define glDeleteQueries glad_debug_glDeleteQueries
typedef GLboolean (APIENTRYP PFNGLISQUERYPROC)(GLuint id);
GLAPI PFNGLISQUERYPROC glad_glIsQuery;
GLAPI PFNGLISQUERYPROC glad_debug_glIsQuery;
#define glIsQuery glad_debug_glIsQuery
typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
GLAPI PFNGLBEGINQUERYPROC glad_glBeginQuery;
GLAPI PFNGLBEGINQUERYPROC glad_debug_glBeginQuery;
#define glBeginQuery glad_debug_glBeginQuery
typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum target);
GLAPI PFNGLENDQUERYPROC glad_glEndQuery;
GLAPI PFNGLENDQUERYPROC glad_debug_glEndQuery;
#define glEndQuery glad_debug_glEndQuery
typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETQUERYIVPROC glad_glGetQueryiv;
GLAPI PFNGLGETQUERYIVPROC glad_debug_glGetQueryiv;
#define glGetQueryiv glad_debug_glGetQueryiv
typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint* params);
GLAPI PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
GLAPI PFNGLGETQUERYOBJECTIVPROC glad_debug_glGetQueryObjectiv;
#define glGetQueryObjectiv glad_debug_glGetQueryObjectiv
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint* params);
GLAPI PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
GLAPI PFNGLGETQUERYOBJECTUIVPROC glad_debug_glGetQueryObjectuiv;
#define glGetQueryObjectuiv glad_debug_glGetQueryObjectuiv
typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
GLAPI PFNGLBINDBUFFERPROC glad_glBindBuffer;
GLAPI PFNGLBINDBUFFERPROC glad_debug_glBindBuffer;
#define glBindBuffer glad_debug_glBindBuffer
typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint* buffers);
GLAPI PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
GLAPI PFNGLDELETEBUFFERSPROC glad_debug_glDeleteBuffers;
#define glDeleteBuffers glad_debug_glDeleteBuffers
typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei n, GLuint* buffers);
GLAPI PFNGLGENBUFFERSPROC glad_glGenBuffers;
GLAPI PFNGLGENBUFFERSPROC glad_debug_glGenBuffers;
#define glGenBuffers glad_debug_glGenBuffers
typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC)(GLuint buffer);
GLAPI PFNGLISBUFFERPROC glad_glIsBuffer;
GLAPI PFNGLISBUFFERPROC glad_debug_glIsBuffer;
#define glIsBuffer glad_debug_glIsBuffer
typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
GLAPI PFNGLBUFFERDATAPROC glad_glBufferData;
GLAPI PFNGLBUFFERDATAPROC glad_debug_glBufferData;
#define glBufferData glad_debug_glBufferData
typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
GLAPI PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
GLAPI PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData;
#define glBufferSubData glad_debug_glBufferSubData
typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
GLAPI PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
GLAPI PFNGLGETBUFFERSUBDATAPROC glad_debug_glGetBufferSubData;
#define glGetBufferSubData glad_debug_glGetBufferSubData
typedef void* (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
GLAPI PFNGLMAPBUFFERPROC glad_glMapBuffer;
GLAPI PFNGLMAPBUFFERPROC glad_debug_glMapBuffer;
#define glMapBuffer glad_debug_glMapBuffer
typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum target);
GLAPI PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
GLAPI PFNGLUNMAPBUFFERPROC glad_debug_glUnmapBuffer;
#define glUnmapBuffer glad_debug_glUnmapBuffer
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
GLAPI PFNGLGETBUFFERPARAMETERIVPROC glad_debug_glGetBufferParameteriv;
#define glGetBufferParameteriv glad_debug_glGetBufferParameteriv
typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void** params);
GLAPI PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
GLAPI PFNGLGETBUFFERPOINTERVPROC glad_debug_glGetBufferPointerv;
#define glGetBufferPointerv glad_debug_glGetBufferPointerv
#endif
#ifndef GL_VERSION_2_0
#define GL_VERSION_2_0 1
GLAPI int GLAD_GL_VERSION_2_0;
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
GLAPI PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate;
#define glBlendEquationSeparate glad_debug_glBlendEquationSeparate
typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum* bufs);
GLAPI PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
GLAPI PFNGLDRAWBUFFERSPROC glad_debug_glDrawBuffers;
#define glDrawBuffers glad_debug_glDrawBuffers
typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GLAPI PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
GLAPI PFNGLSTENCILOPSEPARATEPROC glad_debug_glStencilOpSeparate;
#define glStencilOpSeparate glad_debug_glStencilOpSeparate
typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
GLAPI PFNGLSTENCILFUNCSEPARATEPROC glad_debug_glStencilFuncSeparate;
#define glStencilFuncSeparate glad_debug_glStencilFuncSeparate
typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
GLAPI PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
GLAPI PFNGLSTENCILMASKSEPARATEPROC glad_debug_glStencilMaskSeparate;
#define glStencilMaskSeparate glad_debug_glStencilMaskSeparate
typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLATTACHSHADERPROC glad_glAttachShader;
GLAPI PFNGLATTACHSHADERPROC glad_debug_glAttachShader;
#define glAttachShader glad_debug_glAttachShader
typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar* name);
GLAPI PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
GLAPI PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation;
#define glBindAttribLocation glad_debug_glBindAttribLocation
typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);
GLAPI PFNGLCOMPILESHADERPROC glad_glCompileShader;
GLAPI PFNGLCOMPILESHADERPROC glad_debug_glCompileShader;
#define glCompileShader glad_debug_glCompileShader
typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC)();
GLAPI PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
GLAPI PFNGLCREATEPROGRAMPROC glad_debug_glCreateProgram;
#define glCreateProgram glad_debug_glCreateProgram
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);
GLAPI PFNGLCREATESHADERPROC glad_glCreateShader;
GLAPI PFNGLCREATESHADERPROC glad_debug_glCreateShader;
#define glCreateShader glad_debug_glCreateShader
typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);
GLAPI PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
GLAPI PFNGLDELETEPROGRAMPROC glad_debug_glDeleteProgram;
#define glDeleteProgram glad_debug_glDeleteProgram
typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);
GLAPI PFNGLDELETESHADERPROC glad_glDeleteShader;
GLAPI PFNGLDELETESHADERPROC glad_debug_glDeleteShader;
#define glDeleteShader glad_debug_glDeleteShader
typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
GLAPI PFNGLDETACHSHADERPROC glad_glDetachShader;
GLAPI PFNGLDETACHSHADERPROC glad_debug_glDetachShader;
#define glDetachShader glad_debug_glDetachShader
typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_debug_glDisableVertexAttribArray;
#define glDisableVertexAttribArray glad_debug_glDisableVertexAttribArray
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC glad_debug_glEnableVertexAttribArray;
#define glEnableVertexAttribArray glad_debug_glEnableVertexAttribArray
typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
GLAPI PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
GLAPI PFNGLGETACTIVEATTRIBPROC glad_debug_glGetActiveAttrib;
#define glGetActiveAttrib glad_debug_glGetActiveAttrib
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
GLAPI PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
GLAPI PFNGLGETACTIVEUNIFORMPROC glad_debug_glGetActiveUniform;
#define glGetActiveUniform glad_debug_glGetActiveUniform
typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
GLAPI PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
GLAPI PFNGLGETATTACHEDSHADERSPROC glad_debug_glGetAttachedShaders;
#define glGetAttachedShaders glad_debug_glGetAttachedShaders
typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
GLAPI PFNGLGETATTRIBLOCATIONPROC glad_debug_glGetAttribLocation;
#define glGetAttribLocation glad_debug_glGetAttribLocation
typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint* params);
GLAPI PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
GLAPI PFNGLGETPROGRAMIVPROC glad_debug_glGetProgramiv;
#define glGetProgramiv glad_debug_glGetProgramiv
typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLAPI PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
GLAPI PFNGLGETPROGRAMINFOLOGPROC glad_debug_glGetProgramInfoLog;
#define glGetProgramInfoLog glad_debug_glGetProgramInfoLog
typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint* params);
GLAPI PFNGLGETSHADERIVPROC glad_glGetShaderiv;
GLAPI PFNGLGETSHADERIVPROC glad_debug_glGetShaderiv;
#define glGetShaderiv glad_debug_glGetShaderiv
typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLAPI PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
GLAPI PFNGLGETSHADERINFOLOGPROC glad_debug_glGetShaderInfoLog;
#define glGetShaderInfoLog glad_debug_glGetShaderInfoLog
typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
GLAPI PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
GLAPI PFNGLGETSHADERSOURCEPROC glad_debug_glGetShaderSource;
#define glGetShaderSource glad_debug_glGetShaderSource
typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
GLAPI PFNGLGETUNIFORMLOCATIONPROC glad_debug_glGetUniformLocation;
#define glGetUniformLocation glad_debug_glGetUniformLocation
typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat* params);
GLAPI PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
GLAPI PFNGLGETUNIFORMFVPROC glad_debug_glGetUniformfv;
#define glGetUniformfv glad_debug_glGetUniformfv
typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint* params);
GLAPI PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
GLAPI PFNGLGETUNIFORMIVPROC glad_debug_glGetUniformiv;
#define glGetUniformiv glad_debug_glGetUniformiv
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble* params);
GLAPI PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
GLAPI PFNGLGETVERTEXATTRIBDVPROC glad_debug_glGetVertexAttribdv;
#define glGetVertexAttribdv glad_debug_glGetVertexAttribdv
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat* params);
GLAPI PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
GLAPI PFNGLGETVERTEXATTRIBFVPROC glad_debug_glGetVertexAttribfv;
#define glGetVertexAttribfv glad_debug_glGetVertexAttribfv
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
GLAPI PFNGLGETVERTEXATTRIBIVPROC glad_debug_glGetVertexAttribiv;
#define glGetVertexAttribiv glad_debug_glGetVertexAttribiv
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void** pointer);
GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC glad_debug_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv glad_debug_glGetVertexAttribPointerv
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);
GLAPI PFNGLISPROGRAMPROC glad_glIsProgram;
GLAPI PFNGLISPROGRAMPROC glad_debug_glIsProgram;
#define glIsProgram glad_debug_glIsProgram
typedef GLboolean (APIENTRYP PFNGLISSHADERPROC)(GLuint shader);
GLAPI PFNGLISSHADERPROC glad_glIsShader;
GLAPI PFNGLISSHADERPROC glad_debug_glIsShader;
#define glIsShader glad_debug_glIsShader
typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);
GLAPI PFNGLLINKPROGRAMPROC glad_glLinkProgram;
GLAPI PFNGLLINKPROGRAMPROC glad_debug_glLinkProgram;
#define glLinkProgram glad_debug_glLinkProgram
typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar** string, const GLint* length);
GLAPI PFNGLSHADERSOURCEPROC glad_glShaderSource;
GLAPI PFNGLSHADERSOURCEPROC glad_debug_glShaderSource;
#define glShaderSource glad_debug_glShaderSource
typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);
GLAPI PFNGLUSEPROGRAMPROC glad_glUseProgram;
GLAPI PFNGLUSEPROGRAMPROC glad_debug_glUseProgram;
#define glUseProgram glad_debug_glUseProgram
typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
GLAPI PFNGLUNIFORM1FPROC glad_glUniform1f;
GLAPI PFNGLUNIFORM1FPROC glad_debug_glUniform1f;
#define glUniform1f glad_debug_glUniform1f
typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLUNIFORM2FPROC glad_glUniform2f;
GLAPI PFNGLUNIFORM2FPROC glad_debug_glUniform2f;
#define glUniform2f glad_debug_glUniform2f
typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLUNIFORM3FPROC glad_glUniform3f;
GLAPI PFNGLUNIFORM3FPROC glad_debug_glUniform3f;
#define glUniform3f glad_debug_glUniform3f
typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLUNIFORM4FPROC glad_glUniform4f;
GLAPI PFNGLUNIFORM4FPROC glad_debug_glUniform4f;
#define glUniform4f glad_debug_glUniform4f
typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
GLAPI PFNGLUNIFORM1IPROC glad_glUniform1i;
GLAPI PFNGLUNIFORM1IPROC glad_debug_glUniform1i;
#define glUniform1i glad_debug_glUniform1i
typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
GLAPI PFNGLUNIFORM2IPROC glad_glUniform2i;
GLAPI PFNGLUNIFORM2IPROC glad_debug_glUniform2i;
#define glUniform2i glad_debug_glUniform2i
typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLUNIFORM3IPROC glad_glUniform3i;
GLAPI PFNGLUNIFORM3IPROC glad_debug_glUniform3i;
#define glUniform3i glad_debug_glUniform3i
typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLUNIFORM4IPROC glad_glUniform4i;
GLAPI PFNGLUNIFORM4IPROC glad_debug_glUniform4i;
#define glUniform4i glad_debug_glUniform4i
typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM1FVPROC glad_glUniform1fv;
GLAPI PFNGLUNIFORM1FVPROC glad_debug_glUniform1fv;
#define glUniform1fv glad_debug_glUniform1fv
typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM2FVPROC glad_glUniform2fv;
GLAPI PFNGLUNIFORM2FVPROC glad_debug_glUniform2fv;
#define glUniform2fv glad_debug_glUniform2fv
typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM3FVPROC glad_glUniform3fv;
GLAPI PFNGLUNIFORM3FVPROC glad_debug_glUniform3fv;
#define glUniform3fv glad_debug_glUniform3fv
typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM4FVPROC glad_glUniform4fv;
GLAPI PFNGLUNIFORM4FVPROC glad_debug_glUniform4fv;
#define glUniform4fv glad_debug_glUniform4fv
typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM1IVPROC glad_glUniform1iv;
GLAPI PFNGLUNIFORM1IVPROC glad_debug_glUniform1iv;
#define glUniform1iv glad_debug_glUniform1iv
typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM2IVPROC glad_glUniform2iv;
GLAPI PFNGLUNIFORM2IVPROC glad_debug_glUniform2iv;
#define glUniform2iv glad_debug_glUniform2iv
typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM3IVPROC glad_glUniform3iv;
GLAPI PFNGLUNIFORM3IVPROC glad_debug_glUniform3iv;
#define glUniform3iv glad_debug_glUniform3iv
typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM4IVPROC glad_glUniform4iv;
GLAPI PFNGLUNIFORM4IVPROC glad_debug_glUniform4iv;
#define glUniform4iv glad_debug_glUniform4iv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
GLAPI PFNGLUNIFORMMATRIX2FVPROC glad_debug_glUniformMatrix2fv;
#define glUniformMatrix2fv glad_debug_glUniformMatrix2fv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
GLAPI PFNGLUNIFORMMATRIX3FVPROC glad_debug_glUniformMatrix3fv;
#define glUniformMatrix3fv glad_debug_glUniformMatrix3fv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
GLAPI PFNGLUNIFORMMATRIX4FVPROC glad_debug_glUniformMatrix4fv;
#define glUniformMatrix4fv glad_debug_glUniformMatrix4fv
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);
GLAPI PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
GLAPI PFNGLVALIDATEPROGRAMPROC glad_debug_glValidateProgram;
#define glValidateProgram glad_debug_glValidateProgram
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
GLAPI PFNGLVERTEXATTRIB1DPROC glad_debug_glVertexAttrib1d;
#define glVertexAttrib1d glad_debug_glVertexAttrib1d
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
GLAPI PFNGLVERTEXATTRIB1DVPROC glad_debug_glVertexAttrib1dv;
#define glVertexAttrib1dv glad_debug_glVertexAttrib1dv
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
GLAPI PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
GLAPI PFNGLVERTEXATTRIB1FPROC glad_debug_glVertexAttrib1f;
#define glVertexAttrib1f glad_debug_glVertexAttrib1f
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
GLAPI PFNGLVERTEXATTRIB1FVPROC glad_debug_glVertexAttrib1fv;
#define glVertexAttrib1fv glad_debug_glVertexAttrib1fv
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
GLAPI PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
GLAPI PFNGLVERTEXATTRIB1SPROC glad_debug_glVertexAttrib1s;
#define glVertexAttrib1s glad_debug_glVertexAttrib1s
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
GLAPI PFNGLVERTEXATTRIB1SVPROC glad_debug_glVertexAttrib1sv;
#define glVertexAttrib1sv glad_debug_glVertexAttrib1sv
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
GLAPI PFNGLVERTEXATTRIB2DPROC glad_debug_glVertexAttrib2d;
#define glVertexAttrib2d glad_debug_glVertexAttrib2d
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
GLAPI PFNGLVERTEXATTRIB2DVPROC glad_debug_glVertexAttrib2dv;
#define glVertexAttrib2dv glad_debug_glVertexAttrib2dv
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
GLAPI PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
GLAPI PFNGLVERTEXATTRIB2FPROC glad_debug_glVertexAttrib2f;
#define glVertexAttrib2f glad_debug_glVertexAttrib2f
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
GLAPI PFNGLVERTEXATTRIB2FVPROC glad_debug_glVertexAttrib2fv;
#define glVertexAttrib2fv glad_debug_glVertexAttrib2fv
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
GLAPI PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
GLAPI PFNGLVERTEXATTRIB2SPROC glad_debug_glVertexAttrib2s;
#define glVertexAttrib2s glad_debug_glVertexAttrib2s
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
GLAPI PFNGLVERTEXATTRIB2SVPROC glad_debug_glVertexAttrib2sv;
#define glVertexAttrib2sv glad_debug_glVertexAttrib2sv
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
GLAPI PFNGLVERTEXATTRIB3DPROC glad_debug_glVertexAttrib3d;
#define glVertexAttrib3d glad_debug_glVertexAttrib3d
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
GLAPI PFNGLVERTEXATTRIB3DVPROC glad_debug_glVertexAttrib3dv;
#define glVertexAttrib3dv glad_debug_glVertexAttrib3dv
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
GLAPI PFNGLVERTEXATTRIB3FPROC glad_debug_glVertexAttrib3f;
#define glVertexAttrib3f glad_debug_glVertexAttrib3f
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
GLAPI PFNGLVERTEXATTRIB3FVPROC glad_debug_glVertexAttrib3fv;
#define glVertexAttrib3fv glad_debug_glVertexAttrib3fv
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
GLAPI PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
GLAPI PFNGLVERTEXATTRIB3SPROC glad_debug_glVertexAttrib3s;
#define glVertexAttrib3s glad_debug_glVertexAttrib3s
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
GLAPI PFNGLVERTEXATTRIB3SVPROC glad_debug_glVertexAttrib3sv;
#define glVertexAttrib3sv glad_debug_glVertexAttrib3sv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte* v);
GLAPI PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
GLAPI PFNGLVERTEXATTRIB4NBVPROC glad_debug_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv glad_debug_glVertexAttrib4Nbv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
GLAPI PFNGLVERTEXATTRIB4NIVPROC glad_debug_glVertexAttrib4Niv;
#define glVertexAttrib4Niv glad_debug_glVertexAttrib4Niv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
GLAPI PFNGLVERTEXATTRIB4NSVPROC glad_debug_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv glad_debug_glVertexAttrib4Nsv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLAPI PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
GLAPI PFNGLVERTEXATTRIB4NUBPROC glad_debug_glVertexAttrib4Nub;
#define glVertexAttrib4Nub glad_debug_glVertexAttrib4Nub
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
GLAPI PFNGLVERTEXATTRIB4NUBVPROC glad_debug_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv glad_debug_glVertexAttrib4Nubv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
GLAPI PFNGLVERTEXATTRIB4NUIVPROC glad_debug_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv glad_debug_glVertexAttrib4Nuiv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort* v);
GLAPI PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
GLAPI PFNGLVERTEXATTRIB4NUSVPROC glad_debug_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv glad_debug_glVertexAttrib4Nusv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte* v);
GLAPI PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
GLAPI PFNGLVERTEXATTRIB4BVPROC glad_debug_glVertexAttrib4bv;
#define glVertexAttrib4bv glad_debug_glVertexAttrib4bv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
GLAPI PFNGLVERTEXATTRIB4DPROC glad_debug_glVertexAttrib4d;
#define glVertexAttrib4d glad_debug_glVertexAttrib4d
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
GLAPI PFNGLVERTEXATTRIB4DVPROC glad_debug_glVertexAttrib4dv;
#define glVertexAttrib4dv glad_debug_glVertexAttrib4dv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
GLAPI PFNGLVERTEXATTRIB4FPROC glad_debug_glVertexAttrib4f;
#define glVertexAttrib4f glad_debug_glVertexAttrib4f
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
GLAPI PFNGLVERTEXATTRIB4FVPROC glad_debug_glVertexAttrib4fv;
#define glVertexAttrib4fv glad_debug_glVertexAttrib4fv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
GLAPI PFNGLVERTEXATTRIB4IVPROC glad_debug_glVertexAttrib4iv;
#define glVertexAttrib4iv glad_debug_glVertexAttrib4iv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
GLAPI PFNGLVERTEXATTRIB4SPROC glad_debug_glVertexAttrib4s;
#define glVertexAttrib4s glad_debug_glVertexAttrib4s
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
GLAPI PFNGLVERTEXATTRIB4SVPROC glad_debug_glVertexAttrib4sv;
#define glVertexAttrib4sv glad_debug_glVertexAttrib4sv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
GLAPI PFNGLVERTEXATTRIB4UBVPROC glad_debug_glVertexAttrib4ubv;
#define glVertexAttrib4ubv glad_debug_glVertexAttrib4ubv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
GLAPI PFNGLVERTEXATTRIB4UIVPROC glad_debug_glVertexAttrib4uiv;
#define glVertexAttrib4uiv glad_debug_glVertexAttrib4uiv
typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort* v);
GLAPI PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
GLAPI PFNGLVERTEXATTRIB4USVPROC glad_debug_glVertexAttrib4usv;
#define glVertexAttrib4usv glad_debug_glVertexAttrib4usv
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
GLAPI PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer;
#define glVertexAttribPointer glad_debug_glVertexAttribPointer
#endif
#ifndef GL_VERSION_2_1
#define GL_VERSION_2_1 1
GLAPI int GLAD_GL_VERSION_2_1;
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
GLAPI PFNGLUNIFORMMATRIX2X3FVPROC glad_debug_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv glad_debug_glUniformMatrix2x3fv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
GLAPI PFNGLUNIFORMMATRIX3X2FVPROC glad_debug_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv glad_debug_glUniformMatrix3x2fv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
GLAPI PFNGLUNIFORMMATRIX2X4FVPROC glad_debug_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv glad_debug_glUniformMatrix2x4fv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
GLAPI PFNGLUNIFORMMATRIX4X2FVPROC glad_debug_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv glad_debug_glUniformMatrix4x2fv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
GLAPI PFNGLUNIFORMMATRIX3X4FVPROC glad_debug_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv glad_debug_glUniformMatrix3x4fv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
GLAPI PFNGLUNIFORMMATRIX4X3FVPROC glad_debug_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv glad_debug_glUniformMatrix4x3fv
#endif
#ifndef GL_VERSION_3_0
#define GL_VERSION_3_0 1
GLAPI int GLAD_GL_VERSION_3_0;
typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLAPI PFNGLCOLORMASKIPROC glad_glColorMaski;
GLAPI PFNGLCOLORMASKIPROC glad_debug_glColorMaski;
#define glColorMaski glad_debug_glColorMaski
typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean* data);
GLAPI PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
GLAPI PFNGLGETBOOLEANI_VPROC glad_debug_glGetBooleani_v;
#define glGetBooleani_v glad_debug_glGetBooleani_v
typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint* data);
GLAPI PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
GLAPI PFNGLGETINTEGERI_VPROC glad_debug_glGetIntegeri_v;
#define glGetIntegeri_v glad_debug_glGetIntegeri_v
typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);
GLAPI PFNGLENABLEIPROC glad_glEnablei;
GLAPI PFNGLENABLEIPROC glad_debug_glEnablei;
#define glEnablei glad_debug_glEnablei
typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);
GLAPI PFNGLDISABLEIPROC glad_glDisablei;
GLAPI PFNGLDISABLEIPROC glad_debug_glDisablei;
#define glDisablei glad_debug_glDisablei
typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
GLAPI PFNGLISENABLEDIPROC glad_glIsEnabledi;
GLAPI PFNGLISENABLEDIPROC glad_debug_glIsEnabledi;
#define glIsEnabledi glad_debug_glIsEnabledi
typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback;
#define glBeginTransformFeedback glad_debug_glBeginTransformFeedback
typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)();
GLAPI PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
GLAPI PFNGLENDTRANSFORMFEEDBACKPROC glad_debug_glEndTransformFeedback;
#define glEndTransformFeedback glad_debug_glEndTransformFeedback
typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
GLAPI PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange;
#define glBindBufferRange glad_debug_glBindBufferRange
typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
GLAPI PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
GLAPI PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase;
#define glBindBufferBase glad_debug_glBindBufferBase
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar** varyings, GLenum bufferMode);
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_debug_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings glad_debug_glTransformFeedbackVaryings
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_debug_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying glad_debug_glGetTransformFeedbackVarying
typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
GLAPI PFNGLCLAMPCOLORPROC glad_glClampColor;
GLAPI PFNGLCLAMPCOLORPROC glad_debug_glClampColor;
#define glClampColor glad_debug_glClampColor
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
GLAPI PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
GLAPI PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender;
#define glBeginConditionalRender glad_debug_glBeginConditionalRender
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)();
GLAPI PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
GLAPI PFNGLENDCONDITIONALRENDERPROC glad_debug_glEndConditionalRender;
#define glEndConditionalRender glad_debug_glEndConditionalRender
typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
GLAPI PFNGLVERTEXATTRIBIPOINTERPROC glad_debug_glVertexAttribIPointer;
#define glVertexAttribIPointer glad_debug_glVertexAttribIPointer
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
GLAPI PFNGLGETVERTEXATTRIBIIVPROC glad_debug_glGetVertexAttribIiv;
#define glGetVertexAttribIiv glad_debug_glGetVertexAttribIiv
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint* params);
GLAPI PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
GLAPI PFNGLGETVERTEXATTRIBIUIVPROC glad_debug_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv glad_debug_glGetVertexAttribIuiv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
GLAPI PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
GLAPI PFNGLVERTEXATTRIBI1IPROC glad_debug_glVertexAttribI1i;
#define glVertexAttribI1i glad_debug_glVertexAttribI1i
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
GLAPI PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
GLAPI PFNGLVERTEXATTRIBI2IPROC glad_debug_glVertexAttribI2i;
#define glVertexAttribI2i glad_debug_glVertexAttribI2i
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
GLAPI PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
GLAPI PFNGLVERTEXATTRIBI3IPROC glad_debug_glVertexAttribI3i;
#define glVertexAttribI3i glad_debug_glVertexAttribI3i
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
GLAPI PFNGLVERTEXATTRIBI4IPROC glad_debug_glVertexAttribI4i;
#define glVertexAttribI4i glad_debug_glVertexAttribI4i
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
GLAPI PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
GLAPI PFNGLVERTEXATTRIBI1UIPROC glad_debug_glVertexAttribI1ui;
#define glVertexAttribI1ui glad_debug_glVertexAttribI1ui
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
GLAPI PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
GLAPI PFNGLVERTEXATTRIBI2UIPROC glad_debug_glVertexAttribI2ui;
#define glVertexAttribI2ui glad_debug_glVertexAttribI2ui
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
GLAPI PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
GLAPI PFNGLVERTEXATTRIBI3UIPROC glad_debug_glVertexAttribI3ui;
#define glVertexAttribI3ui glad_debug_glVertexAttribI3ui
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
GLAPI PFNGLVERTEXATTRIBI4UIPROC glad_debug_glVertexAttribI4ui;
#define glVertexAttribI4ui glad_debug_glVertexAttribI4ui
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
GLAPI PFNGLVERTEXATTRIBI1IVPROC glad_debug_glVertexAttribI1iv;
#define glVertexAttribI1iv glad_debug_glVertexAttribI1iv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
GLAPI PFNGLVERTEXATTRIBI2IVPROC glad_debug_glVertexAttribI2iv;
#define glVertexAttribI2iv glad_debug_glVertexAttribI2iv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
GLAPI PFNGLVERTEXATTRIBI3IVPROC glad_debug_glVertexAttribI3iv;
#define glVertexAttribI3iv glad_debug_glVertexAttribI3iv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
GLAPI PFNGLVERTEXATTRIBI4IVPROC glad_debug_glVertexAttribI4iv;
#define glVertexAttribI4iv glad_debug_glVertexAttribI4iv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
GLAPI PFNGLVERTEXATTRIBI1UIVPROC glad_debug_glVertexAttribI1uiv;
#define glVertexAttribI1uiv glad_debug_glVertexAttribI1uiv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
GLAPI PFNGLVERTEXATTRIBI2UIVPROC glad_debug_glVertexAttribI2uiv;
#define glVertexAttribI2uiv glad_debug_glVertexAttribI2uiv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
GLAPI PFNGLVERTEXATTRIBI3UIVPROC glad_debug_glVertexAttribI3uiv;
#define glVertexAttribI3uiv glad_debug_glVertexAttribI3uiv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
GLAPI PFNGLVERTEXATTRIBI4UIVPROC glad_debug_glVertexAttribI4uiv;
#define glVertexAttribI4uiv glad_debug_glVertexAttribI4uiv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte* v);
GLAPI PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
GLAPI PFNGLVERTEXATTRIBI4BVPROC glad_debug_glVertexAttribI4bv;
#define glVertexAttribI4bv glad_debug_glVertexAttribI4bv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
GLAPI PFNGLVERTEXATTRIBI4SVPROC glad_debug_glVertexAttribI4sv;
#define glVertexAttribI4sv glad_debug_glVertexAttribI4sv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
GLAPI PFNGLVERTEXATTRIBI4UBVPROC glad_debug_glVertexAttribI4ubv;
#define glVertexAttribI4ubv glad_debug_glVertexAttribI4ubv
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort* v);
GLAPI PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
GLAPI PFNGLVERTEXATTRIBI4USVPROC glad_debug_glVertexAttribI4usv;
#define glVertexAttribI4usv glad_debug_glVertexAttribI4usv
typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint* params);
GLAPI PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
GLAPI PFNGLGETUNIFORMUIVPROC glad_debug_glGetUniformuiv;
#define glGetUniformuiv glad_debug_glGetUniformuiv
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar* name);
GLAPI PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
GLAPI PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation;
#define glBindFragDataLocation glad_debug_glBindFragDataLocation
typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
GLAPI PFNGLGETFRAGDATALOCATIONPROC glad_debug_glGetFragDataLocation;
#define glGetFragDataLocation glad_debug_glGetFragDataLocation
typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
GLAPI PFNGLUNIFORM1UIPROC glad_glUniform1ui;
GLAPI PFNGLUNIFORM1UIPROC glad_debug_glUniform1ui;
#define glUniform1ui glad_debug_glUniform1ui
typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLUNIFORM2UIPROC glad_glUniform2ui;
GLAPI PFNGLUNIFORM2UIPROC glad_debug_glUniform2ui;
#define glUniform2ui glad_debug_glUniform2ui
typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLUNIFORM3UIPROC glad_glUniform3ui;
GLAPI PFNGLUNIFORM3UIPROC glad_debug_glUniform3ui;
#define glUniform3ui glad_debug_glUniform3ui
typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLUNIFORM4UIPROC glad_glUniform4ui;
GLAPI PFNGLUNIFORM4UIPROC glad_debug_glUniform4ui;
#define glUniform4ui glad_debug_glUniform4ui
typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
GLAPI PFNGLUNIFORM1UIVPROC glad_debug_glUniform1uiv;
#define glUniform1uiv glad_debug_glUniform1uiv
typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
GLAPI PFNGLUNIFORM2UIVPROC glad_debug_glUniform2uiv;
#define glUniform2uiv glad_debug_glUniform2uiv
typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
GLAPI PFNGLUNIFORM3UIVPROC glad_debug_glUniform3uiv;
#define glUniform3uiv glad_debug_glUniform3uiv
typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
GLAPI PFNGLUNIFORM4UIVPROC glad_debug_glUniform4uiv;
#define glUniform4uiv glad_debug_glUniform4uiv
typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
GLAPI PFNGLTEXPARAMETERIIVPROC glad_debug_glTexParameterIiv;
#define glTexParameterIiv glad_debug_glTexParameterIiv
typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint* params);
GLAPI PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
GLAPI PFNGLTEXPARAMETERIUIVPROC glad_debug_glTexParameterIuiv;
#define glTexParameterIuiv glad_debug_glTexParameterIuiv
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
GLAPI PFNGLGETTEXPARAMETERIIVPROC glad_debug_glGetTexParameterIiv;
#define glGetTexParameterIiv glad_debug_glGetTexParameterIiv
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint* params);
GLAPI PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
GLAPI PFNGLGETTEXPARAMETERIUIVPROC glad_debug_glGetTexParameterIuiv;
#define glGetTexParameterIuiv glad_debug_glGetTexParameterIuiv
typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint* value);
GLAPI PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
GLAPI PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv;
#define glClearBufferiv glad_debug_glClearBufferiv
typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint* value);
GLAPI PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
GLAPI PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv;
#define glClearBufferuiv glad_debug_glClearBufferuiv
typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat* value);
GLAPI PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
GLAPI PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv;
#define glClearBufferfv glad_debug_glClearBufferfv
typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
GLAPI PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi;
#define glClearBufferfi glad_debug_glClearBufferfi
typedef const GLubyte* (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
GLAPI PFNGLGETSTRINGIPROC glad_glGetStringi;
GLAPI PFNGLGETSTRINGIPROC glad_debug_glGetStringi;
#define glGetStringi glad_debug_glGetStringi
typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
GLAPI PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
GLAPI PFNGLISRENDERBUFFERPROC glad_debug_glIsRenderbuffer;
#define glIsRenderbuffer glad_debug_glIsRenderbuffer
typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
GLAPI PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
GLAPI PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer;
#define glBindRenderbuffer glad_debug_glBindRenderbuffer
typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint* renderbuffers);
GLAPI PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
GLAPI PFNGLDELETERENDERBUFFERSPROC glad_debug_glDeleteRenderbuffers;
#define glDeleteRenderbuffers glad_debug_glDeleteRenderbuffers
typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
GLAPI PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
GLAPI PFNGLGENRENDERBUFFERSPROC glad_debug_glGenRenderbuffers;
#define glGenRenderbuffers glad_debug_glGenRenderbuffers
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
GLAPI PFNGLRENDERBUFFERSTORAGEPROC glad_debug_glRenderbufferStorage;
#define glRenderbufferStorage glad_debug_glRenderbufferStorage
typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_debug_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv glad_debug_glGetRenderbufferParameteriv
typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
GLAPI PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
GLAPI PFNGLISFRAMEBUFFERPROC glad_debug_glIsFramebuffer;
#define glIsFramebuffer glad_debug_glIsFramebuffer
typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
GLAPI PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
GLAPI PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer;
#define glBindFramebuffer glad_debug_glBindFramebuffer
typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint* framebuffers);
GLAPI PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
GLAPI PFNGLDELETEFRAMEBUFFERSPROC glad_debug_glDeleteFramebuffers;
#define glDeleteFramebuffers glad_debug_glDeleteFramebuffers
typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
GLAPI PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
GLAPI PFNGLGENFRAMEBUFFERSPROC glad_debug_glGenFramebuffers;
#define glGenFramebuffers glad_debug_glGenFramebuffers
typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus;
#define glCheckFramebufferStatus glad_debug_glCheckFramebufferStatus
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC glad_debug_glFramebufferTexture1D;
#define glFramebufferTexture1D glad_debug_glFramebufferTexture1D
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC glad_debug_glFramebufferTexture2D;
#define glFramebufferTexture2D glad_debug_glFramebufferTexture2D
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC glad_debug_glFramebufferTexture3D;
#define glFramebufferTexture3D glad_debug_glFramebufferTexture3D
typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_debug_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer glad_debug_glFramebufferRenderbuffer
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv glad_debug_glGetFramebufferAttachmentParameteriv
typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);
GLAPI PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
GLAPI PFNGLGENERATEMIPMAPPROC glad_debug_glGenerateMipmap;
#define glGenerateMipmap glad_debug_glGenerateMipmap
typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
GLAPI PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer;
#define glBlitFramebuffer glad_debug_glBlitFramebuffer
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample glad_debug_glRenderbufferStorageMultisample
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_debug_glFramebufferTextureLayer;
#define glFramebufferTextureLayer glad_debug_glFramebufferTextureLayer
typedef void* (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
GLAPI PFNGLMAPBUFFERRANGEPROC glad_debug_glMapBufferRange;
#define glMapBufferRange glad_debug_glMapBufferRange
typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_debug_glFlushMappedBufferRange;
#define glFlushMappedBufferRange glad_debug_glFlushMappedBufferRange
typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
GLAPI PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray;
#define glBindVertexArray glad_debug_glBindVertexArray
typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint* arrays);
GLAPI PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
GLAPI PFNGLDELETEVERTEXARRAYSPROC glad_debug_glDeleteVertexArrays;
#define glDeleteVertexArrays glad_debug_glDeleteVertexArrays
typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
GLAPI PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
GLAPI PFNGLGENVERTEXARRAYSPROC glad_debug_glGenVertexArrays;
#define glGenVertexArrays glad_debug_glGenVertexArrays
typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);
GLAPI PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
GLAPI PFNGLISVERTEXARRAYPROC glad_debug_glIsVertexArray;
#define glIsVertexArray glad_debug_glIsVertexArray
#endif
#ifndef GL_VERSION_3_1
#define GL_VERSION_3_1 1
GLAPI int GLAD_GL_VERSION_3_1;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GLAPI PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
GLAPI PFNGLDRAWARRAYSINSTANCEDPROC glad_debug_glDrawArraysInstanced;
#define glDrawArraysInstanced glad_debug_glDrawArraysInstanced
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount);
GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC glad_debug_glDrawElementsInstanced;
#define glDrawElementsInstanced glad_debug_glDrawElementsInstanced
typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXBUFFERPROC glad_glTexBuffer;
GLAPI PFNGLTEXBUFFERPROC glad_debug_glTexBuffer;
#define glTexBuffer glad_debug_glTexBuffer
typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
GLAPI PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
GLAPI PFNGLPRIMITIVERESTARTINDEXPROC glad_debug_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex glad_debug_glPrimitiveRestartIndex
typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
GLAPI PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData;
#define glCopyBufferSubData glad_debug_glCopyBufferSubData
typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar** uniformNames, GLuint* uniformIndices);
GLAPI PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
GLAPI PFNGLGETUNIFORMINDICESPROC glad_debug_glGetUniformIndices;
#define glGetUniformIndices glad_debug_glGetUniformIndices
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
GLAPI PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
GLAPI PFNGLGETACTIVEUNIFORMSIVPROC glad_debug_glGetActiveUniformsiv;
#define glGetActiveUniformsiv glad_debug_glGetActiveUniformsiv
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC glad_debug_glGetActiveUniformName;
#define glGetActiveUniformName glad_debug_glGetActiveUniformName
typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar* uniformBlockName);
GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC glad_debug_glGetUniformBlockIndex;
#define glGetUniformBlockIndex glad_debug_glGetUniformBlockIndex
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_debug_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv glad_debug_glGetActiveUniformBlockiv
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_debug_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName glad_debug_glGetActiveUniformBlockName
typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GLAPI PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
GLAPI PFNGLUNIFORMBLOCKBINDINGPROC glad_debug_glUniformBlockBinding;
#define glUniformBlockBinding glad_debug_glUniformBlockBinding
#endif
#ifndef GL_VERSION_3_2
#define GL_VERSION_3_2 1
GLAPI int GLAD_GL_VERSION_3_2;
typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC glad_debug_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex glad_debug_glDrawElementsBaseVertex
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex);
GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_debug_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex glad_debug_glDrawRangeElementsBaseVertex
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_debug_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex glad_debug_glDrawElementsInstancedBaseVertex
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei* count, GLenum type, const void** indices, GLsizei drawcount, const GLint* basevertex);
GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_debug_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex glad_debug_glMultiDrawElementsBaseVertex
typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
GLAPI PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
GLAPI PFNGLPROVOKINGVERTEXPROC glad_debug_glProvokingVertex;
#define glProvokingVertex glad_debug_glProvokingVertex
typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
GLAPI PFNGLFENCESYNCPROC glad_glFenceSync;
GLAPI PFNGLFENCESYNCPROC glad_debug_glFenceSync;
#define glFenceSync glad_debug_glFenceSync
typedef GLboolean (APIENTRYP PFNGLISSYNCPROC)(GLsync sync);
GLAPI PFNGLISSYNCPROC glad_glIsSync;
GLAPI PFNGLISSYNCPROC glad_debug_glIsSync;
#define glIsSync glad_debug_glIsSync
typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);
GLAPI PFNGLDELETESYNCPROC glad_glDeleteSync;
GLAPI PFNGLDELETESYNCPROC glad_debug_glDeleteSync;
#define glDeleteSync glad_debug_glDeleteSync
typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
GLAPI PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync;
#define glClientWaitSync glad_debug_glClientWaitSync
typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLAPI PFNGLWAITSYNCPROC glad_glWaitSync;
GLAPI PFNGLWAITSYNCPROC glad_debug_glWaitSync;
#define glWaitSync glad_debug_glWaitSync
typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64* data);
GLAPI PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
GLAPI PFNGLGETINTEGER64VPROC glad_debug_glGetInteger64v;
#define glGetInteger64v glad_debug_glGetInteger64v
typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
GLAPI PFNGLGETSYNCIVPROC glad_glGetSynciv;
GLAPI PFNGLGETSYNCIVPROC glad_debug_glGetSynciv;
#define glGetSynciv glad_debug_glGetSynciv
typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64* data);
GLAPI PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
GLAPI PFNGLGETINTEGER64I_VPROC glad_debug_glGetInteger64i_v;
#define glGetInteger64i_v glad_debug_glGetInteger64i_v
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64* params);
GLAPI PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
GLAPI PFNGLGETBUFFERPARAMETERI64VPROC glad_debug_glGetBufferParameteri64v;
#define glGetBufferParameteri64v glad_debug_glGetBufferParameteri64v
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
GLAPI PFNGLFRAMEBUFFERTEXTUREPROC glad_debug_glFramebufferTexture;
#define glFramebufferTexture glad_debug_glFramebufferTexture
typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_debug_glTexImage2DMultisample;
#define glTexImage2DMultisample glad_debug_glTexImage2DMultisample
typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_debug_glTexImage3DMultisample;
#define glTexImage3DMultisample glad_debug_glTexImage3DMultisample
typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat* val);
GLAPI PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
GLAPI PFNGLGETMULTISAMPLEFVPROC glad_debug_glGetMultisamplefv;
#define glGetMultisamplefv glad_debug_glGetMultisamplefv
typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
GLAPI PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
GLAPI PFNGLSAMPLEMASKIPROC glad_debug_glSampleMaski;
#define glSampleMaski glad_debug_glSampleMaski
#endif
#ifndef GL_VERSION_3_3
#define GL_VERSION_3_3 1
GLAPI int GLAD_GL_VERSION_3_3;
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed glad_debug_glBindFragDataLocationIndexed
typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
GLAPI PFNGLGETFRAGDATAINDEXPROC glad_debug_glGetFragDataIndex;
#define glGetFragDataIndex glad_debug_glGetFragDataIndex
typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint* samplers);
GLAPI PFNGLGENSAMPLERSPROC glad_glGenSamplers;
GLAPI PFNGLGENSAMPLERSPROC glad_debug_glGenSamplers;
#define glGenSamplers glad_debug_glGenSamplers
typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint* samplers);
GLAPI PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
GLAPI PFNGLDELETESAMPLERSPROC glad_debug_glDeleteSamplers;
#define glDeleteSamplers glad_debug_glDeleteSamplers
typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC)(GLuint sampler);
GLAPI PFNGLISSAMPLERPROC glad_glIsSampler;
GLAPI PFNGLISSAMPLERPROC glad_debug_glIsSampler;
#define glIsSampler glad_debug_glIsSampler
typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
GLAPI PFNGLBINDSAMPLERPROC glad_glBindSampler;
GLAPI PFNGLBINDSAMPLERPROC glad_debug_glBindSampler;
#define glBindSampler glad_debug_glBindSampler
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
GLAPI PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
GLAPI PFNGLSAMPLERPARAMETERIPROC glad_debug_glSamplerParameteri;
#define glSamplerParameteri glad_debug_glSamplerParameteri
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
GLAPI PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
GLAPI PFNGLSAMPLERPARAMETERIVPROC glad_debug_glSamplerParameteriv;
#define glSamplerParameteriv glad_debug_glSamplerParameteriv
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
GLAPI PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
GLAPI PFNGLSAMPLERPARAMETERFPROC glad_debug_glSamplerParameterf;
#define glSamplerParameterf glad_debug_glSamplerParameterf
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat* param);
GLAPI PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
GLAPI PFNGLSAMPLERPARAMETERFVPROC glad_debug_glSamplerParameterfv;
#define glSamplerParameterfv glad_debug_glSamplerParameterfv
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint* param);
GLAPI PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
GLAPI PFNGLSAMPLERPARAMETERIIVPROC glad_debug_glSamplerParameterIiv;
#define glSamplerParameterIiv glad_debug_glSamplerParameterIiv
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint* param);
GLAPI PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
GLAPI PFNGLSAMPLERPARAMETERIUIVPROC glad_debug_glSamplerParameterIuiv;
#define glSamplerParameterIuiv glad_debug_glSamplerParameterIuiv
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint* params);
GLAPI PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
GLAPI PFNGLGETSAMPLERPARAMETERIVPROC glad_debug_glGetSamplerParameteriv;
#define glGetSamplerParameteriv glad_debug_glGetSamplerParameteriv
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint* params);
GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC glad_debug_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv glad_debug_glGetSamplerParameterIiv
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat* params);
GLAPI PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
GLAPI PFNGLGETSAMPLERPARAMETERFVPROC glad_debug_glGetSamplerParameterfv;
#define glGetSamplerParameterfv glad_debug_glGetSamplerParameterfv
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint* params);
GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC glad_debug_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv glad_debug_glGetSamplerParameterIuiv
typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
GLAPI PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
GLAPI PFNGLQUERYCOUNTERPROC glad_debug_glQueryCounter;
#define glQueryCounter glad_debug_glQueryCounter
typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64* params);
GLAPI PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
GLAPI PFNGLGETQUERYOBJECTI64VPROC glad_debug_glGetQueryObjecti64v;
#define glGetQueryObjecti64v glad_debug_glGetQueryObjecti64v
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64* params);
GLAPI PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
GLAPI PFNGLGETQUERYOBJECTUI64VPROC glad_debug_glGetQueryObjectui64v;
#define glGetQueryObjectui64v glad_debug_glGetQueryObjectui64v
typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
GLAPI PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
GLAPI PFNGLVERTEXATTRIBDIVISORPROC glad_debug_glVertexAttribDivisor;
#define glVertexAttribDivisor glad_debug_glVertexAttribDivisor
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
GLAPI PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui;
#define glVertexAttribP1ui glad_debug_glVertexAttribP1ui
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLAPI PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
GLAPI PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv;
#define glVertexAttribP1uiv glad_debug_glVertexAttribP1uiv
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
GLAPI PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui;
#define glVertexAttribP2ui glad_debug_glVertexAttribP2ui
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLAPI PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
GLAPI PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv;
#define glVertexAttribP2uiv glad_debug_glVertexAttribP2uiv
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
GLAPI PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui;
#define glVertexAttribP3ui glad_debug_glVertexAttribP3ui
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLAPI PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
GLAPI PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv;
#define glVertexAttribP3uiv glad_debug_glVertexAttribP3uiv
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLAPI PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
GLAPI PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui;
#define glVertexAttribP4ui glad_debug_glVertexAttribP4ui
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLAPI PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
GLAPI PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv;
#define glVertexAttribP4uiv glad_debug_glVertexAttribP4uiv
typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP2UIPROC glad_glVertexP2ui;
GLAPI PFNGLVERTEXP2UIPROC glad_debug_glVertexP2ui;
#define glVertexP2ui glad_debug_glVertexP2ui
typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint* value);
GLAPI PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;
GLAPI PFNGLVERTEXP2UIVPROC glad_debug_glVertexP2uiv;
#define glVertexP2uiv glad_debug_glVertexP2uiv
typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP3UIPROC glad_glVertexP3ui;
GLAPI PFNGLVERTEXP3UIPROC glad_debug_glVertexP3ui;
#define glVertexP3ui glad_debug_glVertexP3ui
typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint* value);
GLAPI PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;
GLAPI PFNGLVERTEXP3UIVPROC glad_debug_glVertexP3uiv;
#define glVertexP3uiv glad_debug_glVertexP3uiv
typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
GLAPI PFNGLVERTEXP4UIPROC glad_glVertexP4ui;
GLAPI PFNGLVERTEXP4UIPROC glad_debug_glVertexP4ui;
#define glVertexP4ui glad_debug_glVertexP4ui
typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint* value);
GLAPI PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;
GLAPI PFNGLVERTEXP4UIVPROC glad_debug_glVertexP4uiv;
#define glVertexP4uiv glad_debug_glVertexP4uiv
typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;
GLAPI PFNGLTEXCOORDP1UIPROC glad_debug_glTexCoordP1ui;
#define glTexCoordP1ui glad_debug_glTexCoordP1ui
typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;
GLAPI PFNGLTEXCOORDP1UIVPROC glad_debug_glTexCoordP1uiv;
#define glTexCoordP1uiv glad_debug_glTexCoordP1uiv
typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;
GLAPI PFNGLTEXCOORDP2UIPROC glad_debug_glTexCoordP2ui;
#define glTexCoordP2ui glad_debug_glTexCoordP2ui
typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;
GLAPI PFNGLTEXCOORDP2UIVPROC glad_debug_glTexCoordP2uiv;
#define glTexCoordP2uiv glad_debug_glTexCoordP2uiv
typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;
GLAPI PFNGLTEXCOORDP3UIPROC glad_debug_glTexCoordP3ui;
#define glTexCoordP3ui glad_debug_glTexCoordP3ui
typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;
GLAPI PFNGLTEXCOORDP3UIVPROC glad_debug_glTexCoordP3uiv;
#define glTexCoordP3uiv glad_debug_glTexCoordP3uiv
typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;
GLAPI PFNGLTEXCOORDP4UIPROC glad_debug_glTexCoordP4ui;
#define glTexCoordP4ui glad_debug_glTexCoordP4ui
typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;
GLAPI PFNGLTEXCOORDP4UIVPROC glad_debug_glTexCoordP4uiv;
#define glTexCoordP4uiv glad_debug_glTexCoordP4uiv
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;
GLAPI PFNGLMULTITEXCOORDP1UIPROC glad_debug_glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui glad_debug_glMultiTexCoordP1ui
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
GLAPI PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;
GLAPI PFNGLMULTITEXCOORDP1UIVPROC glad_debug_glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv glad_debug_glMultiTexCoordP1uiv
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;
GLAPI PFNGLMULTITEXCOORDP2UIPROC glad_debug_glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui glad_debug_glMultiTexCoordP2ui
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
GLAPI PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;
GLAPI PFNGLMULTITEXCOORDP2UIVPROC glad_debug_glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv glad_debug_glMultiTexCoordP2uiv
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;
GLAPI PFNGLMULTITEXCOORDP3UIPROC glad_debug_glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui glad_debug_glMultiTexCoordP3ui
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
GLAPI PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;
GLAPI PFNGLMULTITEXCOORDP3UIVPROC glad_debug_glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv glad_debug_glMultiTexCoordP3uiv
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
GLAPI PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;
GLAPI PFNGLMULTITEXCOORDP4UIPROC glad_debug_glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui glad_debug_glMultiTexCoordP4ui
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint* coords);
GLAPI PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;
GLAPI PFNGLMULTITEXCOORDP4UIVPROC glad_debug_glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv glad_debug_glMultiTexCoordP4uiv
typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
GLAPI PFNGLNORMALP3UIPROC glad_glNormalP3ui;
GLAPI PFNGLNORMALP3UIPROC glad_debug_glNormalP3ui;
#define glNormalP3ui glad_debug_glNormalP3ui
typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint* coords);
GLAPI PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;
GLAPI PFNGLNORMALP3UIVPROC glad_debug_glNormalP3uiv;
#define glNormalP3uiv glad_debug_glNormalP3uiv
typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLCOLORP3UIPROC glad_glColorP3ui;
GLAPI PFNGLCOLORP3UIPROC glad_debug_glColorP3ui;
#define glColorP3ui glad_debug_glColorP3ui
typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint* color);
GLAPI PFNGLCOLORP3UIVPROC glad_glColorP3uiv;
GLAPI PFNGLCOLORP3UIVPROC glad_debug_glColorP3uiv;
#define glColorP3uiv glad_debug_glColorP3uiv
typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLCOLORP4UIPROC glad_glColorP4ui;
GLAPI PFNGLCOLORP4UIPROC glad_debug_glColorP4ui;
#define glColorP4ui glad_debug_glColorP4ui
typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint* color);
GLAPI PFNGLCOLORP4UIVPROC glad_glColorP4uiv;
GLAPI PFNGLCOLORP4UIVPROC glad_debug_glColorP4uiv;
#define glColorP4uiv glad_debug_glColorP4uiv
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
GLAPI PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;
GLAPI PFNGLSECONDARYCOLORP3UIPROC glad_debug_glSecondaryColorP3ui;
#define glSecondaryColorP3ui glad_debug_glSecondaryColorP3ui
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint* color);
GLAPI PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;
GLAPI PFNGLSECONDARYCOLORP3UIVPROC glad_debug_glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv glad_debug_glSecondaryColorP3uiv
#endif
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
#define GL_ELEMENT_ARRAY_APPLE 0x8A0C
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
#define GL_FUNC_SUBTRACT_EXT 0x800A
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#define GL_POINT_SPRITE_NV 0x8861
#define GL_COORD_REPLACE_NV 0x8862
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_MIRRORED_REPEAT_IBM 0x8370
#define GL_TRANSFORM_HINT_APPLE 0x85B1
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
#define GL_VERTEX_BLEND_ARB 0x86A7
#define GL_CURRENT_WEIGHT_ARB 0x86A8
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
#define GL_WEIGHT_ARRAY_ARB 0x86AD
#define GL_MODELVIEW0_ARB 0x1700
#define GL_MODELVIEW1_ARB 0x850A
#define GL_MODELVIEW2_ARB 0x8722
#define GL_MODELVIEW3_ARB 0x8723
#define GL_MODELVIEW4_ARB 0x8724
#define GL_MODELVIEW5_ARB 0x8725
#define GL_MODELVIEW6_ARB 0x8726
#define GL_MODELVIEW7_ARB 0x8727
#define GL_MODELVIEW8_ARB 0x8728
#define GL_MODELVIEW9_ARB 0x8729
#define GL_MODELVIEW10_ARB 0x872A
#define GL_MODELVIEW11_ARB 0x872B
#define GL_MODELVIEW12_ARB 0x872C
#define GL_MODELVIEW13_ARB 0x872D
#define GL_MODELVIEW14_ARB 0x872E
#define GL_MODELVIEW15_ARB 0x872F
#define GL_MODELVIEW16_ARB 0x8730
#define GL_MODELVIEW17_ARB 0x8731
#define GL_MODELVIEW18_ARB 0x8732
#define GL_MODELVIEW19_ARB 0x8733
#define GL_MODELVIEW20_ARB 0x8734
#define GL_MODELVIEW21_ARB 0x8735
#define GL_MODELVIEW22_ARB 0x8736
#define GL_MODELVIEW23_ARB 0x8737
#define GL_MODELVIEW24_ARB 0x8738
#define GL_MODELVIEW25_ARB 0x8739
#define GL_MODELVIEW26_ARB 0x873A
#define GL_MODELVIEW27_ARB 0x873B
#define GL_MODELVIEW28_ARB 0x873C
#define GL_MODELVIEW29_ARB 0x873D
#define GL_MODELVIEW30_ARB 0x873E
#define GL_MODELVIEW31_ARB 0x873F
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_MAX_VIEWS_OVR 0x9631
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_SAMPLES_ARB 0x80A9
#define GL_COLOR_SAMPLES_NV 0x8E20
#define GL_NORMAL_MAP_EXT 0x8511
#define GL_REFLECTION_MAP_EXT 0x8512
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
#define GL_INDEX_TEST_EXT 0x81B5
#define GL_INDEX_TEST_FUNC_EXT 0x81B6
#define GL_INDEX_TEST_REF_EXT 0x81B7
#define GL_PALETTE4_RGB8_OES 0x8B90
#define GL_PALETTE4_RGBA8_OES 0x8B91
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
#define GL_PALETTE4_RGBA4_OES 0x8B93
#define GL_PALETTE4_RGB5_A1_OES 0x8B94
#define GL_PALETTE8_RGB8_OES 0x8B95
#define GL_PALETTE8_RGBA8_OES 0x8B96
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
#define GL_PALETTE8_RGBA4_OES 0x8B98
#define GL_PALETTE8_RGB5_A1_OES 0x8B99
#define GL_DEPTH_CLAMP_NV 0x864F
#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
#define GL_GPU_ADDRESS_NV 0x8F34
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_COMBINE_EXT 0x8570
#define GL_COMBINE_RGB_EXT 0x8571
#define GL_COMBINE_ALPHA_EXT 0x8572
#define GL_RGB_SCALE_EXT 0x8573
#define GL_ADD_SIGNED_EXT 0x8574
#define GL_INTERPOLATE_EXT 0x8575
#define GL_CONSTANT_EXT 0x8576
#define GL_PRIMARY_COLOR_EXT 0x8577
#define GL_PREVIOUS_EXT 0x8578
#define GL_SOURCE0_RGB_EXT 0x8580
#define GL_SOURCE1_RGB_EXT 0x8581
#define GL_SOURCE2_RGB_EXT 0x8582
#define GL_SOURCE0_ALPHA_EXT 0x8588
#define GL_SOURCE1_ALPHA_EXT 0x8589
#define GL_SOURCE2_ALPHA_EXT 0x858A
#define GL_OPERAND0_RGB_EXT 0x8590
#define GL_OPERAND1_RGB_EXT 0x8591
#define GL_OPERAND2_RGB_EXT 0x8592
#define GL_OPERAND0_ALPHA_EXT 0x8598
#define GL_OPERAND1_ALPHA_EXT 0x8599
#define GL_OPERAND2_ALPHA_EXT 0x859A
#define GL_FOG_DISTANCE_MODE_NV 0x855A
#define GL_EYE_RADIAL_NV 0x855B
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
#define GL_EYE_PLANE 0x2502
#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
#define GL_MAX_SHININESS_NV 0x8504
#define GL_MAX_SPOT_EXPONENT_NV 0x8505
#define GL_COMBINE4_NV 0x8503
#define GL_SOURCE3_RGB_NV 0x8583
#define GL_SOURCE3_ALPHA_NV 0x858B
#define GL_OPERAND3_RGB_NV 0x8593
#define GL_OPERAND3_ALPHA_NV 0x859B
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_COMBINE_ARB 0x8570
#define GL_COMBINE_RGB_ARB 0x8571
#define GL_COMBINE_ALPHA_ARB 0x8572
#define GL_SOURCE0_RGB_ARB 0x8580
#define GL_SOURCE1_RGB_ARB 0x8581
#define GL_SOURCE2_RGB_ARB 0x8582
#define GL_SOURCE0_ALPHA_ARB 0x8588
#define GL_SOURCE1_ALPHA_ARB 0x8589
#define GL_SOURCE2_ALPHA_ARB 0x858A
#define GL_OPERAND0_RGB_ARB 0x8590
#define GL_OPERAND1_RGB_ARB 0x8591
#define GL_OPERAND2_RGB_ARB 0x8592
#define GL_OPERAND0_ALPHA_ARB 0x8598
#define GL_OPERAND1_ALPHA_ARB 0x8599
#define GL_OPERAND2_ALPHA_ARB 0x859A
#define GL_RGB_SCALE_ARB 0x8573
#define GL_ADD_SIGNED_ARB 0x8574
#define GL_INTERPOLATE_ARB 0x8575
#define GL_SUBTRACT_ARB 0x84E7
#define GL_CONSTANT_ARB 0x8576
#define GL_PRIMARY_COLOR_ARB 0x8577
#define GL_PREVIOUS_ARB 0x8578
#define GL_CONVOLUTION_1D_EXT 0x8010
#define GL_CONVOLUTION_2D_EXT 0x8011
#define GL_SEPARABLE_2D_EXT 0x8012
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
#define GL_REDUCE_EXT 0x8016
#define GL_CONVOLUTION_FORMAT_EXT 0x8017
#define GL_CONVOLUTION_WIDTH_EXT 0x8018
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
#define GL_COMPUTE_PROGRAM_NV 0x90FB
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
#define GL_INT64_NV 0x140E
#define GL_UNSIGNED_INT64_NV 0x140F
#define GL_COLOR_INDEX1_EXT 0x80E2
#define GL_COLOR_INDEX2_EXT 0x80E3
#define GL_COLOR_INDEX4_EXT 0x80E4
#define GL_COLOR_INDEX8_EXT 0x80E5
#define GL_COLOR_INDEX12_EXT 0x80E6
#define GL_COLOR_INDEX16_EXT 0x80E7
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_PN_TRIANGLES_ATI 0x87F0
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
#define GL_PACK_RESAMPLE_SGIX 0x842E
#define GL_UNPACK_RESAMPLE_SGIX 0x842F
#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
#define GL_FRAGMENT_MATERIAL_EXT 0x8349
#define GL_FRAGMENT_NORMAL_EXT 0x834A
#define GL_FRAGMENT_COLOR_EXT 0x834C
#define GL_ATTENUATION_EXT 0x834D
#define GL_SHADOW_ATTENUATION_EXT 0x834E
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
#define GL_TEXTURE_LIGHT_EXT 0x8350
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#define GL_POINT_SPRITE_ARB 0x8861
#define GL_COORD_REPLACE_ARB 0x8862
#define GL_WRAP_BORDER_SUN 0x81D4
#define GL_HALF_FLOAT_ARB 0x140B
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#define GL_SCREEN_COORDINATES_REND 0x8490
#define GL_INVERTED_SCREEN_W_REND 0x8491
#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
#define GL_R11F_G11F_B10F_EXT 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
#define GL_VERTEX_PRECLIP_SGIX 0x83EE
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
#define GL_STORAGE_PRIVATE_APPLE 0x85BD
#define GL_STORAGE_CACHED_APPLE 0x85BE
#define GL_STORAGE_SHARED_APPLE 0x85BF
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_EMBOSS_LIGHT_NV 0x855D
#define GL_EMBOSS_CONSTANT_NV 0x855E
#define GL_EMBOSS_MAP_NV 0x855F
#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#define GL_ACTIVE_PROGRAM_EXT 0x8B8D
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE_EXT 0x8258
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4_ARB 0x8B55
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_BUMP_ROT_MATRIX_ATI 0x8775
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
#define GL_BUMP_TEX_UNITS_ATI 0x8778
#define GL_DUDV_ATI 0x8779
#define GL_DU8DV8_ATI 0x877A
#define GL_BUMP_ENVMAP_ATI 0x877B
#define GL_BUMP_TARGET_ATI 0x877C
#define GL_TEXTURE_RECTANGLE_NV 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
#define GL_VIEWPORT_SWIZZLE_X_NV 0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A
#define GL_VIEWPORT_SWIZZLE_W_NV 0x935B
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
#define GL_NOP_COMMAND_NV 0x0001
#define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
#define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
#define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
#define GL_BLEND_COLOR_COMMAND_NV 0x000B
#define GL_STENCIL_REF_COMMAND_NV 0x000C
#define GL_LINE_WIDTH_COMMAND_NV 0x000D
#define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
#define GL_ALPHA_REF_COMMAND_NV 0x000F
#define GL_VIEWPORT_COMMAND_NV 0x0010
#define GL_SCISSOR_COMMAND_NV 0x0011
#define GL_FRONT_FACE_COMMAND_NV 0x0012
#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
#define GL_MODELVIEW1_MATRIX_EXT 0x8506
#define GL_VERTEX_WEIGHTING_EXT 0x8509
#define GL_MODELVIEW0_EXT 0x1700
#define GL_MODELVIEW1_EXT 0x850A
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#define GL_EVAL_2D_NV 0x86C0
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#define GL_MAP_TESSELLATION_NV 0x86C2
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
#define GL_FILTER4_SGIS 0x8146
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
#define GL_COUNTER_TYPE_AMD 0x8BC0
#define GL_COUNTER_RANGE_AMD 0x8BC1
#define GL_UNSIGNED_INT64_AMD 0x8BC2
#define GL_PERCENTAGE_AMD 0x8BC3
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
#define GL_PERFMON_RESULT_AMD 0x8BC6
#define GL_STENCIL_TAG_BITS_EXT 0x88F2
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
#define GL_FRAME_NV 0x8E26
#define GL_FIELDS_NV 0x8E27
#define GL_CURRENT_TIME_NV 0x8E28
#define GL_NUM_FILL_STREAMS_NV 0x8E29
#define GL_PRESENT_TIME_NV 0x8E2A
#define GL_PRESENT_DURATION_NV 0x8E2B
#define GL_IGNORE_BORDER_HP 0x8150
#define GL_CONSTANT_BORDER_HP 0x8151
#define GL_REPLICATE_BORDER_HP 0x8153
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
#define GL_FRAMEZOOM_SGIX 0x818B
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_FOG_OFFSET_SGIX 0x8198
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
#define GL_INTERLACE_READ_INGR 0x8568
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_LAYER_NV 0x8DAA
#define GL_NEXT_BUFFER_NV -2
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#define GL_FRAGMENT_PROGRAM_NV 0x8870
#define GL_MAX_TEXTURE_COORDS_NV 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
#define GL_PROGRAM_ERROR_STRING_NV 0x8874
#define GL_SET_AMD 0x874A
#define GL_REPLACE_VALUE_AMD 0x874B
#define GL_STENCIL_OP_VALUE_AMD 0x874C
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261
#define GL_CONTEXT_LOST_KHR 0x0507
#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B
#define GL_MIN_LOD_WARNING_AMD 0x919C
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD
#define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE
#define GL_ALL_COMPLETED_NV 0x84F2
#define GL_FENCE_STATUS_NV 0x84F3
#define GL_FENCE_CONDITION_NV 0x84F4
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_QUAD_MESH_SUN 0x8614
#define GL_TRIANGLE_MESH_SUN 0x8615
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_SYNC_CL_EVENT_ARB 0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
#define GL_DEPTH_STENCIL_NV 0x84F9
#define GL_UNSIGNED_INT_24_8_NV 0x84FA
#define GL_PRIMITIVE_RESTART_NV 0x8558
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
#define GL_GLOBAL_ALPHA_SUN 0x81D9
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_DATA_BUFFER_AMD 0x9151
#define GL_PERFORMANCE_MONITOR_AMD 0x9152
#define GL_QUERY_OBJECT_AMD 0x9153
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
#define GL_SAMPLER_OBJECT_AMD 0x9155
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
#define GL_HILO8_NV 0x885E
#define GL_SIGNED_HILO8_NV 0x885F
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
#define GL_ALPHA4_EXT 0x803B
#define GL_ALPHA8_EXT 0x803C
#define GL_ALPHA12_EXT 0x803D
#define GL_ALPHA16_EXT 0x803E
#define GL_LUMINANCE4_EXT 0x803F
#define GL_LUMINANCE8_EXT 0x8040
#define GL_LUMINANCE12_EXT 0x8041
#define GL_LUMINANCE16_EXT 0x8042
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
#define GL_INTENSITY_EXT 0x8049
#define GL_INTENSITY4_EXT 0x804A
#define GL_INTENSITY8_EXT 0x804B
#define GL_INTENSITY12_EXT 0x804C
#define GL_INTENSITY16_EXT 0x804D
#define GL_RGB2_EXT 0x804E
#define GL_RGB4_EXT 0x804F
#define GL_RGB5_EXT 0x8050
#define GL_RGB8_EXT 0x8051
#define GL_RGB10_EXT 0x8052
#define GL_RGB12_EXT 0x8053
#define GL_RGB16_EXT 0x8054
#define GL_RGBA2_EXT 0x8055
#define GL_RGBA4_EXT 0x8056
#define GL_RGB5_A1_EXT 0x8057
#define GL_RGBA8_EXT 0x8058
#define GL_RGB10_A2_EXT 0x8059
#define GL_RGBA12_EXT 0x805A
#define GL_RGBA16_EXT 0x805B
#define GL_TEXTURE_RED_SIZE_EXT 0x805C
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
#define GL_REPLACE_EXT 0x8062
#define GL_PROXY_TEXTURE_1D_EXT 0x8063
#define GL_PROXY_TEXTURE_2D_EXT 0x8064
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_SHARED_EDGE_NV 0xC0
#define GL_SHADOW_AMBIENT_SGIX 0x80BF
#define GL_NORMAL_MAP_ARB 0x8511
#define GL_REFLECTION_MAP_ARB 0x8512
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
#define GL_LIST_PRIORITY_SGIX 0x8182
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
#define GL_CLEAR_TEXTURE 0x9365
#define GL_MODULATE_ADD_ATI 0x8744
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
#define GL_MODULATE_SUBTRACT_ATI 0x8746
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_BLEND_OVERLAP_NV 0x9281
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#define GL_BLUE_NV 0x1905
#define GL_COLORBURN_NV 0x929A
#define GL_COLORDODGE_NV 0x9299
#define GL_CONJOINT_NV 0x9284
#define GL_CONTRAST_NV 0x92A1
#define GL_DARKEN_NV 0x9297
#define GL_DIFFERENCE_NV 0x929E
#define GL_DISJOINT_NV 0x9283
#define GL_DST_ATOP_NV 0x928F
#define GL_DST_IN_NV 0x928B
#define GL_DST_NV 0x9287
#define GL_DST_OUT_NV 0x928D
#define GL_DST_OVER_NV 0x9289
#define GL_EXCLUSION_NV 0x92A0
#define GL_GREEN_NV 0x1904
#define GL_HARDLIGHT_NV 0x929B
#define GL_HARDMIX_NV 0x92A9
#define GL_HSL_COLOR_NV 0x92AF
#define GL_HSL_HUE_NV 0x92AD
#define GL_HSL_LUMINOSITY_NV 0x92B0
#define GL_HSL_SATURATION_NV 0x92AE
#define GL_INVERT_OVG_NV 0x92B4
#define GL_INVERT_RGB_NV 0x92A3
#define GL_LIGHTEN_NV 0x9298
#define GL_LINEARBURN_NV 0x92A5
#define GL_LINEARDODGE_NV 0x92A4
#define GL_LINEARLIGHT_NV 0x92A7
#define GL_MINUS_CLAMPED_NV 0x92B3
#define GL_MINUS_NV 0x929F
#define GL_MULTIPLY_NV 0x9294
#define GL_OVERLAY_NV 0x9296
#define GL_PINLIGHT_NV 0x92A8
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#define GL_PLUS_CLAMPED_NV 0x92B1
#define GL_PLUS_DARKER_NV 0x9292
#define GL_PLUS_NV 0x9291
#define GL_RED_NV 0x1903
#define GL_SCREEN_NV 0x9295
#define GL_SOFTLIGHT_NV 0x929C
#define GL_SRC_ATOP_NV 0x928E
#define GL_SRC_IN_NV 0x928A
#define GL_SRC_NV 0x9286
#define GL_SRC_OUT_NV 0x928C
#define GL_SRC_OVER_NV 0x9288
#define GL_UNCORRELATED_NV 0x9282
#define GL_VIVIDLIGHT_NV 0x92A6
#define GL_XOR_NV 0x1506
#define GL_LINEAR_SHARPEN_SGIS 0x80AD
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
#define GL_VERTICES_SUBMITTED_ARB 0x82EE
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#define GL_COLOR_SUM_ARB 0x8458
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_INTERLACE_OML 0x8980
#define GL_INTERLACE_READ_OML 0x8981
#define GL_RGBA_FLOAT_MODE_ATI 0x8820
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
#define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_READ_ONLY_ARB 0x88B8
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_READ_WRITE_ARB 0x88BA
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ_ARB 0x88E1
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
#define GL_FRAGMENT_LIGHTING_SGIX 0x8400
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
#define GL_LIGHT_ENV_MODE_SGIX 0x8407
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_VERTEX_ARRAY 0x8074
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
#define GL_DEBUG_SOURCE_API_KHR 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
#define GL_BUFFER_KHR 0x82E0
#define GL_SHADER_KHR 0x82E1
#define GL_PROGRAM_KHR 0x82E2
#define GL_VERTEX_ARRAY_KHR 0x8074
#define GL_QUERY_KHR 0x82E3
#define GL_PROGRAM_PIPELINE_KHR 0x82E4
#define GL_SAMPLER_KHR 0x82E6
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
#define GL_DEBUG_OUTPUT_KHR 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
#define GL_STACK_OVERFLOW_KHR 0x0503
#define GL_STACK_UNDERFLOW_KHR 0x0504
#define GL_DISPLAY_LIST 0x82E7
#define GL_CLAMP_TO_BORDER_SGIS 0x812D
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
#define GL_YCBCR_MESA 0x8757
#define GL_TEXTURE_1D_STACK_MESAX 0x8759
#define GL_TEXTURE_2D_STACK_MESAX 0x875A
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
#define GL_UNIFORM_BUFFER_EXT 0x8DEE
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#define GL_MULTIPLY_KHR 0x9294
#define GL_SCREEN_KHR 0x9295
#define GL_OVERLAY_KHR 0x9296
#define GL_DARKEN_KHR 0x9297
#define GL_LIGHTEN_KHR 0x9298
#define GL_COLORDODGE_KHR 0x9299
#define GL_COLORBURN_KHR 0x929A
#define GL_HARDLIGHT_KHR 0x929B
#define GL_SOFTLIGHT_KHR 0x929C
#define GL_DIFFERENCE_KHR 0x929E
#define GL_EXCLUSION_KHR 0x92A0
#define GL_HSL_HUE_KHR 0x92AD
#define GL_HSL_SATURATION_KHR 0x92AE
#define GL_HSL_COLOR_KHR 0x92AF
#define GL_HSL_LUMINOSITY_KHR 0x92B0
#define GL_ELEMENT_ARRAY_ATI 0x8768
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
#define GL_REFERENCE_PLANE_SGIX 0x817D
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_ALL_STATIC_DATA_IBM 103060
#define GL_STATIC_VERTEX_ARRAY_IBM 103061
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
#define GL_PERTURB_EXT 0x85AE
#define GL_TEXTURE_NORMAL_EXT 0x85AF
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219
#define GL_CLIP_NEAR_HINT_PGI 0x1A220
#define GL_CLIP_FAR_HINT_PGI 0x1A221
#define GL_WIDE_LINE_HINT_PGI 0x1A222
#define GL_BACK_NORMALS_HINT_PGI 0x1A223
#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_DUAL_ALPHA4_SGIS 0x8110
#define GL_DUAL_ALPHA8_SGIS 0x8111
#define GL_DUAL_ALPHA12_SGIS 0x8112
#define GL_DUAL_ALPHA16_SGIS 0x8113
#define GL_DUAL_LUMINANCE4_SGIS 0x8114
#define GL_DUAL_LUMINANCE8_SGIS 0x8115
#define GL_DUAL_LUMINANCE12_SGIS 0x8116
#define GL_DUAL_LUMINANCE16_SGIS 0x8117
#define GL_DUAL_INTENSITY4_SGIS 0x8118
#define GL_DUAL_INTENSITY8_SGIS 0x8119
#define GL_DUAL_INTENSITY12_SGIS 0x811A
#define GL_DUAL_INTENSITY16_SGIS 0x811B
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
#define GL_QUAD_ALPHA4_SGIS 0x811E
#define GL_QUAD_ALPHA8_SGIS 0x811F
#define GL_QUAD_LUMINANCE4_SGIS 0x8120
#define GL_QUAD_LUMINANCE8_SGIS 0x8121
#define GL_QUAD_INTENSITY4_SGIS 0x8122
#define GL_QUAD_INTENSITY8_SGIS 0x8123
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
#define GL_SHADER_CONSISTENT_NV 0x86DD
#define GL_TEXTURE_SHADER_NV 0x86DE
#define GL_SHADER_OPERATION_NV 0x86DF
#define GL_CULL_MODES_NV 0x86E0
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
#define GL_CONST_EYE_NV 0x86E5
#define GL_PASS_THROUGH_NV 0x86E6
#define GL_CULL_FRAGMENT_NV 0x86E7
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
#define GL_DOT_PRODUCT_NV 0x86EC
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#define GL_HILO_NV 0x86F4
#define GL_DSDT_NV 0x86F5
#define GL_DSDT_MAG_NV 0x86F6
#define GL_DSDT_MAG_VIB_NV 0x86F7
#define GL_HILO16_NV 0x86F8
#define GL_SIGNED_HILO_NV 0x86F9
#define GL_SIGNED_HILO16_NV 0x86FA
#define GL_SIGNED_RGBA_NV 0x86FB
#define GL_SIGNED_RGBA8_NV 0x86FC
#define GL_SIGNED_RGB_NV 0x86FE
#define GL_SIGNED_RGB8_NV 0x86FF
#define GL_SIGNED_LUMINANCE_NV 0x8701
#define GL_SIGNED_LUMINANCE8_NV 0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
#define GL_SIGNED_ALPHA_NV 0x8705
#define GL_SIGNED_ALPHA8_NV 0x8706
#define GL_SIGNED_INTENSITY_NV 0x8707
#define GL_SIGNED_INTENSITY8_NV 0x8708
#define GL_DSDT8_NV 0x8709
#define GL_DSDT8_MAG8_NV 0x870A
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
#define GL_HI_SCALE_NV 0x870E
#define GL_LO_SCALE_NV 0x870F
#define GL_DS_SCALE_NV 0x8710
#define GL_DT_SCALE_NV 0x8711
#define GL_MAGNITUDE_SCALE_NV 0x8712
#define GL_VIBRANCE_SCALE_NV 0x8713
#define GL_HI_BIAS_NV 0x8714
#define GL_LO_BIAS_NV 0x8715
#define GL_DS_BIAS_NV 0x8716
#define GL_DT_BIAS_NV 0x8717
#define GL_MAGNITUDE_BIAS_NV 0x8718
#define GL_VIBRANCE_BIAS_NV 0x8719
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
#define GL_TEXTURE_HI_SIZE_NV 0x871B
#define GL_TEXTURE_LO_SIZE_NV 0x871C
#define GL_TEXTURE_DS_SIZE_NV 0x871D
#define GL_TEXTURE_DT_SIZE_NV 0x871E
#define GL_TEXTURE_MAG_SIZE_NV 0x871F
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_QUADS 0x0007
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_RASTER_MULTISAMPLE_EXT 0x9327
#define GL_RASTER_SAMPLES_EXT 0x9328
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
#define GL_FRAGMENT_PROGRAM_ARB 0x8804
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_PACK_RESAMPLE_OML 0x8984
#define GL_UNPACK_RESAMPLE_OML 0x8985
#define GL_RESAMPLE_REPLICATE_OML 0x8986
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
#define GL_RESAMPLE_AVERAGE_OML 0x8988
#define GL_RESAMPLE_DECIMATE_OML 0x8989
#define GL_YCBCR_422_APPLE 0x85B9
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#define GL_PIXEL_TEXTURE_SGIS 0x8353
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
#define GL_GENERATE_MIPMAP_SGIS 0x8191
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MIN_EXT 0x8007
#define GL_MAX_EXT 0x8008
#define GL_FUNC_ADD_EXT 0x8006
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_PACK_INVERT_MESA 0x8758
#define GL_CONVOLUTION_HINT_SGIX 0x8316
#define GL_VERTEX_DATA_HINT_PGI 0x1A22A
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D
#define GL_COLOR3_BIT_PGI 0x00010000
#define GL_COLOR4_BIT_PGI 0x00020000
#define GL_EDGEFLAG_BIT_PGI 0x00040000
#define GL_INDEX_BIT_PGI 0x00080000
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
#define GL_MAT_EMISSION_BIT_PGI 0x00800000
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
#define GL_MAT_SHININESS_BIT_PGI 0x02000000
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
#define GL_NORMAL_BIT_PGI 0x08000000
#define GL_TEXCOORD1_BIT_PGI 0x10000000
#define GL_TEXCOORD2_BIT_PGI 0x20000000
#define GL_TEXCOORD3_BIT_PGI 0x40000000
#define GL_TEXCOORD4_BIT_PGI 0x80000000
#define GL_VERTEX23_BIT_PGI 0x00000004
#define GL_VERTEX4_BIT_PGI 0x00000008
#define GL_STREAM_RASTERIZATION_AMD 0x91A0
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGB32UI_EXT 0x8D71
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGB16UI_EXT 0x8D77
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGB8UI_EXT 0x8D7D
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGB32I_EXT 0x8D83
#define GL_ALPHA32I_EXT 0x8D84
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGB16I_EXT 0x8D89
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGB8I_EXT 0x8D8F
#define GL_ALPHA8I_EXT 0x8D90
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_INT8_NV 0x8FE0
#define GL_INT8_VEC2_NV 0x8FE1
#define GL_INT8_VEC3_NV 0x8FE2
#define GL_INT8_VEC4_NV 0x8FE3
#define GL_INT16_NV 0x8FE4
#define GL_INT16_VEC2_NV 0x8FE5
#define GL_INT16_VEC3_NV 0x8FE6
#define GL_INT16_VEC4_NV 0x8FE7
#define GL_INT64_VEC2_NV 0x8FE9
#define GL_INT64_VEC3_NV 0x8FEA
#define GL_INT64_VEC4_NV 0x8FEB
#define GL_UNSIGNED_INT8_NV 0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#define GL_UNSIGNED_INT16_NV 0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
#define GL_RGB_S3TC 0x83A0
#define GL_RGB4_S3TC 0x83A1
#define GL_RGBA_S3TC 0x83A2
#define GL_RGBA4_S3TC 0x83A3
#define GL_RGBA_DXT5_S3TC 0x83A4
#define GL_RGBA4_DXT5_S3TC 0x83A5
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_SAMPLER_BUFFER_AMD 0x9001
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
#define GL_TESSELLATION_MODE_AMD 0x9004
#define GL_TESSELLATION_FACTOR_AMD 0x9005
#define GL_DISCRETE_AMD 0x9006
#define GL_CONTINUOUS_AMD 0x9007
#define GL_INDEX_MATERIAL_EXT 0x81B8
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_CMYK_EXT 0x800C
#define GL_CMYKA_EXT 0x800D
#define GL_PACK_CMYK_HINT_EXT 0x800E
#define GL_UNPACK_CMYK_HINT_EXT 0x800F
#define GL_PIXEL_TEX_GEN_SGIX 0x8139
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
#define GL_INTERLACE_SGIX 0x8094
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
#define GL_TEXTURE_TARGET 0x1006
#define GL_QUERY_TARGET 0x82EA
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_RESCALE_NORMAL_EXT 0x803A
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_WARP_SIZE_NV 0x9339
#define GL_WARPS_PER_SM_NV 0x933A
#define GL_SM_COUNT_NV 0x933B
#define GL_INCR_WRAP_EXT 0x8507
#define GL_DECR_WRAP_EXT 0x8508
#define GL_IUI_V2F_EXT 0x81AD
#define GL_IUI_V3F_EXT 0x81AE
#define GL_IUI_N3F_V2F_EXT 0x81AF
#define GL_IUI_N3F_V3F_EXT 0x81B0
#define GL_T2F_IUI_V2F_EXT 0x81B1
#define GL_T2F_IUI_V3F_EXT 0x81B2
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
#define GL_HISTOGRAM_EXT 0x8024
#define GL_PROXY_HISTOGRAM_EXT 0x8025
#define GL_HISTOGRAM_WIDTH_EXT 0x8026
#define GL_HISTOGRAM_FORMAT_EXT 0x8027
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
#define GL_HISTOGRAM_SINK_EXT 0x802D
#define GL_MINMAX_EXT 0x802E
#define GL_MINMAX_FORMAT_EXT 0x802F
#define GL_MINMAX_SINK_EXT 0x8030
#define GL_TABLE_TOO_LARGE_EXT 0x8031
#define GL_POLYGON_OFFSET_EXT 0x8037
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_YCRCB_422_SGIX 0x81BB
#define GL_YCRCB_444_SGIX 0x81BC
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_IDENTITY_NV 0x862A
#define GL_INVERSE_NV 0x862B
#define GL_TRANSPOSE_NV 0x862C
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_NV 0x8637
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_VERTEX_SHADER_EXT 0x8780
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
#define GL_OP_INDEX_EXT 0x8782
#define GL_OP_NEGATE_EXT 0x8783
#define GL_OP_DOT3_EXT 0x8784
#define GL_OP_DOT4_EXT 0x8785
#define GL_OP_MUL_EXT 0x8786
#define GL_OP_ADD_EXT 0x8787
#define GL_OP_MADD_EXT 0x8788
#define GL_OP_FRAC_EXT 0x8789
#define GL_OP_MAX_EXT 0x878A
#define GL_OP_MIN_EXT 0x878B
#define GL_OP_SET_GE_EXT 0x878C
#define GL_OP_SET_LT_EXT 0x878D
#define GL_OP_CLAMP_EXT 0x878E
#define GL_OP_FLOOR_EXT 0x878F
#define GL_OP_ROUND_EXT 0x8790
#define GL_OP_EXP_BASE_2_EXT 0x8791
#define GL_OP_LOG_BASE_2_EXT 0x8792
#define GL_OP_POWER_EXT 0x8793
#define GL_OP_RECIP_EXT 0x8794
#define GL_OP_RECIP_SQRT_EXT 0x8795
#define GL_OP_SUB_EXT 0x8796
#define GL_OP_CROSS_PRODUCT_EXT 0x8797
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
#define GL_OP_MOV_EXT 0x8799
#define GL_OUTPUT_VERTEX_EXT 0x879A
#define GL_OUTPUT_COLOR0_EXT 0x879B
#define GL_OUTPUT_COLOR1_EXT 0x879C
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
#define GL_OUTPUT_FOG_EXT 0x87BD
#define GL_SCALAR_EXT 0x87BE
#define GL_VECTOR_EXT 0x87BF
#define GL_MATRIX_EXT 0x87C0
#define GL_VARIANT_EXT 0x87C1
#define GL_INVARIANT_EXT 0x87C2
#define GL_LOCAL_CONSTANT_EXT 0x87C3
#define GL_LOCAL_EXT 0x87C4
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
#define GL_X_EXT 0x87D5
#define GL_Y_EXT 0x87D6
#define GL_Z_EXT 0x87D7
#define GL_W_EXT 0x87D8
#define GL_NEGATIVE_X_EXT 0x87D9
#define GL_NEGATIVE_Y_EXT 0x87DA
#define GL_NEGATIVE_Z_EXT 0x87DB
#define GL_NEGATIVE_W_EXT 0x87DC
#define GL_ZERO_EXT 0x87DD
#define GL_ONE_EXT 0x87DE
#define GL_NEGATIVE_ONE_EXT 0x87DF
#define GL_NORMALIZED_RANGE_EXT 0x87E0
#define GL_FULL_RANGE_EXT 0x87E1
#define GL_CURRENT_VERTEX_EXT 0x87E2
#define GL_MVP_MATRIX_EXT 0x87E3
#define GL_VARIANT_VALUE_EXT 0x87E4
#define GL_VARIANT_DATATYPE_EXT 0x87E5
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
#define GL_VARIANT_ARRAY_EXT 0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
#define GL_INVARIANT_VALUE_EXT 0x87EA
#define GL_INVARIANT_DATATYPE_EXT 0x87EB
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_DRAW_PIXELS_APPLE 0x8A0A
#define GL_FENCE_APPLE 0x8A0B
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#define GL_FOG_COORDINATE_EXT 0x8451
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_COVERAGE_MODULATION_TABLE_NV 0x9331
#define GL_DEPTH_SAMPLES_NV 0x932D
#define GL_STENCIL_SAMPLES_NV 0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
#define GL_COVERAGE_MODULATION_NV 0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_YCRCB_SGIX 0x8318
#define GL_YCRCBA_SGIX 0x8319
#define GL_BGR_EXT 0x80E0
#define GL_BGRA_EXT 0x80E1
#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
#define GL_PIXEL_MAG_FILTER_EXT 0x8331
#define GL_PIXEL_MIN_FILTER_EXT 0x8332
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
#define GL_CUBIC_EXT 0x8334
#define GL_AVERAGE_EXT 0x8335
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
#define GL_FRAGMENT_SHADER_ATI 0x8920
#define GL_REG_0_ATI 0x8921
#define GL_REG_1_ATI 0x8922
#define GL_REG_2_ATI 0x8923
#define GL_REG_3_ATI 0x8924
#define GL_REG_4_ATI 0x8925
#define GL_REG_5_ATI 0x8926
#define GL_REG_6_ATI 0x8927
#define GL_REG_7_ATI 0x8928
#define GL_REG_8_ATI 0x8929
#define GL_REG_9_ATI 0x892A
#define GL_REG_10_ATI 0x892B
#define GL_REG_11_ATI 0x892C
#define GL_REG_12_ATI 0x892D
#define GL_REG_13_ATI 0x892E
#define GL_REG_14_ATI 0x892F
#define GL_REG_15_ATI 0x8930
#define GL_REG_16_ATI 0x8931
#define GL_REG_17_ATI 0x8932
#define GL_REG_18_ATI 0x8933
#define GL_REG_19_ATI 0x8934
#define GL_REG_20_ATI 0x8935
#define GL_REG_21_ATI 0x8936
#define GL_REG_22_ATI 0x8937
#define GL_REG_23_ATI 0x8938
#define GL_REG_24_ATI 0x8939
#define GL_REG_25_ATI 0x893A
#define GL_REG_26_ATI 0x893B
#define GL_REG_27_ATI 0x893C
#define GL_REG_28_ATI 0x893D
#define GL_REG_29_ATI 0x893E
#define GL_REG_30_ATI 0x893F
#define GL_REG_31_ATI 0x8940
#define GL_CON_0_ATI 0x8941
#define GL_CON_1_ATI 0x8942
#define GL_CON_2_ATI 0x8943
#define GL_CON_3_ATI 0x8944
#define GL_CON_4_ATI 0x8945
#define GL_CON_5_ATI 0x8946
#define GL_CON_6_ATI 0x8947
#define GL_CON_7_ATI 0x8948
#define GL_CON_8_ATI 0x8949
#define GL_CON_9_ATI 0x894A
#define GL_CON_10_ATI 0x894B
#define GL_CON_11_ATI 0x894C
#define GL_CON_12_ATI 0x894D
#define GL_CON_13_ATI 0x894E
#define GL_CON_14_ATI 0x894F
#define GL_CON_15_ATI 0x8950
#define GL_CON_16_ATI 0x8951
#define GL_CON_17_ATI 0x8952
#define GL_CON_18_ATI 0x8953
#define GL_CON_19_ATI 0x8954
#define GL_CON_20_ATI 0x8955
#define GL_CON_21_ATI 0x8956
#define GL_CON_22_ATI 0x8957
#define GL_CON_23_ATI 0x8958
#define GL_CON_24_ATI 0x8959
#define GL_CON_25_ATI 0x895A
#define GL_CON_26_ATI 0x895B
#define GL_CON_27_ATI 0x895C
#define GL_CON_28_ATI 0x895D
#define GL_CON_29_ATI 0x895E
#define GL_CON_30_ATI 0x895F
#define GL_CON_31_ATI 0x8960
#define GL_MOV_ATI 0x8961
#define GL_ADD_ATI 0x8963
#define GL_MUL_ATI 0x8964
#define GL_SUB_ATI 0x8965
#define GL_DOT3_ATI 0x8966
#define GL_DOT4_ATI 0x8967
#define GL_MAD_ATI 0x8968
#define GL_LERP_ATI 0x8969
#define GL_CND_ATI 0x896A
#define GL_CND0_ATI 0x896B
#define GL_DOT2_ADD_ATI 0x896C
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
#define GL_NUM_PASSES_ATI 0x8970
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
#define GL_SWIZZLE_STR_ATI 0x8976
#define GL_SWIZZLE_STQ_ATI 0x8977
#define GL_SWIZZLE_STR_DR_ATI 0x8978
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
#define GL_SWIZZLE_STRQ_ATI 0x897A
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
#define GL_RED_BIT_ATI 0x00000001
#define GL_GREEN_BIT_ATI 0x00000002
#define GL_BLUE_BIT_ATI 0x00000004
#define GL_2X_BIT_ATI 0x00000001
#define GL_4X_BIT_ATI 0x00000002
#define GL_8X_BIT_ATI 0x00000004
#define GL_HALF_BIT_ATI 0x00000008
#define GL_QUARTER_BIT_ATI 0x00000010
#define GL_EIGHTH_BIT_ATI 0x00000020
#define GL_SATURATE_BIT_ATI 0x00000040
#define GL_COMP_BIT_ATI 0x00000002
#define GL_NEGATE_BIT_ATI 0x00000004
#define GL_BIAS_BIT_ATI 0x00000008
#define GL_RESTART_SUN 0x0001
#define GL_REPLACE_MIDDLE_SUN 0x0002
#define GL_REPLACE_OLDEST_SUN 0x0003
#define GL_TRIANGLE_LIST_SUN 0x81D7
#define GL_REPLACEMENT_CODE_SUN 0x81D8
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
#define GL_R1UI_V3F_SUN 0x85C4
#define GL_R1UI_C4UB_V3F_SUN 0x85C5
#define GL_R1UI_C3F_V3F_SUN 0x85C6
#define GL_R1UI_N3F_V3F_SUN 0x85C7
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
#define GL_R1UI_T2F_V3F_SUN 0x85C9
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
#define GL_DEPTH_STENCIL_EXT 0x84F9
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#define GL_MIRROR_CLAMP_EXT 0x8742
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
#define GL_HALF_APPLE 0x140B
#define GL_RGBA_FLOAT32_APPLE 0x8814
#define GL_RGB_FLOAT32_APPLE 0x8815
#define GL_ALPHA_FLOAT32_APPLE 0x8816
#define GL_INTENSITY_FLOAT32_APPLE 0x8817
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
#define GL_RGBA_FLOAT16_APPLE 0x881A
#define GL_RGB_FLOAT16_APPLE 0x881B
#define GL_ALPHA_FLOAT16_APPLE 0x881C
#define GL_INTENSITY_FLOAT16_APPLE 0x881D
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
#define GL_COLOR_FLOAT_APPLE 0x8A0F
#define GL_ASYNC_MARKER_SGIX 0x8329
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#define GL_PURGED_CONTEXT_RESET_NV 0x92BB
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#define GL_PERFQUERY_WAIT_INTEL 0x83FB
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
#define GL_INCLUSIVE_EXT 0x8F10
#define GL_EXCLUSIVE_EXT 0x8F11
#define GL_WINDOW_RECTANGLE_EXT 0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15
#define GL_HALF_FLOAT_NV 0x140B
#define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
#define GL_MIRROR_CLAMP_ATI 0x8742
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
#define GL_TEXTURE_COMPARE_SGIX 0x819A
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
#define GL_PIXEL_COUNTER_BITS_NV 0x8864
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
#define GL_PIXEL_COUNT_NV 0x8866
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_REDUCE 0x8016
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_HISTOGRAM 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_SINK 0x802D
#define GL_MINMAX 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_COLOR_TABLE 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_CONSTANT_BORDER 0x8151
#define GL_REPLICATE_BORDER 0x8153
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
#define GL_FACTOR_MIN_AMD 0x901C
#define GL_FACTOR_MAX_AMD 0x901D
#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
#define GL_DECODE_EXT 0x8A49
#define GL_SKIP_DECODE_EXT 0x8A4A
#define GL_VBO_FREE_MEMORY_ATI 0x87FB
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
#define GL_ABGR_EXT 0x8000
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
#define GL_ALPHA_SNORM 0x9010
#define GL_LUMINANCE_SNORM 0x9011
#define GL_LUMINANCE_ALPHA_SNORM 0x9012
#define GL_INTENSITY_SNORM 0x9013
#define GL_ALPHA8_SNORM 0x9014
#define GL_LUMINANCE8_SNORM 0x9015
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
#define GL_INTENSITY8_SNORM 0x9017
#define GL_ALPHA16_SNORM 0x9018
#define GL_LUMINANCE16_SNORM 0x9019
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
#define GL_INTENSITY16_SNORM 0x901B
#define GL_RED_SNORM 0x8F90
#define GL_RG_SNORM 0x8F91
#define GL_RGB_SNORM 0x8F92
#define GL_RGBA_SNORM 0x8F93
#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
#define GL_PROGRAM_OBJECT_EXT 0x8B40
#define GL_SHADER_OBJECT_EXT 0x8B48
#define GL_BUFFER_OBJECT_EXT 0x9151
#define GL_QUERY_OBJECT_EXT 0x9153
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#define GL_MULTISAMPLES_NV 0x9371
#define GL_SUPERSAMPLE_SCALE_X_NV 0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373
#define GL_CONFORMANT_NV 0x9374
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
#define GL_LAYOUT_DEFAULT_INTEL 0
#define GL_LAYOUT_LINEAR_INTEL 1
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
#define GL_422_EXT 0x80CC
#define GL_422_REV_EXT 0x80CD
#define GL_422_AVERAGE_EXT 0x80CE
#define GL_422_REV_AVERAGE_EXT 0x80CF
#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_CULL_VERTEX_IBM 103050
#define GL_VERTEX_ARRAY_LIST_IBM 103070
#define GL_NORMAL_ARRAY_LIST_IBM 103071
#define GL_COLOR_ARRAY_LIST_IBM 103072
#define GL_INDEX_ARRAY_LIST_IBM 103073
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_UNSIGNED_INT64_ARB 0x140F
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
#define GL_MIRRORED_REPEAT_ARB 0x8370
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#define GL_IMAGE_1D_EXT 0x904C
#define GL_IMAGE_2D_EXT 0x904D
#define GL_IMAGE_3D_EXT 0x904E
#define GL_IMAGE_2D_RECT_EXT 0x904F
#define GL_IMAGE_CUBE_EXT 0x9050
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_INT_IMAGE_1D_EXT 0x9057
#define GL_INT_IMAGE_2D_EXT 0x9058
#define GL_INT_IMAGE_3D_EXT 0x9059
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
#define GL_PER_STAGE_CONSTANTS_NV 0x8535
#define GL_IR_INSTRUMENT1_SGIX 0x817F
#define GL_RGB9_E5_EXT 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
#define GL_DEPTH_BOUNDS_EXT 0x8891
#define GL_IMAGE_SCALE_X_HP 0x8155
#define GL_IMAGE_SCALE_Y_HP 0x8156
#define GL_IMAGE_TRANSLATE_X_HP 0x8157
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
#define GL_IMAGE_MAG_FILTER_HP 0x815C
#define GL_IMAGE_MIN_FILTER_HP 0x815D
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
#define GL_CUBIC_HP 0x815F
#define GL_AVERAGE_HP 0x8160
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
#define GL_VIDEO_BUFFER_NV 0x9020
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021
#define GL_FIELD_UPPER_NV 0x9022
#define GL_FIELD_LOWER_NV 0x9023
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
#define GL_PARTIAL_SUCCESS_NV 0x902E
#define GL_SUCCESS_NV 0x902F
#define GL_FAILURE_NV 0x9030
#define GL_YCBYCR8_422_NV 0x9031
#define GL_YCBAYCR8A_4224_NV 0x9032
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
#define GL_MATRIX_PALETTE_ARB 0x8840
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
#define GL_TANGENT_ARRAY_EXT 0x8439
#define GL_BINORMAL_ARRAY_EXT 0x843A
#define GL_CURRENT_TANGENT_EXT 0x843B
#define GL_CURRENT_BINORMAL_EXT 0x843C
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
#define GL_MAP1_TANGENT_EXT 0x8444
#define GL_MAP2_TANGENT_EXT 0x8445
#define GL_MAP1_BINORMAL_EXT 0x8446
#define GL_MAP2_BINORMAL_EXT 0x8447
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#define GL_DEPTH_COMPONENT16_ARB 0x81A5
#define GL_DEPTH_COMPONENT24_ARB 0x81A6
#define GL_DEPTH_COMPONENT32_ARB 0x81A7
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#define GL_FILL_RECTANGLE_NV 0x933C
#define GL_BUFFER_OBJECT_APPLE 0x85B3
#define GL_RELEASED_APPLE 0x8A19
#define GL_VOLATILE_APPLE 0x8A1A
#define GL_RETAINED_APPLE 0x8A1B
#define GL_UNDEFINED_APPLE 0x8A1C
#define GL_PURGEABLE_APPLE 0x8A1D
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_RED_MIN_CLAMP_INGR 0x8560
#define GL_GREEN_MIN_CLAMP_INGR 0x8561
#define GL_BLUE_MIN_CLAMP_INGR 0x8562
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
#define GL_RED_MAX_CLAMP_INGR 0x8564
#define GL_GREEN_MAX_CLAMP_INGR 0x8565
#define GL_BLUE_MAX_CLAMP_INGR 0x8566
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
#define GL_COLOR_TABLE_SGI 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#define GL_SCALEBIAS_HINT_SGIX 0x8322
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
#define GL_CLAMP_TO_BORDER_ARB 0x812D
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31_ARB 0x84DF
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195
#define GL_DEFORMATIONS_MASK_SGIX 0x8196
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_OCCLUSION_TEST_HP 0x8165
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_MULTISAMPLE_3DFX 0x86B2
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#define GL_SAMPLES_3DFX 0x86B4
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#define GL_DOT3_RGB_ARB 0x86AE
#define GL_DOT3_RGBA_ARB 0x86AF
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
#define GL_FLOAT_R_NV 0x8880
#define GL_FLOAT_RG_NV 0x8881
#define GL_FLOAT_RGB_NV 0x8882
#define GL_FLOAT_RGBA_NV 0x8883
#define GL_FLOAT_R16_NV 0x8884
#define GL_FLOAT_R32_NV 0x8885
#define GL_FLOAT_RG16_NV 0x8886
#define GL_FLOAT_RG32_NV 0x8887
#define GL_FLOAT_RGB16_NV 0x8888
#define GL_FLOAT_RGB32_NV 0x8889
#define GL_FLOAT_RGBA16_NV 0x888A
#define GL_FLOAT_RGBA32_NV 0x888B
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
#define GL_FLOAT_RGBA_MODE_NV 0x888E
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#define GL_SLICE_ACCUM_SUN 0x85CC
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
#define GL_SINGLE_COLOR_EXT 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F
#define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
#define GL_SPRITE_SGIX 0x8148
#define GL_SPRITE_MODE_SGIX 0x8149
#define GL_SPRITE_AXIS_SGIX 0x814A
#define GL_SPRITE_TRANSLATION_SGIX 0x814B
#define GL_SPRITE_AXIAL_SGIX 0x814C
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
#define GL_MULTISAMPLE_SGIS 0x809D
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
#define GL_SAMPLE_MASK_SGIS 0x80A0
#define GL_1PASS_SGIS 0x80A1
#define GL_2PASS_0_SGIS 0x80A2
#define GL_2PASS_1_SGIS 0x80A3
#define GL_4PASS_0_SGIS 0x80A4
#define GL_4PASS_1_SGIS 0x80A5
#define GL_4PASS_2_SGIS 0x80A6
#define GL_4PASS_3_SGIS 0x80A7
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
#define GL_SAMPLES_SGIS 0x80A9
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
#define GL_SAMPLE_PATTERN_SGIS 0x80AC
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
#define GL_STORAGE_CLIENT_APPLE 0x85B4
#define GL_QUERY_BUFFER_AMD 0x9192
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
#define GL_REGISTER_COMBINERS_NV 0x8522
#define GL_VARIABLE_A_NV 0x8523
#define GL_VARIABLE_B_NV 0x8524
#define GL_VARIABLE_C_NV 0x8525
#define GL_VARIABLE_D_NV 0x8526
#define GL_VARIABLE_E_NV 0x8527
#define GL_VARIABLE_F_NV 0x8528
#define GL_VARIABLE_G_NV 0x8529
#define GL_CONSTANT_COLOR0_NV 0x852A
#define GL_CONSTANT_COLOR1_NV 0x852B
#define GL_PRIMARY_COLOR_NV 0x852C
#define GL_SECONDARY_COLOR_NV 0x852D
#define GL_SPARE0_NV 0x852E
#define GL_SPARE1_NV 0x852F
#define GL_DISCARD_NV 0x8530
#define GL_E_TIMES_F_NV 0x8531
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
#define GL_UNSIGNED_IDENTITY_NV 0x8536
#define GL_UNSIGNED_INVERT_NV 0x8537
#define GL_EXPAND_NORMAL_NV 0x8538
#define GL_EXPAND_NEGATE_NV 0x8539
#define GL_HALF_BIAS_NORMAL_NV 0x853A
#define GL_HALF_BIAS_NEGATE_NV 0x853B
#define GL_SIGNED_IDENTITY_NV 0x853C
#define GL_SIGNED_NEGATE_NV 0x853D
#define GL_SCALE_BY_TWO_NV 0x853E
#define GL_SCALE_BY_FOUR_NV 0x853F
#define GL_SCALE_BY_ONE_HALF_NV 0x8540
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
#define GL_COMBINER_INPUT_NV 0x8542
#define GL_COMBINER_MAPPING_NV 0x8543
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
#define GL_COMBINER_MUX_SUM_NV 0x8547
#define GL_COMBINER_SCALE_NV 0x8548
#define GL_COMBINER_BIAS_NV 0x8549
#define GL_COMBINER_AB_OUTPUT_NV 0x854A
#define GL_COMBINER_CD_OUTPUT_NV 0x854B
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
#define GL_COLOR_SUM_CLAMP_NV 0x854F
#define GL_COMBINER0_NV 0x8550
#define GL_COMBINER1_NV 0x8551
#define GL_COMBINER2_NV 0x8552
#define GL_COMBINER3_NV 0x8553
#define GL_COMBINER4_NV 0x8554
#define GL_COMBINER5_NV 0x8555
#define GL_COMBINER6_NV 0x8556
#define GL_COMBINER7_NV 0x8557
#define GL_FOG 0x0B60
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DOT3_RGB_EXT 0x8740
#define GL_DOT3_RGBA_EXT 0x8741
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
#define GL_COLOR_MATRIX_SGI 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
#define GL_CULL_VERTEX_EXT 0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
#define GL_SRGB_EXT 0x8C40
#define GL_SRGB8_EXT 0x8C41
#define GL_SRGB_ALPHA_EXT 0x8C42
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#define GL_SLUMINANCE_EXT 0x8C46
#define GL_SLUMINANCE8_EXT 0x8C47
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#define GL_PACK_ROW_BYTES_APPLE 0x8A15
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
#define GL_NORMAL_MAP_NV 0x8511
#define GL_REFLECTION_MAP_NV 0x8512
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#define GL_RGBA32F_ARB 0x8814
#define GL_RGB32F_ARB 0x8815
#define GL_ALPHA32F_ARB 0x8816
#define GL_INTENSITY32F_ARB 0x8817
#define GL_LUMINANCE32F_ARB 0x8818
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#define GL_RGBA16F_ARB 0x881A
#define GL_RGB16F_ARB 0x881B
#define GL_ALPHA16F_ARB 0x881C
#define GL_INTENSITY16F_ARB 0x881D
#define GL_LUMINANCE16F_ARB 0x881E
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
#define GL_LINEAR_DETAIL_SGIS 0x8097
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#define GL_RGBA_FLOAT32_ATI 0x8814
#define GL_RGB_FLOAT32_ATI 0x8815
#define GL_ALPHA_FLOAT32_ATI 0x8816
#define GL_INTENSITY_FLOAT32_ATI 0x8817
#define GL_LUMINANCE_FLOAT32_ATI 0x8818
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
#define GL_RGBA_FLOAT16_ATI 0x881A
#define GL_RGB_FLOAT16_ATI 0x881B
#define GL_ALPHA_FLOAT16_ATI 0x881C
#define GL_INTENSITY_FLOAT16_ATI 0x881D
#define GL_LUMINANCE_FLOAT16_ATI 0x881E
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#define GL_SHADER_INCLUDE_ARB 0x8DAE
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA
#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
#define GL_PHONG_WIN 0x80EA
#define GL_PHONG_HINT_WIN 0x80EB
#define GL_PATH_FORMAT_SVG_NV 0x9070
#define GL_PATH_FORMAT_PS_NV 0x9071
#define GL_STANDARD_FONT_NAME_NV 0x9072
#define GL_SYSTEM_FONT_NAME_NV 0x9073
#define GL_FILE_NAME_NV 0x9074
#define GL_PATH_STROKE_WIDTH_NV 0x9075
#define GL_PATH_END_CAPS_NV 0x9076
#define GL_PATH_INITIAL_END_CAP_NV 0x9077
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#define GL_PATH_JOIN_STYLE_NV 0x9079
#define GL_PATH_MITER_LIMIT_NV 0x907A
#define GL_PATH_DASH_CAPS_NV 0x907B
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#define GL_PATH_DASH_OFFSET_NV 0x907E
#define GL_PATH_CLIENT_LENGTH_NV 0x907F
#define GL_PATH_FILL_MODE_NV 0x9080
#define GL_PATH_FILL_MASK_NV 0x9081
#define GL_PATH_FILL_COVER_MODE_NV 0x9082
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#define GL_PATH_STROKE_MASK_NV 0x9084
#define GL_COUNT_UP_NV 0x9088
#define GL_COUNT_DOWN_NV 0x9089
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#define GL_CONVEX_HULL_NV 0x908B
#define GL_BOUNDING_BOX_NV 0x908D
#define GL_TRANSLATE_X_NV 0x908E
#define GL_TRANSLATE_Y_NV 0x908F
#define GL_TRANSLATE_2D_NV 0x9090
#define GL_TRANSLATE_3D_NV 0x9091
#define GL_AFFINE_2D_NV 0x9092
#define GL_AFFINE_3D_NV 0x9094
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#define GL_UTF8_NV 0x909A
#define GL_UTF16_NV 0x909B
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#define GL_PATH_COMMAND_COUNT_NV 0x909D
#define GL_PATH_COORD_COUNT_NV 0x909E
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#define GL_SQUARE_NV 0x90A3
#define GL_ROUND_NV 0x90A4
#define GL_TRIANGULAR_NV 0x90A5
#define GL_BEVEL_NV 0x90A6
#define GL_MITER_REVERT_NV 0x90A7
#define GL_MITER_TRUNCATE_NV 0x90A8
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#define GL_USE_MISSING_GLYPH_NV 0x90AA
#define GL_PATH_ERROR_POSITION_NV 0x90AB
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#define GL_ADJACENT_PAIRS_NV 0x90AE
#define GL_FIRST_TO_REST_NV 0x90AF
#define GL_PATH_GEN_MODE_NV 0x90B0
#define GL_PATH_GEN_COEFF_NV 0x90B1
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#define GL_PATH_STENCIL_FUNC_NV 0x90B7
#define GL_PATH_STENCIL_REF_NV 0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#define GL_MOVE_TO_RESETS_NV 0x90B5
#define GL_MOVE_TO_CONTINUES_NV 0x90B6
#define GL_CLOSE_PATH_NV 0x00
#define GL_MOVE_TO_NV 0x02
#define GL_RELATIVE_MOVE_TO_NV 0x03
#define GL_LINE_TO_NV 0x04
#define GL_RELATIVE_LINE_TO_NV 0x05
#define GL_HORIZONTAL_LINE_TO_NV 0x06
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#define GL_VERTICAL_LINE_TO_NV 0x08
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#define GL_QUADRATIC_CURVE_TO_NV 0x0A
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#define GL_CUBIC_CURVE_TO_NV 0x0C
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#define GL_SMALL_CCW_ARC_TO_NV 0x12
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#define GL_SMALL_CW_ARC_TO_NV 0x14
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#define GL_LARGE_CCW_ARC_TO_NV 0x16
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#define GL_LARGE_CW_ARC_TO_NV 0x18
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#define GL_RESTART_PATH_NV 0xF0
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#define GL_RECT_NV 0xF6
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#define GL_ARC_TO_NV 0xFE
#define GL_RELATIVE_ARC_TO_NV 0xFF
#define GL_BOLD_BIT_NV 0x01
#define GL_ITALIC_BIT_NV 0x02
#define GL_GLYPH_WIDTH_BIT_NV 0x01
#define GL_GLYPH_HEIGHT_BIT_NV 0x02
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
#define GL_FONT_ASCENDER_BIT_NV 0x00200000
#define GL_FONT_DESCENDER_BIT_NV 0x00400000
#define GL_FONT_HEIGHT_BIT_NV 0x00800000
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
#define GL_ROUNDED_RECT_NV 0xE8
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
#define GL_ROUNDED_RECT2_NV 0xEA
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
#define GL_ROUNDED_RECT4_NV 0xEC
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
#define GL_ROUNDED_RECT8_NV 0xEE
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
#define GL_RELATIVE_RECT_NV 0xF7
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
#define GL_FONT_UNAVAILABLE_NV 0x936A
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B
#define GL_CONIC_CURVE_TO_NV 0x1A
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
#define GL_STANDARD_FONT_FORMAT_NV 0x936C
#define GL_2_BYTES_NV 0x1407
#define GL_3_BYTES_NV 0x1408
#define GL_4_BYTES_NV 0x1409
#define GL_EYE_LINEAR_NV 0x2400
#define GL_OBJECT_LINEAR_NV 0x2401
#define GL_CONSTANT_NV 0x8576
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#define GL_PRIMARY_COLOR 0x8577
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#define GL_PATH_PROJECTION_NV 0x1701
#define GL_PATH_MODELVIEW_NV 0x1700
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#define GL_FRAGMENT_INPUT_NV 0x936D
#define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
#define GL_VERTEX_STREAM0_ATI 0x876C
#define GL_VERTEX_STREAM1_ATI 0x876D
#define GL_VERTEX_STREAM2_ATI 0x876E
#define GL_VERTEX_STREAM3_ATI 0x876F
#define GL_VERTEX_STREAM4_ATI 0x8770
#define GL_VERTEX_STREAM5_ATI 0x8771
#define GL_VERTEX_STREAM6_ATI 0x8772
#define GL_VERTEX_STREAM7_ATI 0x8773
#define GL_VERTEX_SOURCE_ATI 0x8774
#define GL_RGB_422_APPLE 0x8A1F
#define GL_RGB_RAW_422_APPLE 0x8A51
#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
#define GL_INT64_ARB 0x140E
#define GL_INT64_VEC2_ARB 0x8FE9
#define GL_INT64_VEC3_ARB 0x8FEA
#define GL_INT64_VEC4_ARB 0x8FEB
#define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7
#define GL_SURFACE_STATE_NV 0x86EB
#define GL_SURFACE_REGISTERED_NV 0x86FD
#define GL_SURFACE_MAPPED_NV 0x8700
#define GL_WRITE_DISCARD_NV 0x88BE
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_SRGB_DECODE_ARB 0x8299
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_FOG_FUNC_SGIS 0x812A
#define GL_FOG_FUNC_POINTS_SGIS 0x812B
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
#define GL_SYNC_X11_FENCE_EXT 0x90E1
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_SAMPLE_LOCATION_NV 0x8E50
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
#define GL_FIXED_OES 0x140C
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
#define GL_TEXTURE_4D_SGIS 0x8134
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135
#define GL_TEXTURE_4DSIZE_SGIS 0x8136
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MULTISAMPLE_EXT 0x809D
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
#define GL_SAMPLE_MASK_EXT 0x80A0
#define GL_1PASS_EXT 0x80A1
#define GL_2PASS_0_EXT 0x80A2
#define GL_2PASS_1_EXT 0x80A3
#define GL_4PASS_0_EXT 0x80A4
#define GL_4PASS_1_EXT 0x80A5
#define GL_4PASS_2_EXT 0x80A6
#define GL_4PASS_3_EXT 0x80A7
#define GL_SAMPLE_BUFFERS_EXT 0x80A8
#define GL_SAMPLES_EXT 0x80A9
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
#define GL_SAMPLE_PATTERN_EXT 0x80AC
#define GL_MULTISAMPLE_BIT_EXT 0x20000000
#define GL_COLOR_SUM_EXT 0x8458
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
#define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366
#define GL_WEIGHTED_AVERAGE_ARB 0x9367
#define GL_STATIC_ATI 0x8760
#define GL_DYNAMIC_ATI 0x8761
#define GL_PRESERVE_ATI 0x8762
#define GL_DISCARD_ATI 0x8763
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_COMPLETION_STATUS_ARB 0x91B1
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
#define GL_TEXTURE_SPARSE_ARB 0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
#define GL_EYE_POINT_SGIS 0x81F4
#define GL_OBJECT_POINT_SGIS 0x81F5
#define GL_EYE_LINE_SGIS 0x81F6
#define GL_OBJECT_LINE_SGIS 0x81F7
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_SAMPLE_LOCATION_ARB 0x8E50
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
#define GL_SPARSE_STORAGE_BIT_ARB 0x0400
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_ALPHA_MIN_SGIX 0x8320
#define GL_ALPHA_MAX_SGIX 0x8321
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
#ifndef GL_SGIX_pixel_tiles
#define GL_SGIX_pixel_tiles 1
GLAPI int GLAD_GL_SGIX_pixel_tiles;
#endif
#ifndef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 1
GLAPI int GLAD_GL_EXT_post_depth_coverage;
#endif
#ifndef GL_APPLE_element_array
#define GL_APPLE_element_array 1
GLAPI int GLAD_GL_APPLE_element_array;
typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC)(GLenum type, const void* pointer);
GLAPI PFNGLELEMENTPOINTERAPPLEPROC glad_glElementPointerAPPLE;
GLAPI PFNGLELEMENTPOINTERAPPLEPROC glad_debug_glElementPointerAPPLE;
#define glElementPointerAPPLE glad_debug_glElementPointerAPPLE
typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC)(GLenum mode, GLint first, GLsizei count);
GLAPI PFNGLDRAWELEMENTARRAYAPPLEPROC glad_glDrawElementArrayAPPLE;
GLAPI PFNGLDRAWELEMENTARRAYAPPLEPROC glad_debug_glDrawElementArrayAPPLE;
#define glDrawElementArrayAPPLE glad_debug_glDrawElementArrayAPPLE
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
GLAPI PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glad_glDrawRangeElementArrayAPPLE;
GLAPI PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glad_debug_glDrawRangeElementArrayAPPLE;
#define glDrawRangeElementArrayAPPLE glad_debug_glDrawRangeElementArrayAPPLE
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount);
GLAPI PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glad_glMultiDrawElementArrayAPPLE;
GLAPI PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glad_debug_glMultiDrawElementArrayAPPLE;
#define glMultiDrawElementArrayAPPLE glad_debug_glMultiDrawElementArrayAPPLE
typedef void (APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount);
GLAPI PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glad_glMultiDrawRangeElementArrayAPPLE;
GLAPI PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glad_debug_glMultiDrawRangeElementArrayAPPLE;
#define glMultiDrawRangeElementArrayAPPLE glad_debug_glMultiDrawRangeElementArrayAPPLE
#endif
#ifndef GL_AMD_multi_draw_indirect
#define GL_AMD_multi_draw_indirect 1
GLAPI int GLAD_GL_AMD_multi_draw_indirect;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)(GLenum mode, const void* indirect, GLsizei primcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glad_glMultiDrawArraysIndirectAMD;
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glad_debug_glMultiDrawArraysIndirectAMD;
#define glMultiDrawArraysIndirectAMD glad_debug_glMultiDrawArraysIndirectAMD
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei primcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glad_glMultiDrawElementsIndirectAMD;
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glad_debug_glMultiDrawElementsIndirectAMD;
#define glMultiDrawElementsIndirectAMD glad_debug_glMultiDrawElementsIndirectAMD
#endif
#ifndef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract 1
GLAPI int GLAD_GL_EXT_blend_subtract;
#endif
#ifndef GL_SGIX_tag_sample_buffer
#define GL_SGIX_tag_sample_buffer 1
GLAPI int GLAD_GL_SGIX_tag_sample_buffer;
typedef void (APIENTRYP PFNGLTAGSAMPLEBUFFERSGIXPROC)();
GLAPI PFNGLTAGSAMPLEBUFFERSGIXPROC glad_glTagSampleBufferSGIX;
GLAPI PFNGLTAGSAMPLEBUFFERSGIXPROC glad_debug_glTagSampleBufferSGIX;
#define glTagSampleBufferSGIX glad_debug_glTagSampleBufferSGIX
#endif
#ifndef GL_NV_point_sprite
#define GL_NV_point_sprite 1
GLAPI int GLAD_GL_NV_point_sprite;
typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC)(GLenum pname, GLint param);
GLAPI PFNGLPOINTPARAMETERINVPROC glad_glPointParameteriNV;
GLAPI PFNGLPOINTPARAMETERINVPROC glad_debug_glPointParameteriNV;
#define glPointParameteriNV glad_debug_glPointParameteriNV
typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC)(GLenum pname, const GLint* params);
GLAPI PFNGLPOINTPARAMETERIVNVPROC glad_glPointParameterivNV;
GLAPI PFNGLPOINTPARAMETERIVNVPROC glad_debug_glPointParameterivNV;
#define glPointParameterivNV glad_debug_glPointParameterivNV
#endif
#ifndef GL_IBM_texture_mirrored_repeat
#define GL_IBM_texture_mirrored_repeat 1
GLAPI int GLAD_GL_IBM_texture_mirrored_repeat;
#endif
#ifndef GL_APPLE_transform_hint
#define GL_APPLE_transform_hint 1
GLAPI int GLAD_GL_APPLE_transform_hint;
#endif
#ifndef GL_ATI_separate_stencil
#define GL_ATI_separate_stencil 1
GLAPI int GLAD_GL_ATI_separate_stencil;
typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GLAPI PFNGLSTENCILOPSEPARATEATIPROC glad_glStencilOpSeparateATI;
GLAPI PFNGLSTENCILOPSEPARATEATIPROC glad_debug_glStencilOpSeparateATI;
#define glStencilOpSeparateATI glad_debug_glStencilOpSeparateATI
typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
GLAPI PFNGLSTENCILFUNCSEPARATEATIPROC glad_glStencilFuncSeparateATI;
GLAPI PFNGLSTENCILFUNCSEPARATEATIPROC glad_debug_glStencilFuncSeparateATI;
#define glStencilFuncSeparateATI glad_debug_glStencilFuncSeparateATI
#endif
#ifndef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64 1
GLAPI int GLAD_GL_NV_shader_atomic_int64;
#endif
#ifndef GL_NV_vertex_program2_option
#define GL_NV_vertex_program2_option 1
GLAPI int GLAD_GL_NV_vertex_program2_option;
#endif
#ifndef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object 1
GLAPI int GLAD_GL_EXT_texture_buffer_object;
typedef void (APIENTRYP PFNGLTEXBUFFEREXTPROC)(GLenum target, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXBUFFEREXTPROC glad_glTexBufferEXT;
GLAPI PFNGLTEXBUFFEREXTPROC glad_debug_glTexBufferEXT;
#define glTexBufferEXT glad_debug_glTexBufferEXT
#endif
#ifndef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend 1
GLAPI int GLAD_GL_ARB_vertex_blend;
typedef void (APIENTRYP PFNGLWEIGHTBVARBPROC)(GLint size, const GLbyte* weights);
GLAPI PFNGLWEIGHTBVARBPROC glad_glWeightbvARB;
GLAPI PFNGLWEIGHTBVARBPROC glad_debug_glWeightbvARB;
#define glWeightbvARB glad_debug_glWeightbvARB
typedef void (APIENTRYP PFNGLWEIGHTSVARBPROC)(GLint size, const GLshort* weights);
GLAPI PFNGLWEIGHTSVARBPROC glad_glWeightsvARB;
GLAPI PFNGLWEIGHTSVARBPROC glad_debug_glWeightsvARB;
#define glWeightsvARB glad_debug_glWeightsvARB
typedef void (APIENTRYP PFNGLWEIGHTIVARBPROC)(GLint size, const GLint* weights);
GLAPI PFNGLWEIGHTIVARBPROC glad_glWeightivARB;
GLAPI PFNGLWEIGHTIVARBPROC glad_debug_glWeightivARB;
#define glWeightivARB glad_debug_glWeightivARB
typedef void (APIENTRYP PFNGLWEIGHTFVARBPROC)(GLint size, const GLfloat* weights);
GLAPI PFNGLWEIGHTFVARBPROC glad_glWeightfvARB;
GLAPI PFNGLWEIGHTFVARBPROC glad_debug_glWeightfvARB;
#define glWeightfvARB glad_debug_glWeightfvARB
typedef void (APIENTRYP PFNGLWEIGHTDVARBPROC)(GLint size, const GLdouble* weights);
GLAPI PFNGLWEIGHTDVARBPROC glad_glWeightdvARB;
GLAPI PFNGLWEIGHTDVARBPROC glad_debug_glWeightdvARB;
#define glWeightdvARB glad_debug_glWeightdvARB
typedef void (APIENTRYP PFNGLWEIGHTUBVARBPROC)(GLint size, const GLubyte* weights);
GLAPI PFNGLWEIGHTUBVARBPROC glad_glWeightubvARB;
GLAPI PFNGLWEIGHTUBVARBPROC glad_debug_glWeightubvARB;
#define glWeightubvARB glad_debug_glWeightubvARB
typedef void (APIENTRYP PFNGLWEIGHTUSVARBPROC)(GLint size, const GLushort* weights);
GLAPI PFNGLWEIGHTUSVARBPROC glad_glWeightusvARB;
GLAPI PFNGLWEIGHTUSVARBPROC glad_debug_glWeightusvARB;
#define glWeightusvARB glad_debug_glWeightusvARB
typedef void (APIENTRYP PFNGLWEIGHTUIVARBPROC)(GLint size, const GLuint* weights);
GLAPI PFNGLWEIGHTUIVARBPROC glad_glWeightuivARB;
GLAPI PFNGLWEIGHTUIVARBPROC glad_debug_glWeightuivARB;
#define glWeightuivARB glad_debug_glWeightuivARB
typedef void (APIENTRYP PFNGLWEIGHTPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLWEIGHTPOINTERARBPROC glad_glWeightPointerARB;
GLAPI PFNGLWEIGHTPOINTERARBPROC glad_debug_glWeightPointerARB;
#define glWeightPointerARB glad_debug_glWeightPointerARB
typedef void (APIENTRYP PFNGLVERTEXBLENDARBPROC)(GLint count);
GLAPI PFNGLVERTEXBLENDARBPROC glad_glVertexBlendARB;
GLAPI PFNGLVERTEXBLENDARBPROC glad_debug_glVertexBlendARB;
#define glVertexBlendARB glad_debug_glVertexBlendARB
#endif
#ifndef GL_OVR_multiview
#define GL_OVR_multiview 1
GLAPI int GLAD_GL_OVR_multiview;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
GLAPI PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC glad_glFramebufferTextureMultiviewOVR;
GLAPI PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC glad_debug_glFramebufferTextureMultiviewOVR;
#define glFramebufferTextureMultiviewOVR glad_debug_glFramebufferTextureMultiviewOVR
#endif
#ifndef GL_NV_vertex_program2
#define GL_NV_vertex_program2 1
GLAPI int GLAD_GL_NV_vertex_program2;
#endif
#ifndef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 1
GLAPI int GLAD_GL_ARB_program_interface_query;
typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
GLAPI PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv;
GLAPI PFNGLGETPROGRAMINTERFACEIVPROC glad_debug_glGetProgramInterfaceiv;
#define glGetProgramInterfaceiv glad_debug_glGetProgramInterfaceiv
typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar* name);
GLAPI PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex;
GLAPI PFNGLGETPROGRAMRESOURCEINDEXPROC glad_debug_glGetProgramResourceIndex;
#define glGetProgramResourceIndex glad_debug_glGetProgramResourceIndex
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
GLAPI PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName;
GLAPI PFNGLGETPROGRAMRESOURCENAMEPROC glad_debug_glGetProgramResourceName;
#define glGetProgramResourceName glad_debug_glGetProgramResourceName
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params);
GLAPI PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv;
GLAPI PFNGLGETPROGRAMRESOURCEIVPROC glad_debug_glGetProgramResourceiv;
#define glGetProgramResourceiv glad_debug_glGetProgramResourceiv
typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar* name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation;
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_debug_glGetProgramResourceLocation;
#define glGetProgramResourceLocation glad_debug_glGetProgramResourceLocation
typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar* name);
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex;
GLAPI PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_debug_glGetProgramResourceLocationIndex;
#define glGetProgramResourceLocationIndex glad_debug_glGetProgramResourceLocationIndex
#endif
#ifndef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute 1
GLAPI int GLAD_GL_EXT_misc_attribute;
#endif
#ifndef GL_NV_multisample_coverage
#define GL_NV_multisample_coverage 1
GLAPI int GLAD_GL_NV_multisample_coverage;
#endif
#ifndef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 1
GLAPI int GLAD_GL_ARB_shading_language_packing;
#endif
#ifndef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map 1
GLAPI int GLAD_GL_EXT_texture_cube_map;
#endif
#ifndef GL_NV_viewport_array2
#define GL_NV_viewport_array2 1
GLAPI int GLAD_GL_NV_viewport_array2;
#endif
#ifndef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 1
GLAPI int GLAD_GL_ARB_texture_stencil8;
#endif
#ifndef GL_EXT_index_func
#define GL_EXT_index_func 1
GLAPI int GLAD_GL_EXT_index_func;
typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC)(GLenum func, GLclampf ref);
GLAPI PFNGLINDEXFUNCEXTPROC glad_glIndexFuncEXT;
GLAPI PFNGLINDEXFUNCEXTPROC glad_debug_glIndexFuncEXT;
#define glIndexFuncEXT glad_debug_glIndexFuncEXT
#endif
#ifndef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture 1
GLAPI int GLAD_GL_OES_compressed_paletted_texture;
#endif
#ifndef GL_NV_depth_clamp
#define GL_NV_depth_clamp 1
GLAPI int GLAD_GL_NV_depth_clamp;
#endif
#ifndef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load 1
GLAPI int GLAD_GL_NV_shader_buffer_load;
typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC)(GLenum target, GLenum access);
GLAPI PFNGLMAKEBUFFERRESIDENTNVPROC glad_glMakeBufferResidentNV;
GLAPI PFNGLMAKEBUFFERRESIDENTNVPROC glad_debug_glMakeBufferResidentNV;
#define glMakeBufferResidentNV glad_debug_glMakeBufferResidentNV
typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC)(GLenum target);
GLAPI PFNGLMAKEBUFFERNONRESIDENTNVPROC glad_glMakeBufferNonResidentNV;
GLAPI PFNGLMAKEBUFFERNONRESIDENTNVPROC glad_debug_glMakeBufferNonResidentNV;
#define glMakeBufferNonResidentNV glad_debug_glMakeBufferNonResidentNV
typedef GLboolean (APIENTRYP PFNGLISBUFFERRESIDENTNVPROC)(GLenum target);
GLAPI PFNGLISBUFFERRESIDENTNVPROC glad_glIsBufferResidentNV;
GLAPI PFNGLISBUFFERRESIDENTNVPROC glad_debug_glIsBufferResidentNV;
#define glIsBufferResidentNV glad_debug_glIsBufferResidentNV
typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)(GLuint buffer, GLenum access);
GLAPI PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glad_glMakeNamedBufferResidentNV;
GLAPI PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glad_debug_glMakeNamedBufferResidentNV;
#define glMakeNamedBufferResidentNV glad_debug_glMakeNamedBufferResidentNV
typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)(GLuint buffer);
GLAPI PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glad_glMakeNamedBufferNonResidentNV;
GLAPI PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glad_debug_glMakeNamedBufferNonResidentNV;
#define glMakeNamedBufferNonResidentNV glad_debug_glMakeNamedBufferNonResidentNV
typedef GLboolean (APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC)(GLuint buffer);
GLAPI PFNGLISNAMEDBUFFERRESIDENTNVPROC glad_glIsNamedBufferResidentNV;
GLAPI PFNGLISNAMEDBUFFERRESIDENTNVPROC glad_debug_glIsNamedBufferResidentNV;
#define glIsNamedBufferResidentNV glad_debug_glIsNamedBufferResidentNV
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC)(GLenum target, GLenum pname, GLuint64EXT* params);
GLAPI PFNGLGETBUFFERPARAMETERUI64VNVPROC glad_glGetBufferParameterui64vNV;
GLAPI PFNGLGETBUFFERPARAMETERUI64VNVPROC glad_debug_glGetBufferParameterui64vNV;
#define glGetBufferParameterui64vNV glad_debug_glGetBufferParameterui64vNV
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)(GLuint buffer, GLenum pname, GLuint64EXT* params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glad_glGetNamedBufferParameterui64vNV;
GLAPI PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glad_debug_glGetNamedBufferParameterui64vNV;
#define glGetNamedBufferParameterui64vNV glad_debug_glGetNamedBufferParameterui64vNV
typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC)(GLenum value, GLuint64EXT* result);
GLAPI PFNGLGETINTEGERUI64VNVPROC glad_glGetIntegerui64vNV;
GLAPI PFNGLGETINTEGERUI64VNVPROC glad_debug_glGetIntegerui64vNV;
#define glGetIntegerui64vNV glad_debug_glGetIntegerui64vNV
typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC)(GLint location, GLuint64EXT value);
GLAPI PFNGLUNIFORMUI64NVPROC glad_glUniformui64NV;
GLAPI PFNGLUNIFORMUI64NVPROC glad_debug_glUniformui64NV;
#define glUniformui64NV glad_debug_glUniformui64NV
typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLUNIFORMUI64VNVPROC glad_glUniformui64vNV;
GLAPI PFNGLUNIFORMUI64VNVPROC glad_debug_glUniformui64vNV;
#define glUniformui64vNV glad_debug_glUniformui64vNV
typedef void (APIENTRYP PFNGLGETUNIFORMUI64VNVPROC)(GLuint program, GLint location, GLuint64EXT* params);
GLAPI PFNGLGETUNIFORMUI64VNVPROC glad_glGetUniformui64vNV;
GLAPI PFNGLGETUNIFORMUI64VNVPROC glad_debug_glGetUniformui64vNV;
#define glGetUniformui64vNV glad_debug_glGetUniformui64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC)(GLuint program, GLint location, GLuint64EXT value);
GLAPI PFNGLPROGRAMUNIFORMUI64NVPROC glad_glProgramUniformui64NV;
GLAPI PFNGLPROGRAMUNIFORMUI64NVPROC glad_debug_glProgramUniformui64NV;
#define glProgramUniformui64NV glad_debug_glProgramUniformui64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLPROGRAMUNIFORMUI64VNVPROC glad_glProgramUniformui64vNV;
GLAPI PFNGLPROGRAMUNIFORMUI64VNVPROC glad_debug_glProgramUniformui64vNV;
#define glProgramUniformui64vNV glad_debug_glProgramUniformui64vNV
#endif
#ifndef GL_EXT_color_subtable
#define GL_EXT_color_subtable 1
GLAPI int GLAD_GL_EXT_color_subtable;
typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCOLORSUBTABLEEXTPROC glad_glColorSubTableEXT;
GLAPI PFNGLCOLORSUBTABLEEXTPROC glad_debug_glColorSubTableEXT;
#define glColorSubTableEXT glad_debug_glColorSubTableEXT
typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYCOLORSUBTABLEEXTPROC glad_glCopyColorSubTableEXT;
GLAPI PFNGLCOPYCOLORSUBTABLEEXTPROC glad_debug_glCopyColorSubTableEXT;
#define glCopyColorSubTableEXT glad_debug_glCopyColorSubTableEXT
#endif
#ifndef GL_SUNX_constant_data
#define GL_SUNX_constant_data 1
GLAPI int GLAD_GL_SUNX_constant_data;
typedef void (APIENTRYP PFNGLFINISHTEXTURESUNXPROC)();
GLAPI PFNGLFINISHTEXTURESUNXPROC glad_glFinishTextureSUNX;
GLAPI PFNGLFINISHTEXTURESUNXPROC glad_debug_glFinishTextureSUNX;
#define glFinishTextureSUNX glad_debug_glFinishTextureSUNX
#endif
#ifndef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 1
GLAPI int GLAD_GL_EXT_texture_compression_s3tc;
#endif
#ifndef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays 1
GLAPI int GLAD_GL_EXT_multi_draw_arrays;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount);
GLAPI PFNGLMULTIDRAWARRAYSEXTPROC glad_glMultiDrawArraysEXT;
GLAPI PFNGLMULTIDRAWARRAYSEXTPROC glad_debug_glMultiDrawArraysEXT;
#define glMultiDrawArraysEXT glad_debug_glMultiDrawArraysEXT
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC)(GLenum mode, const GLsizei* count, GLenum type, const void** indices, GLsizei primcount);
GLAPI PFNGLMULTIDRAWELEMENTSEXTPROC glad_glMultiDrawElementsEXT;
GLAPI PFNGLMULTIDRAWELEMENTSEXTPROC glad_debug_glMultiDrawElementsEXT;
#define glMultiDrawElementsEXT glad_debug_glMultiDrawElementsEXT
#endif
#ifndef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 1
GLAPI int GLAD_GL_ARB_shader_atomic_counters;
typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params);
GLAPI PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv;
GLAPI PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_debug_glGetActiveAtomicCounterBufferiv;
#define glGetActiveAtomicCounterBufferiv glad_debug_glGetActiveAtomicCounterBufferiv
#endif
#ifndef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 1
GLAPI int GLAD_GL_ARB_arrays_of_arrays;
#endif
#ifndef GL_NV_conditional_render
#define GL_NV_conditional_render 1
GLAPI int GLAD_GL_NV_conditional_render;
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC)(GLuint id, GLenum mode);
GLAPI PFNGLBEGINCONDITIONALRENDERNVPROC glad_glBeginConditionalRenderNV;
GLAPI PFNGLBEGINCONDITIONALRENDERNVPROC glad_debug_glBeginConditionalRenderNV;
#define glBeginConditionalRenderNV glad_debug_glBeginConditionalRenderNV
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC)();
GLAPI PFNGLENDCONDITIONALRENDERNVPROC glad_glEndConditionalRenderNV;
GLAPI PFNGLENDCONDITIONALRENDERNVPROC glad_debug_glEndConditionalRenderNV;
#define glEndConditionalRenderNV glad_debug_glEndConditionalRenderNV
#endif
#ifndef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine 1
GLAPI int GLAD_GL_EXT_texture_env_combine;
#endif
#ifndef GL_NV_fog_distance
#define GL_NV_fog_distance 1
GLAPI int GLAD_GL_NV_fog_distance;
#endif
#ifndef GL_SGIX_async_histogram
#define GL_SGIX_async_histogram 1
GLAPI int GLAD_GL_SGIX_async_histogram;
#endif
#ifndef GL_MESA_resize_buffers
#define GL_MESA_resize_buffers 1
GLAPI int GLAD_GL_MESA_resize_buffers;
typedef void (APIENTRYP PFNGLRESIZEBUFFERSMESAPROC)();
GLAPI PFNGLRESIZEBUFFERSMESAPROC glad_glResizeBuffersMESA;
GLAPI PFNGLRESIZEBUFFERSMESAPROC glad_debug_glResizeBuffersMESA;
#define glResizeBuffersMESA glad_debug_glResizeBuffersMESA
#endif
#ifndef GL_NV_light_max_exponent
#define GL_NV_light_max_exponent 1
GLAPI int GLAD_GL_NV_light_max_exponent;
#endif
#ifndef GL_NV_texture_env_combine4
#define GL_NV_texture_env_combine4 1
GLAPI int GLAD_GL_NV_texture_env_combine4;
#endif
#ifndef GL_ARB_texture_view
#define GL_ARB_texture_view 1
GLAPI int GLAD_GL_ARB_texture_view;
typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GLAPI PFNGLTEXTUREVIEWPROC glad_glTextureView;
GLAPI PFNGLTEXTUREVIEWPROC glad_debug_glTextureView;
#define glTextureView glad_debug_glTextureView
#endif
#ifndef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine 1
GLAPI int GLAD_GL_ARB_texture_env_combine;
#endif
#ifndef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 1
GLAPI int GLAD_GL_ARB_map_buffer_range;
#endif
#ifndef GL_EXT_convolution
#define GL_EXT_convolution 1
GLAPI int GLAD_GL_EXT_convolution;
typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image);
GLAPI PFNGLCONVOLUTIONFILTER1DEXTPROC glad_glConvolutionFilter1DEXT;
GLAPI PFNGLCONVOLUTIONFILTER1DEXTPROC glad_debug_glConvolutionFilter1DEXT;
#define glConvolutionFilter1DEXT glad_debug_glConvolutionFilter1DEXT
typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image);
GLAPI PFNGLCONVOLUTIONFILTER2DEXTPROC glad_glConvolutionFilter2DEXT;
GLAPI PFNGLCONVOLUTIONFILTER2DEXTPROC glad_debug_glConvolutionFilter2DEXT;
#define glConvolutionFilter2DEXT glad_debug_glConvolutionFilter2DEXT
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat params);
GLAPI PFNGLCONVOLUTIONPARAMETERFEXTPROC glad_glConvolutionParameterfEXT;
GLAPI PFNGLCONVOLUTIONPARAMETERFEXTPROC glad_debug_glConvolutionParameterfEXT;
#define glConvolutionParameterfEXT glad_debug_glConvolutionParameterfEXT
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLCONVOLUTIONPARAMETERFVEXTPROC glad_glConvolutionParameterfvEXT;
GLAPI PFNGLCONVOLUTIONPARAMETERFVEXTPROC glad_debug_glConvolutionParameterfvEXT;
#define glConvolutionParameterfvEXT glad_debug_glConvolutionParameterfvEXT
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint params);
GLAPI PFNGLCONVOLUTIONPARAMETERIEXTPROC glad_glConvolutionParameteriEXT;
GLAPI PFNGLCONVOLUTIONPARAMETERIEXTPROC glad_debug_glConvolutionParameteriEXT;
#define glConvolutionParameteriEXT glad_debug_glConvolutionParameteriEXT
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLCONVOLUTIONPARAMETERIVEXTPROC glad_glConvolutionParameterivEXT;
GLAPI PFNGLCONVOLUTIONPARAMETERIVEXTPROC glad_debug_glConvolutionParameterivEXT;
#define glConvolutionParameterivEXT glad_debug_glConvolutionParameterivEXT
typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glad_glCopyConvolutionFilter1DEXT;
GLAPI PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glad_debug_glCopyConvolutionFilter1DEXT;
#define glCopyConvolutionFilter1DEXT glad_debug_glCopyConvolutionFilter1DEXT
typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glad_glCopyConvolutionFilter2DEXT;
GLAPI PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glad_debug_glCopyConvolutionFilter2DEXT;
#define glCopyConvolutionFilter2DEXT glad_debug_glCopyConvolutionFilter2DEXT
typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, void* image);
GLAPI PFNGLGETCONVOLUTIONFILTEREXTPROC glad_glGetConvolutionFilterEXT;
GLAPI PFNGLGETCONVOLUTIONFILTEREXTPROC glad_debug_glGetConvolutionFilterEXT;
#define glGetConvolutionFilterEXT glad_debug_glGetConvolutionFilterEXT
typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glad_glGetConvolutionParameterfvEXT;
GLAPI PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glad_debug_glGetConvolutionParameterfvEXT;
#define glGetConvolutionParameterfvEXT glad_debug_glGetConvolutionParameterfvEXT
typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glad_glGetConvolutionParameterivEXT;
GLAPI PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glad_debug_glGetConvolutionParameterivEXT;
#define glGetConvolutionParameterivEXT glad_debug_glGetConvolutionParameterivEXT
typedef void (APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC)(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span);
GLAPI PFNGLGETSEPARABLEFILTEREXTPROC glad_glGetSeparableFilterEXT;
GLAPI PFNGLGETSEPARABLEFILTEREXTPROC glad_debug_glGetSeparableFilterEXT;
#define glGetSeparableFilterEXT glad_debug_glGetSeparableFilterEXT
typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column);
GLAPI PFNGLSEPARABLEFILTER2DEXTPROC glad_glSeparableFilter2DEXT;
GLAPI PFNGLSEPARABLEFILTER2DEXTPROC glad_debug_glSeparableFilter2DEXT;
#define glSeparableFilter2DEXT glad_debug_glSeparableFilter2DEXT
#endif
#ifndef GL_NV_compute_program5
#define GL_NV_compute_program5 1
GLAPI int GLAD_GL_NV_compute_program5;
#endif
#ifndef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit 1
GLAPI int GLAD_GL_NV_vertex_attrib_integer_64bit;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC)(GLuint index, GLint64EXT x);
GLAPI PFNGLVERTEXATTRIBL1I64NVPROC glad_glVertexAttribL1i64NV;
GLAPI PFNGLVERTEXATTRIBL1I64NVPROC glad_debug_glVertexAttribL1i64NV;
#define glVertexAttribL1i64NV glad_debug_glVertexAttribL1i64NV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y);
GLAPI PFNGLVERTEXATTRIBL2I64NVPROC glad_glVertexAttribL2i64NV;
GLAPI PFNGLVERTEXATTRIBL2I64NVPROC glad_debug_glVertexAttribL2i64NV;
#define glVertexAttribL2i64NV glad_debug_glVertexAttribL2i64NV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
GLAPI PFNGLVERTEXATTRIBL3I64NVPROC glad_glVertexAttribL3i64NV;
GLAPI PFNGLVERTEXATTRIBL3I64NVPROC glad_debug_glVertexAttribL3i64NV;
#define glVertexAttribL3i64NV glad_debug_glVertexAttribL3i64NV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64NVPROC)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
GLAPI PFNGLVERTEXATTRIBL4I64NVPROC glad_glVertexAttribL4i64NV;
GLAPI PFNGLVERTEXATTRIBL4I64NVPROC glad_debug_glVertexAttribL4i64NV;
#define glVertexAttribL4i64NV glad_debug_glVertexAttribL4i64NV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64VNVPROC)(GLuint index, const GLint64EXT* v);
GLAPI PFNGLVERTEXATTRIBL1I64VNVPROC glad_glVertexAttribL1i64vNV;
GLAPI PFNGLVERTEXATTRIBL1I64VNVPROC glad_debug_glVertexAttribL1i64vNV;
#define glVertexAttribL1i64vNV glad_debug_glVertexAttribL1i64vNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64VNVPROC)(GLuint index, const GLint64EXT* v);
GLAPI PFNGLVERTEXATTRIBL2I64VNVPROC glad_glVertexAttribL2i64vNV;
GLAPI PFNGLVERTEXATTRIBL2I64VNVPROC glad_debug_glVertexAttribL2i64vNV;
#define glVertexAttribL2i64vNV glad_debug_glVertexAttribL2i64vNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64VNVPROC)(GLuint index, const GLint64EXT* v);
GLAPI PFNGLVERTEXATTRIBL3I64VNVPROC glad_glVertexAttribL3i64vNV;
GLAPI PFNGLVERTEXATTRIBL3I64VNVPROC glad_debug_glVertexAttribL3i64vNV;
#define glVertexAttribL3i64vNV glad_debug_glVertexAttribL3i64vNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64VNVPROC)(GLuint index, const GLint64EXT* v);
GLAPI PFNGLVERTEXATTRIBL4I64VNVPROC glad_glVertexAttribL4i64vNV;
GLAPI PFNGLVERTEXATTRIBL4I64VNVPROC glad_debug_glVertexAttribL4i64vNV;
#define glVertexAttribL4i64vNV glad_debug_glVertexAttribL4i64vNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64NVPROC)(GLuint index, GLuint64EXT x);
GLAPI PFNGLVERTEXATTRIBL1UI64NVPROC glad_glVertexAttribL1ui64NV;
GLAPI PFNGLVERTEXATTRIBL1UI64NVPROC glad_debug_glVertexAttribL1ui64NV;
#define glVertexAttribL1ui64NV glad_debug_glVertexAttribL1ui64NV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y);
GLAPI PFNGLVERTEXATTRIBL2UI64NVPROC glad_glVertexAttribL2ui64NV;
GLAPI PFNGLVERTEXATTRIBL2UI64NVPROC glad_debug_glVertexAttribL2ui64NV;
#define glVertexAttribL2ui64NV glad_debug_glVertexAttribL2ui64NV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
GLAPI PFNGLVERTEXATTRIBL3UI64NVPROC glad_glVertexAttribL3ui64NV;
GLAPI PFNGLVERTEXATTRIBL3UI64NVPROC glad_debug_glVertexAttribL3ui64NV;
#define glVertexAttribL3ui64NV glad_debug_glVertexAttribL3ui64NV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64NVPROC)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
GLAPI PFNGLVERTEXATTRIBL4UI64NVPROC glad_glVertexAttribL4ui64NV;
GLAPI PFNGLVERTEXATTRIBL4UI64NVPROC glad_debug_glVertexAttribL4ui64NV;
#define glVertexAttribL4ui64NV glad_debug_glVertexAttribL4ui64NV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VNVPROC)(GLuint index, const GLuint64EXT* v);
GLAPI PFNGLVERTEXATTRIBL1UI64VNVPROC glad_glVertexAttribL1ui64vNV;
GLAPI PFNGLVERTEXATTRIBL1UI64VNVPROC glad_debug_glVertexAttribL1ui64vNV;
#define glVertexAttribL1ui64vNV glad_debug_glVertexAttribL1ui64vNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64VNVPROC)(GLuint index, const GLuint64EXT* v);
GLAPI PFNGLVERTEXATTRIBL2UI64VNVPROC glad_glVertexAttribL2ui64vNV;
GLAPI PFNGLVERTEXATTRIBL2UI64VNVPROC glad_debug_glVertexAttribL2ui64vNV;
#define glVertexAttribL2ui64vNV glad_debug_glVertexAttribL2ui64vNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC)(GLuint index, const GLuint64EXT* v);
GLAPI PFNGLVERTEXATTRIBL3UI64VNVPROC glad_glVertexAttribL3ui64vNV;
GLAPI PFNGLVERTEXATTRIBL3UI64VNVPROC glad_debug_glVertexAttribL3ui64vNV;
#define glVertexAttribL3ui64vNV glad_debug_glVertexAttribL3ui64vNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC)(GLuint index, const GLuint64EXT* v);
GLAPI PFNGLVERTEXATTRIBL4UI64VNVPROC glad_glVertexAttribL4ui64vNV;
GLAPI PFNGLVERTEXATTRIBL4UI64VNVPROC glad_debug_glVertexAttribL4ui64vNV;
#define glVertexAttribL4ui64vNV glad_debug_glVertexAttribL4ui64vNV
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC)(GLuint index, GLenum pname, GLint64EXT* params);
GLAPI PFNGLGETVERTEXATTRIBLI64VNVPROC glad_glGetVertexAttribLi64vNV;
GLAPI PFNGLGETVERTEXATTRIBLI64VNVPROC glad_debug_glGetVertexAttribLi64vNV;
#define glGetVertexAttribLi64vNV glad_debug_glGetVertexAttribLi64vNV
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC)(GLuint index, GLenum pname, GLuint64EXT* params);
GLAPI PFNGLGETVERTEXATTRIBLUI64VNVPROC glad_glGetVertexAttribLui64vNV;
GLAPI PFNGLGETVERTEXATTRIBLUI64VNVPROC glad_debug_glGetVertexAttribLui64vNV;
#define glGetVertexAttribLui64vNV glad_debug_glGetVertexAttribLui64vNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLsizei stride);
GLAPI PFNGLVERTEXATTRIBLFORMATNVPROC glad_glVertexAttribLFormatNV;
GLAPI PFNGLVERTEXATTRIBLFORMATNVPROC glad_debug_glVertexAttribLFormatNV;
#define glVertexAttribLFormatNV glad_debug_glVertexAttribLFormatNV
#endif
#ifndef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture 1
GLAPI int GLAD_GL_EXT_paletted_texture;
typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void* table);
GLAPI PFNGLCOLORTABLEEXTPROC glad_glColorTableEXT;
GLAPI PFNGLCOLORTABLEEXTPROC glad_debug_glColorTableEXT;
#define glColorTableEXT glad_debug_glColorTableEXT
typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC)(GLenum target, GLenum format, GLenum type, void* data);
GLAPI PFNGLGETCOLORTABLEEXTPROC glad_glGetColorTableEXT;
GLAPI PFNGLGETCOLORTABLEEXTPROC glad_debug_glGetColorTableEXT;
#define glGetColorTableEXT glad_debug_glGetColorTableEXT
typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glad_glGetColorTableParameterivEXT;
GLAPI PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glad_debug_glGetColorTableParameterivEXT;
#define glGetColorTableParameterivEXT glad_debug_glGetColorTableParameterivEXT
typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glad_glGetColorTableParameterfvEXT;
GLAPI PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glad_debug_glGetColorTableParameterfvEXT;
#define glGetColorTableParameterfvEXT glad_debug_glGetColorTableParameterfvEXT
#endif
#ifndef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 1
GLAPI int GLAD_GL_ARB_texture_buffer_object;
typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC)(GLenum target, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXBUFFERARBPROC glad_glTexBufferARB;
GLAPI PFNGLTEXBUFFERARBPROC glad_debug_glTexBufferARB;
#define glTexBufferARB glad_debug_glTexBufferARB
#endif
#ifndef GL_ATI_pn_triangles
#define GL_ATI_pn_triangles 1
GLAPI int GLAD_GL_ATI_pn_triangles;
typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC)(GLenum pname, GLint param);
GLAPI PFNGLPNTRIANGLESIATIPROC glad_glPNTrianglesiATI;
GLAPI PFNGLPNTRIANGLESIATIPROC glad_debug_glPNTrianglesiATI;
#define glPNTrianglesiATI glad_debug_glPNTrianglesiATI
typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPNTRIANGLESFATIPROC glad_glPNTrianglesfATI;
GLAPI PFNGLPNTRIANGLESFATIPROC glad_debug_glPNTrianglesfATI;
#define glPNTrianglesfATI glad_debug_glPNTrianglesfATI
#endif
#ifndef GL_SGIX_resample
#define GL_SGIX_resample 1
GLAPI int GLAD_GL_SGIX_resample;
#endif
#ifndef GL_SGIX_flush_raster
#define GL_SGIX_flush_raster 1
GLAPI int GLAD_GL_SGIX_flush_raster;
typedef void (APIENTRYP PFNGLFLUSHRASTERSGIXPROC)();
GLAPI PFNGLFLUSHRASTERSGIXPROC glad_glFlushRasterSGIX;
GLAPI PFNGLFLUSHRASTERSGIXPROC glad_debug_glFlushRasterSGIX;
#define glFlushRasterSGIX glad_debug_glFlushRasterSGIX
#endif
#ifndef GL_EXT_light_texture
#define GL_EXT_light_texture 1
GLAPI int GLAD_GL_EXT_light_texture;
typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC)(GLenum mode);
GLAPI PFNGLAPPLYTEXTUREEXTPROC glad_glApplyTextureEXT;
GLAPI PFNGLAPPLYTEXTUREEXTPROC glad_debug_glApplyTextureEXT;
#define glApplyTextureEXT glad_debug_glApplyTextureEXT
typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC)(GLenum pname);
GLAPI PFNGLTEXTURELIGHTEXTPROC glad_glTextureLightEXT;
GLAPI PFNGLTEXTURELIGHTEXTPROC glad_debug_glTextureLightEXT;
#define glTextureLightEXT glad_debug_glTextureLightEXT
typedef void (APIENTRYP PFNGLTEXTUREMATERIALEXTPROC)(GLenum face, GLenum mode);
GLAPI PFNGLTEXTUREMATERIALEXTPROC glad_glTextureMaterialEXT;
GLAPI PFNGLTEXTUREMATERIALEXTPROC glad_debug_glTextureMaterialEXT;
#define glTextureMaterialEXT glad_debug_glTextureMaterialEXT
#endif
#ifndef GL_ARB_point_sprite
#define GL_ARB_point_sprite 1
GLAPI int GLAD_GL_ARB_point_sprite;
#endif
#ifndef GL_SUN_convolution_border_modes
#define GL_SUN_convolution_border_modes 1
GLAPI int GLAD_GL_SUN_convolution_border_modes;
#endif
#ifndef GL_NV_parameter_buffer_object2
#define GL_NV_parameter_buffer_object2 1
GLAPI int GLAD_GL_NV_parameter_buffer_object2;
#endif
#ifndef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel 1
GLAPI int GLAD_GL_ARB_half_float_pixel;
#endif
#ifndef GL_NV_tessellation_program5
#define GL_NV_tessellation_program5 1
GLAPI int GLAD_GL_NV_tessellation_program5;
#endif
#ifndef GL_REND_screen_coordinates
#define GL_REND_screen_coordinates 1
GLAPI int GLAD_GL_REND_screen_coordinates;
#endif
#ifndef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette 1
GLAPI int GLAD_GL_EXT_shared_texture_palette;
#endif
#ifndef GL_EXT_packed_float
#define GL_EXT_packed_float 1
GLAPI int GLAD_GL_EXT_packed_float;
#endif
#ifndef GL_OML_subsample
#define GL_OML_subsample 1
GLAPI int GLAD_GL_OML_subsample;
#endif
#ifndef GL_SGIX_vertex_preclip
#define GL_SGIX_vertex_preclip 1
GLAPI int GLAD_GL_SGIX_vertex_preclip;
#endif
#ifndef GL_SGIX_texture_scale_bias
#define GL_SGIX_texture_scale_bias 1
GLAPI int GLAD_GL_SGIX_texture_scale_bias;
#endif
#ifndef GL_AMD_draw_buffers_blend
#define GL_AMD_draw_buffers_blend 1
GLAPI int GLAD_GL_AMD_draw_buffers_blend;
typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC)(GLuint buf, GLenum src, GLenum dst);
GLAPI PFNGLBLENDFUNCINDEXEDAMDPROC glad_glBlendFuncIndexedAMD;
GLAPI PFNGLBLENDFUNCINDEXEDAMDPROC glad_debug_glBlendFuncIndexedAMD;
#define glBlendFuncIndexedAMD glad_debug_glBlendFuncIndexedAMD
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_glBlendFuncSeparateIndexedAMD;
GLAPI PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_debug_glBlendFuncSeparateIndexedAMD;
#define glBlendFuncSeparateIndexedAMD glad_debug_glBlendFuncSeparateIndexedAMD
typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC)(GLuint buf, GLenum mode);
GLAPI PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_glBlendEquationIndexedAMD;
GLAPI PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_debug_glBlendEquationIndexedAMD;
#define glBlendEquationIndexedAMD glad_debug_glBlendEquationIndexedAMD
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_glBlendEquationSeparateIndexedAMD;
GLAPI PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_debug_glBlendEquationSeparateIndexedAMD;
#define glBlendEquationSeparateIndexedAMD glad_debug_glBlendEquationSeparateIndexedAMD
#endif
#ifndef GL_APPLE_texture_range
#define GL_APPLE_texture_range 1
GLAPI int GLAD_GL_APPLE_texture_range;
typedef void (APIENTRYP PFNGLTEXTURERANGEAPPLEPROC)(GLenum target, GLsizei length, const void* pointer);
GLAPI PFNGLTEXTURERANGEAPPLEPROC glad_glTextureRangeAPPLE;
GLAPI PFNGLTEXTURERANGEAPPLEPROC glad_debug_glTextureRangeAPPLE;
#define glTextureRangeAPPLE glad_debug_glTextureRangeAPPLE
typedef void (APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)(GLenum target, GLenum pname, void** params);
GLAPI PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glad_glGetTexParameterPointervAPPLE;
GLAPI PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glad_debug_glGetTexParameterPointervAPPLE;
#define glGetTexParameterPointervAPPLE glad_debug_glGetTexParameterPointervAPPLE
#endif
#ifndef GL_EXT_texture_array
#define GL_EXT_texture_array 1
GLAPI int GLAD_GL_EXT_texture_array;
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glad_glFramebufferTextureLayerEXT;
GLAPI PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glad_debug_glFramebufferTextureLayerEXT;
#define glFramebufferTextureLayerEXT glad_debug_glFramebufferTextureLayerEXT
#endif
#ifndef GL_NV_texture_barrier
#define GL_NV_texture_barrier 1
GLAPI int GLAD_GL_NV_texture_barrier;
typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC)();
GLAPI PFNGLTEXTUREBARRIERNVPROC glad_glTextureBarrierNV;
GLAPI PFNGLTEXTUREBARRIERNVPROC glad_debug_glTextureBarrierNV;
#define glTextureBarrierNV glad_debug_glTextureBarrierNV
#endif
#ifndef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 1
GLAPI int GLAD_GL_ARB_texture_query_levels;
#endif
#ifndef GL_NV_texgen_emboss
#define GL_NV_texgen_emboss 1
GLAPI int GLAD_GL_NV_texgen_emboss;
#endif
#ifndef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle 1
GLAPI int GLAD_GL_EXT_texture_swizzle;
#endif
#ifndef GL_ARB_texture_rg
#define GL_ARB_texture_rg 1
GLAPI int GLAD_GL_ARB_texture_rg;
#endif
#ifndef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 1
GLAPI int GLAD_GL_ARB_vertex_type_2_10_10_10_rev;
#endif
#ifndef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader 1
GLAPI int GLAD_GL_ARB_fragment_shader;
#endif
#ifndef GL_3DFX_tbuffer
#define GL_3DFX_tbuffer 1
GLAPI int GLAD_GL_3DFX_tbuffer;
typedef void (APIENTRYP PFNGLTBUFFERMASK3DFXPROC)(GLuint mask);
GLAPI PFNGLTBUFFERMASK3DFXPROC glad_glTbufferMask3DFX;
GLAPI PFNGLTBUFFERMASK3DFXPROC glad_debug_glTbufferMask3DFX;
#define glTbufferMask3DFX glad_debug_glTbufferMask3DFX
#endif
#ifndef GL_GREMEDY_frame_terminator
#define GL_GREMEDY_frame_terminator 1
GLAPI int GLAD_GL_GREMEDY_frame_terminator;
typedef void (APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC)();
GLAPI PFNGLFRAMETERMINATORGREMEDYPROC glad_glFrameTerminatorGREMEDY;
GLAPI PFNGLFRAMETERMINATORGREMEDYPROC glad_debug_glFrameTerminatorGREMEDY;
#define glFrameTerminatorGREMEDY glad_debug_glFrameTerminatorGREMEDY
#endif
#ifndef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 1
GLAPI int GLAD_GL_ARB_blend_func_extended;
#endif
#ifndef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 1
GLAPI int GLAD_GL_EXT_separate_shader_objects;
typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC)(GLenum type, GLuint program);
GLAPI PFNGLUSESHADERPROGRAMEXTPROC glad_glUseShaderProgramEXT;
GLAPI PFNGLUSESHADERPROGRAMEXTPROC glad_debug_glUseShaderProgramEXT;
#define glUseShaderProgramEXT glad_debug_glUseShaderProgramEXT
typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC)(GLuint program);
GLAPI PFNGLACTIVEPROGRAMEXTPROC glad_glActiveProgramEXT;
GLAPI PFNGLACTIVEPROGRAMEXTPROC glad_debug_glActiveProgramEXT;
#define glActiveProgramEXT glad_debug_glActiveProgramEXT
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC)(GLenum type, const GLchar* string);
GLAPI PFNGLCREATESHADERPROGRAMEXTPROC glad_glCreateShaderProgramEXT;
GLAPI PFNGLCREATESHADERPROGRAMEXTPROC glad_debug_glCreateShaderProgramEXT;
#define glCreateShaderProgramEXT glad_debug_glCreateShaderProgramEXT
typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMEXTPROC)(GLuint pipeline, GLuint program);
GLAPI PFNGLACTIVESHADERPROGRAMEXTPROC glad_glActiveShaderProgramEXT;
GLAPI PFNGLACTIVESHADERPROGRAMEXTPROC glad_debug_glActiveShaderProgramEXT;
#define glActiveShaderProgramEXT glad_debug_glActiveShaderProgramEXT
typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
GLAPI PFNGLBINDPROGRAMPIPELINEEXTPROC glad_glBindProgramPipelineEXT;
GLAPI PFNGLBINDPROGRAMPIPELINEEXTPROC glad_debug_glBindProgramPipelineEXT;
#define glBindProgramPipelineEXT glad_debug_glBindProgramPipelineEXT
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVEXTPROC)(GLenum type, GLsizei count, const GLchar** strings);
GLAPI PFNGLCREATESHADERPROGRAMVEXTPROC glad_glCreateShaderProgramvEXT;
GLAPI PFNGLCREATESHADERPROGRAMVEXTPROC glad_debug_glCreateShaderProgramvEXT;
#define glCreateShaderProgramvEXT glad_debug_glCreateShaderProgramvEXT
typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESEXTPROC)(GLsizei n, const GLuint* pipelines);
GLAPI PFNGLDELETEPROGRAMPIPELINESEXTPROC glad_glDeleteProgramPipelinesEXT;
GLAPI PFNGLDELETEPROGRAMPIPELINESEXTPROC glad_debug_glDeleteProgramPipelinesEXT;
#define glDeleteProgramPipelinesEXT glad_debug_glDeleteProgramPipelinesEXT
typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESEXTPROC)(GLsizei n, GLuint* pipelines);
GLAPI PFNGLGENPROGRAMPIPELINESEXTPROC glad_glGenProgramPipelinesEXT;
GLAPI PFNGLGENPROGRAMPIPELINESEXTPROC glad_debug_glGenProgramPipelinesEXT;
#define glGenProgramPipelinesEXT glad_debug_glGenProgramPipelinesEXT
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLAPI PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC glad_glGetProgramPipelineInfoLogEXT;
GLAPI PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC glad_debug_glGetProgramPipelineInfoLogEXT;
#define glGetProgramPipelineInfoLogEXT glad_debug_glGetProgramPipelineInfoLogEXT
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVEXTPROC)(GLuint pipeline, GLenum pname, GLint* params);
GLAPI PFNGLGETPROGRAMPIPELINEIVEXTPROC glad_glGetProgramPipelineivEXT;
GLAPI PFNGLGETPROGRAMPIPELINEIVEXTPROC glad_debug_glGetProgramPipelineivEXT;
#define glGetProgramPipelineivEXT glad_debug_glGetProgramPipelineivEXT
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
GLAPI PFNGLISPROGRAMPIPELINEEXTPROC glad_glIsProgramPipelineEXT;
GLAPI PFNGLISPROGRAMPIPELINEEXTPROC glad_debug_glIsProgramPipelineEXT;
#define glIsProgramPipelineEXT glad_debug_glIsProgramPipelineEXT
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC)(GLuint program, GLenum pname, GLint value);
GLAPI PFNGLPROGRAMPARAMETERIEXTPROC glad_glProgramParameteriEXT;
GLAPI PFNGLPROGRAMPARAMETERIEXTPROC glad_debug_glProgramParameteriEXT;
#define glProgramParameteriEXT glad_debug_glProgramParameteriEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC)(GLuint program, GLint location, GLfloat v0);
GLAPI PFNGLPROGRAMUNIFORM1FEXTPROC glad_glProgramUniform1fEXT;
GLAPI PFNGLPROGRAMUNIFORM1FEXTPROC glad_debug_glProgramUniform1fEXT;
#define glProgramUniform1fEXT glad_debug_glProgramUniform1fEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM1FVEXTPROC glad_glProgramUniform1fvEXT;
GLAPI PFNGLPROGRAMUNIFORM1FVEXTPROC glad_debug_glProgramUniform1fvEXT;
#define glProgramUniform1fvEXT glad_debug_glProgramUniform1fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC)(GLuint program, GLint location, GLint v0);
GLAPI PFNGLPROGRAMUNIFORM1IEXTPROC glad_glProgramUniform1iEXT;
GLAPI PFNGLPROGRAMUNIFORM1IEXTPROC glad_debug_glProgramUniform1iEXT;
#define glProgramUniform1iEXT glad_debug_glProgramUniform1iEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM1IVEXTPROC glad_glProgramUniform1ivEXT;
GLAPI PFNGLPROGRAMUNIFORM1IVEXTPROC glad_debug_glProgramUniform1ivEXT;
#define glProgramUniform1ivEXT glad_debug_glProgramUniform1ivEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLPROGRAMUNIFORM2FEXTPROC glad_glProgramUniform2fEXT;
GLAPI PFNGLPROGRAMUNIFORM2FEXTPROC glad_debug_glProgramUniform2fEXT;
#define glProgramUniform2fEXT glad_debug_glProgramUniform2fEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM2FVEXTPROC glad_glProgramUniform2fvEXT;
GLAPI PFNGLPROGRAMUNIFORM2FVEXTPROC glad_debug_glProgramUniform2fvEXT;
#define glProgramUniform2fvEXT glad_debug_glProgramUniform2fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1);
GLAPI PFNGLPROGRAMUNIFORM2IEXTPROC glad_glProgramUniform2iEXT;
GLAPI PFNGLPROGRAMUNIFORM2IEXTPROC glad_debug_glProgramUniform2iEXT;
#define glProgramUniform2iEXT glad_debug_glProgramUniform2iEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM2IVEXTPROC glad_glProgramUniform2ivEXT;
GLAPI PFNGLPROGRAMUNIFORM2IVEXTPROC glad_debug_glProgramUniform2ivEXT;
#define glProgramUniform2ivEXT glad_debug_glProgramUniform2ivEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLPROGRAMUNIFORM3FEXTPROC glad_glProgramUniform3fEXT;
GLAPI PFNGLPROGRAMUNIFORM3FEXTPROC glad_debug_glProgramUniform3fEXT;
#define glProgramUniform3fEXT glad_debug_glProgramUniform3fEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM3FVEXTPROC glad_glProgramUniform3fvEXT;
GLAPI PFNGLPROGRAMUNIFORM3FVEXTPROC glad_debug_glProgramUniform3fvEXT;
#define glProgramUniform3fvEXT glad_debug_glProgramUniform3fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLPROGRAMUNIFORM3IEXTPROC glad_glProgramUniform3iEXT;
GLAPI PFNGLPROGRAMUNIFORM3IEXTPROC glad_debug_glProgramUniform3iEXT;
#define glProgramUniform3iEXT glad_debug_glProgramUniform3iEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM3IVEXTPROC glad_glProgramUniform3ivEXT;
GLAPI PFNGLPROGRAMUNIFORM3IVEXTPROC glad_debug_glProgramUniform3ivEXT;
#define glProgramUniform3ivEXT glad_debug_glProgramUniform3ivEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLPROGRAMUNIFORM4FEXTPROC glad_glProgramUniform4fEXT;
GLAPI PFNGLPROGRAMUNIFORM4FEXTPROC glad_debug_glProgramUniform4fEXT;
#define glProgramUniform4fEXT glad_debug_glProgramUniform4fEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM4FVEXTPROC glad_glProgramUniform4fvEXT;
GLAPI PFNGLPROGRAMUNIFORM4FVEXTPROC glad_debug_glProgramUniform4fvEXT;
#define glProgramUniform4fvEXT glad_debug_glProgramUniform4fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLPROGRAMUNIFORM4IEXTPROC glad_glProgramUniform4iEXT;
GLAPI PFNGLPROGRAMUNIFORM4IEXTPROC glad_debug_glProgramUniform4iEXT;
#define glProgramUniform4iEXT glad_debug_glProgramUniform4iEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM4IVEXTPROC glad_glProgramUniform4ivEXT;
GLAPI PFNGLPROGRAMUNIFORM4IVEXTPROC glad_debug_glProgramUniform4ivEXT;
#define glProgramUniform4ivEXT glad_debug_glProgramUniform4ivEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glad_glProgramUniformMatrix2fvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glad_debug_glProgramUniformMatrix2fvEXT;
#define glProgramUniformMatrix2fvEXT glad_debug_glProgramUniformMatrix2fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glad_glProgramUniformMatrix3fvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glad_debug_glProgramUniformMatrix3fvEXT;
#define glProgramUniformMatrix3fvEXT glad_debug_glProgramUniformMatrix3fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glad_glProgramUniformMatrix4fvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glad_debug_glProgramUniformMatrix4fvEXT;
#define glProgramUniformMatrix4fvEXT glad_debug_glProgramUniformMatrix4fvEXT
typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESEXTPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
GLAPI PFNGLUSEPROGRAMSTAGESEXTPROC glad_glUseProgramStagesEXT;
GLAPI PFNGLUSEPROGRAMSTAGESEXTPROC glad_debug_glUseProgramStagesEXT;
#define glUseProgramStagesEXT glad_debug_glUseProgramStagesEXT
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEEXTPROC)(GLuint pipeline);
GLAPI PFNGLVALIDATEPROGRAMPIPELINEEXTPROC glad_glValidateProgramPipelineEXT;
GLAPI PFNGLVALIDATEPROGRAMPIPELINEEXTPROC glad_debug_glValidateProgramPipelineEXT;
#define glValidateProgramPipelineEXT glad_debug_glValidateProgramPipelineEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC)(GLuint program, GLint location, GLuint v0);
GLAPI PFNGLPROGRAMUNIFORM1UIEXTPROC glad_glProgramUniform1uiEXT;
GLAPI PFNGLPROGRAMUNIFORM1UIEXTPROC glad_debug_glProgramUniform1uiEXT;
#define glProgramUniform1uiEXT glad_debug_glProgramUniform1uiEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLPROGRAMUNIFORM2UIEXTPROC glad_glProgramUniform2uiEXT;
GLAPI PFNGLPROGRAMUNIFORM2UIEXTPROC glad_debug_glProgramUniform2uiEXT;
#define glProgramUniform2uiEXT glad_debug_glProgramUniform2uiEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLPROGRAMUNIFORM3UIEXTPROC glad_glProgramUniform3uiEXT;
GLAPI PFNGLPROGRAMUNIFORM3UIEXTPROC glad_debug_glProgramUniform3uiEXT;
#define glProgramUniform3uiEXT glad_debug_glProgramUniform3uiEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLPROGRAMUNIFORM4UIEXTPROC glad_glProgramUniform4uiEXT;
GLAPI PFNGLPROGRAMUNIFORM4UIEXTPROC glad_debug_glProgramUniform4uiEXT;
#define glProgramUniform4uiEXT glad_debug_glProgramUniform4uiEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM1UIVEXTPROC glad_glProgramUniform1uivEXT;
GLAPI PFNGLPROGRAMUNIFORM1UIVEXTPROC glad_debug_glProgramUniform1uivEXT;
#define glProgramUniform1uivEXT glad_debug_glProgramUniform1uivEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM2UIVEXTPROC glad_glProgramUniform2uivEXT;
GLAPI PFNGLPROGRAMUNIFORM2UIVEXTPROC glad_debug_glProgramUniform2uivEXT;
#define glProgramUniform2uivEXT glad_debug_glProgramUniform2uivEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM3UIVEXTPROC glad_glProgramUniform3uivEXT;
GLAPI PFNGLPROGRAMUNIFORM3UIVEXTPROC glad_debug_glProgramUniform3uivEXT;
#define glProgramUniform3uivEXT glad_debug_glProgramUniform3uivEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM4UIVEXTPROC glad_glProgramUniform4uivEXT;
GLAPI PFNGLPROGRAMUNIFORM4UIVEXTPROC glad_debug_glProgramUniform4uivEXT;
#define glProgramUniform4uivEXT glad_debug_glProgramUniform4uivEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glad_glProgramUniformMatrix2x3fvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glad_debug_glProgramUniformMatrix2x3fvEXT;
#define glProgramUniformMatrix2x3fvEXT glad_debug_glProgramUniformMatrix2x3fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glad_glProgramUniformMatrix3x2fvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glad_debug_glProgramUniformMatrix3x2fvEXT;
#define glProgramUniformMatrix3x2fvEXT glad_debug_glProgramUniformMatrix3x2fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glad_glProgramUniformMatrix2x4fvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glad_debug_glProgramUniformMatrix2x4fvEXT;
#define glProgramUniformMatrix2x4fvEXT glad_debug_glProgramUniformMatrix2x4fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glad_glProgramUniformMatrix4x2fvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glad_debug_glProgramUniformMatrix4x2fvEXT;
#define glProgramUniformMatrix4x2fvEXT glad_debug_glProgramUniformMatrix4x2fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glad_glProgramUniformMatrix3x4fvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glad_debug_glProgramUniformMatrix3x4fvEXT;
#define glProgramUniformMatrix3x4fvEXT glad_debug_glProgramUniformMatrix3x4fvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glad_glProgramUniformMatrix4x3fvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glad_debug_glProgramUniformMatrix4x3fvEXT;
#define glProgramUniformMatrix4x3fvEXT glad_debug_glProgramUniformMatrix4x3fvEXT
#endif
#ifndef GL_NV_texture_multisample
#define GL_NV_texture_multisample 1
GLAPI int GLAD_GL_NV_texture_multisample;
typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
GLAPI PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glad_glTexImage2DMultisampleCoverageNV;
GLAPI PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glad_debug_glTexImage2DMultisampleCoverageNV;
#define glTexImage2DMultisampleCoverageNV glad_debug_glTexImage2DMultisampleCoverageNV
typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
GLAPI PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glad_glTexImage3DMultisampleCoverageNV;
GLAPI PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glad_debug_glTexImage3DMultisampleCoverageNV;
#define glTexImage3DMultisampleCoverageNV glad_debug_glTexImage3DMultisampleCoverageNV
typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
GLAPI PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glad_glTextureImage2DMultisampleNV;
GLAPI PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glad_debug_glTextureImage2DMultisampleNV;
#define glTextureImage2DMultisampleNV glad_debug_glTextureImage2DMultisampleNV
typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
GLAPI PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glad_glTextureImage3DMultisampleNV;
GLAPI PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glad_debug_glTextureImage3DMultisampleNV;
#define glTextureImage3DMultisampleNV glad_debug_glTextureImage3DMultisampleNV
typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
GLAPI PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glad_glTextureImage2DMultisampleCoverageNV;
GLAPI PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glad_debug_glTextureImage2DMultisampleCoverageNV;
#define glTextureImage2DMultisampleCoverageNV glad_debug_glTextureImage2DMultisampleCoverageNV
typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
GLAPI PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glad_glTextureImage3DMultisampleCoverageNV;
GLAPI PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glad_debug_glTextureImage3DMultisampleCoverageNV;
#define glTextureImage3DMultisampleCoverageNV glad_debug_glTextureImage3DMultisampleCoverageNV
#endif
#ifndef GL_ARB_shader_objects
#define GL_ARB_shader_objects 1
GLAPI int GLAD_GL_ARB_shader_objects;
typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
GLAPI PFNGLDELETEOBJECTARBPROC glad_glDeleteObjectARB;
GLAPI PFNGLDELETEOBJECTARBPROC glad_debug_glDeleteObjectARB;
#define glDeleteObjectARB glad_debug_glDeleteObjectARB
typedef GLhandleARB (APIENTRYP PFNGLGETHANDLEARBPROC)(GLenum pname);
GLAPI PFNGLGETHANDLEARBPROC glad_glGetHandleARB;
GLAPI PFNGLGETHANDLEARBPROC glad_debug_glGetHandleARB;
#define glGetHandleARB glad_debug_glGetHandleARB
typedef void (APIENTRYP PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
GLAPI PFNGLDETACHOBJECTARBPROC glad_glDetachObjectARB;
GLAPI PFNGLDETACHOBJECTARBPROC glad_debug_glDetachObjectARB;
#define glDetachObjectARB glad_debug_glDetachObjectARB
typedef GLhandleARB (APIENTRYP PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
GLAPI PFNGLCREATESHADEROBJECTARBPROC glad_glCreateShaderObjectARB;
GLAPI PFNGLCREATESHADEROBJECTARBPROC glad_debug_glCreateShaderObjectARB;
#define glCreateShaderObjectARB glad_debug_glCreateShaderObjectARB
typedef void (APIENTRYP PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count, const GLcharARB** string, const GLint* length);
GLAPI PFNGLSHADERSOURCEARBPROC glad_glShaderSourceARB;
GLAPI PFNGLSHADERSOURCEARBPROC glad_debug_glShaderSourceARB;
#define glShaderSourceARB glad_debug_glShaderSourceARB
typedef void (APIENTRYP PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
GLAPI PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB;
GLAPI PFNGLCOMPILESHADERARBPROC glad_debug_glCompileShaderARB;
#define glCompileShaderARB glad_debug_glCompileShaderARB
typedef GLhandleARB (APIENTRYP PFNGLCREATEPROGRAMOBJECTARBPROC)();
GLAPI PFNGLCREATEPROGRAMOBJECTARBPROC glad_glCreateProgramObjectARB;
GLAPI PFNGLCREATEPROGRAMOBJECTARBPROC glad_debug_glCreateProgramObjectARB;
#define glCreateProgramObjectARB glad_debug_glCreateProgramObjectARB
typedef void (APIENTRYP PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
GLAPI PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB;
GLAPI PFNGLATTACHOBJECTARBPROC glad_debug_glAttachObjectARB;
#define glAttachObjectARB glad_debug_glAttachObjectARB
typedef void (APIENTRYP PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
GLAPI PFNGLLINKPROGRAMARBPROC glad_glLinkProgramARB;
GLAPI PFNGLLINKPROGRAMARBPROC glad_debug_glLinkProgramARB;
#define glLinkProgramARB glad_debug_glLinkProgramARB
typedef void (APIENTRYP PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
GLAPI PFNGLUSEPROGRAMOBJECTARBPROC glad_glUseProgramObjectARB;
GLAPI PFNGLUSEPROGRAMOBJECTARBPROC glad_debug_glUseProgramObjectARB;
#define glUseProgramObjectARB glad_debug_glUseProgramObjectARB
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
GLAPI PFNGLVALIDATEPROGRAMARBPROC glad_glValidateProgramARB;
GLAPI PFNGLVALIDATEPROGRAMARBPROC glad_debug_glValidateProgramARB;
#define glValidateProgramARB glad_debug_glValidateProgramARB
typedef void (APIENTRYP PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
GLAPI PFNGLUNIFORM1FARBPROC glad_glUniform1fARB;
GLAPI PFNGLUNIFORM1FARBPROC glad_debug_glUniform1fARB;
#define glUniform1fARB glad_debug_glUniform1fARB
typedef void (APIENTRYP PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLUNIFORM2FARBPROC glad_glUniform2fARB;
GLAPI PFNGLUNIFORM2FARBPROC glad_debug_glUniform2fARB;
#define glUniform2fARB glad_debug_glUniform2fARB
typedef void (APIENTRYP PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLUNIFORM3FARBPROC glad_glUniform3fARB;
GLAPI PFNGLUNIFORM3FARBPROC glad_debug_glUniform3fARB;
#define glUniform3fARB glad_debug_glUniform3fARB
typedef void (APIENTRYP PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLUNIFORM4FARBPROC glad_glUniform4fARB;
GLAPI PFNGLUNIFORM4FARBPROC glad_debug_glUniform4fARB;
#define glUniform4fARB glad_debug_glUniform4fARB
typedef void (APIENTRYP PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
GLAPI PFNGLUNIFORM1IARBPROC glad_glUniform1iARB;
GLAPI PFNGLUNIFORM1IARBPROC glad_debug_glUniform1iARB;
#define glUniform1iARB glad_debug_glUniform1iARB
typedef void (APIENTRYP PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
GLAPI PFNGLUNIFORM2IARBPROC glad_glUniform2iARB;
GLAPI PFNGLUNIFORM2IARBPROC glad_debug_glUniform2iARB;
#define glUniform2iARB glad_debug_glUniform2iARB
typedef void (APIENTRYP PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLUNIFORM3IARBPROC glad_glUniform3iARB;
GLAPI PFNGLUNIFORM3IARBPROC glad_debug_glUniform3iARB;
#define glUniform3iARB glad_debug_glUniform3iARB
typedef void (APIENTRYP PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLUNIFORM4IARBPROC glad_glUniform4iARB;
GLAPI PFNGLUNIFORM4IARBPROC glad_debug_glUniform4iARB;
#define glUniform4iARB glad_debug_glUniform4iARB
typedef void (APIENTRYP PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM1FVARBPROC glad_glUniform1fvARB;
GLAPI PFNGLUNIFORM1FVARBPROC glad_debug_glUniform1fvARB;
#define glUniform1fvARB glad_debug_glUniform1fvARB
typedef void (APIENTRYP PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM2FVARBPROC glad_glUniform2fvARB;
GLAPI PFNGLUNIFORM2FVARBPROC glad_debug_glUniform2fvARB;
#define glUniform2fvARB glad_debug_glUniform2fvARB
typedef void (APIENTRYP PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM3FVARBPROC glad_glUniform3fvARB;
GLAPI PFNGLUNIFORM3FVARBPROC glad_debug_glUniform3fvARB;
#define glUniform3fvARB glad_debug_glUniform3fvARB
typedef void (APIENTRYP PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLUNIFORM4FVARBPROC glad_glUniform4fvARB;
GLAPI PFNGLUNIFORM4FVARBPROC glad_debug_glUniform4fvARB;
#define glUniform4fvARB glad_debug_glUniform4fvARB
typedef void (APIENTRYP PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM1IVARBPROC glad_glUniform1ivARB;
GLAPI PFNGLUNIFORM1IVARBPROC glad_debug_glUniform1ivARB;
#define glUniform1ivARB glad_debug_glUniform1ivARB
typedef void (APIENTRYP PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM2IVARBPROC glad_glUniform2ivARB;
GLAPI PFNGLUNIFORM2IVARBPROC glad_debug_glUniform2ivARB;
#define glUniform2ivARB glad_debug_glUniform2ivARB
typedef void (APIENTRYP PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM3IVARBPROC glad_glUniform3ivARB;
GLAPI PFNGLUNIFORM3IVARBPROC glad_debug_glUniform3ivARB;
#define glUniform3ivARB glad_debug_glUniform3ivARB
typedef void (APIENTRYP PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLUNIFORM4IVARBPROC glad_glUniform4ivARB;
GLAPI PFNGLUNIFORM4IVARBPROC glad_debug_glUniform4ivARB;
#define glUniform4ivARB glad_debug_glUniform4ivARB
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX2FVARBPROC glad_glUniformMatrix2fvARB;
GLAPI PFNGLUNIFORMMATRIX2FVARBPROC glad_debug_glUniformMatrix2fvARB;
#define glUniformMatrix2fvARB glad_debug_glUniformMatrix2fvARB
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX3FVARBPROC glad_glUniformMatrix3fvARB;
GLAPI PFNGLUNIFORMMATRIX3FVARBPROC glad_debug_glUniformMatrix3fvARB;
#define glUniformMatrix3fvARB glad_debug_glUniformMatrix3fvARB
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLUNIFORMMATRIX4FVARBPROC glad_glUniformMatrix4fvARB;
GLAPI PFNGLUNIFORMMATRIX4FVARBPROC glad_debug_glUniformMatrix4fvARB;
#define glUniformMatrix4fvARB glad_debug_glUniformMatrix4fvARB
typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat* params);
GLAPI PFNGLGETOBJECTPARAMETERFVARBPROC glad_glGetObjectParameterfvARB;
GLAPI PFNGLGETOBJECTPARAMETERFVARBPROC glad_debug_glGetObjectParameterfvARB;
#define glGetObjectParameterfvARB glad_debug_glGetObjectParameterfvARB
typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint* params);
GLAPI PFNGLGETOBJECTPARAMETERIVARBPROC glad_glGetObjectParameterivARB;
GLAPI PFNGLGETOBJECTPARAMETERIVARBPROC glad_debug_glGetObjectParameterivARB;
#define glGetObjectParameterivARB glad_debug_glGetObjectParameterivARB
typedef void (APIENTRYP PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog);
GLAPI PFNGLGETINFOLOGARBPROC glad_glGetInfoLogARB;
GLAPI PFNGLGETINFOLOGARBPROC glad_debug_glGetInfoLogARB;
#define glGetInfoLogARB glad_debug_glGetInfoLogARB
typedef void (APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj);
GLAPI PFNGLGETATTACHEDOBJECTSARBPROC glad_glGetAttachedObjectsARB;
GLAPI PFNGLGETATTACHEDOBJECTSARBPROC glad_debug_glGetAttachedObjectsARB;
#define glGetAttachedObjectsARB glad_debug_glGetAttachedObjectsARB
typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB* name);
GLAPI PFNGLGETUNIFORMLOCATIONARBPROC glad_glGetUniformLocationARB;
GLAPI PFNGLGETUNIFORMLOCATIONARBPROC glad_debug_glGetUniformLocationARB;
#define glGetUniformLocationARB glad_debug_glGetUniformLocationARB
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name);
GLAPI PFNGLGETACTIVEUNIFORMARBPROC glad_glGetActiveUniformARB;
GLAPI PFNGLGETACTIVEUNIFORMARBPROC glad_debug_glGetActiveUniformARB;
#define glGetActiveUniformARB glad_debug_glGetActiveUniformARB
typedef void (APIENTRYP PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat* params);
GLAPI PFNGLGETUNIFORMFVARBPROC glad_glGetUniformfvARB;
GLAPI PFNGLGETUNIFORMFVARBPROC glad_debug_glGetUniformfvARB;
#define glGetUniformfvARB glad_debug_glGetUniformfvARB
typedef void (APIENTRYP PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint* params);
GLAPI PFNGLGETUNIFORMIVARBPROC glad_glGetUniformivARB;
GLAPI PFNGLGETUNIFORMIVARBPROC glad_debug_glGetUniformivARB;
#define glGetUniformivARB glad_debug_glGetUniformivARB
typedef void (APIENTRYP PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source);
GLAPI PFNGLGETSHADERSOURCEARBPROC glad_glGetShaderSourceARB;
GLAPI PFNGLGETSHADERSOURCEARBPROC glad_debug_glGetShaderSourceARB;
#define glGetShaderSourceARB glad_debug_glGetShaderSourceARB
#endif
#ifndef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 1
GLAPI int GLAD_GL_ARB_framebuffer_object;
#endif
#ifndef GL_ATI_envmap_bumpmap
#define GL_ATI_envmap_bumpmap 1
GLAPI int GLAD_GL_ATI_envmap_bumpmap;
typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC)(GLenum pname, const GLint* param);
GLAPI PFNGLTEXBUMPPARAMETERIVATIPROC glad_glTexBumpParameterivATI;
GLAPI PFNGLTEXBUMPPARAMETERIVATIPROC glad_debug_glTexBumpParameterivATI;
#define glTexBumpParameterivATI glad_debug_glTexBumpParameterivATI
typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC)(GLenum pname, const GLfloat* param);
GLAPI PFNGLTEXBUMPPARAMETERFVATIPROC glad_glTexBumpParameterfvATI;
GLAPI PFNGLTEXBUMPPARAMETERFVATIPROC glad_debug_glTexBumpParameterfvATI;
#define glTexBumpParameterfvATI glad_debug_glTexBumpParameterfvATI
typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC)(GLenum pname, GLint* param);
GLAPI PFNGLGETTEXBUMPPARAMETERIVATIPROC glad_glGetTexBumpParameterivATI;
GLAPI PFNGLGETTEXBUMPPARAMETERIVATIPROC glad_debug_glGetTexBumpParameterivATI;
#define glGetTexBumpParameterivATI glad_debug_glGetTexBumpParameterivATI
typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC)(GLenum pname, GLfloat* param);
GLAPI PFNGLGETTEXBUMPPARAMETERFVATIPROC glad_glGetTexBumpParameterfvATI;
GLAPI PFNGLGETTEXBUMPPARAMETERFVATIPROC glad_debug_glGetTexBumpParameterfvATI;
#define glGetTexBumpParameterfvATI glad_debug_glGetTexBumpParameterfvATI
#endif
#ifndef GL_AMD_shader_explicit_vertex_parameter
#define GL_AMD_shader_explicit_vertex_parameter 1
GLAPI int GLAD_GL_AMD_shader_explicit_vertex_parameter;
#endif
#ifndef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 1
GLAPI int GLAD_GL_ARB_robust_buffer_access_behavior;
#endif
#ifndef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 1
GLAPI int GLAD_GL_ARB_shader_stencil_export;
#endif
#ifndef GL_NV_texture_rectangle
#define GL_NV_texture_rectangle 1
GLAPI int GLAD_GL_NV_texture_rectangle;
#endif
#ifndef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 1
GLAPI int GLAD_GL_ARB_enhanced_layouts;
#endif
#ifndef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle 1
GLAPI int GLAD_GL_ARB_texture_rectangle;
#endif
#ifndef GL_SGI_texture_color_table
#define GL_SGI_texture_color_table 1
GLAPI int GLAD_GL_SGI_texture_color_table;
#endif
#ifndef GL_NV_viewport_swizzle
#define GL_NV_viewport_swizzle 1
GLAPI int GLAD_GL_NV_viewport_swizzle;
typedef void (APIENTRYP PFNGLVIEWPORTSWIZZLENVPROC)(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
GLAPI PFNGLVIEWPORTSWIZZLENVPROC glad_glViewportSwizzleNV;
GLAPI PFNGLVIEWPORTSWIZZLENVPROC glad_debug_glViewportSwizzleNV;
#define glViewportSwizzleNV glad_debug_glViewportSwizzleNV
#endif
#ifndef GL_ATI_map_object_buffer
#define GL_ATI_map_object_buffer 1
GLAPI int GLAD_GL_ATI_map_object_buffer;
typedef void* (APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC)(GLuint buffer);
GLAPI PFNGLMAPOBJECTBUFFERATIPROC glad_glMapObjectBufferATI;
GLAPI PFNGLMAPOBJECTBUFFERATIPROC glad_debug_glMapObjectBufferATI;
#define glMapObjectBufferATI glad_debug_glMapObjectBufferATI
typedef void (APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC)(GLuint buffer);
GLAPI PFNGLUNMAPOBJECTBUFFERATIPROC glad_glUnmapObjectBufferATI;
GLAPI PFNGLUNMAPOBJECTBUFFERATIPROC glad_debug_glUnmapObjectBufferATI;
#define glUnmapObjectBufferATI glad_debug_glUnmapObjectBufferATI
#endif
#ifndef GL_ARB_robustness
#define GL_ARB_robustness 1
GLAPI int GLAD_GL_ARB_robustness;
typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC)();
GLAPI PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB;
GLAPI PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_debug_glGetGraphicsResetStatusARB;
#define glGetGraphicsResetStatusARB glad_debug_glGetGraphicsResetStatusARB
typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img);
GLAPI PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB;
GLAPI PFNGLGETNTEXIMAGEARBPROC glad_debug_glGetnTexImageARB;
#define glGetnTexImageARB glad_debug_glGetnTexImageARB
typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
GLAPI PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB;
GLAPI PFNGLREADNPIXELSARBPROC glad_debug_glReadnPixelsARB;
#define glReadnPixelsARB glad_debug_glReadnPixelsARB
typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint lod, GLsizei bufSize, void* img);
GLAPI PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB;
GLAPI PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_debug_glGetnCompressedTexImageARB;
#define glGetnCompressedTexImageARB glad_debug_glGetnCompressedTexImageARB
typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
GLAPI PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB;
GLAPI PFNGLGETNUNIFORMFVARBPROC glad_debug_glGetnUniformfvARB;
#define glGetnUniformfvARB glad_debug_glGetnUniformfvARB
typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
GLAPI PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB;
GLAPI PFNGLGETNUNIFORMIVARBPROC glad_debug_glGetnUniformivARB;
#define glGetnUniformivARB glad_debug_glGetnUniformivARB
typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
GLAPI PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB;
GLAPI PFNGLGETNUNIFORMUIVARBPROC glad_debug_glGetnUniformuivARB;
#define glGetnUniformuivARB glad_debug_glGetnUniformuivARB
typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
GLAPI PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB;
GLAPI PFNGLGETNUNIFORMDVARBPROC glad_debug_glGetnUniformdvARB;
#define glGetnUniformdvARB glad_debug_glGetnUniformdvARB
typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
GLAPI PFNGLGETNMAPDVARBPROC glad_glGetnMapdvARB;
GLAPI PFNGLGETNMAPDVARBPROC glad_debug_glGetnMapdvARB;
#define glGetnMapdvARB glad_debug_glGetnMapdvARB
typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
GLAPI PFNGLGETNMAPFVARBPROC glad_glGetnMapfvARB;
GLAPI PFNGLGETNMAPFVARBPROC glad_debug_glGetnMapfvARB;
#define glGetnMapfvARB glad_debug_glGetnMapfvARB
typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
GLAPI PFNGLGETNMAPIVARBPROC glad_glGetnMapivARB;
GLAPI PFNGLGETNMAPIVARBPROC glad_debug_glGetnMapivARB;
#define glGetnMapivARB glad_debug_glGetnMapivARB
typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC)(GLenum map, GLsizei bufSize, GLfloat* values);
GLAPI PFNGLGETNPIXELMAPFVARBPROC glad_glGetnPixelMapfvARB;
GLAPI PFNGLGETNPIXELMAPFVARBPROC glad_debug_glGetnPixelMapfvARB;
#define glGetnPixelMapfvARB glad_debug_glGetnPixelMapfvARB
typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC)(GLenum map, GLsizei bufSize, GLuint* values);
GLAPI PFNGLGETNPIXELMAPUIVARBPROC glad_glGetnPixelMapuivARB;
GLAPI PFNGLGETNPIXELMAPUIVARBPROC glad_debug_glGetnPixelMapuivARB;
#define glGetnPixelMapuivARB glad_debug_glGetnPixelMapuivARB
typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC)(GLenum map, GLsizei bufSize, GLushort* values);
GLAPI PFNGLGETNPIXELMAPUSVARBPROC glad_glGetnPixelMapusvARB;
GLAPI PFNGLGETNPIXELMAPUSVARBPROC glad_debug_glGetnPixelMapusvARB;
#define glGetnPixelMapusvARB glad_debug_glGetnPixelMapusvARB
typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei bufSize, GLubyte* pattern);
GLAPI PFNGLGETNPOLYGONSTIPPLEARBPROC glad_glGetnPolygonStippleARB;
GLAPI PFNGLGETNPOLYGONSTIPPLEARBPROC glad_debug_glGetnPolygonStippleARB;
#define glGetnPolygonStippleARB glad_debug_glGetnPolygonStippleARB
typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
GLAPI PFNGLGETNCOLORTABLEARBPROC glad_glGetnColorTableARB;
GLAPI PFNGLGETNCOLORTABLEARBPROC glad_debug_glGetnColorTableARB;
#define glGetnColorTableARB glad_debug_glGetnColorTableARB
typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
GLAPI PFNGLGETNCONVOLUTIONFILTERARBPROC glad_glGetnConvolutionFilterARB;
GLAPI PFNGLGETNCONVOLUTIONFILTERARBPROC glad_debug_glGetnConvolutionFilterARB;
#define glGetnConvolutionFilterARB glad_debug_glGetnConvolutionFilterARB
typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
GLAPI PFNGLGETNSEPARABLEFILTERARBPROC glad_glGetnSeparableFilterARB;
GLAPI PFNGLGETNSEPARABLEFILTERARBPROC glad_debug_glGetnSeparableFilterARB;
#define glGetnSeparableFilterARB glad_debug_glGetnSeparableFilterARB
typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
GLAPI PFNGLGETNHISTOGRAMARBPROC glad_glGetnHistogramARB;
GLAPI PFNGLGETNHISTOGRAMARBPROC glad_debug_glGetnHistogramARB;
#define glGetnHistogramARB glad_debug_glGetnHistogramARB
typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
GLAPI PFNGLGETNMINMAXARBPROC glad_glGetnMinmaxARB;
GLAPI PFNGLGETNMINMAXARBPROC glad_debug_glGetnMinmaxARB;
#define glGetnMinmaxARB glad_debug_glGetnMinmaxARB
#endif
#ifndef GL_NV_pixel_data_range
#define GL_NV_pixel_data_range 1
GLAPI int GLAD_GL_NV_pixel_data_range;
typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC)(GLenum target, GLsizei length, const void* pointer);
GLAPI PFNGLPIXELDATARANGENVPROC glad_glPixelDataRangeNV;
GLAPI PFNGLPIXELDATARANGENVPROC glad_debug_glPixelDataRangeNV;
#define glPixelDataRangeNV glad_debug_glPixelDataRangeNV
typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC)(GLenum target);
GLAPI PFNGLFLUSHPIXELDATARANGENVPROC glad_glFlushPixelDataRangeNV;
GLAPI PFNGLFLUSHPIXELDATARANGENVPROC glad_debug_glFlushPixelDataRangeNV;
#define glFlushPixelDataRangeNV glad_debug_glFlushPixelDataRangeNV
#endif
#ifndef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit 1
GLAPI int GLAD_GL_EXT_framebuffer_blit;
typedef void (APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI PFNGLBLITFRAMEBUFFEREXTPROC glad_glBlitFramebufferEXT;
GLAPI PFNGLBLITFRAMEBUFFEREXTPROC glad_debug_glBlitFramebufferEXT;
#define glBlitFramebufferEXT glad_debug_glBlitFramebufferEXT
#endif
#ifndef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 1
GLAPI int GLAD_GL_ARB_gpu_shader_fp64;
typedef void (APIENTRYP PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
GLAPI PFNGLUNIFORM1DPROC glad_glUniform1d;
GLAPI PFNGLUNIFORM1DPROC glad_debug_glUniform1d;
#define glUniform1d glad_debug_glUniform1d
typedef void (APIENTRYP PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
GLAPI PFNGLUNIFORM2DPROC glad_glUniform2d;
GLAPI PFNGLUNIFORM2DPROC glad_debug_glUniform2d;
#define glUniform2d glad_debug_glUniform2d
typedef void (APIENTRYP PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLUNIFORM3DPROC glad_glUniform3d;
GLAPI PFNGLUNIFORM3DPROC glad_debug_glUniform3d;
#define glUniform3d glad_debug_glUniform3d
typedef void (APIENTRYP PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLUNIFORM4DPROC glad_glUniform4d;
GLAPI PFNGLUNIFORM4DPROC glad_debug_glUniform4d;
#define glUniform4d glad_debug_glUniform4d
typedef void (APIENTRYP PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLUNIFORM1DVPROC glad_glUniform1dv;
GLAPI PFNGLUNIFORM1DVPROC glad_debug_glUniform1dv;
#define glUniform1dv glad_debug_glUniform1dv
typedef void (APIENTRYP PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLUNIFORM2DVPROC glad_glUniform2dv;
GLAPI PFNGLUNIFORM2DVPROC glad_debug_glUniform2dv;
#define glUniform2dv glad_debug_glUniform2dv
typedef void (APIENTRYP PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLUNIFORM3DVPROC glad_glUniform3dv;
GLAPI PFNGLUNIFORM3DVPROC glad_debug_glUniform3dv;
#define glUniform3dv glad_debug_glUniform3dv
typedef void (APIENTRYP PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLUNIFORM4DVPROC glad_glUniform4dv;
GLAPI PFNGLUNIFORM4DVPROC glad_debug_glUniform4dv;
#define glUniform4dv glad_debug_glUniform4dv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
GLAPI PFNGLUNIFORMMATRIX2DVPROC glad_debug_glUniformMatrix2dv;
#define glUniformMatrix2dv glad_debug_glUniformMatrix2dv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
GLAPI PFNGLUNIFORMMATRIX3DVPROC glad_debug_glUniformMatrix3dv;
#define glUniformMatrix3dv glad_debug_glUniformMatrix3dv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
GLAPI PFNGLUNIFORMMATRIX4DVPROC glad_debug_glUniformMatrix4dv;
#define glUniformMatrix4dv glad_debug_glUniformMatrix4dv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
GLAPI PFNGLUNIFORMMATRIX2X3DVPROC glad_debug_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv glad_debug_glUniformMatrix2x3dv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
GLAPI PFNGLUNIFORMMATRIX2X4DVPROC glad_debug_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv glad_debug_glUniformMatrix2x4dv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
GLAPI PFNGLUNIFORMMATRIX3X2DVPROC glad_debug_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv glad_debug_glUniformMatrix3x2dv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
GLAPI PFNGLUNIFORMMATRIX3X4DVPROC glad_debug_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv glad_debug_glUniformMatrix3x4dv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
GLAPI PFNGLUNIFORMMATRIX4X2DVPROC glad_debug_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv glad_debug_glUniformMatrix4x2dv
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
GLAPI PFNGLUNIFORMMATRIX4X3DVPROC glad_debug_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv glad_debug_glUniformMatrix4x3dv
typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble* params);
GLAPI PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
GLAPI PFNGLGETUNIFORMDVPROC glad_debug_glGetUniformdv;
#define glGetUniformdv glad_debug_glGetUniformdv
#endif
#ifndef GL_NV_command_list
#define GL_NV_command_list 1
GLAPI int GLAD_GL_NV_command_list;
typedef void (APIENTRYP PFNGLCREATESTATESNVPROC)(GLsizei n, GLuint* states);
GLAPI PFNGLCREATESTATESNVPROC glad_glCreateStatesNV;
GLAPI PFNGLCREATESTATESNVPROC glad_debug_glCreateStatesNV;
#define glCreateStatesNV glad_debug_glCreateStatesNV
typedef void (APIENTRYP PFNGLDELETESTATESNVPROC)(GLsizei n, const GLuint* states);
GLAPI PFNGLDELETESTATESNVPROC glad_glDeleteStatesNV;
GLAPI PFNGLDELETESTATESNVPROC glad_debug_glDeleteStatesNV;
#define glDeleteStatesNV glad_debug_glDeleteStatesNV
typedef GLboolean (APIENTRYP PFNGLISSTATENVPROC)(GLuint state);
GLAPI PFNGLISSTATENVPROC glad_glIsStateNV;
GLAPI PFNGLISSTATENVPROC glad_debug_glIsStateNV;
#define glIsStateNV glad_debug_glIsStateNV
typedef void (APIENTRYP PFNGLSTATECAPTURENVPROC)(GLuint state, GLenum mode);
GLAPI PFNGLSTATECAPTURENVPROC glad_glStateCaptureNV;
GLAPI PFNGLSTATECAPTURENVPROC glad_debug_glStateCaptureNV;
#define glStateCaptureNV glad_debug_glStateCaptureNV
typedef GLuint (APIENTRYP PFNGLGETCOMMANDHEADERNVPROC)(GLenum tokenID, GLuint size);
GLAPI PFNGLGETCOMMANDHEADERNVPROC glad_glGetCommandHeaderNV;
GLAPI PFNGLGETCOMMANDHEADERNVPROC glad_debug_glGetCommandHeaderNV;
#define glGetCommandHeaderNV glad_debug_glGetCommandHeaderNV
typedef GLushort (APIENTRYP PFNGLGETSTAGEINDEXNVPROC)(GLenum shadertype);
GLAPI PFNGLGETSTAGEINDEXNVPROC glad_glGetStageIndexNV;
GLAPI PFNGLGETSTAGEINDEXNVPROC glad_debug_glGetStageIndexNV;
#define glGetStageIndexNV glad_debug_glGetStageIndexNV
typedef void (APIENTRYP PFNGLDRAWCOMMANDSNVPROC)(GLenum primitiveMode, GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, GLuint count);
GLAPI PFNGLDRAWCOMMANDSNVPROC glad_glDrawCommandsNV;
GLAPI PFNGLDRAWCOMMANDSNVPROC glad_debug_glDrawCommandsNV;
#define glDrawCommandsNV glad_debug_glDrawCommandsNV
typedef void (APIENTRYP PFNGLDRAWCOMMANDSADDRESSNVPROC)(GLenum primitiveMode, const GLuint64* indirects, const GLsizei* sizes, GLuint count);
GLAPI PFNGLDRAWCOMMANDSADDRESSNVPROC glad_glDrawCommandsAddressNV;
GLAPI PFNGLDRAWCOMMANDSADDRESSNVPROC glad_debug_glDrawCommandsAddressNV;
#define glDrawCommandsAddressNV glad_debug_glDrawCommandsAddressNV
typedef void (APIENTRYP PFNGLDRAWCOMMANDSSTATESNVPROC)(GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count);
GLAPI PFNGLDRAWCOMMANDSSTATESNVPROC glad_glDrawCommandsStatesNV;
GLAPI PFNGLDRAWCOMMANDSSTATESNVPROC glad_debug_glDrawCommandsStatesNV;
#define glDrawCommandsStatesNV glad_debug_glDrawCommandsStatesNV
typedef void (APIENTRYP PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC)(const GLuint64* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count);
GLAPI PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC glad_glDrawCommandsStatesAddressNV;
GLAPI PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC glad_debug_glDrawCommandsStatesAddressNV;
#define glDrawCommandsStatesAddressNV glad_debug_glDrawCommandsStatesAddressNV
typedef void (APIENTRYP PFNGLCREATECOMMANDLISTSNVPROC)(GLsizei n, GLuint* lists);
GLAPI PFNGLCREATECOMMANDLISTSNVPROC glad_glCreateCommandListsNV;
GLAPI PFNGLCREATECOMMANDLISTSNVPROC glad_debug_glCreateCommandListsNV;
#define glCreateCommandListsNV glad_debug_glCreateCommandListsNV
typedef void (APIENTRYP PFNGLDELETECOMMANDLISTSNVPROC)(GLsizei n, const GLuint* lists);
GLAPI PFNGLDELETECOMMANDLISTSNVPROC glad_glDeleteCommandListsNV;
GLAPI PFNGLDELETECOMMANDLISTSNVPROC glad_debug_glDeleteCommandListsNV;
#define glDeleteCommandListsNV glad_debug_glDeleteCommandListsNV
typedef GLboolean (APIENTRYP PFNGLISCOMMANDLISTNVPROC)(GLuint list);
GLAPI PFNGLISCOMMANDLISTNVPROC glad_glIsCommandListNV;
GLAPI PFNGLISCOMMANDLISTNVPROC glad_debug_glIsCommandListNV;
#define glIsCommandListNV glad_debug_glIsCommandListNV
typedef void (APIENTRYP PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC)(GLuint list, GLuint segment, const void** indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count);
GLAPI PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC glad_glListDrawCommandsStatesClientNV;
GLAPI PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC glad_debug_glListDrawCommandsStatesClientNV;
#define glListDrawCommandsStatesClientNV glad_debug_glListDrawCommandsStatesClientNV
typedef void (APIENTRYP PFNGLCOMMANDLISTSEGMENTSNVPROC)(GLuint list, GLuint segments);
GLAPI PFNGLCOMMANDLISTSEGMENTSNVPROC glad_glCommandListSegmentsNV;
GLAPI PFNGLCOMMANDLISTSEGMENTSNVPROC glad_debug_glCommandListSegmentsNV;
#define glCommandListSegmentsNV glad_debug_glCommandListSegmentsNV
typedef void (APIENTRYP PFNGLCOMPILECOMMANDLISTNVPROC)(GLuint list);
GLAPI PFNGLCOMPILECOMMANDLISTNVPROC glad_glCompileCommandListNV;
GLAPI PFNGLCOMPILECOMMANDLISTNVPROC glad_debug_glCompileCommandListNV;
#define glCompileCommandListNV glad_debug_glCompileCommandListNV
typedef void (APIENTRYP PFNGLCALLCOMMANDLISTNVPROC)(GLuint list);
GLAPI PFNGLCALLCOMMANDLISTNVPROC glad_glCallCommandListNV;
GLAPI PFNGLCALLCOMMANDLISTNVPROC glad_debug_glCallCommandListNV;
#define glCallCommandListNV glad_debug_glCallCommandListNV
#endif
#ifndef GL_SGIX_depth_texture
#define GL_SGIX_depth_texture 1
GLAPI int GLAD_GL_SGIX_depth_texture;
#endif
#ifndef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting 1
GLAPI int GLAD_GL_EXT_vertex_weighting;
typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC)(GLfloat weight);
GLAPI PFNGLVERTEXWEIGHTFEXTPROC glad_glVertexWeightfEXT;
GLAPI PFNGLVERTEXWEIGHTFEXTPROC glad_debug_glVertexWeightfEXT;
#define glVertexWeightfEXT glad_debug_glVertexWeightfEXT
typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC)(const GLfloat* weight);
GLAPI PFNGLVERTEXWEIGHTFVEXTPROC glad_glVertexWeightfvEXT;
GLAPI PFNGLVERTEXWEIGHTFVEXTPROC glad_debug_glVertexWeightfvEXT;
#define glVertexWeightfvEXT glad_debug_glVertexWeightfvEXT
typedef void (APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXWEIGHTPOINTEREXTPROC glad_glVertexWeightPointerEXT;
GLAPI PFNGLVERTEXWEIGHTPOINTEREXTPROC glad_debug_glVertexWeightPointerEXT;
#define glVertexWeightPointerEXT glad_debug_glVertexWeightPointerEXT
#endif
#ifndef GL_GREMEDY_string_marker
#define GL_GREMEDY_string_marker 1
GLAPI int GLAD_GL_GREMEDY_string_marker;
typedef void (APIENTRYP PFNGLSTRINGMARKERGREMEDYPROC)(GLsizei len, const void* string);
GLAPI PFNGLSTRINGMARKERGREMEDYPROC glad_glStringMarkerGREMEDY;
GLAPI PFNGLSTRINGMARKERGREMEDYPROC glad_debug_glStringMarkerGREMEDY;
#define glStringMarkerGREMEDY glad_debug_glStringMarkerGREMEDY
#endif
#ifndef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 1
GLAPI int GLAD_GL_ARB_texture_compression_bptc;
#endif
#ifndef GL_EXT_subtexture
#define GL_EXT_subtexture 1
GLAPI int GLAD_GL_EXT_subtexture;
typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE1DEXTPROC glad_glTexSubImage1DEXT;
GLAPI PFNGLTEXSUBIMAGE1DEXTPROC glad_debug_glTexSubImage1DEXT;
#define glTexSubImage1DEXT glad_debug_glTexSubImage1DEXT
typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE2DEXTPROC glad_glTexSubImage2DEXT;
GLAPI PFNGLTEXSUBIMAGE2DEXTPROC glad_debug_glTexSubImage2DEXT;
#define glTexSubImage2DEXT glad_debug_glTexSubImage2DEXT
#endif
#ifndef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table 1
GLAPI int GLAD_GL_EXT_pixel_transform_color_table;
#endif
#ifndef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc 1
GLAPI int GLAD_GL_EXT_texture_compression_rgtc;
#endif
#ifndef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 1
GLAPI int GLAD_GL_ARB_shader_atomic_counter_ops;
#endif
#ifndef GL_SGIX_depth_pass_instrument
#define GL_SGIX_depth_pass_instrument 1
GLAPI int GLAD_GL_SGIX_depth_pass_instrument;
#endif
#ifndef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters 1
GLAPI int GLAD_GL_EXT_gpu_program_parameters;
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat* params);
GLAPI PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glad_glProgramEnvParameters4fvEXT;
GLAPI PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glad_debug_glProgramEnvParameters4fvEXT;
#define glProgramEnvParameters4fvEXT glad_debug_glProgramEnvParameters4fvEXT
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat* params);
GLAPI PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glad_glProgramLocalParameters4fvEXT;
GLAPI PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glad_debug_glProgramLocalParameters4fvEXT;
#define glProgramLocalParameters4fvEXT glad_debug_glProgramLocalParameters4fvEXT
#endif
#ifndef GL_NV_evaluators
#define GL_NV_evaluators 1
GLAPI int GLAD_GL_NV_evaluators;
typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void* points);
GLAPI PFNGLMAPCONTROLPOINTSNVPROC glad_glMapControlPointsNV;
GLAPI PFNGLMAPCONTROLPOINTSNVPROC glad_debug_glMapControlPointsNV;
#define glMapControlPointsNV glad_debug_glMapControlPointsNV
typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLMAPPARAMETERIVNVPROC glad_glMapParameterivNV;
GLAPI PFNGLMAPPARAMETERIVNVPROC glad_debug_glMapParameterivNV;
#define glMapParameterivNV glad_debug_glMapParameterivNV
typedef void (APIENTRYP PFNGLMAPPARAMETERFVNVPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLMAPPARAMETERFVNVPROC glad_glMapParameterfvNV;
GLAPI PFNGLMAPPARAMETERFVNVPROC glad_debug_glMapParameterfvNV;
#define glMapParameterfvNV glad_debug_glMapParameterfvNV
typedef void (APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void* points);
GLAPI PFNGLGETMAPCONTROLPOINTSNVPROC glad_glGetMapControlPointsNV;
GLAPI PFNGLGETMAPCONTROLPOINTSNVPROC glad_debug_glGetMapControlPointsNV;
#define glGetMapControlPointsNV glad_debug_glGetMapControlPointsNV
typedef void (APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETMAPPARAMETERIVNVPROC glad_glGetMapParameterivNV;
GLAPI PFNGLGETMAPPARAMETERIVNVPROC glad_debug_glGetMapParameterivNV;
#define glGetMapParameterivNV glad_debug_glGetMapParameterivNV
typedef void (APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETMAPPARAMETERFVNVPROC glad_glGetMapParameterfvNV;
GLAPI PFNGLGETMAPPARAMETERFVNVPROC glad_debug_glGetMapParameterfvNV;
#define glGetMapParameterfvNV glad_debug_glGetMapParameterfvNV
typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC)(GLenum target, GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETMAPATTRIBPARAMETERIVNVPROC glad_glGetMapAttribParameterivNV;
GLAPI PFNGLGETMAPATTRIBPARAMETERIVNVPROC glad_debug_glGetMapAttribParameterivNV;
#define glGetMapAttribParameterivNV glad_debug_glGetMapAttribParameterivNV
typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat* params);
GLAPI PFNGLGETMAPATTRIBPARAMETERFVNVPROC glad_glGetMapAttribParameterfvNV;
GLAPI PFNGLGETMAPATTRIBPARAMETERFVNVPROC glad_debug_glGetMapAttribParameterfvNV;
#define glGetMapAttribParameterfvNV glad_debug_glGetMapAttribParameterfvNV
typedef void (APIENTRYP PFNGLEVALMAPSNVPROC)(GLenum target, GLenum mode);
GLAPI PFNGLEVALMAPSNVPROC glad_glEvalMapsNV;
GLAPI PFNGLEVALMAPSNVPROC glad_debug_glEvalMapsNV;
#define glEvalMapsNV glad_debug_glEvalMapsNV
#endif
#ifndef GL_SGIS_texture_filter4
#define GL_SGIS_texture_filter4 1
GLAPI int GLAD_GL_SGIS_texture_filter4;
typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLfloat* weights);
GLAPI PFNGLGETTEXFILTERFUNCSGISPROC glad_glGetTexFilterFuncSGIS;
GLAPI PFNGLGETTEXFILTERFUNCSGISPROC glad_debug_glGetTexFilterFuncSGIS;
#define glGetTexFilterFuncSGIS glad_debug_glGetTexFilterFuncSGIS
typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC)(GLenum target, GLenum filter, GLsizei n, const GLfloat* weights);
GLAPI PFNGLTEXFILTERFUNCSGISPROC glad_glTexFilterFuncSGIS;
GLAPI PFNGLTEXFILTERFUNCSGISPROC glad_debug_glTexFilterFuncSGIS;
#define glTexFilterFuncSGIS glad_debug_glTexFilterFuncSGIS
#endif
#ifndef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor 1
GLAPI int GLAD_GL_AMD_performance_monitor;
typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC)(GLint* numGroups, GLsizei groupsSize, GLuint* groups);
GLAPI PFNGLGETPERFMONITORGROUPSAMDPROC glad_glGetPerfMonitorGroupsAMD;
GLAPI PFNGLGETPERFMONITORGROUPSAMDPROC glad_debug_glGetPerfMonitorGroupsAMD;
#define glGetPerfMonitorGroupsAMD glad_debug_glGetPerfMonitorGroupsAMD
typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC)(GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters);
GLAPI PFNGLGETPERFMONITORCOUNTERSAMDPROC glad_glGetPerfMonitorCountersAMD;
GLAPI PFNGLGETPERFMONITORCOUNTERSAMDPROC glad_debug_glGetPerfMonitorCountersAMD;
#define glGetPerfMonitorCountersAMD glad_debug_glGetPerfMonitorCountersAMD
typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)(GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString);
GLAPI PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glad_glGetPerfMonitorGroupStringAMD;
GLAPI PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glad_debug_glGetPerfMonitorGroupStringAMD;
#define glGetPerfMonitorGroupStringAMD glad_debug_glGetPerfMonitorGroupStringAMD
typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString);
GLAPI PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glad_glGetPerfMonitorCounterStringAMD;
GLAPI PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glad_debug_glGetPerfMonitorCounterStringAMD;
#define glGetPerfMonitorCounterStringAMD glad_debug_glGetPerfMonitorCounterStringAMD
typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)(GLuint group, GLuint counter, GLenum pname, void* data);
GLAPI PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glad_glGetPerfMonitorCounterInfoAMD;
GLAPI PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glad_debug_glGetPerfMonitorCounterInfoAMD;
#define glGetPerfMonitorCounterInfoAMD glad_debug_glGetPerfMonitorCounterInfoAMD
typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC)(GLsizei n, GLuint* monitors);
GLAPI PFNGLGENPERFMONITORSAMDPROC glad_glGenPerfMonitorsAMD;
GLAPI PFNGLGENPERFMONITORSAMDPROC glad_debug_glGenPerfMonitorsAMD;
#define glGenPerfMonitorsAMD glad_debug_glGenPerfMonitorsAMD
typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC)(GLsizei n, GLuint* monitors);
GLAPI PFNGLDELETEPERFMONITORSAMDPROC glad_glDeletePerfMonitorsAMD;
GLAPI PFNGLDELETEPERFMONITORSAMDPROC glad_debug_glDeletePerfMonitorsAMD;
#define glDeletePerfMonitorsAMD glad_debug_glDeletePerfMonitorsAMD
typedef void (APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList);
GLAPI PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glad_glSelectPerfMonitorCountersAMD;
GLAPI PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glad_debug_glSelectPerfMonitorCountersAMD;
#define glSelectPerfMonitorCountersAMD glad_debug_glSelectPerfMonitorCountersAMD
typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC)(GLuint monitor);
GLAPI PFNGLBEGINPERFMONITORAMDPROC glad_glBeginPerfMonitorAMD;
GLAPI PFNGLBEGINPERFMONITORAMDPROC glad_debug_glBeginPerfMonitorAMD;
#define glBeginPerfMonitorAMD glad_debug_glBeginPerfMonitorAMD
typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC)(GLuint monitor);
GLAPI PFNGLENDPERFMONITORAMDPROC glad_glEndPerfMonitorAMD;
GLAPI PFNGLENDPERFMONITORAMDPROC glad_debug_glEndPerfMonitorAMD;
#define glEndPerfMonitorAMD glad_debug_glEndPerfMonitorAMD
typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten);
GLAPI PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glad_glGetPerfMonitorCounterDataAMD;
GLAPI PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glad_debug_glGetPerfMonitorCounterDataAMD;
#define glGetPerfMonitorCounterDataAMD glad_debug_glGetPerfMonitorCounterDataAMD
#endif
#ifndef GL_NV_geometry_shader4
#define GL_NV_geometry_shader4 1
GLAPI int GLAD_GL_NV_geometry_shader4;
#endif
#ifndef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag 1
GLAPI int GLAD_GL_EXT_stencil_clear_tag;
typedef void (APIENTRYP PFNGLSTENCILCLEARTAGEXTPROC)(GLsizei stencilTagBits, GLuint stencilClearTag);
GLAPI PFNGLSTENCILCLEARTAGEXTPROC glad_glStencilClearTagEXT;
GLAPI PFNGLSTENCILCLEARTAGEXTPROC glad_debug_glStencilClearTagEXT;
#define glStencilClearTagEXT glad_debug_glStencilClearTagEXT
#endif
#ifndef GL_NV_vertex_program1_1
#define GL_NV_vertex_program1_1 1
GLAPI int GLAD_GL_NV_vertex_program1_1;
#endif
#ifndef GL_NV_present_video
#define GL_NV_present_video 1
GLAPI int GLAD_GL_NV_present_video;
typedef void (APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
GLAPI PFNGLPRESENTFRAMEKEYEDNVPROC glad_glPresentFrameKeyedNV;
GLAPI PFNGLPRESENTFRAMEKEYEDNVPROC glad_debug_glPresentFrameKeyedNV;
#define glPresentFrameKeyedNV glad_debug_glPresentFrameKeyedNV
typedef void (APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
GLAPI PFNGLPRESENTFRAMEDUALFILLNVPROC glad_glPresentFrameDualFillNV;
GLAPI PFNGLPRESENTFRAMEDUALFILLNVPROC glad_debug_glPresentFrameDualFillNV;
#define glPresentFrameDualFillNV glad_debug_glPresentFrameDualFillNV
typedef void (APIENTRYP PFNGLGETVIDEOIVNVPROC)(GLuint video_slot, GLenum pname, GLint* params);
GLAPI PFNGLGETVIDEOIVNVPROC glad_glGetVideoivNV;
GLAPI PFNGLGETVIDEOIVNVPROC glad_debug_glGetVideoivNV;
#define glGetVideoivNV glad_debug_glGetVideoivNV
typedef void (APIENTRYP PFNGLGETVIDEOUIVNVPROC)(GLuint video_slot, GLenum pname, GLuint* params);
GLAPI PFNGLGETVIDEOUIVNVPROC glad_glGetVideouivNV;
GLAPI PFNGLGETVIDEOUIVNVPROC glad_debug_glGetVideouivNV;
#define glGetVideouivNV glad_debug_glGetVideouivNV
typedef void (APIENTRYP PFNGLGETVIDEOI64VNVPROC)(GLuint video_slot, GLenum pname, GLint64EXT* params);
GLAPI PFNGLGETVIDEOI64VNVPROC glad_glGetVideoi64vNV;
GLAPI PFNGLGETVIDEOI64VNVPROC glad_debug_glGetVideoi64vNV;
#define glGetVideoi64vNV glad_debug_glGetVideoi64vNV
typedef void (APIENTRYP PFNGLGETVIDEOUI64VNVPROC)(GLuint video_slot, GLenum pname, GLuint64EXT* params);
GLAPI PFNGLGETVIDEOUI64VNVPROC glad_glGetVideoui64vNV;
GLAPI PFNGLGETVIDEOUI64VNVPROC glad_debug_glGetVideoui64vNV;
#define glGetVideoui64vNV glad_debug_glGetVideoui64vNV
#endif
#ifndef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 1
GLAPI int GLAD_GL_ARB_texture_compression_rgtc;
#endif
#ifndef GL_HP_convolution_border_modes
#define GL_HP_convolution_border_modes 1
GLAPI int GLAD_GL_HP_convolution_border_modes;
#endif
#ifndef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 1
GLAPI int GLAD_GL_EXT_shader_integer_mix;
#endif
#ifndef GL_SGIX_framezoom
#define GL_SGIX_framezoom 1
GLAPI int GLAD_GL_SGIX_framezoom;
typedef void (APIENTRYP PFNGLFRAMEZOOMSGIXPROC)(GLint factor);
GLAPI PFNGLFRAMEZOOMSGIXPROC glad_glFrameZoomSGIX;
GLAPI PFNGLFRAMEZOOMSGIXPROC glad_debug_glFrameZoomSGIX;
#define glFrameZoomSGIX glad_debug_glFrameZoomSGIX
#endif
#ifndef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 1
GLAPI int GLAD_GL_ARB_stencil_texturing;
#endif
#ifndef GL_ARB_shader_clock
#define GL_ARB_shader_clock 1
GLAPI int GLAD_GL_ARB_shader_clock;
#endif
#ifndef GL_NV_shader_atomic_fp16_vector
#define GL_NV_shader_atomic_fp16_vector 1
GLAPI int GLAD_GL_NV_shader_atomic_fp16_vector;
#endif
#ifndef GL_SGIX_fog_offset
#define GL_SGIX_fog_offset 1
GLAPI int GLAD_GL_SGIX_fog_offset;
#endif
#ifndef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 1
GLAPI int GLAD_GL_ARB_draw_elements_base_vertex;
#endif
#ifndef GL_INGR_interlace_read
#define GL_INGR_interlace_read 1
GLAPI int GLAD_GL_INGR_interlace_read;
#endif
#ifndef GL_NV_transform_feedback
#define GL_NV_transform_feedback 1
GLAPI int GLAD_GL_NV_transform_feedback;
typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC)(GLenum primitiveMode);
GLAPI PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_glBeginTransformFeedbackNV;
GLAPI PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_debug_glBeginTransformFeedbackNV;
#define glBeginTransformFeedbackNV glad_debug_glBeginTransformFeedbackNV
typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC)();
GLAPI PFNGLENDTRANSFORMFEEDBACKNVPROC glad_glEndTransformFeedbackNV;
GLAPI PFNGLENDTRANSFORMFEEDBACKNVPROC glad_debug_glEndTransformFeedbackNV;
#define glEndTransformFeedbackNV glad_debug_glEndTransformFeedbackNV
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)(GLsizei count, const GLint* attribs, GLenum bufferMode);
GLAPI PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glad_glTransformFeedbackAttribsNV;
GLAPI PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glad_debug_glTransformFeedbackAttribsNV;
#define glTransformFeedbackAttribsNV glad_debug_glTransformFeedbackAttribsNV
typedef void (APIENTRYP PFNGLBINDBUFFERRANGENVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLBINDBUFFERRANGENVPROC glad_glBindBufferRangeNV;
GLAPI PFNGLBINDBUFFERRANGENVPROC glad_debug_glBindBufferRangeNV;
#define glBindBufferRangeNV glad_debug_glBindBufferRangeNV
typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
GLAPI PFNGLBINDBUFFEROFFSETNVPROC glad_glBindBufferOffsetNV;
GLAPI PFNGLBINDBUFFEROFFSETNVPROC glad_debug_glBindBufferOffsetNV;
#define glBindBufferOffsetNV glad_debug_glBindBufferOffsetNV
typedef void (APIENTRYP PFNGLBINDBUFFERBASENVPROC)(GLenum target, GLuint index, GLuint buffer);
GLAPI PFNGLBINDBUFFERBASENVPROC glad_glBindBufferBaseNV;
GLAPI PFNGLBINDBUFFERBASENVPROC glad_debug_glBindBufferBaseNV;
#define glBindBufferBaseNV glad_debug_glBindBufferBaseNV
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)(GLuint program, GLsizei count, const GLint* locations, GLenum bufferMode);
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glad_glTransformFeedbackVaryingsNV;
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glad_debug_glTransformFeedbackVaryingsNV;
#define glTransformFeedbackVaryingsNV glad_debug_glTransformFeedbackVaryingsNV
typedef void (APIENTRYP PFNGLACTIVEVARYINGNVPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLACTIVEVARYINGNVPROC glad_glActiveVaryingNV;
GLAPI PFNGLACTIVEVARYINGNVPROC glad_debug_glActiveVaryingNV;
#define glActiveVaryingNV glad_debug_glActiveVaryingNV
typedef GLint (APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETVARYINGLOCATIONNVPROC glad_glGetVaryingLocationNV;
GLAPI PFNGLGETVARYINGLOCATIONNVPROC glad_debug_glGetVaryingLocationNV;
#define glGetVaryingLocationNV glad_debug_glGetVaryingLocationNV
typedef void (APIENTRYP PFNGLGETACTIVEVARYINGNVPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
GLAPI PFNGLGETACTIVEVARYINGNVPROC glad_glGetActiveVaryingNV;
GLAPI PFNGLGETACTIVEVARYINGNVPROC glad_debug_glGetActiveVaryingNV;
#define glGetActiveVaryingNV glad_debug_glGetActiveVaryingNV
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)(GLuint program, GLuint index, GLint* location);
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glad_glGetTransformFeedbackVaryingNV;
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glad_debug_glGetTransformFeedbackVaryingNV;
#define glGetTransformFeedbackVaryingNV glad_debug_glGetTransformFeedbackVaryingNV
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)(GLsizei count, const GLint* attribs, GLsizei nbuffers, const GLint* bufstreams, GLenum bufferMode);
GLAPI PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glad_glTransformFeedbackStreamAttribsNV;
GLAPI PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glad_debug_glTransformFeedbackStreamAttribsNV;
#define glTransformFeedbackStreamAttribsNV glad_debug_glTransformFeedbackStreamAttribsNV
#endif
#ifndef GL_NV_fragment_program
#define GL_NV_fragment_program 1
GLAPI int GLAD_GL_NV_fragment_program;
typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)(GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glad_glProgramNamedParameter4fNV;
GLAPI PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glad_debug_glProgramNamedParameter4fNV;
#define glProgramNamedParameter4fNV glad_debug_glProgramNamedParameter4fNV
typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)(GLuint id, GLsizei len, const GLubyte* name, const GLfloat* v);
GLAPI PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glad_glProgramNamedParameter4fvNV;
GLAPI PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glad_debug_glProgramNamedParameter4fvNV;
#define glProgramNamedParameter4fvNV glad_debug_glProgramNamedParameter4fvNV
typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)(GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glad_glProgramNamedParameter4dNV;
GLAPI PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glad_debug_glProgramNamedParameter4dNV;
#define glProgramNamedParameter4dNV glad_debug_glProgramNamedParameter4dNV
typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)(GLuint id, GLsizei len, const GLubyte* name, const GLdouble* v);
GLAPI PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glad_glProgramNamedParameter4dvNV;
GLAPI PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glad_debug_glProgramNamedParameter4dvNV;
#define glProgramNamedParameter4dvNV glad_debug_glProgramNamedParameter4dvNV
typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)(GLuint id, GLsizei len, const GLubyte* name, GLfloat* params);
GLAPI PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glad_glGetProgramNamedParameterfvNV;
GLAPI PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glad_debug_glGetProgramNamedParameterfvNV;
#define glGetProgramNamedParameterfvNV glad_debug_glGetProgramNamedParameterfvNV
typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)(GLuint id, GLsizei len, const GLubyte* name, GLdouble* params);
GLAPI PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glad_glGetProgramNamedParameterdvNV;
GLAPI PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glad_debug_glGetProgramNamedParameterdvNV;
#define glGetProgramNamedParameterdvNV glad_debug_glGetProgramNamedParameterdvNV
#endif
#ifndef GL_AMD_stencil_operation_extended
#define GL_AMD_stencil_operation_extended 1
GLAPI int GLAD_GL_AMD_stencil_operation_extended;
typedef void (APIENTRYP PFNGLSTENCILOPVALUEAMDPROC)(GLenum face, GLuint value);
GLAPI PFNGLSTENCILOPVALUEAMDPROC glad_glStencilOpValueAMD;
GLAPI PFNGLSTENCILOPVALUEAMDPROC glad_debug_glStencilOpValueAMD;
#define glStencilOpValueAMD glad_debug_glStencilOpValueAMD
#endif
#ifndef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 1
GLAPI int GLAD_GL_ARB_seamless_cubemap_per_texture;
#endif
#ifndef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 1
GLAPI int GLAD_GL_ARB_instanced_arrays;
typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC)(GLuint index, GLuint divisor);
GLAPI PFNGLVERTEXATTRIBDIVISORARBPROC glad_glVertexAttribDivisorARB;
GLAPI PFNGLVERTEXATTRIBDIVISORARBPROC glad_debug_glVertexAttribDivisorARB;
#define glVertexAttribDivisorARB glad_debug_glVertexAttribDivisorARB
#endif
#ifndef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 1
GLAPI int GLAD_GL_ARB_get_texture_sub_image;
typedef void (APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage;
GLAPI PFNGLGETTEXTURESUBIMAGEPROC glad_debug_glGetTextureSubImage;
#define glGetTextureSubImage glad_debug_glGetTextureSubImage
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage;
GLAPI PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_debug_glGetCompressedTextureSubImage;
#define glGetCompressedTextureSubImage glad_debug_glGetCompressedTextureSubImage
#endif
#ifndef GL_NV_vertex_array_range2
#define GL_NV_vertex_array_range2 1
GLAPI int GLAD_GL_NV_vertex_array_range2;
#endif
#ifndef GL_KHR_robustness
#define GL_KHR_robustness 1
GLAPI int GLAD_GL_KHR_robustness;
typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSPROC)();
GLAPI PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus;
GLAPI PFNGLGETGRAPHICSRESETSTATUSPROC glad_debug_glGetGraphicsResetStatus;
#define glGetGraphicsResetStatus glad_debug_glGetGraphicsResetStatus
typedef void (APIENTRYP PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
GLAPI PFNGLREADNPIXELSPROC glad_glReadnPixels;
GLAPI PFNGLREADNPIXELSPROC glad_debug_glReadnPixels;
#define glReadnPixels glad_debug_glReadnPixels
typedef void (APIENTRYP PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
GLAPI PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv;
GLAPI PFNGLGETNUNIFORMFVPROC glad_debug_glGetnUniformfv;
#define glGetnUniformfv glad_debug_glGetnUniformfv
typedef void (APIENTRYP PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
GLAPI PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv;
GLAPI PFNGLGETNUNIFORMIVPROC glad_debug_glGetnUniformiv;
#define glGetnUniformiv glad_debug_glGetnUniformiv
typedef void (APIENTRYP PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
GLAPI PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv;
GLAPI PFNGLGETNUNIFORMUIVPROC glad_debug_glGetnUniformuiv;
#define glGetnUniformuiv glad_debug_glGetnUniformuiv
typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSKHRPROC)();
GLAPI PFNGLGETGRAPHICSRESETSTATUSKHRPROC glad_glGetGraphicsResetStatusKHR;
GLAPI PFNGLGETGRAPHICSRESETSTATUSKHRPROC glad_debug_glGetGraphicsResetStatusKHR;
#define glGetGraphicsResetStatusKHR glad_debug_glGetGraphicsResetStatusKHR
typedef void (APIENTRYP PFNGLREADNPIXELSKHRPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
GLAPI PFNGLREADNPIXELSKHRPROC glad_glReadnPixelsKHR;
GLAPI PFNGLREADNPIXELSKHRPROC glad_debug_glReadnPixelsKHR;
#define glReadnPixelsKHR glad_debug_glReadnPixelsKHR
typedef void (APIENTRYP PFNGLGETNUNIFORMFVKHRPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
GLAPI PFNGLGETNUNIFORMFVKHRPROC glad_glGetnUniformfvKHR;
GLAPI PFNGLGETNUNIFORMFVKHRPROC glad_debug_glGetnUniformfvKHR;
#define glGetnUniformfvKHR glad_debug_glGetnUniformfvKHR
typedef void (APIENTRYP PFNGLGETNUNIFORMIVKHRPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
GLAPI PFNGLGETNUNIFORMIVKHRPROC glad_glGetnUniformivKHR;
GLAPI PFNGLGETNUNIFORMIVKHRPROC glad_debug_glGetnUniformivKHR;
#define glGetnUniformivKHR glad_debug_glGetnUniformivKHR
typedef void (APIENTRYP PFNGLGETNUNIFORMUIVKHRPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
GLAPI PFNGLGETNUNIFORMUIVKHRPROC glad_glGetnUniformuivKHR;
GLAPI PFNGLGETNUNIFORMUIVKHRPROC glad_debug_glGetnUniformuivKHR;
#define glGetnUniformuivKHR glad_debug_glGetnUniformuivKHR
#endif
#ifndef GL_AMD_sparse_texture
#define GL_AMD_sparse_texture 1
GLAPI int GLAD_GL_AMD_sparse_texture;
typedef void (APIENTRYP PFNGLTEXSTORAGESPARSEAMDPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
GLAPI PFNGLTEXSTORAGESPARSEAMDPROC glad_glTexStorageSparseAMD;
GLAPI PFNGLTEXSTORAGESPARSEAMDPROC glad_debug_glTexStorageSparseAMD;
#define glTexStorageSparseAMD glad_debug_glTexStorageSparseAMD
typedef void (APIENTRYP PFNGLTEXTURESTORAGESPARSEAMDPROC)(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
GLAPI PFNGLTEXTURESTORAGESPARSEAMDPROC glad_glTextureStorageSparseAMD;
GLAPI PFNGLTEXTURESTORAGESPARSEAMDPROC glad_debug_glTextureStorageSparseAMD;
#define glTextureStorageSparseAMD glad_debug_glTextureStorageSparseAMD
#endif
#ifndef GL_ARB_clip_control
#define GL_ARB_clip_control 1
GLAPI int GLAD_GL_ARB_clip_control;
typedef void (APIENTRYP PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
GLAPI PFNGLCLIPCONTROLPROC glad_glClipControl;
GLAPI PFNGLCLIPCONTROLPROC glad_debug_glClipControl;
#define glClipControl glad_debug_glClipControl
#endif
#ifndef GL_NV_fragment_coverage_to_color
#define GL_NV_fragment_coverage_to_color 1
GLAPI int GLAD_GL_NV_fragment_coverage_to_color;
typedef void (APIENTRYP PFNGLFRAGMENTCOVERAGECOLORNVPROC)(GLuint color);
GLAPI PFNGLFRAGMENTCOVERAGECOLORNVPROC glad_glFragmentCoverageColorNV;
GLAPI PFNGLFRAGMENTCOVERAGECOLORNVPROC glad_debug_glFragmentCoverageColorNV;
#define glFragmentCoverageColorNV glad_debug_glFragmentCoverageColorNV
#endif
#ifndef GL_NV_fence
#define GL_NV_fence 1
GLAPI int GLAD_GL_NV_fence;
typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC)(GLsizei n, const GLuint* fences);
GLAPI PFNGLDELETEFENCESNVPROC glad_glDeleteFencesNV;
GLAPI PFNGLDELETEFENCESNVPROC glad_debug_glDeleteFencesNV;
#define glDeleteFencesNV glad_debug_glDeleteFencesNV
typedef void (APIENTRYP PFNGLGENFENCESNVPROC)(GLsizei n, GLuint* fences);
GLAPI PFNGLGENFENCESNVPROC glad_glGenFencesNV;
GLAPI PFNGLGENFENCESNVPROC glad_debug_glGenFencesNV;
#define glGenFencesNV glad_debug_glGenFencesNV
typedef GLboolean (APIENTRYP PFNGLISFENCENVPROC)(GLuint fence);
GLAPI PFNGLISFENCENVPROC glad_glIsFenceNV;
GLAPI PFNGLISFENCENVPROC glad_debug_glIsFenceNV;
#define glIsFenceNV glad_debug_glIsFenceNV
typedef GLboolean (APIENTRYP PFNGLTESTFENCENVPROC)(GLuint fence);
GLAPI PFNGLTESTFENCENVPROC glad_glTestFenceNV;
GLAPI PFNGLTESTFENCENVPROC glad_debug_glTestFenceNV;
#define glTestFenceNV glad_debug_glTestFenceNV
typedef void (APIENTRYP PFNGLGETFENCEIVNVPROC)(GLuint fence, GLenum pname, GLint* params);
GLAPI PFNGLGETFENCEIVNVPROC glad_glGetFenceivNV;
GLAPI PFNGLGETFENCEIVNVPROC glad_debug_glGetFenceivNV;
#define glGetFenceivNV glad_debug_glGetFenceivNV
typedef void (APIENTRYP PFNGLFINISHFENCENVPROC)(GLuint fence);
GLAPI PFNGLFINISHFENCENVPROC glad_glFinishFenceNV;
GLAPI PFNGLFINISHFENCENVPROC glad_debug_glFinishFenceNV;
#define glFinishFenceNV glad_debug_glFinishFenceNV
typedef void (APIENTRYP PFNGLSETFENCENVPROC)(GLuint fence, GLenum condition);
GLAPI PFNGLSETFENCENVPROC glad_glSetFenceNV;
GLAPI PFNGLSETFENCENVPROC glad_debug_glSetFenceNV;
#define glSetFenceNV glad_debug_glSetFenceNV
#endif
#ifndef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 1
GLAPI int GLAD_GL_ARB_texture_buffer_range;
typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange;
GLAPI PFNGLTEXBUFFERRANGEPROC glad_debug_glTexBufferRange;
#define glTexBufferRange glad_debug_glTexBufferRange
#endif
#ifndef GL_SUN_mesh_array
#define GL_SUN_mesh_array 1
GLAPI int GLAD_GL_SUN_mesh_array;
typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC)(GLenum mode, GLint first, GLsizei count, GLsizei width);
GLAPI PFNGLDRAWMESHARRAYSSUNPROC glad_glDrawMeshArraysSUN;
GLAPI PFNGLDRAWMESHARRAYSSUNPROC glad_debug_glDrawMeshArraysSUN;
#define glDrawMeshArraysSUN glad_debug_glDrawMeshArraysSUN
#endif
#ifndef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 1
GLAPI int GLAD_GL_ARB_vertex_attrib_binding;
typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer;
GLAPI PFNGLBINDVERTEXBUFFERPROC glad_debug_glBindVertexBuffer;
#define glBindVertexBuffer glad_debug_glBindVertexBuffer
typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat;
GLAPI PFNGLVERTEXATTRIBFORMATPROC glad_debug_glVertexAttribFormat;
#define glVertexAttribFormat glad_debug_glVertexAttribFormat
typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat;
GLAPI PFNGLVERTEXATTRIBIFORMATPROC glad_debug_glVertexAttribIFormat;
#define glVertexAttribIFormat glad_debug_glVertexAttribIFormat
typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat;
GLAPI PFNGLVERTEXATTRIBLFORMATPROC glad_debug_glVertexAttribLFormat;
#define glVertexAttribLFormat glad_debug_glVertexAttribLFormat
typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding;
GLAPI PFNGLVERTEXATTRIBBINDINGPROC glad_debug_glVertexAttribBinding;
#define glVertexAttribBinding glad_debug_glVertexAttribBinding
typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor;
GLAPI PFNGLVERTEXBINDINGDIVISORPROC glad_debug_glVertexBindingDivisor;
#define glVertexBindingDivisor glad_debug_glVertexBindingDivisor
#endif
#ifndef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 1
GLAPI int GLAD_GL_ARB_framebuffer_no_attachments;
typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri;
GLAPI PFNGLFRAMEBUFFERPARAMETERIPROC glad_debug_glFramebufferParameteri;
#define glFramebufferParameteri glad_debug_glFramebufferParameteri
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv;
GLAPI PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_debug_glGetFramebufferParameteriv;
#define glGetFramebufferParameteriv glad_debug_glGetFramebufferParameteriv
#endif
#ifndef GL_ARB_cl_event
#define GL_ARB_cl_event 1
GLAPI int GLAD_GL_ARB_cl_event;
typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC)(struct _cl_context* context, struct _cl_event* event, GLbitfield flags);
GLAPI PFNGLCREATESYNCFROMCLEVENTARBPROC glad_glCreateSyncFromCLeventARB;
GLAPI PFNGLCREATESYNCFROMCLEVENTARBPROC glad_debug_glCreateSyncFromCLeventARB;
#define glCreateSyncFromCLeventARB glad_debug_glCreateSyncFromCLeventARB
#endif
#ifndef GL_ARB_derivative_control
#define GL_ARB_derivative_control 1
GLAPI int GLAD_GL_ARB_derivative_control;
#endif
#ifndef GL_NV_packed_depth_stencil
#define GL_NV_packed_depth_stencil 1
GLAPI int GLAD_GL_NV_packed_depth_stencil;
#endif
#ifndef GL_OES_single_precision
#define GL_OES_single_precision 1
GLAPI int GLAD_GL_OES_single_precision;
typedef void (APIENTRYP PFNGLCLEARDEPTHFOESPROC)(GLclampf depth);
GLAPI PFNGLCLEARDEPTHFOESPROC glad_glClearDepthfOES;
GLAPI PFNGLCLEARDEPTHFOESPROC glad_debug_glClearDepthfOES;
#define glClearDepthfOES glad_debug_glClearDepthfOES
typedef void (APIENTRYP PFNGLCLIPPLANEFOESPROC)(GLenum plane, const GLfloat* equation);
GLAPI PFNGLCLIPPLANEFOESPROC glad_glClipPlanefOES;
GLAPI PFNGLCLIPPLANEFOESPROC glad_debug_glClipPlanefOES;
#define glClipPlanefOES glad_debug_glClipPlanefOES
typedef void (APIENTRYP PFNGLDEPTHRANGEFOESPROC)(GLclampf n, GLclampf f);
GLAPI PFNGLDEPTHRANGEFOESPROC glad_glDepthRangefOES;
GLAPI PFNGLDEPTHRANGEFOESPROC glad_debug_glDepthRangefOES;
#define glDepthRangefOES glad_debug_glDepthRangefOES
typedef void (APIENTRYP PFNGLFRUSTUMFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
GLAPI PFNGLFRUSTUMFOESPROC glad_glFrustumfOES;
GLAPI PFNGLFRUSTUMFOESPROC glad_debug_glFrustumfOES;
#define glFrustumfOES glad_debug_glFrustumfOES
typedef void (APIENTRYP PFNGLGETCLIPPLANEFOESPROC)(GLenum plane, GLfloat* equation);
GLAPI PFNGLGETCLIPPLANEFOESPROC glad_glGetClipPlanefOES;
GLAPI PFNGLGETCLIPPLANEFOESPROC glad_debug_glGetClipPlanefOES;
#define glGetClipPlanefOES glad_debug_glGetClipPlanefOES
typedef void (APIENTRYP PFNGLORTHOFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
GLAPI PFNGLORTHOFOESPROC glad_glOrthofOES;
GLAPI PFNGLORTHOFOESPROC glad_debug_glOrthofOES;
#define glOrthofOES glad_debug_glOrthofOES
#endif
#ifndef GL_NV_primitive_restart
#define GL_NV_primitive_restart 1
GLAPI int GLAD_GL_NV_primitive_restart;
typedef void (APIENTRYP PFNGLPRIMITIVERESTARTNVPROC)();
GLAPI PFNGLPRIMITIVERESTARTNVPROC glad_glPrimitiveRestartNV;
GLAPI PFNGLPRIMITIVERESTARTNVPROC glad_debug_glPrimitiveRestartNV;
#define glPrimitiveRestartNV glad_debug_glPrimitiveRestartNV
typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC)(GLuint index);
GLAPI PFNGLPRIMITIVERESTARTINDEXNVPROC glad_glPrimitiveRestartIndexNV;
GLAPI PFNGLPRIMITIVERESTARTINDEXNVPROC glad_debug_glPrimitiveRestartIndexNV;
#define glPrimitiveRestartIndexNV glad_debug_glPrimitiveRestartIndexNV
#endif
#ifndef GL_SUN_global_alpha
#define GL_SUN_global_alpha 1
GLAPI int GLAD_GL_SUN_global_alpha;
typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC)(GLbyte factor);
GLAPI PFNGLGLOBALALPHAFACTORBSUNPROC glad_glGlobalAlphaFactorbSUN;
GLAPI PFNGLGLOBALALPHAFACTORBSUNPROC glad_debug_glGlobalAlphaFactorbSUN;
#define glGlobalAlphaFactorbSUN glad_debug_glGlobalAlphaFactorbSUN
typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC)(GLshort factor);
GLAPI PFNGLGLOBALALPHAFACTORSSUNPROC glad_glGlobalAlphaFactorsSUN;
GLAPI PFNGLGLOBALALPHAFACTORSSUNPROC glad_debug_glGlobalAlphaFactorsSUN;
#define glGlobalAlphaFactorsSUN glad_debug_glGlobalAlphaFactorsSUN
typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORISUNPROC)(GLint factor);
GLAPI PFNGLGLOBALALPHAFACTORISUNPROC glad_glGlobalAlphaFactoriSUN;
GLAPI PFNGLGLOBALALPHAFACTORISUNPROC glad_debug_glGlobalAlphaFactoriSUN;
#define glGlobalAlphaFactoriSUN glad_debug_glGlobalAlphaFactoriSUN
typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORFSUNPROC)(GLfloat factor);
GLAPI PFNGLGLOBALALPHAFACTORFSUNPROC glad_glGlobalAlphaFactorfSUN;
GLAPI PFNGLGLOBALALPHAFACTORFSUNPROC glad_debug_glGlobalAlphaFactorfSUN;
#define glGlobalAlphaFactorfSUN glad_debug_glGlobalAlphaFactorfSUN
typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORDSUNPROC)(GLdouble factor);
GLAPI PFNGLGLOBALALPHAFACTORDSUNPROC glad_glGlobalAlphaFactordSUN;
GLAPI PFNGLGLOBALALPHAFACTORDSUNPROC glad_debug_glGlobalAlphaFactordSUN;
#define glGlobalAlphaFactordSUN glad_debug_glGlobalAlphaFactordSUN
typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUBSUNPROC)(GLubyte factor);
GLAPI PFNGLGLOBALALPHAFACTORUBSUNPROC glad_glGlobalAlphaFactorubSUN;
GLAPI PFNGLGLOBALALPHAFACTORUBSUNPROC glad_debug_glGlobalAlphaFactorubSUN;
#define glGlobalAlphaFactorubSUN glad_debug_glGlobalAlphaFactorubSUN
typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUSSUNPROC)(GLushort factor);
GLAPI PFNGLGLOBALALPHAFACTORUSSUNPROC glad_glGlobalAlphaFactorusSUN;
GLAPI PFNGLGLOBALALPHAFACTORUSSUNPROC glad_debug_glGlobalAlphaFactorusSUN;
#define glGlobalAlphaFactorusSUN glad_debug_glGlobalAlphaFactorusSUN
typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUISUNPROC)(GLuint factor);
GLAPI PFNGLGLOBALALPHAFACTORUISUNPROC glad_glGlobalAlphaFactoruiSUN;
GLAPI PFNGLGLOBALALPHAFACTORUISUNPROC glad_debug_glGlobalAlphaFactoruiSUN;
#define glGlobalAlphaFactoruiSUN glad_debug_glGlobalAlphaFactoruiSUN
#endif
#ifndef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 1
GLAPI int GLAD_GL_ARB_fragment_shader_interlock;
#endif
#ifndef GL_EXT_texture_object
#define GL_EXT_texture_object 1
GLAPI int GLAD_GL_EXT_texture_object;
typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC)(GLsizei n, const GLuint* textures, GLboolean* residences);
GLAPI PFNGLARETEXTURESRESIDENTEXTPROC glad_glAreTexturesResidentEXT;
GLAPI PFNGLARETEXTURESRESIDENTEXTPROC glad_debug_glAreTexturesResidentEXT;
#define glAreTexturesResidentEXT glad_debug_glAreTexturesResidentEXT
typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC)(GLenum target, GLuint texture);
GLAPI PFNGLBINDTEXTUREEXTPROC glad_glBindTextureEXT;
GLAPI PFNGLBINDTEXTUREEXTPROC glad_debug_glBindTextureEXT;
#define glBindTextureEXT glad_debug_glBindTextureEXT
typedef void (APIENTRYP PFNGLDELETETEXTURESEXTPROC)(GLsizei n, const GLuint* textures);
GLAPI PFNGLDELETETEXTURESEXTPROC glad_glDeleteTexturesEXT;
GLAPI PFNGLDELETETEXTURESEXTPROC glad_debug_glDeleteTexturesEXT;
#define glDeleteTexturesEXT glad_debug_glDeleteTexturesEXT
typedef void (APIENTRYP PFNGLGENTEXTURESEXTPROC)(GLsizei n, GLuint* textures);
GLAPI PFNGLGENTEXTURESEXTPROC glad_glGenTexturesEXT;
GLAPI PFNGLGENTEXTURESEXTPROC glad_debug_glGenTexturesEXT;
#define glGenTexturesEXT glad_debug_glGenTexturesEXT
typedef GLboolean (APIENTRYP PFNGLISTEXTUREEXTPROC)(GLuint texture);
GLAPI PFNGLISTEXTUREEXTPROC glad_glIsTextureEXT;
GLAPI PFNGLISTEXTUREEXTPROC glad_debug_glIsTextureEXT;
#define glIsTextureEXT glad_debug_glIsTextureEXT
typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESEXTPROC)(GLsizei n, const GLuint* textures, const GLclampf* priorities);
GLAPI PFNGLPRIORITIZETEXTURESEXTPROC glad_glPrioritizeTexturesEXT;
GLAPI PFNGLPRIORITIZETEXTURESEXTPROC glad_debug_glPrioritizeTexturesEXT;
#define glPrioritizeTexturesEXT glad_debug_glPrioritizeTexturesEXT
#endif
#ifndef GL_AMD_name_gen_delete
#define GL_AMD_name_gen_delete 1
GLAPI int GLAD_GL_AMD_name_gen_delete;
typedef void (APIENTRYP PFNGLGENNAMESAMDPROC)(GLenum identifier, GLuint num, GLuint* names);
GLAPI PFNGLGENNAMESAMDPROC glad_glGenNamesAMD;
GLAPI PFNGLGENNAMESAMDPROC glad_debug_glGenNamesAMD;
#define glGenNamesAMD glad_debug_glGenNamesAMD
typedef void (APIENTRYP PFNGLDELETENAMESAMDPROC)(GLenum identifier, GLuint num, const GLuint* names);
GLAPI PFNGLDELETENAMESAMDPROC glad_glDeleteNamesAMD;
GLAPI PFNGLDELETENAMESAMDPROC glad_debug_glDeleteNamesAMD;
#define glDeleteNamesAMD glad_debug_glDeleteNamesAMD
typedef GLboolean (APIENTRYP PFNGLISNAMEAMDPROC)(GLenum identifier, GLuint name);
GLAPI PFNGLISNAMEAMDPROC glad_glIsNameAMD;
GLAPI PFNGLISNAMEAMDPROC glad_debug_glIsNameAMD;
#define glIsNameAMD glad_debug_glIsNameAMD
#endif
#ifndef GL_NV_texture_compression_vtc
#define GL_NV_texture_compression_vtc 1
GLAPI int GLAD_GL_NV_texture_compression_vtc;
#endif
#ifndef GL_NV_sample_mask_override_coverage
#define GL_NV_sample_mask_override_coverage 1
GLAPI int GLAD_GL_NV_sample_mask_override_coverage;
#endif
#ifndef GL_NV_texture_shader3
#define GL_NV_texture_shader3 1
GLAPI int GLAD_GL_NV_texture_shader3;
#endif
#ifndef GL_NV_texture_shader2
#define GL_NV_texture_shader2 1
GLAPI int GLAD_GL_NV_texture_shader2;
#endif
#ifndef GL_EXT_texture
#define GL_EXT_texture 1
GLAPI int GLAD_GL_EXT_texture;
#endif
#ifndef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 1
GLAPI int GLAD_GL_ARB_buffer_storage;
typedef void (APIENTRYP PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void* data, GLbitfield flags);
GLAPI PFNGLBUFFERSTORAGEPROC glad_glBufferStorage;
GLAPI PFNGLBUFFERSTORAGEPROC glad_debug_glBufferStorage;
#define glBufferStorage glad_debug_glBufferStorage
#endif
#ifndef GL_AMD_shader_atomic_counter_ops
#define GL_AMD_shader_atomic_counter_ops 1
GLAPI int GLAD_GL_AMD_shader_atomic_counter_ops;
#endif
#ifndef GL_APPLE_vertex_program_evaluators
#define GL_APPLE_vertex_program_evaluators 1
GLAPI int GLAD_GL_APPLE_vertex_program_evaluators;
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC)(GLuint index, GLenum pname);
GLAPI PFNGLENABLEVERTEXATTRIBAPPLEPROC glad_glEnableVertexAttribAPPLE;
GLAPI PFNGLENABLEVERTEXATTRIBAPPLEPROC glad_debug_glEnableVertexAttribAPPLE;
#define glEnableVertexAttribAPPLE glad_debug_glEnableVertexAttribAPPLE
typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC)(GLuint index, GLenum pname);
GLAPI PFNGLDISABLEVERTEXATTRIBAPPLEPROC glad_glDisableVertexAttribAPPLE;
GLAPI PFNGLDISABLEVERTEXATTRIBAPPLEPROC glad_debug_glDisableVertexAttribAPPLE;
#define glDisableVertexAttribAPPLE glad_debug_glDisableVertexAttribAPPLE
typedef GLboolean (APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)(GLuint index, GLenum pname);
GLAPI PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glad_glIsVertexAttribEnabledAPPLE;
GLAPI PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glad_debug_glIsVertexAttribEnabledAPPLE;
#define glIsVertexAttribEnabledAPPLE glad_debug_glIsVertexAttribEnabledAPPLE
typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
GLAPI PFNGLMAPVERTEXATTRIB1DAPPLEPROC glad_glMapVertexAttrib1dAPPLE;
GLAPI PFNGLMAPVERTEXATTRIB1DAPPLEPROC glad_debug_glMapVertexAttrib1dAPPLE;
#define glMapVertexAttrib1dAPPLE glad_debug_glMapVertexAttrib1dAPPLE
typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
GLAPI PFNGLMAPVERTEXATTRIB1FAPPLEPROC glad_glMapVertexAttrib1fAPPLE;
GLAPI PFNGLMAPVERTEXATTRIB1FAPPLEPROC glad_debug_glMapVertexAttrib1fAPPLE;
#define glMapVertexAttrib1fAPPLE glad_debug_glMapVertexAttrib1fAPPLE
typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2DAPPLEPROC)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
GLAPI PFNGLMAPVERTEXATTRIB2DAPPLEPROC glad_glMapVertexAttrib2dAPPLE;
GLAPI PFNGLMAPVERTEXATTRIB2DAPPLEPROC glad_debug_glMapVertexAttrib2dAPPLE;
#define glMapVertexAttrib2dAPPLE glad_debug_glMapVertexAttrib2dAPPLE
typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2FAPPLEPROC)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
GLAPI PFNGLMAPVERTEXATTRIB2FAPPLEPROC glad_glMapVertexAttrib2fAPPLE;
GLAPI PFNGLMAPVERTEXATTRIB2FAPPLEPROC glad_debug_glMapVertexAttrib2fAPPLE;
#define glMapVertexAttrib2fAPPLE glad_debug_glMapVertexAttrib2fAPPLE
#endif
#ifndef GL_ARB_multi_bind
#define GL_ARB_multi_bind 1
GLAPI int GLAD_GL_ARB_multi_bind;
typedef void (APIENTRYP PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers);
GLAPI PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase;
GLAPI PFNGLBINDBUFFERSBASEPROC glad_debug_glBindBuffersBase;
#define glBindBuffersBase glad_debug_glBindBuffersBase
typedef void (APIENTRYP PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizeiptr* sizes);
GLAPI PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange;
GLAPI PFNGLBINDBUFFERSRANGEPROC glad_debug_glBindBuffersRange;
#define glBindBuffersRange glad_debug_glBindBuffersRange
typedef void (APIENTRYP PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint* textures);
GLAPI PFNGLBINDTEXTURESPROC glad_glBindTextures;
GLAPI PFNGLBINDTEXTURESPROC glad_debug_glBindTextures;
#define glBindTextures glad_debug_glBindTextures
typedef void (APIENTRYP PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint* samplers);
GLAPI PFNGLBINDSAMPLERSPROC glad_glBindSamplers;
GLAPI PFNGLBINDSAMPLERSPROC glad_debug_glBindSamplers;
#define glBindSamplers glad_debug_glBindSamplers
typedef void (APIENTRYP PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint* textures);
GLAPI PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures;
GLAPI PFNGLBINDIMAGETEXTURESPROC glad_debug_glBindImageTextures;
#define glBindImageTextures glad_debug_glBindImageTextures
typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
GLAPI PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers;
GLAPI PFNGLBINDVERTEXBUFFERSPROC glad_debug_glBindVertexBuffers;
#define glBindVertexBuffers glad_debug_glBindVertexBuffers
#endif
#ifndef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 1
GLAPI int GLAD_GL_ARB_explicit_uniform_location;
#endif
#ifndef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 1
GLAPI int GLAD_GL_ARB_depth_buffer_float;
#endif
#ifndef GL_NV_path_rendering_shared_edge
#define GL_NV_path_rendering_shared_edge 1
GLAPI int GLAD_GL_NV_path_rendering_shared_edge;
#endif
#ifndef GL_SGIX_shadow_ambient
#define GL_SGIX_shadow_ambient 1
GLAPI int GLAD_GL_SGIX_shadow_ambient;
#endif
#ifndef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map 1
GLAPI int GLAD_GL_ARB_texture_cube_map;
#endif
#ifndef GL_AMD_vertex_shader_viewport_index
#define GL_AMD_vertex_shader_viewport_index 1
GLAPI int GLAD_GL_AMD_vertex_shader_viewport_index;
#endif
#ifndef GL_SGIX_list_priority
#define GL_SGIX_list_priority 1
GLAPI int GLAD_GL_SGIX_list_priority;
typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC)(GLuint list, GLenum pname, GLfloat* params);
GLAPI PFNGLGETLISTPARAMETERFVSGIXPROC glad_glGetListParameterfvSGIX;
GLAPI PFNGLGETLISTPARAMETERFVSGIXPROC glad_debug_glGetListParameterfvSGIX;
#define glGetListParameterfvSGIX glad_debug_glGetListParameterfvSGIX
typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC)(GLuint list, GLenum pname, GLint* params);
GLAPI PFNGLGETLISTPARAMETERIVSGIXPROC glad_glGetListParameterivSGIX;
GLAPI PFNGLGETLISTPARAMETERIVSGIXPROC glad_debug_glGetListParameterivSGIX;
#define glGetListParameterivSGIX glad_debug_glGetListParameterivSGIX
typedef void (APIENTRYP PFNGLLISTPARAMETERFSGIXPROC)(GLuint list, GLenum pname, GLfloat param);
GLAPI PFNGLLISTPARAMETERFSGIXPROC glad_glListParameterfSGIX;
GLAPI PFNGLLISTPARAMETERFSGIXPROC glad_debug_glListParameterfSGIX;
#define glListParameterfSGIX glad_debug_glListParameterfSGIX
typedef void (APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC)(GLuint list, GLenum pname, const GLfloat* params);
GLAPI PFNGLLISTPARAMETERFVSGIXPROC glad_glListParameterfvSGIX;
GLAPI PFNGLLISTPARAMETERFVSGIXPROC glad_debug_glListParameterfvSGIX;
#define glListParameterfvSGIX glad_debug_glListParameterfvSGIX
typedef void (APIENTRYP PFNGLLISTPARAMETERISGIXPROC)(GLuint list, GLenum pname, GLint param);
GLAPI PFNGLLISTPARAMETERISGIXPROC glad_glListParameteriSGIX;
GLAPI PFNGLLISTPARAMETERISGIXPROC glad_debug_glListParameteriSGIX;
#define glListParameteriSGIX glad_debug_glListParameteriSGIX
typedef void (APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC)(GLuint list, GLenum pname, const GLint* params);
GLAPI PFNGLLISTPARAMETERIVSGIXPROC glad_glListParameterivSGIX;
GLAPI PFNGLLISTPARAMETERIVSGIXPROC glad_debug_glListParameterivSGIX;
#define glListParameterivSGIX glad_debug_glListParameterivSGIX
#endif
#ifndef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory 1
GLAPI int GLAD_GL_NV_vertex_buffer_unified_memory;
typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC)(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
GLAPI PFNGLBUFFERADDRESSRANGENVPROC glad_glBufferAddressRangeNV;
GLAPI PFNGLBUFFERADDRESSRANGENVPROC glad_debug_glBufferAddressRangeNV;
#define glBufferAddressRangeNV glad_debug_glBufferAddressRangeNV
typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
GLAPI PFNGLVERTEXFORMATNVPROC glad_glVertexFormatNV;
GLAPI PFNGLVERTEXFORMATNVPROC glad_debug_glVertexFormatNV;
#define glVertexFormatNV glad_debug_glVertexFormatNV
typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC)(GLenum type, GLsizei stride);
GLAPI PFNGLNORMALFORMATNVPROC glad_glNormalFormatNV;
GLAPI PFNGLNORMALFORMATNVPROC glad_debug_glNormalFormatNV;
#define glNormalFormatNV glad_debug_glNormalFormatNV
typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
GLAPI PFNGLCOLORFORMATNVPROC glad_glColorFormatNV;
GLAPI PFNGLCOLORFORMATNVPROC glad_debug_glColorFormatNV;
#define glColorFormatNV glad_debug_glColorFormatNV
typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC)(GLenum type, GLsizei stride);
GLAPI PFNGLINDEXFORMATNVPROC glad_glIndexFormatNV;
GLAPI PFNGLINDEXFORMATNVPROC glad_debug_glIndexFormatNV;
#define glIndexFormatNV glad_debug_glIndexFormatNV
typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
GLAPI PFNGLTEXCOORDFORMATNVPROC glad_glTexCoordFormatNV;
GLAPI PFNGLTEXCOORDFORMATNVPROC glad_debug_glTexCoordFormatNV;
#define glTexCoordFormatNV glad_debug_glTexCoordFormatNV
typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC)(GLsizei stride);
GLAPI PFNGLEDGEFLAGFORMATNVPROC glad_glEdgeFlagFormatNV;
GLAPI PFNGLEDGEFLAGFORMATNVPROC glad_debug_glEdgeFlagFormatNV;
#define glEdgeFlagFormatNV glad_debug_glEdgeFlagFormatNV
typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC)(GLint size, GLenum type, GLsizei stride);
GLAPI PFNGLSECONDARYCOLORFORMATNVPROC glad_glSecondaryColorFormatNV;
GLAPI PFNGLSECONDARYCOLORFORMATNVPROC glad_debug_glSecondaryColorFormatNV;
#define glSecondaryColorFormatNV glad_debug_glSecondaryColorFormatNV
typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC)(GLenum type, GLsizei stride);
GLAPI PFNGLFOGCOORDFORMATNVPROC glad_glFogCoordFormatNV;
GLAPI PFNGLFOGCOORDFORMATNVPROC glad_debug_glFogCoordFormatNV;
#define glFogCoordFormatNV glad_debug_glFogCoordFormatNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
GLAPI PFNGLVERTEXATTRIBFORMATNVPROC glad_glVertexAttribFormatNV;
GLAPI PFNGLVERTEXATTRIBFORMATNVPROC glad_debug_glVertexAttribFormatNV;
#define glVertexAttribFormatNV glad_debug_glVertexAttribFormatNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC)(GLuint index, GLint size, GLenum type, GLsizei stride);
GLAPI PFNGLVERTEXATTRIBIFORMATNVPROC glad_glVertexAttribIFormatNV;
GLAPI PFNGLVERTEXATTRIBIFORMATNVPROC glad_debug_glVertexAttribIFormatNV;
#define glVertexAttribIFormatNV glad_debug_glVertexAttribIFormatNV
typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC)(GLenum value, GLuint index, GLuint64EXT* result);
GLAPI PFNGLGETINTEGERUI64I_VNVPROC glad_glGetIntegerui64i_vNV;
GLAPI PFNGLGETINTEGERUI64I_VNVPROC glad_debug_glGetIntegerui64i_vNV;
#define glGetIntegerui64i_vNV glad_debug_glGetIntegerui64i_vNV
#endif
#ifndef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory 1
GLAPI int GLAD_GL_NV_uniform_buffer_unified_memory;
#endif
#ifndef GL_ARB_clear_texture
#define GL_ARB_clear_texture 1
GLAPI int GLAD_GL_ARB_clear_texture;
typedef void (APIENTRYP PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage;
GLAPI PFNGLCLEARTEXIMAGEPROC glad_debug_glClearTexImage;
#define glClearTexImage glad_debug_glClearTexImage
typedef void (APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage;
GLAPI PFNGLCLEARTEXSUBIMAGEPROC glad_debug_glClearTexSubImage;
#define glClearTexSubImage glad_debug_glClearTexSubImage
#endif
#ifndef GL_ATI_texture_env_combine3
#define GL_ATI_texture_env_combine3 1
GLAPI int GLAD_GL_ATI_texture_env_combine3;
#endif
#ifndef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 1
GLAPI int GLAD_GL_ARB_map_buffer_alignment;
#endif
#ifndef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced 1
GLAPI int GLAD_GL_NV_blend_equation_advanced;
typedef void (APIENTRYP PFNGLBLENDPARAMETERINVPROC)(GLenum pname, GLint value);
GLAPI PFNGLBLENDPARAMETERINVPROC glad_glBlendParameteriNV;
GLAPI PFNGLBLENDPARAMETERINVPROC glad_debug_glBlendParameteriNV;
#define glBlendParameteriNV glad_debug_glBlendParameteriNV
typedef void (APIENTRYP PFNGLBLENDBARRIERNVPROC)();
GLAPI PFNGLBLENDBARRIERNVPROC glad_glBlendBarrierNV;
GLAPI PFNGLBLENDBARRIERNVPROC glad_debug_glBlendBarrierNV;
#define glBlendBarrierNV glad_debug_glBlendBarrierNV
#endif
#ifndef GL_SGIS_sharpen_texture
#define GL_SGIS_sharpen_texture 1
GLAPI int GLAD_GL_SGIS_sharpen_texture;
typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC)(GLenum target, GLsizei n, const GLfloat* points);
GLAPI PFNGLSHARPENTEXFUNCSGISPROC glad_glSharpenTexFuncSGIS;
GLAPI PFNGLSHARPENTEXFUNCSGISPROC glad_debug_glSharpenTexFuncSGIS;
#define glSharpenTexFuncSGIS glad_debug_glSharpenTexFuncSGIS
typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC)(GLenum target, GLfloat* points);
GLAPI PFNGLGETSHARPENTEXFUNCSGISPROC glad_glGetSharpenTexFuncSGIS;
GLAPI PFNGLGETSHARPENTEXFUNCSGISPROC glad_debug_glGetSharpenTexFuncSGIS;
#define glGetSharpenTexFuncSGIS glad_debug_glGetSharpenTexFuncSGIS
#endif
#ifndef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 1
GLAPI int GLAD_GL_KHR_robust_buffer_access_behavior;
#endif
#ifndef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 1
GLAPI int GLAD_GL_ARB_pipeline_statistics_query;
#endif
#ifndef GL_ARB_vertex_program
#define GL_ARB_vertex_program 1
GLAPI int GLAD_GL_ARB_vertex_program;
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIB1DARBPROC glad_glVertexAttrib1dARB;
GLAPI PFNGLVERTEXATTRIB1DARBPROC glad_debug_glVertexAttrib1dARB;
#define glVertexAttrib1dARB glad_debug_glVertexAttrib1dARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB1DVARBPROC glad_glVertexAttrib1dvARB;
GLAPI PFNGLVERTEXATTRIB1DVARBPROC glad_debug_glVertexAttrib1dvARB;
#define glVertexAttrib1dvARB glad_debug_glVertexAttrib1dvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
GLAPI PFNGLVERTEXATTRIB1FARBPROC glad_glVertexAttrib1fARB;
GLAPI PFNGLVERTEXATTRIB1FARBPROC glad_debug_glVertexAttrib1fARB;
#define glVertexAttrib1fARB glad_debug_glVertexAttrib1fARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB1FVARBPROC glad_glVertexAttrib1fvARB;
GLAPI PFNGLVERTEXATTRIB1FVARBPROC glad_debug_glVertexAttrib1fvARB;
#define glVertexAttrib1fvARB glad_debug_glVertexAttrib1fvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
GLAPI PFNGLVERTEXATTRIB1SARBPROC glad_glVertexAttrib1sARB;
GLAPI PFNGLVERTEXATTRIB1SARBPROC glad_debug_glVertexAttrib1sARB;
#define glVertexAttrib1sARB glad_debug_glVertexAttrib1sARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB1SVARBPROC glad_glVertexAttrib1svARB;
GLAPI PFNGLVERTEXATTRIB1SVARBPROC glad_debug_glVertexAttrib1svARB;
#define glVertexAttrib1svARB glad_debug_glVertexAttrib1svARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIB2DARBPROC glad_glVertexAttrib2dARB;
GLAPI PFNGLVERTEXATTRIB2DARBPROC glad_debug_glVertexAttrib2dARB;
#define glVertexAttrib2dARB glad_debug_glVertexAttrib2dARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB2DVARBPROC glad_glVertexAttrib2dvARB;
GLAPI PFNGLVERTEXATTRIB2DVARBPROC glad_debug_glVertexAttrib2dvARB;
#define glVertexAttrib2dvARB glad_debug_glVertexAttrib2dvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
GLAPI PFNGLVERTEXATTRIB2FARBPROC glad_glVertexAttrib2fARB;
GLAPI PFNGLVERTEXATTRIB2FARBPROC glad_debug_glVertexAttrib2fARB;
#define glVertexAttrib2fARB glad_debug_glVertexAttrib2fARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB2FVARBPROC glad_glVertexAttrib2fvARB;
GLAPI PFNGLVERTEXATTRIB2FVARBPROC glad_debug_glVertexAttrib2fvARB;
#define glVertexAttrib2fvARB glad_debug_glVertexAttrib2fvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
GLAPI PFNGLVERTEXATTRIB2SARBPROC glad_glVertexAttrib2sARB;
GLAPI PFNGLVERTEXATTRIB2SARBPROC glad_debug_glVertexAttrib2sARB;
#define glVertexAttrib2sARB glad_debug_glVertexAttrib2sARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB2SVARBPROC glad_glVertexAttrib2svARB;
GLAPI PFNGLVERTEXATTRIB2SVARBPROC glad_debug_glVertexAttrib2svARB;
#define glVertexAttrib2svARB glad_debug_glVertexAttrib2svARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIB3DARBPROC glad_glVertexAttrib3dARB;
GLAPI PFNGLVERTEXATTRIB3DARBPROC glad_debug_glVertexAttrib3dARB;
#define glVertexAttrib3dARB glad_debug_glVertexAttrib3dARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB3DVARBPROC glad_glVertexAttrib3dvARB;
GLAPI PFNGLVERTEXATTRIB3DVARBPROC glad_debug_glVertexAttrib3dvARB;
#define glVertexAttrib3dvARB glad_debug_glVertexAttrib3dvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLVERTEXATTRIB3FARBPROC glad_glVertexAttrib3fARB;
GLAPI PFNGLVERTEXATTRIB3FARBPROC glad_debug_glVertexAttrib3fARB;
#define glVertexAttrib3fARB glad_debug_glVertexAttrib3fARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB3FVARBPROC glad_glVertexAttrib3fvARB;
GLAPI PFNGLVERTEXATTRIB3FVARBPROC glad_debug_glVertexAttrib3fvARB;
#define glVertexAttrib3fvARB glad_debug_glVertexAttrib3fvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
GLAPI PFNGLVERTEXATTRIB3SARBPROC glad_glVertexAttrib3sARB;
GLAPI PFNGLVERTEXATTRIB3SARBPROC glad_debug_glVertexAttrib3sARB;
#define glVertexAttrib3sARB glad_debug_glVertexAttrib3sARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB3SVARBPROC glad_glVertexAttrib3svARB;
GLAPI PFNGLVERTEXATTRIB3SVARBPROC glad_debug_glVertexAttrib3svARB;
#define glVertexAttrib3svARB glad_debug_glVertexAttrib3svARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index, const GLbyte* v);
GLAPI PFNGLVERTEXATTRIB4NBVARBPROC glad_glVertexAttrib4NbvARB;
GLAPI PFNGLVERTEXATTRIB4NBVARBPROC glad_debug_glVertexAttrib4NbvARB;
#define glVertexAttrib4NbvARB glad_debug_glVertexAttrib4NbvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIB4NIVARBPROC glad_glVertexAttrib4NivARB;
GLAPI PFNGLVERTEXATTRIB4NIVARBPROC glad_debug_glVertexAttrib4NivARB;
#define glVertexAttrib4NivARB glad_debug_glVertexAttrib4NivARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB4NSVARBPROC glad_glVertexAttrib4NsvARB;
GLAPI PFNGLVERTEXATTRIB4NSVARBPROC glad_debug_glVertexAttrib4NsvARB;
#define glVertexAttrib4NsvARB glad_debug_glVertexAttrib4NsvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLAPI PFNGLVERTEXATTRIB4NUBARBPROC glad_glVertexAttrib4NubARB;
GLAPI PFNGLVERTEXATTRIB4NUBARBPROC glad_debug_glVertexAttrib4NubARB;
#define glVertexAttrib4NubARB glad_debug_glVertexAttrib4NubARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIB4NUBVARBPROC glad_glVertexAttrib4NubvARB;
GLAPI PFNGLVERTEXATTRIB4NUBVARBPROC glad_debug_glVertexAttrib4NubvARB;
#define glVertexAttrib4NubvARB glad_debug_glVertexAttrib4NubvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIB4NUIVARBPROC glad_glVertexAttrib4NuivARB;
GLAPI PFNGLVERTEXATTRIB4NUIVARBPROC glad_debug_glVertexAttrib4NuivARB;
#define glVertexAttrib4NuivARB glad_debug_glVertexAttrib4NuivARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index, const GLushort* v);
GLAPI PFNGLVERTEXATTRIB4NUSVARBPROC glad_glVertexAttrib4NusvARB;
GLAPI PFNGLVERTEXATTRIB4NUSVARBPROC glad_debug_glVertexAttrib4NusvARB;
#define glVertexAttrib4NusvARB glad_debug_glVertexAttrib4NusvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index, const GLbyte* v);
GLAPI PFNGLVERTEXATTRIB4BVARBPROC glad_glVertexAttrib4bvARB;
GLAPI PFNGLVERTEXATTRIB4BVARBPROC glad_debug_glVertexAttrib4bvARB;
#define glVertexAttrib4bvARB glad_debug_glVertexAttrib4bvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIB4DARBPROC glad_glVertexAttrib4dARB;
GLAPI PFNGLVERTEXATTRIB4DARBPROC glad_debug_glVertexAttrib4dARB;
#define glVertexAttrib4dARB glad_debug_glVertexAttrib4dARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB4DVARBPROC glad_glVertexAttrib4dvARB;
GLAPI PFNGLVERTEXATTRIB4DVARBPROC glad_debug_glVertexAttrib4dvARB;
#define glVertexAttrib4dvARB glad_debug_glVertexAttrib4dvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLVERTEXATTRIB4FARBPROC glad_glVertexAttrib4fARB;
GLAPI PFNGLVERTEXATTRIB4FARBPROC glad_debug_glVertexAttrib4fARB;
#define glVertexAttrib4fARB glad_debug_glVertexAttrib4fARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB4FVARBPROC glad_glVertexAttrib4fvARB;
GLAPI PFNGLVERTEXATTRIB4FVARBPROC glad_debug_glVertexAttrib4fvARB;
#define glVertexAttrib4fvARB glad_debug_glVertexAttrib4fvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIB4IVARBPROC glad_glVertexAttrib4ivARB;
GLAPI PFNGLVERTEXATTRIB4IVARBPROC glad_debug_glVertexAttrib4ivARB;
#define glVertexAttrib4ivARB glad_debug_glVertexAttrib4ivARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLVERTEXATTRIB4SARBPROC glad_glVertexAttrib4sARB;
GLAPI PFNGLVERTEXATTRIB4SARBPROC glad_debug_glVertexAttrib4sARB;
#define glVertexAttrib4sARB glad_debug_glVertexAttrib4sARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB4SVARBPROC glad_glVertexAttrib4svARB;
GLAPI PFNGLVERTEXATTRIB4SVARBPROC glad_debug_glVertexAttrib4svARB;
#define glVertexAttrib4svARB glad_debug_glVertexAttrib4svARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIB4UBVARBPROC glad_glVertexAttrib4ubvARB;
GLAPI PFNGLVERTEXATTRIB4UBVARBPROC glad_debug_glVertexAttrib4ubvARB;
#define glVertexAttrib4ubvARB glad_debug_glVertexAttrib4ubvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIB4UIVARBPROC glad_glVertexAttrib4uivARB;
GLAPI PFNGLVERTEXATTRIB4UIVARBPROC glad_debug_glVertexAttrib4uivARB;
#define glVertexAttrib4uivARB glad_debug_glVertexAttrib4uivARB
typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index, const GLushort* v);
GLAPI PFNGLVERTEXATTRIB4USVARBPROC glad_glVertexAttrib4usvARB;
GLAPI PFNGLVERTEXATTRIB4USVARBPROC glad_debug_glVertexAttrib4usvARB;
#define glVertexAttrib4usvARB glad_debug_glVertexAttrib4usvARB
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB;
GLAPI PFNGLVERTEXATTRIBPOINTERARBPROC glad_debug_glVertexAttribPointerARB;
#define glVertexAttribPointerARB glad_debug_glVertexAttribPointerARB
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
GLAPI PFNGLENABLEVERTEXATTRIBARRAYARBPROC glad_glEnableVertexAttribArrayARB;
GLAPI PFNGLENABLEVERTEXATTRIBARRAYARBPROC glad_debug_glEnableVertexAttribArrayARB;
#define glEnableVertexAttribArrayARB glad_debug_glEnableVertexAttribArrayARB
typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
GLAPI PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glad_glDisableVertexAttribArrayARB;
GLAPI PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glad_debug_glDisableVertexAttribArrayARB;
#define glDisableVertexAttribArrayARB glad_debug_glDisableVertexAttribArrayARB
typedef void (APIENTRYP PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void* string);
GLAPI PFNGLPROGRAMSTRINGARBPROC glad_glProgramStringARB;
GLAPI PFNGLPROGRAMSTRINGARBPROC glad_debug_glProgramStringARB;
#define glProgramStringARB glad_debug_glProgramStringARB
typedef void (APIENTRYP PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
GLAPI PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB;
GLAPI PFNGLBINDPROGRAMARBPROC glad_debug_glBindProgramARB;
#define glBindProgramARB glad_debug_glBindProgramARB
typedef void (APIENTRYP PFNGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint* programs);
GLAPI PFNGLDELETEPROGRAMSARBPROC glad_glDeleteProgramsARB;
GLAPI PFNGLDELETEPROGRAMSARBPROC glad_debug_glDeleteProgramsARB;
#define glDeleteProgramsARB glad_debug_glDeleteProgramsARB
typedef void (APIENTRYP PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint* programs);
GLAPI PFNGLGENPROGRAMSARBPROC glad_glGenProgramsARB;
GLAPI PFNGLGENPROGRAMSARBPROC glad_debug_glGenProgramsARB;
#define glGenProgramsARB glad_debug_glGenProgramsARB
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLPROGRAMENVPARAMETER4DARBPROC glad_glProgramEnvParameter4dARB;
GLAPI PFNGLPROGRAMENVPARAMETER4DARBPROC glad_debug_glProgramEnvParameter4dARB;
#define glProgramEnvParameter4dARB glad_debug_glProgramEnvParameter4dARB
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble* params);
GLAPI PFNGLPROGRAMENVPARAMETER4DVARBPROC glad_glProgramEnvParameter4dvARB;
GLAPI PFNGLPROGRAMENVPARAMETER4DVARBPROC glad_debug_glProgramEnvParameter4dvARB;
#define glProgramEnvParameter4dvARB glad_debug_glProgramEnvParameter4dvARB
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLPROGRAMENVPARAMETER4FARBPROC glad_glProgramEnvParameter4fARB;
GLAPI PFNGLPROGRAMENVPARAMETER4FARBPROC glad_debug_glProgramEnvParameter4fARB;
#define glProgramEnvParameter4fARB glad_debug_glProgramEnvParameter4fARB
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat* params);
GLAPI PFNGLPROGRAMENVPARAMETER4FVARBPROC glad_glProgramEnvParameter4fvARB;
GLAPI PFNGLPROGRAMENVPARAMETER4FVARBPROC glad_debug_glProgramEnvParameter4fvARB;
#define glProgramEnvParameter4fvARB glad_debug_glProgramEnvParameter4fvARB
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLPROGRAMLOCALPARAMETER4DARBPROC glad_glProgramLocalParameter4dARB;
GLAPI PFNGLPROGRAMLOCALPARAMETER4DARBPROC glad_debug_glProgramLocalParameter4dARB;
#define glProgramLocalParameter4dARB glad_debug_glProgramLocalParameter4dARB
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble* params);
GLAPI PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glad_glProgramLocalParameter4dvARB;
GLAPI PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glad_debug_glProgramLocalParameter4dvARB;
#define glProgramLocalParameter4dvARB glad_debug_glProgramLocalParameter4dvARB
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLPROGRAMLOCALPARAMETER4FARBPROC glad_glProgramLocalParameter4fARB;
GLAPI PFNGLPROGRAMLOCALPARAMETER4FARBPROC glad_debug_glProgramLocalParameter4fARB;
#define glProgramLocalParameter4fARB glad_debug_glProgramLocalParameter4fARB
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat* params);
GLAPI PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glad_glProgramLocalParameter4fvARB;
GLAPI PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glad_debug_glProgramLocalParameter4fvARB;
#define glProgramLocalParameter4fvARB glad_debug_glProgramLocalParameter4fvARB
typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble* params);
GLAPI PFNGLGETPROGRAMENVPARAMETERDVARBPROC glad_glGetProgramEnvParameterdvARB;
GLAPI PFNGLGETPROGRAMENVPARAMETERDVARBPROC glad_debug_glGetProgramEnvParameterdvARB;
#define glGetProgramEnvParameterdvARB glad_debug_glGetProgramEnvParameterdvARB
typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat* params);
GLAPI PFNGLGETPROGRAMENVPARAMETERFVARBPROC glad_glGetProgramEnvParameterfvARB;
GLAPI PFNGLGETPROGRAMENVPARAMETERFVARBPROC glad_debug_glGetProgramEnvParameterfvARB;
#define glGetProgramEnvParameterfvARB glad_debug_glGetProgramEnvParameterfvARB
typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble* params);
GLAPI PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glad_glGetProgramLocalParameterdvARB;
GLAPI PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glad_debug_glGetProgramLocalParameterdvARB;
#define glGetProgramLocalParameterdvARB glad_debug_glGetProgramLocalParameterdvARB
typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat* params);
GLAPI PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glad_glGetProgramLocalParameterfvARB;
GLAPI PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glad_debug_glGetProgramLocalParameterfvARB;
#define glGetProgramLocalParameterfvARB glad_debug_glGetProgramLocalParameterfvARB
typedef void (APIENTRYP PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETPROGRAMIVARBPROC glad_glGetProgramivARB;
GLAPI PFNGLGETPROGRAMIVARBPROC glad_debug_glGetProgramivARB;
#define glGetProgramivARB glad_debug_glGetProgramivARB
typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void* string);
GLAPI PFNGLGETPROGRAMSTRINGARBPROC glad_glGetProgramStringARB;
GLAPI PFNGLGETPROGRAMSTRINGARBPROC glad_debug_glGetProgramStringARB;
#define glGetProgramStringARB glad_debug_glGetProgramStringARB
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble* params);
GLAPI PFNGLGETVERTEXATTRIBDVARBPROC glad_glGetVertexAttribdvARB;
GLAPI PFNGLGETVERTEXATTRIBDVARBPROC glad_debug_glGetVertexAttribdvARB;
#define glGetVertexAttribdvARB glad_debug_glGetVertexAttribdvARB
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat* params);
GLAPI PFNGLGETVERTEXATTRIBFVARBPROC glad_glGetVertexAttribfvARB;
GLAPI PFNGLGETVERTEXATTRIBFVARBPROC glad_debug_glGetVertexAttribfvARB;
#define glGetVertexAttribfvARB glad_debug_glGetVertexAttribfvARB
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETVERTEXATTRIBIVARBPROC glad_glGetVertexAttribivARB;
GLAPI PFNGLGETVERTEXATTRIBIVARBPROC glad_debug_glGetVertexAttribivARB;
#define glGetVertexAttribivARB glad_debug_glGetVertexAttribivARB
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, void** pointer);
GLAPI PFNGLGETVERTEXATTRIBPOINTERVARBPROC glad_glGetVertexAttribPointervARB;
GLAPI PFNGLGETVERTEXATTRIBPOINTERVARBPROC glad_debug_glGetVertexAttribPointervARB;
#define glGetVertexAttribPointervARB glad_debug_glGetVertexAttribPointervARB
typedef GLboolean (APIENTRYP PFNGLISPROGRAMARBPROC)(GLuint program);
GLAPI PFNGLISPROGRAMARBPROC glad_glIsProgramARB;
GLAPI PFNGLISPROGRAMARBPROC glad_debug_glIsProgramARB;
#define glIsProgramARB glad_debug_glIsProgramARB
#endif
#ifndef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 1
GLAPI int GLAD_GL_ARB_texture_rgb10_a2ui;
#endif
#ifndef GL_OML_interlace
#define GL_OML_interlace 1
GLAPI int GLAD_GL_OML_interlace;
#endif
#ifndef GL_ATI_pixel_format_float
#define GL_ATI_pixel_format_float 1
GLAPI int GLAD_GL_ATI_pixel_format_float;
#endif
#ifndef GL_NV_clip_space_w_scaling
#define GL_NV_clip_space_w_scaling 1
GLAPI int GLAD_GL_NV_clip_space_w_scaling;
typedef void (APIENTRYP PFNGLVIEWPORTPOSITIONWSCALENVPROC)(GLuint index, GLfloat xcoeff, GLfloat ycoeff);
GLAPI PFNGLVIEWPORTPOSITIONWSCALENVPROC glad_glViewportPositionWScaleNV;
GLAPI PFNGLVIEWPORTPOSITIONWSCALENVPROC glad_debug_glViewportPositionWScaleNV;
#define glViewportPositionWScaleNV glad_debug_glViewportPositionWScaleNV
#endif
#ifndef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object 1
GLAPI int GLAD_GL_ARB_vertex_buffer_object;
typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
GLAPI PFNGLBINDBUFFERARBPROC glad_glBindBufferARB;
GLAPI PFNGLBINDBUFFERARBPROC glad_debug_glBindBufferARB;
#define glBindBufferARB glad_debug_glBindBufferARB
typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint* buffers);
GLAPI PFNGLDELETEBUFFERSARBPROC glad_glDeleteBuffersARB;
GLAPI PFNGLDELETEBUFFERSARBPROC glad_debug_glDeleteBuffersARB;
#define glDeleteBuffersARB glad_debug_glDeleteBuffersARB
typedef void (APIENTRYP PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint* buffers);
GLAPI PFNGLGENBUFFERSARBPROC glad_glGenBuffersARB;
GLAPI PFNGLGENBUFFERSARBPROC glad_debug_glGenBuffersARB;
#define glGenBuffersARB glad_debug_glGenBuffersARB
typedef GLboolean (APIENTRYP PFNGLISBUFFERARBPROC)(GLuint buffer);
GLAPI PFNGLISBUFFERARBPROC glad_glIsBufferARB;
GLAPI PFNGLISBUFFERARBPROC glad_debug_glIsBufferARB;
#define glIsBufferARB glad_debug_glIsBufferARB
typedef void (APIENTRYP PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void* data, GLenum usage);
GLAPI PFNGLBUFFERDATAARBPROC glad_glBufferDataARB;
GLAPI PFNGLBUFFERDATAARBPROC glad_debug_glBufferDataARB;
#define glBufferDataARB glad_debug_glBufferDataARB
typedef void (APIENTRYP PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void* data);
GLAPI PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB;
GLAPI PFNGLBUFFERSUBDATAARBPROC glad_debug_glBufferSubDataARB;
#define glBufferSubDataARB glad_debug_glBufferSubDataARB
typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void* data);
GLAPI PFNGLGETBUFFERSUBDATAARBPROC glad_glGetBufferSubDataARB;
GLAPI PFNGLGETBUFFERSUBDATAARBPROC glad_debug_glGetBufferSubDataARB;
#define glGetBufferSubDataARB glad_debug_glGetBufferSubDataARB
typedef void* (APIENTRYP PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
GLAPI PFNGLMAPBUFFERARBPROC glad_glMapBufferARB;
GLAPI PFNGLMAPBUFFERARBPROC glad_debug_glMapBufferARB;
#define glMapBufferARB glad_debug_glMapBufferARB
typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERARBPROC)(GLenum target);
GLAPI PFNGLUNMAPBUFFERARBPROC glad_glUnmapBufferARB;
GLAPI PFNGLUNMAPBUFFERARBPROC glad_debug_glUnmapBufferARB;
#define glUnmapBufferARB glad_debug_glUnmapBufferARB
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETBUFFERPARAMETERIVARBPROC glad_glGetBufferParameterivARB;
GLAPI PFNGLGETBUFFERPARAMETERIVARBPROC glad_debug_glGetBufferParameterivARB;
#define glGetBufferParameterivARB glad_debug_glGetBufferParameterivARB
typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void** params);
GLAPI PFNGLGETBUFFERPOINTERVARBPROC glad_glGetBufferPointervARB;
GLAPI PFNGLGETBUFFERPOINTERVARBPROC glad_debug_glGetBufferPointervARB;
#define glGetBufferPointervARB glad_debug_glGetBufferPointervARB
#endif
#ifndef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs 1
GLAPI int GLAD_GL_EXT_shadow_funcs;
#endif
#ifndef GL_ATI_text_fragment_shader
#define GL_ATI_text_fragment_shader 1
GLAPI int GLAD_GL_ATI_text_fragment_shader;
#endif
#ifndef GL_NV_vertex_array_range
#define GL_NV_vertex_array_range 1
GLAPI int GLAD_GL_NV_vertex_array_range;
typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC)();
GLAPI PFNGLFLUSHVERTEXARRAYRANGENVPROC glad_glFlushVertexArrayRangeNV;
GLAPI PFNGLFLUSHVERTEXARRAYRANGENVPROC glad_debug_glFlushVertexArrayRangeNV;
#define glFlushVertexArrayRangeNV glad_debug_glFlushVertexArrayRangeNV
typedef void (APIENTRYP PFNGLVERTEXARRAYRANGENVPROC)(GLsizei length, const void* pointer);
GLAPI PFNGLVERTEXARRAYRANGENVPROC glad_glVertexArrayRangeNV;
GLAPI PFNGLVERTEXARRAYRANGENVPROC glad_debug_glVertexArrayRangeNV;
#define glVertexArrayRangeNV glad_debug_glVertexArrayRangeNV
#endif
#ifndef GL_SGIX_fragment_lighting
#define GL_SGIX_fragment_lighting 1
GLAPI int GLAD_GL_SGIX_fragment_lighting;
typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC)(GLenum face, GLenum mode);
GLAPI PFNGLFRAGMENTCOLORMATERIALSGIXPROC glad_glFragmentColorMaterialSGIX;
GLAPI PFNGLFRAGMENTCOLORMATERIALSGIXPROC glad_debug_glFragmentColorMaterialSGIX;
#define glFragmentColorMaterialSGIX glad_debug_glFragmentColorMaterialSGIX
typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC)(GLenum light, GLenum pname, GLfloat param);
GLAPI PFNGLFRAGMENTLIGHTFSGIXPROC glad_glFragmentLightfSGIX;
GLAPI PFNGLFRAGMENTLIGHTFSGIXPROC glad_debug_glFragmentLightfSGIX;
#define glFragmentLightfSGIX glad_debug_glFragmentLightfSGIX
typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC)(GLenum light, GLenum pname, const GLfloat* params);
GLAPI PFNGLFRAGMENTLIGHTFVSGIXPROC glad_glFragmentLightfvSGIX;
GLAPI PFNGLFRAGMENTLIGHTFVSGIXPROC glad_debug_glFragmentLightfvSGIX;
#define glFragmentLightfvSGIX glad_debug_glFragmentLightfvSGIX
typedef void (APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC)(GLenum light, GLenum pname, GLint param);
GLAPI PFNGLFRAGMENTLIGHTISGIXPROC glad_glFragmentLightiSGIX;
GLAPI PFNGLFRAGMENTLIGHTISGIXPROC glad_debug_glFragmentLightiSGIX;
#define glFragmentLightiSGIX glad_debug_glFragmentLightiSGIX
typedef void (APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC)(GLenum light, GLenum pname, const GLint* params);
GLAPI PFNGLFRAGMENTLIGHTIVSGIXPROC glad_glFragmentLightivSGIX;
GLAPI PFNGLFRAGMENTLIGHTIVSGIXPROC glad_debug_glFragmentLightivSGIX;
#define glFragmentLightivSGIX glad_debug_glFragmentLightivSGIX
typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLFRAGMENTLIGHTMODELFSGIXPROC glad_glFragmentLightModelfSGIX;
GLAPI PFNGLFRAGMENTLIGHTMODELFSGIXPROC glad_debug_glFragmentLightModelfSGIX;
#define glFragmentLightModelfSGIX glad_debug_glFragmentLightModelfSGIX
typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glad_glFragmentLightModelfvSGIX;
GLAPI PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glad_debug_glFragmentLightModelfvSGIX;
#define glFragmentLightModelfvSGIX glad_debug_glFragmentLightModelfvSGIX
typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC)(GLenum pname, GLint param);
GLAPI PFNGLFRAGMENTLIGHTMODELISGIXPROC glad_glFragmentLightModeliSGIX;
GLAPI PFNGLFRAGMENTLIGHTMODELISGIXPROC glad_debug_glFragmentLightModeliSGIX;
#define glFragmentLightModeliSGIX glad_debug_glFragmentLightModeliSGIX
typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)(GLenum pname, const GLint* params);
GLAPI PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glad_glFragmentLightModelivSGIX;
GLAPI PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glad_debug_glFragmentLightModelivSGIX;
#define glFragmentLightModelivSGIX glad_debug_glFragmentLightModelivSGIX
typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC)(GLenum face, GLenum pname, GLfloat param);
GLAPI PFNGLFRAGMENTMATERIALFSGIXPROC glad_glFragmentMaterialfSGIX;
GLAPI PFNGLFRAGMENTMATERIALFSGIXPROC glad_debug_glFragmentMaterialfSGIX;
#define glFragmentMaterialfSGIX glad_debug_glFragmentMaterialfSGIX
typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC)(GLenum face, GLenum pname, const GLfloat* params);
GLAPI PFNGLFRAGMENTMATERIALFVSGIXPROC glad_glFragmentMaterialfvSGIX;
GLAPI PFNGLFRAGMENTMATERIALFVSGIXPROC glad_debug_glFragmentMaterialfvSGIX;
#define glFragmentMaterialfvSGIX glad_debug_glFragmentMaterialfvSGIX
typedef void (APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC)(GLenum face, GLenum pname, GLint param);
GLAPI PFNGLFRAGMENTMATERIALISGIXPROC glad_glFragmentMaterialiSGIX;
GLAPI PFNGLFRAGMENTMATERIALISGIXPROC glad_debug_glFragmentMaterialiSGIX;
#define glFragmentMaterialiSGIX glad_debug_glFragmentMaterialiSGIX
typedef void (APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC)(GLenum face, GLenum pname, const GLint* params);
GLAPI PFNGLFRAGMENTMATERIALIVSGIXPROC glad_glFragmentMaterialivSGIX;
GLAPI PFNGLFRAGMENTMATERIALIVSGIXPROC glad_debug_glFragmentMaterialivSGIX;
#define glFragmentMaterialivSGIX glad_debug_glFragmentMaterialivSGIX
typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC)(GLenum light, GLenum pname, GLfloat* params);
GLAPI PFNGLGETFRAGMENTLIGHTFVSGIXPROC glad_glGetFragmentLightfvSGIX;
GLAPI PFNGLGETFRAGMENTLIGHTFVSGIXPROC glad_debug_glGetFragmentLightfvSGIX;
#define glGetFragmentLightfvSGIX glad_debug_glGetFragmentLightfvSGIX
typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC)(GLenum light, GLenum pname, GLint* params);
GLAPI PFNGLGETFRAGMENTLIGHTIVSGIXPROC glad_glGetFragmentLightivSGIX;
GLAPI PFNGLGETFRAGMENTLIGHTIVSGIXPROC glad_debug_glGetFragmentLightivSGIX;
#define glGetFragmentLightivSGIX glad_debug_glGetFragmentLightivSGIX
typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC)(GLenum face, GLenum pname, GLfloat* params);
GLAPI PFNGLGETFRAGMENTMATERIALFVSGIXPROC glad_glGetFragmentMaterialfvSGIX;
GLAPI PFNGLGETFRAGMENTMATERIALFVSGIXPROC glad_debug_glGetFragmentMaterialfvSGIX;
#define glGetFragmentMaterialfvSGIX glad_debug_glGetFragmentMaterialfvSGIX
typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC)(GLenum face, GLenum pname, GLint* params);
GLAPI PFNGLGETFRAGMENTMATERIALIVSGIXPROC glad_glGetFragmentMaterialivSGIX;
GLAPI PFNGLGETFRAGMENTMATERIALIVSGIXPROC glad_debug_glGetFragmentMaterialivSGIX;
#define glGetFragmentMaterialivSGIX glad_debug_glGetFragmentMaterialivSGIX
typedef void (APIENTRYP PFNGLLIGHTENVISGIXPROC)(GLenum pname, GLint param);
GLAPI PFNGLLIGHTENVISGIXPROC glad_glLightEnviSGIX;
GLAPI PFNGLLIGHTENVISGIXPROC glad_debug_glLightEnviSGIX;
#define glLightEnviSGIX glad_debug_glLightEnviSGIX
#endif
#ifndef GL_NV_texture_expand_normal
#define GL_NV_texture_expand_normal 1
GLAPI int GLAD_GL_NV_texture_expand_normal;
#endif
#ifndef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage 1
GLAPI int GLAD_GL_NV_framebuffer_multisample_coverage;
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glad_glRenderbufferStorageMultisampleCoverageNV;
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glad_debug_glRenderbufferStorageMultisampleCoverageNV;
#define glRenderbufferStorageMultisampleCoverageNV glad_debug_glRenderbufferStorageMultisampleCoverageNV
#endif
#ifndef GL_EXT_timer_query
#define GL_EXT_timer_query 1
GLAPI int GLAD_GL_EXT_timer_query;
typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC)(GLuint id, GLenum pname, GLint64* params);
GLAPI PFNGLGETQUERYOBJECTI64VEXTPROC glad_glGetQueryObjecti64vEXT;
GLAPI PFNGLGETQUERYOBJECTI64VEXTPROC glad_debug_glGetQueryObjecti64vEXT;
#define glGetQueryObjecti64vEXT glad_debug_glGetQueryObjecti64vEXT
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC)(GLuint id, GLenum pname, GLuint64* params);
GLAPI PFNGLGETQUERYOBJECTUI64VEXTPROC glad_glGetQueryObjectui64vEXT;
GLAPI PFNGLGETQUERYOBJECTUI64VEXTPROC glad_debug_glGetQueryObjectui64vEXT;
#define glGetQueryObjectui64vEXT glad_debug_glGetQueryObjectui64vEXT
#endif
#ifndef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra 1
GLAPI int GLAD_GL_EXT_vertex_array_bgra;
#endif
#ifndef GL_NV_bindless_texture
#define GL_NV_bindless_texture 1
GLAPI int GLAD_GL_NV_bindless_texture;
typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLENVPROC)(GLuint texture);
GLAPI PFNGLGETTEXTUREHANDLENVPROC glad_glGetTextureHandleNV;
GLAPI PFNGLGETTEXTUREHANDLENVPROC glad_debug_glGetTextureHandleNV;
#define glGetTextureHandleNV glad_debug_glGetTextureHandleNV
typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLENVPROC)(GLuint texture, GLuint sampler);
GLAPI PFNGLGETTEXTURESAMPLERHANDLENVPROC glad_glGetTextureSamplerHandleNV;
GLAPI PFNGLGETTEXTURESAMPLERHANDLENVPROC glad_debug_glGetTextureSamplerHandleNV;
#define glGetTextureSamplerHandleNV glad_debug_glGetTextureSamplerHandleNV
typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)(GLuint64 handle);
GLAPI PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glad_glMakeTextureHandleResidentNV;
GLAPI PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glad_debug_glMakeTextureHandleResidentNV;
#define glMakeTextureHandleResidentNV glad_debug_glMakeTextureHandleResidentNV
typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)(GLuint64 handle);
GLAPI PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glad_glMakeTextureHandleNonResidentNV;
GLAPI PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glad_debug_glMakeTextureHandleNonResidentNV;
#define glMakeTextureHandleNonResidentNV glad_debug_glMakeTextureHandleNonResidentNV
typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLENVPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
GLAPI PFNGLGETIMAGEHANDLENVPROC glad_glGetImageHandleNV;
GLAPI PFNGLGETIMAGEHANDLENVPROC glad_debug_glGetImageHandleNV;
#define glGetImageHandleNV glad_debug_glGetImageHandleNV
typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)(GLuint64 handle, GLenum access);
GLAPI PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glad_glMakeImageHandleResidentNV;
GLAPI PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glad_debug_glMakeImageHandleResidentNV;
#define glMakeImageHandleResidentNV glad_debug_glMakeImageHandleResidentNV
typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)(GLuint64 handle);
GLAPI PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glad_glMakeImageHandleNonResidentNV;
GLAPI PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glad_debug_glMakeImageHandleNonResidentNV;
#define glMakeImageHandleNonResidentNV glad_debug_glMakeImageHandleNonResidentNV
typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64NVPROC)(GLint location, GLuint64 value);
GLAPI PFNGLUNIFORMHANDLEUI64NVPROC glad_glUniformHandleui64NV;
GLAPI PFNGLUNIFORMHANDLEUI64NVPROC glad_debug_glUniformHandleui64NV;
#define glUniformHandleui64NV glad_debug_glUniformHandleui64NV
typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VNVPROC)(GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLUNIFORMHANDLEUI64VNVPROC glad_glUniformHandleui64vNV;
GLAPI PFNGLUNIFORMHANDLEUI64VNVPROC glad_debug_glUniformHandleui64vNV;
#define glUniformHandleui64vNV glad_debug_glUniformHandleui64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)(GLuint program, GLint location, GLuint64 value);
GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glad_glProgramUniformHandleui64NV;
GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glad_debug_glProgramUniformHandleui64NV;
#define glProgramUniformHandleui64NV glad_debug_glProgramUniformHandleui64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* values);
GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glad_glProgramUniformHandleui64vNV;
GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glad_debug_glProgramUniformHandleui64vNV;
#define glProgramUniformHandleui64vNV glad_debug_glProgramUniformHandleui64vNV
typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTNVPROC)(GLuint64 handle);
GLAPI PFNGLISTEXTUREHANDLERESIDENTNVPROC glad_glIsTextureHandleResidentNV;
GLAPI PFNGLISTEXTUREHANDLERESIDENTNVPROC glad_debug_glIsTextureHandleResidentNV;
#define glIsTextureHandleResidentNV glad_debug_glIsTextureHandleResidentNV
typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTNVPROC)(GLuint64 handle);
GLAPI PFNGLISIMAGEHANDLERESIDENTNVPROC glad_glIsImageHandleResidentNV;
GLAPI PFNGLISIMAGEHANDLERESIDENTNVPROC glad_debug_glIsImageHandleResidentNV;
#define glIsImageHandleResidentNV glad_debug_glIsImageHandleResidentNV
#endif
#ifndef GL_KHR_debug
#define GL_KHR_debug 1
GLAPI int GLAD_GL_KHR_debug;
typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
GLAPI PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl;
GLAPI PFNGLDEBUGMESSAGECONTROLPROC glad_debug_glDebugMessageControl;
#define glDebugMessageControl glad_debug_glDebugMessageControl
typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
GLAPI PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert;
GLAPI PFNGLDEBUGMESSAGEINSERTPROC glad_debug_glDebugMessageInsert;
#define glDebugMessageInsert glad_debug_glDebugMessageInsert
typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void* userParam);
GLAPI PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback;
GLAPI PFNGLDEBUGMESSAGECALLBACKPROC glad_debug_glDebugMessageCallback;
#define glDebugMessageCallback glad_debug_glDebugMessageCallback
typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
GLAPI PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog;
GLAPI PFNGLGETDEBUGMESSAGELOGPROC glad_debug_glGetDebugMessageLog;
#define glGetDebugMessageLog glad_debug_glGetDebugMessageLog
typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar* message);
GLAPI PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup;
GLAPI PFNGLPUSHDEBUGGROUPPROC glad_debug_glPushDebugGroup;
#define glPushDebugGroup glad_debug_glPushDebugGroup
typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC)();
GLAPI PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup;
GLAPI PFNGLPOPDEBUGGROUPPROC glad_debug_glPopDebugGroup;
#define glPopDebugGroup glad_debug_glPopDebugGroup
typedef void (APIENTRYP PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
GLAPI PFNGLOBJECTLABELPROC glad_glObjectLabel;
GLAPI PFNGLOBJECTLABELPROC glad_debug_glObjectLabel;
#define glObjectLabel glad_debug_glObjectLabel
typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
GLAPI PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel;
GLAPI PFNGLGETOBJECTLABELPROC glad_debug_glGetObjectLabel;
#define glGetObjectLabel glad_debug_glGetObjectLabel
typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC)(const void* ptr, GLsizei length, const GLchar* label);
GLAPI PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel;
GLAPI PFNGLOBJECTPTRLABELPROC glad_debug_glObjectPtrLabel;
#define glObjectPtrLabel glad_debug_glObjectPtrLabel
typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
GLAPI PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel;
GLAPI PFNGLGETOBJECTPTRLABELPROC glad_debug_glGetObjectPtrLabel;
#define glGetObjectPtrLabel glad_debug_glGetObjectPtrLabel
typedef void (APIENTRYP PFNGLGETPOINTERVPROC)(GLenum pname, void** params);
GLAPI PFNGLGETPOINTERVPROC glad_glGetPointerv;
GLAPI PFNGLGETPOINTERVPROC glad_debug_glGetPointerv;
#define glGetPointerv glad_debug_glGetPointerv
typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLKHRPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
GLAPI PFNGLDEBUGMESSAGECONTROLKHRPROC glad_glDebugMessageControlKHR;
GLAPI PFNGLDEBUGMESSAGECONTROLKHRPROC glad_debug_glDebugMessageControlKHR;
#define glDebugMessageControlKHR glad_debug_glDebugMessageControlKHR
typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTKHRPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
GLAPI PFNGLDEBUGMESSAGEINSERTKHRPROC glad_glDebugMessageInsertKHR;
GLAPI PFNGLDEBUGMESSAGEINSERTKHRPROC glad_debug_glDebugMessageInsertKHR;
#define glDebugMessageInsertKHR glad_debug_glDebugMessageInsertKHR
typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKKHRPROC)(GLDEBUGPROCKHR callback, const void* userParam);
GLAPI PFNGLDEBUGMESSAGECALLBACKKHRPROC glad_glDebugMessageCallbackKHR;
GLAPI PFNGLDEBUGMESSAGECALLBACKKHRPROC glad_debug_glDebugMessageCallbackKHR;
#define glDebugMessageCallbackKHR glad_debug_glDebugMessageCallbackKHR
typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGKHRPROC)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
GLAPI PFNGLGETDEBUGMESSAGELOGKHRPROC glad_glGetDebugMessageLogKHR;
GLAPI PFNGLGETDEBUGMESSAGELOGKHRPROC glad_debug_glGetDebugMessageLogKHR;
#define glGetDebugMessageLogKHR glad_debug_glGetDebugMessageLogKHR
typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPKHRPROC)(GLenum source, GLuint id, GLsizei length, const GLchar* message);
GLAPI PFNGLPUSHDEBUGGROUPKHRPROC glad_glPushDebugGroupKHR;
GLAPI PFNGLPUSHDEBUGGROUPKHRPROC glad_debug_glPushDebugGroupKHR;
#define glPushDebugGroupKHR glad_debug_glPushDebugGroupKHR
typedef void (APIENTRYP PFNGLPOPDEBUGGROUPKHRPROC)();
GLAPI PFNGLPOPDEBUGGROUPKHRPROC glad_glPopDebugGroupKHR;
GLAPI PFNGLPOPDEBUGGROUPKHRPROC glad_debug_glPopDebugGroupKHR;
#define glPopDebugGroupKHR glad_debug_glPopDebugGroupKHR
typedef void (APIENTRYP PFNGLOBJECTLABELKHRPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
GLAPI PFNGLOBJECTLABELKHRPROC glad_glObjectLabelKHR;
GLAPI PFNGLOBJECTLABELKHRPROC glad_debug_glObjectLabelKHR;
#define glObjectLabelKHR glad_debug_glObjectLabelKHR
typedef void (APIENTRYP PFNGLGETOBJECTLABELKHRPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
GLAPI PFNGLGETOBJECTLABELKHRPROC glad_glGetObjectLabelKHR;
GLAPI PFNGLGETOBJECTLABELKHRPROC glad_debug_glGetObjectLabelKHR;
#define glGetObjectLabelKHR glad_debug_glGetObjectLabelKHR
typedef void (APIENTRYP PFNGLOBJECTPTRLABELKHRPROC)(const void* ptr, GLsizei length, const GLchar* label);
GLAPI PFNGLOBJECTPTRLABELKHRPROC glad_glObjectPtrLabelKHR;
GLAPI PFNGLOBJECTPTRLABELKHRPROC glad_debug_glObjectPtrLabelKHR;
#define glObjectPtrLabelKHR glad_debug_glObjectPtrLabelKHR
typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELKHRPROC)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
GLAPI PFNGLGETOBJECTPTRLABELKHRPROC glad_glGetObjectPtrLabelKHR;
GLAPI PFNGLGETOBJECTPTRLABELKHRPROC glad_debug_glGetObjectPtrLabelKHR;
#define glGetObjectPtrLabelKHR glad_debug_glGetObjectPtrLabelKHR
typedef void (APIENTRYP PFNGLGETPOINTERVKHRPROC)(GLenum pname, void** params);
GLAPI PFNGLGETPOINTERVKHRPROC glad_glGetPointervKHR;
GLAPI PFNGLGETPOINTERVKHRPROC glad_debug_glGetPointervKHR;
#define glGetPointervKHR glad_debug_glGetPointervKHR
#endif
#ifndef GL_SGIS_texture_border_clamp
#define GL_SGIS_texture_border_clamp 1
GLAPI int GLAD_GL_SGIS_texture_border_clamp;
#endif
#ifndef GL_ATI_vertex_attrib_array_object
#define GL_ATI_vertex_attrib_array_object 1
GLAPI int GLAD_GL_ATI_vertex_attrib_array_object;
typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
GLAPI PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glad_glVertexAttribArrayObjectATI;
GLAPI PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glad_debug_glVertexAttribArrayObjectATI;
#define glVertexAttribArrayObjectATI glad_debug_glVertexAttribArrayObjectATI
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)(GLuint index, GLenum pname, GLfloat* params);
GLAPI PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glad_glGetVertexAttribArrayObjectfvATI;
GLAPI PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glad_debug_glGetVertexAttribArrayObjectfvATI;
#define glGetVertexAttribArrayObjectfvATI glad_debug_glGetVertexAttribArrayObjectfvATI
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)(GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glad_glGetVertexAttribArrayObjectivATI;
GLAPI PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glad_debug_glGetVertexAttribArrayObjectivATI;
#define glGetVertexAttribArrayObjectivATI glad_debug_glGetVertexAttribArrayObjectivATI
#endif
#ifndef GL_SGIX_clipmap
#define GL_SGIX_clipmap 1
GLAPI int GLAD_GL_SGIX_clipmap;
#endif
#ifndef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4 1
GLAPI int GLAD_GL_EXT_geometry_shader4;
#endif
#ifndef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 1
GLAPI int GLAD_GL_ARB_shader_texture_image_samples;
#endif
#ifndef GL_MESA_ycbcr_texture
#define GL_MESA_ycbcr_texture 1
GLAPI int GLAD_GL_MESA_ycbcr_texture;
#endif
#ifndef GL_MESAX_texture_stack
#define GL_MESAX_texture_stack 1
GLAPI int GLAD_GL_MESAX_texture_stack;
#endif
#ifndef GL_AMD_seamless_cubemap_per_texture
#define GL_AMD_seamless_cubemap_per_texture 1
GLAPI int GLAD_GL_AMD_seamless_cubemap_per_texture;
#endif
#ifndef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform 1
GLAPI int GLAD_GL_EXT_bindable_uniform;
typedef void (APIENTRYP PFNGLUNIFORMBUFFEREXTPROC)(GLuint program, GLint location, GLuint buffer);
GLAPI PFNGLUNIFORMBUFFEREXTPROC glad_glUniformBufferEXT;
GLAPI PFNGLUNIFORMBUFFEREXTPROC glad_debug_glUniformBufferEXT;
#define glUniformBufferEXT glad_debug_glUniformBufferEXT
typedef GLint (APIENTRYP PFNGLGETUNIFORMBUFFERSIZEEXTPROC)(GLuint program, GLint location);
GLAPI PFNGLGETUNIFORMBUFFERSIZEEXTPROC glad_glGetUniformBufferSizeEXT;
GLAPI PFNGLGETUNIFORMBUFFERSIZEEXTPROC glad_debug_glGetUniformBufferSizeEXT;
#define glGetUniformBufferSizeEXT glad_debug_glGetUniformBufferSizeEXT
typedef GLintptr (APIENTRYP PFNGLGETUNIFORMOFFSETEXTPROC)(GLuint program, GLint location);
GLAPI PFNGLGETUNIFORMOFFSETEXTPROC glad_glGetUniformOffsetEXT;
GLAPI PFNGLGETUNIFORMOFFSETEXTPROC glad_debug_glGetUniformOffsetEXT;
#define glGetUniformOffsetEXT glad_debug_glGetUniformOffsetEXT
#endif
#ifndef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 1
GLAPI int GLAD_GL_KHR_texture_compression_astc_hdr;
#endif
#ifndef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 1
GLAPI int GLAD_GL_ARB_shader_ballot;
#endif
#ifndef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 1
GLAPI int GLAD_GL_KHR_blend_equation_advanced;
typedef void (APIENTRYP PFNGLBLENDBARRIERKHRPROC)();
GLAPI PFNGLBLENDBARRIERKHRPROC glad_glBlendBarrierKHR;
GLAPI PFNGLBLENDBARRIERKHRPROC glad_debug_glBlendBarrierKHR;
#define glBlendBarrierKHR glad_debug_glBlendBarrierKHR
#endif
#ifndef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow 1
GLAPI int GLAD_GL_ARB_fragment_program_shadow;
#endif
#ifndef GL_ATI_element_array
#define GL_ATI_element_array 1
GLAPI int GLAD_GL_ATI_element_array;
typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC)(GLenum type, const void* pointer);
GLAPI PFNGLELEMENTPOINTERATIPROC glad_glElementPointerATI;
GLAPI PFNGLELEMENTPOINTERATIPROC glad_debug_glElementPointerATI;
#define glElementPointerATI glad_debug_glElementPointerATI
typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC)(GLenum mode, GLsizei count);
GLAPI PFNGLDRAWELEMENTARRAYATIPROC glad_glDrawElementArrayATI;
GLAPI PFNGLDRAWELEMENTARRAYATIPROC glad_debug_glDrawElementArrayATI;
#define glDrawElementArrayATI glad_debug_glDrawElementArrayATI
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count);
GLAPI PFNGLDRAWRANGEELEMENTARRAYATIPROC glad_glDrawRangeElementArrayATI;
GLAPI PFNGLDRAWRANGEELEMENTARRAYATIPROC glad_debug_glDrawRangeElementArrayATI;
#define glDrawRangeElementArrayATI glad_debug_glDrawRangeElementArrayATI
#endif
#ifndef GL_AMD_texture_texture4
#define GL_AMD_texture_texture4 1
GLAPI int GLAD_GL_AMD_texture_texture4;
#endif
#ifndef GL_SGIX_reference_plane
#define GL_SGIX_reference_plane 1
GLAPI int GLAD_GL_SGIX_reference_plane;
typedef void (APIENTRYP PFNGLREFERENCEPLANESGIXPROC)(const GLdouble* equation);
GLAPI PFNGLREFERENCEPLANESGIXPROC glad_glReferencePlaneSGIX;
GLAPI PFNGLREFERENCEPLANESGIXPROC glad_debug_glReferencePlaneSGIX;
#define glReferencePlaneSGIX glad_debug_glReferencePlaneSGIX
#endif
#ifndef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side 1
GLAPI int GLAD_GL_EXT_stencil_two_side;
typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC)(GLenum face);
GLAPI PFNGLACTIVESTENCILFACEEXTPROC glad_glActiveStencilFaceEXT;
GLAPI PFNGLACTIVESTENCILFACEEXTPROC glad_debug_glActiveStencilFaceEXT;
#define glActiveStencilFaceEXT glad_debug_glActiveStencilFaceEXT
#endif
#ifndef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 1
GLAPI int GLAD_GL_ARB_transform_feedback_overflow_query;
#endif
#ifndef GL_SGIX_texture_lod_bias
#define GL_SGIX_texture_lod_bias 1
GLAPI int GLAD_GL_SGIX_texture_lod_bias;
#endif
#ifndef GL_KHR_no_error
#define GL_KHR_no_error 1
GLAPI int GLAD_GL_KHR_no_error;
#endif
#ifndef GL_NV_explicit_multisample
#define GL_NV_explicit_multisample 1
GLAPI int GLAD_GL_NV_explicit_multisample;
typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC)(GLenum pname, GLuint index, GLfloat* val);
GLAPI PFNGLGETMULTISAMPLEFVNVPROC glad_glGetMultisamplefvNV;
GLAPI PFNGLGETMULTISAMPLEFVNVPROC glad_debug_glGetMultisamplefvNV;
#define glGetMultisamplefvNV glad_debug_glGetMultisamplefvNV
typedef void (APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC)(GLuint index, GLbitfield mask);
GLAPI PFNGLSAMPLEMASKINDEXEDNVPROC glad_glSampleMaskIndexedNV;
GLAPI PFNGLSAMPLEMASKINDEXEDNVPROC glad_debug_glSampleMaskIndexedNV;
#define glSampleMaskIndexedNV glad_debug_glSampleMaskIndexedNV
typedef void (APIENTRYP PFNGLTEXRENDERBUFFERNVPROC)(GLenum target, GLuint renderbuffer);
GLAPI PFNGLTEXRENDERBUFFERNVPROC glad_glTexRenderbufferNV;
GLAPI PFNGLTEXRENDERBUFFERNVPROC glad_debug_glTexRenderbufferNV;
#define glTexRenderbufferNV glad_debug_glTexRenderbufferNV
#endif
#ifndef GL_NV_stereo_view_rendering
#define GL_NV_stereo_view_rendering 1
GLAPI int GLAD_GL_NV_stereo_view_rendering;
#endif
#ifndef GL_IBM_static_data
#define GL_IBM_static_data 1
GLAPI int GLAD_GL_IBM_static_data;
typedef void (APIENTRYP PFNGLFLUSHSTATICDATAIBMPROC)(GLenum target);
GLAPI PFNGLFLUSHSTATICDATAIBMPROC glad_glFlushStaticDataIBM;
GLAPI PFNGLFLUSHSTATICDATAIBMPROC glad_debug_glFlushStaticDataIBM;
#define glFlushStaticDataIBM glad_debug_glFlushStaticDataIBM
#endif
#ifndef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint 1
GLAPI int GLAD_GL_EXT_clip_volume_hint;
#endif
#ifndef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal 1
GLAPI int GLAD_GL_EXT_texture_perturb_normal;
typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC)(GLenum mode);
GLAPI PFNGLTEXTURENORMALEXTPROC glad_glTextureNormalEXT;
GLAPI PFNGLTEXTURENORMALEXTPROC glad_debug_glTextureNormalEXT;
#define glTextureNormalEXT glad_debug_glTextureNormalEXT
#endif
#ifndef GL_NV_fragment_program2
#define GL_NV_fragment_program2 1
GLAPI int GLAD_GL_NV_fragment_program2;
#endif
#ifndef GL_NV_fragment_program4
#define GL_NV_fragment_program4 1
GLAPI int GLAD_GL_NV_fragment_program4;
#endif
#ifndef GL_EXT_point_parameters
#define GL_EXT_point_parameters 1
GLAPI int GLAD_GL_EXT_point_parameters;
typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPOINTPARAMETERFEXTPROC glad_glPointParameterfEXT;
GLAPI PFNGLPOINTPARAMETERFEXTPROC glad_debug_glPointParameterfEXT;
#define glPointParameterfEXT glad_debug_glPointParameterfEXT
typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLPOINTPARAMETERFVEXTPROC glad_glPointParameterfvEXT;
GLAPI PFNGLPOINTPARAMETERFVEXTPROC glad_debug_glPointParameterfvEXT;
#define glPointParameterfvEXT glad_debug_glPointParameterfvEXT
#endif
#ifndef GL_PGI_misc_hints
#define GL_PGI_misc_hints 1
GLAPI int GLAD_GL_PGI_misc_hints;
typedef void (APIENTRYP PFNGLHINTPGIPROC)(GLenum target, GLint mode);
GLAPI PFNGLHINTPGIPROC glad_glHintPGI;
GLAPI PFNGLHINTPGIPROC glad_debug_glHintPGI;
#define glHintPGI glad_debug_glHintPGI
#endif
#ifndef GL_SGIX_subsample
#define GL_SGIX_subsample 1
GLAPI int GLAD_GL_SGIX_subsample;
#endif
#ifndef GL_AMD_shader_stencil_export
#define GL_AMD_shader_stencil_export 1
GLAPI int GLAD_GL_AMD_shader_stencil_export;
#endif
#ifndef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod 1
GLAPI int GLAD_GL_ARB_shader_texture_lod;
#endif
#ifndef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader 1
GLAPI int GLAD_GL_ARB_vertex_shader;
typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB* name);
GLAPI PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB;
GLAPI PFNGLBINDATTRIBLOCATIONARBPROC glad_debug_glBindAttribLocationARB;
#define glBindAttribLocationARB glad_debug_glBindAttribLocationARB
typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name);
GLAPI PFNGLGETACTIVEATTRIBARBPROC glad_glGetActiveAttribARB;
GLAPI PFNGLGETACTIVEATTRIBARBPROC glad_debug_glGetActiveAttribARB;
#define glGetActiveAttribARB glad_debug_glGetActiveAttribARB
typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB* name);
GLAPI PFNGLGETATTRIBLOCATIONARBPROC glad_glGetAttribLocationARB;
GLAPI PFNGLGETATTRIBLOCATIONARBPROC glad_debug_glGetAttribLocationARB;
#define glGetAttribLocationARB glad_debug_glGetAttribLocationARB
#endif
#ifndef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 1
GLAPI int GLAD_GL_ARB_depth_clamp;
#endif
#ifndef GL_SGIS_texture_select
#define GL_SGIS_texture_select 1
GLAPI int GLAD_GL_SGIS_texture_select;
#endif
#ifndef GL_NV_texture_shader
#define GL_NV_texture_shader 1
GLAPI int GLAD_GL_NV_texture_shader;
#endif
#ifndef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 1
GLAPI int GLAD_GL_ARB_tessellation_shader;
typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
GLAPI PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
GLAPI PFNGLPATCHPARAMETERIPROC glad_debug_glPatchParameteri;
#define glPatchParameteri glad_debug_glPatchParameteri
typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat* values);
GLAPI PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
GLAPI PFNGLPATCHPARAMETERFVPROC glad_debug_glPatchParameterfv;
#define glPatchParameterfv glad_debug_glPatchParameterfv
#endif
#ifndef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2 1
GLAPI int GLAD_GL_EXT_draw_buffers2;
typedef void (APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLAPI PFNGLCOLORMASKINDEXEDEXTPROC glad_glColorMaskIndexedEXT;
GLAPI PFNGLCOLORMASKINDEXEDEXTPROC glad_debug_glColorMaskIndexedEXT;
#define glColorMaskIndexedEXT glad_debug_glColorMaskIndexedEXT
typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC)(GLenum target, GLuint index, GLboolean* data);
GLAPI PFNGLGETBOOLEANINDEXEDVEXTPROC glad_glGetBooleanIndexedvEXT;
GLAPI PFNGLGETBOOLEANINDEXEDVEXTPROC glad_debug_glGetBooleanIndexedvEXT;
#define glGetBooleanIndexedvEXT glad_debug_glGetBooleanIndexedvEXT
typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC)(GLenum target, GLuint index, GLint* data);
GLAPI PFNGLGETINTEGERINDEXEDVEXTPROC glad_glGetIntegerIndexedvEXT;
GLAPI PFNGLGETINTEGERINDEXEDVEXTPROC glad_debug_glGetIntegerIndexedvEXT;
#define glGetIntegerIndexedvEXT glad_debug_glGetIntegerIndexedvEXT
typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
GLAPI PFNGLENABLEINDEXEDEXTPROC glad_glEnableIndexedEXT;
GLAPI PFNGLENABLEINDEXEDEXTPROC glad_debug_glEnableIndexedEXT;
#define glEnableIndexedEXT glad_debug_glEnableIndexedEXT
typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
GLAPI PFNGLDISABLEINDEXEDEXTPROC glad_glDisableIndexedEXT;
GLAPI PFNGLDISABLEINDEXEDEXTPROC glad_debug_glDisableIndexedEXT;
#define glDisableIndexedEXT glad_debug_glDisableIndexedEXT
typedef GLboolean (APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC)(GLenum target, GLuint index);
GLAPI PFNGLISENABLEDINDEXEDEXTPROC glad_glIsEnabledIndexedEXT;
GLAPI PFNGLISENABLEDINDEXEDEXTPROC glad_debug_glIsEnabledIndexedEXT;
#define glIsEnabledIndexedEXT glad_debug_glIsEnabledIndexedEXT
#endif
#ifndef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 1
GLAPI int GLAD_GL_ARB_vertex_attrib_64bit;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
GLAPI PFNGLVERTEXATTRIBL1DPROC glad_debug_glVertexAttribL1d;
#define glVertexAttribL1d glad_debug_glVertexAttribL1d
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
GLAPI PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d;
#define glVertexAttribL2d glad_debug_glVertexAttribL2d
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
GLAPI PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d;
#define glVertexAttribL3d glad_debug_glVertexAttribL3d
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
GLAPI PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d;
#define glVertexAttribL4d glad_debug_glVertexAttribL4d
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
GLAPI PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv;
#define glVertexAttribL1dv glad_debug_glVertexAttribL1dv
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
GLAPI PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv;
#define glVertexAttribL2dv glad_debug_glVertexAttribL2dv
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
GLAPI PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv;
#define glVertexAttribL3dv glad_debug_glVertexAttribL3dv
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
GLAPI PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv;
#define glVertexAttribL4dv glad_debug_glVertexAttribL4dv
typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
GLAPI PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer;
#define glVertexAttribLPointer glad_debug_glVertexAttribLPointer
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble* params);
GLAPI PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
GLAPI PFNGLGETVERTEXATTRIBLDVPROC glad_debug_glGetVertexAttribLdv;
#define glGetVertexAttribLdv glad_debug_glGetVertexAttribLdv
#endif
#ifndef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 1
GLAPI int GLAD_GL_EXT_texture_filter_minmax;
typedef void (APIENTRYP PFNGLRASTERSAMPLESEXTPROC)(GLuint samples, GLboolean fixedsamplelocations);
GLAPI PFNGLRASTERSAMPLESEXTPROC glad_glRasterSamplesEXT;
GLAPI PFNGLRASTERSAMPLESEXTPROC glad_debug_glRasterSamplesEXT;
#define glRasterSamplesEXT glad_debug_glRasterSamplesEXT
#endif
#ifndef GL_WIN_specular_fog
#define GL_WIN_specular_fog 1
GLAPI int GLAD_GL_WIN_specular_fog;
#endif
#ifndef GL_AMD_interleaved_elements
#define GL_AMD_interleaved_elements 1
GLAPI int GLAD_GL_AMD_interleaved_elements;
typedef void (APIENTRYP PFNGLVERTEXATTRIBPARAMETERIAMDPROC)(GLuint index, GLenum pname, GLint param);
GLAPI PFNGLVERTEXATTRIBPARAMETERIAMDPROC glad_glVertexAttribParameteriAMD;
GLAPI PFNGLVERTEXATTRIBPARAMETERIAMDPROC glad_debug_glVertexAttribParameteriAMD;
#define glVertexAttribParameteriAMD glad_debug_glVertexAttribParameteriAMD
#endif
#ifndef GL_ARB_fragment_program
#define GL_ARB_fragment_program 1
GLAPI int GLAD_GL_ARB_fragment_program;
#endif
#ifndef GL_OML_resample
#define GL_OML_resample 1
GLAPI int GLAD_GL_OML_resample;
#endif
#ifndef GL_APPLE_ycbcr_422
#define GL_APPLE_ycbcr_422 1
GLAPI int GLAD_GL_APPLE_ycbcr_422;
#endif
#ifndef GL_SGIX_texture_add_env
#define GL_SGIX_texture_add_env 1
GLAPI int GLAD_GL_SGIX_texture_add_env;
#endif
#ifndef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient 1
GLAPI int GLAD_GL_ARB_shadow_ambient;
#endif
#ifndef GL_ARB_texture_storage
#define GL_ARB_texture_storage 1
GLAPI int GLAD_GL_ARB_texture_storage;
typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D;
GLAPI PFNGLTEXSTORAGE1DPROC glad_debug_glTexStorage1D;
#define glTexStorage1D glad_debug_glTexStorage1D
typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D;
GLAPI PFNGLTEXSTORAGE2DPROC glad_debug_glTexStorage2D;
#define glTexStorage2D glad_debug_glTexStorage2D
typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D;
GLAPI PFNGLTEXSTORAGE3DPROC glad_debug_glTexStorage3D;
#define glTexStorage3D glad_debug_glTexStorage3D
#endif
#ifndef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object 1
GLAPI int GLAD_GL_EXT_pixel_buffer_object;
#endif
#ifndef GL_ARB_copy_image
#define GL_ARB_copy_image 1
GLAPI int GLAD_GL_ARB_copy_image;
typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
GLAPI PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData;
GLAPI PFNGLCOPYIMAGESUBDATAPROC glad_debug_glCopyImageSubData;
#define glCopyImageSubData glad_debug_glCopyImageSubData
#endif
#ifndef GL_SGIS_pixel_texture
#define GL_SGIS_pixel_texture 1
GLAPI int GLAD_GL_SGIS_pixel_texture;
typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC)(GLenum pname, GLint param);
GLAPI PFNGLPIXELTEXGENPARAMETERISGISPROC glad_glPixelTexGenParameteriSGIS;
GLAPI PFNGLPIXELTEXGENPARAMETERISGISPROC glad_debug_glPixelTexGenParameteriSGIS;
#define glPixelTexGenParameteriSGIS glad_debug_glPixelTexGenParameteriSGIS
typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC)(GLenum pname, const GLint* params);
GLAPI PFNGLPIXELTEXGENPARAMETERIVSGISPROC glad_glPixelTexGenParameterivSGIS;
GLAPI PFNGLPIXELTEXGENPARAMETERIVSGISPROC glad_debug_glPixelTexGenParameterivSGIS;
#define glPixelTexGenParameterivSGIS glad_debug_glPixelTexGenParameterivSGIS
typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPIXELTEXGENPARAMETERFSGISPROC glad_glPixelTexGenParameterfSGIS;
GLAPI PFNGLPIXELTEXGENPARAMETERFSGISPROC glad_debug_glPixelTexGenParameterfSGIS;
#define glPixelTexGenParameterfSGIS glad_debug_glPixelTexGenParameterfSGIS
typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLPIXELTEXGENPARAMETERFVSGISPROC glad_glPixelTexGenParameterfvSGIS;
GLAPI PFNGLPIXELTEXGENPARAMETERFVSGISPROC glad_debug_glPixelTexGenParameterfvSGIS;
#define glPixelTexGenParameterfvSGIS glad_debug_glPixelTexGenParameterfvSGIS
typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)(GLenum pname, GLint* params);
GLAPI PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glad_glGetPixelTexGenParameterivSGIS;
GLAPI PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glad_debug_glGetPixelTexGenParameterivSGIS;
#define glGetPixelTexGenParameterivSGIS glad_debug_glGetPixelTexGenParameterivSGIS
typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)(GLenum pname, GLfloat* params);
GLAPI PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glad_glGetPixelTexGenParameterfvSGIS;
GLAPI PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glad_debug_glGetPixelTexGenParameterfvSGIS;
#define glGetPixelTexGenParameterfvSGIS glad_debug_glGetPixelTexGenParameterfvSGIS
#endif
#ifndef GL_SGIS_generate_mipmap
#define GL_SGIS_generate_mipmap 1
GLAPI int GLAD_GL_SGIS_generate_mipmap;
#endif
#ifndef GL_SGIX_instruments
#define GL_SGIX_instruments 1
GLAPI int GLAD_GL_SGIX_instruments;
typedef GLint (APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC)();
GLAPI PFNGLGETINSTRUMENTSSGIXPROC glad_glGetInstrumentsSGIX;
GLAPI PFNGLGETINSTRUMENTSSGIXPROC glad_debug_glGetInstrumentsSGIX;
#define glGetInstrumentsSGIX glad_debug_glGetInstrumentsSGIX
typedef void (APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC)(GLsizei size, GLint* buffer);
GLAPI PFNGLINSTRUMENTSBUFFERSGIXPROC glad_glInstrumentsBufferSGIX;
GLAPI PFNGLINSTRUMENTSBUFFERSGIXPROC glad_debug_glInstrumentsBufferSGIX;
#define glInstrumentsBufferSGIX glad_debug_glInstrumentsBufferSGIX
typedef GLint (APIENTRYP PFNGLPOLLINSTRUMENTSSGIXPROC)(GLint* marker_p);
GLAPI PFNGLPOLLINSTRUMENTSSGIXPROC glad_glPollInstrumentsSGIX;
GLAPI PFNGLPOLLINSTRUMENTSSGIXPROC glad_debug_glPollInstrumentsSGIX;
#define glPollInstrumentsSGIX glad_debug_glPollInstrumentsSGIX
typedef void (APIENTRYP PFNGLREADINSTRUMENTSSGIXPROC)(GLint marker);
GLAPI PFNGLREADINSTRUMENTSSGIXPROC glad_glReadInstrumentsSGIX;
GLAPI PFNGLREADINSTRUMENTSSGIXPROC glad_debug_glReadInstrumentsSGIX;
#define glReadInstrumentsSGIX glad_debug_glReadInstrumentsSGIX
typedef void (APIENTRYP PFNGLSTARTINSTRUMENTSSGIXPROC)();
GLAPI PFNGLSTARTINSTRUMENTSSGIXPROC glad_glStartInstrumentsSGIX;
GLAPI PFNGLSTARTINSTRUMENTSSGIXPROC glad_debug_glStartInstrumentsSGIX;
#define glStartInstrumentsSGIX glad_debug_glStartInstrumentsSGIX
typedef void (APIENTRYP PFNGLSTOPINSTRUMENTSSGIXPROC)(GLint marker);
GLAPI PFNGLSTOPINSTRUMENTSSGIXPROC glad_glStopInstrumentsSGIX;
GLAPI PFNGLSTOPINSTRUMENTSSGIXPROC glad_debug_glStopInstrumentsSGIX;
#define glStopInstrumentsSGIX glad_debug_glStopInstrumentsSGIX
#endif
#ifndef GL_HP_texture_lighting
#define GL_HP_texture_lighting 1
GLAPI int GLAD_GL_HP_texture_lighting;
#endif
#ifndef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 1
GLAPI int GLAD_GL_ARB_shader_storage_buffer_object;
typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GLAPI PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding;
GLAPI PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_debug_glShaderStorageBlockBinding;
#define glShaderStorageBlockBinding glad_debug_glShaderStorageBlockBinding
#endif
#ifndef GL_EXT_sparse_texture2
#define GL_EXT_sparse_texture2 1
GLAPI int GLAD_GL_EXT_sparse_texture2;
#endif
#ifndef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax 1
GLAPI int GLAD_GL_EXT_blend_minmax;
typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC)(GLenum mode);
GLAPI PFNGLBLENDEQUATIONEXTPROC glad_glBlendEquationEXT;
GLAPI PFNGLBLENDEQUATIONEXTPROC glad_debug_glBlendEquationEXT;
#define glBlendEquationEXT glad_debug_glBlendEquationEXT
#endif
#ifndef GL_MESA_pack_invert
#define GL_MESA_pack_invert 1
GLAPI int GLAD_GL_MESA_pack_invert;
#endif
#ifndef GL_ARB_base_instance
#define GL_ARB_base_instance 1
GLAPI int GLAD_GL_ARB_base_instance;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance;
GLAPI PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_debug_glDrawArraysInstancedBaseInstance;
#define glDrawArraysInstancedBaseInstance glad_debug_glDrawArraysInstancedBaseInstance
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance;
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_debug_glDrawElementsInstancedBaseInstance;
#define glDrawElementsInstancedBaseInstance glad_debug_glDrawElementsInstancedBaseInstance
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance;
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_debug_glDrawElementsInstancedBaseVertexBaseInstance;
#define glDrawElementsInstancedBaseVertexBaseInstance glad_debug_glDrawElementsInstancedBaseVertexBaseInstance
#endif
#ifndef GL_SGIX_convolution_accuracy
#define GL_SGIX_convolution_accuracy 1
GLAPI int GLAD_GL_SGIX_convolution_accuracy;
#endif
#ifndef GL_PGI_vertex_hints
#define GL_PGI_vertex_hints 1
GLAPI int GLAD_GL_PGI_vertex_hints;
#endif
#ifndef GL_AMD_transform_feedback4
#define GL_AMD_transform_feedback4 1
GLAPI int GLAD_GL_AMD_transform_feedback4;
#endif
#ifndef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 1
GLAPI int GLAD_GL_ARB_ES3_1_compatibility;
typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion;
GLAPI PFNGLMEMORYBARRIERBYREGIONPROC glad_debug_glMemoryBarrierByRegion;
#define glMemoryBarrierByRegion glad_debug_glMemoryBarrierByRegion
#endif
#ifndef GL_EXT_texture_integer
#define GL_EXT_texture_integer 1
GLAPI int GLAD_GL_EXT_texture_integer;
typedef void (APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLTEXPARAMETERIIVEXTPROC glad_glTexParameterIivEXT;
GLAPI PFNGLTEXPARAMETERIIVEXTPROC glad_debug_glTexParameterIivEXT;
#define glTexParameterIivEXT glad_debug_glTexParameterIivEXT
typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, const GLuint* params);
GLAPI PFNGLTEXPARAMETERIUIVEXTPROC glad_glTexParameterIuivEXT;
GLAPI PFNGLTEXPARAMETERIUIVEXTPROC glad_debug_glTexParameterIuivEXT;
#define glTexParameterIuivEXT glad_debug_glTexParameterIuivEXT
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXPARAMETERIIVEXTPROC glad_glGetTexParameterIivEXT;
GLAPI PFNGLGETTEXPARAMETERIIVEXTPROC glad_debug_glGetTexParameterIivEXT;
#define glGetTexParameterIivEXT glad_debug_glGetTexParameterIivEXT
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, GLuint* params);
GLAPI PFNGLGETTEXPARAMETERIUIVEXTPROC glad_glGetTexParameterIuivEXT;
GLAPI PFNGLGETTEXPARAMETERIUIVEXTPROC glad_debug_glGetTexParameterIuivEXT;
#define glGetTexParameterIuivEXT glad_debug_glGetTexParameterIuivEXT
typedef void (APIENTRYP PFNGLCLEARCOLORIIEXTPROC)(GLint red, GLint green, GLint blue, GLint alpha);
GLAPI PFNGLCLEARCOLORIIEXTPROC glad_glClearColorIiEXT;
GLAPI PFNGLCLEARCOLORIIEXTPROC glad_debug_glClearColorIiEXT;
#define glClearColorIiEXT glad_debug_glClearColorIiEXT
typedef void (APIENTRYP PFNGLCLEARCOLORIUIEXTPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
GLAPI PFNGLCLEARCOLORIUIEXTPROC glad_glClearColorIuiEXT;
GLAPI PFNGLCLEARCOLORIUIEXTPROC glad_debug_glClearColorIuiEXT;
#define glClearColorIuiEXT glad_debug_glClearColorIuiEXT
#endif
#ifndef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 1
GLAPI int GLAD_GL_ARB_texture_multisample;
#endif
#ifndef GL_AMD_gpu_shader_int64
#define GL_AMD_gpu_shader_int64 1
GLAPI int GLAD_GL_AMD_gpu_shader_int64;
typedef void (APIENTRYP PFNGLUNIFORM1I64NVPROC)(GLint location, GLint64EXT x);
GLAPI PFNGLUNIFORM1I64NVPROC glad_glUniform1i64NV;
GLAPI PFNGLUNIFORM1I64NVPROC glad_debug_glUniform1i64NV;
#define glUniform1i64NV glad_debug_glUniform1i64NV
typedef void (APIENTRYP PFNGLUNIFORM2I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y);
GLAPI PFNGLUNIFORM2I64NVPROC glad_glUniform2i64NV;
GLAPI PFNGLUNIFORM2I64NVPROC glad_debug_glUniform2i64NV;
#define glUniform2i64NV glad_debug_glUniform2i64NV
typedef void (APIENTRYP PFNGLUNIFORM3I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
GLAPI PFNGLUNIFORM3I64NVPROC glad_glUniform3i64NV;
GLAPI PFNGLUNIFORM3I64NVPROC glad_debug_glUniform3i64NV;
#define glUniform3i64NV glad_debug_glUniform3i64NV
typedef void (APIENTRYP PFNGLUNIFORM4I64NVPROC)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
GLAPI PFNGLUNIFORM4I64NVPROC glad_glUniform4i64NV;
GLAPI PFNGLUNIFORM4I64NVPROC glad_debug_glUniform4i64NV;
#define glUniform4i64NV glad_debug_glUniform4i64NV
typedef void (APIENTRYP PFNGLUNIFORM1I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT* value);
GLAPI PFNGLUNIFORM1I64VNVPROC glad_glUniform1i64vNV;
GLAPI PFNGLUNIFORM1I64VNVPROC glad_debug_glUniform1i64vNV;
#define glUniform1i64vNV glad_debug_glUniform1i64vNV
typedef void (APIENTRYP PFNGLUNIFORM2I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT* value);
GLAPI PFNGLUNIFORM2I64VNVPROC glad_glUniform2i64vNV;
GLAPI PFNGLUNIFORM2I64VNVPROC glad_debug_glUniform2i64vNV;
#define glUniform2i64vNV glad_debug_glUniform2i64vNV
typedef void (APIENTRYP PFNGLUNIFORM3I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT* value);
GLAPI PFNGLUNIFORM3I64VNVPROC glad_glUniform3i64vNV;
GLAPI PFNGLUNIFORM3I64VNVPROC glad_debug_glUniform3i64vNV;
#define glUniform3i64vNV glad_debug_glUniform3i64vNV
typedef void (APIENTRYP PFNGLUNIFORM4I64VNVPROC)(GLint location, GLsizei count, const GLint64EXT* value);
GLAPI PFNGLUNIFORM4I64VNVPROC glad_glUniform4i64vNV;
GLAPI PFNGLUNIFORM4I64VNVPROC glad_debug_glUniform4i64vNV;
#define glUniform4i64vNV glad_debug_glUniform4i64vNV
typedef void (APIENTRYP PFNGLUNIFORM1UI64NVPROC)(GLint location, GLuint64EXT x);
GLAPI PFNGLUNIFORM1UI64NVPROC glad_glUniform1ui64NV;
GLAPI PFNGLUNIFORM1UI64NVPROC glad_debug_glUniform1ui64NV;
#define glUniform1ui64NV glad_debug_glUniform1ui64NV
typedef void (APIENTRYP PFNGLUNIFORM2UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y);
GLAPI PFNGLUNIFORM2UI64NVPROC glad_glUniform2ui64NV;
GLAPI PFNGLUNIFORM2UI64NVPROC glad_debug_glUniform2ui64NV;
#define glUniform2ui64NV glad_debug_glUniform2ui64NV
typedef void (APIENTRYP PFNGLUNIFORM3UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
GLAPI PFNGLUNIFORM3UI64NVPROC glad_glUniform3ui64NV;
GLAPI PFNGLUNIFORM3UI64NVPROC glad_debug_glUniform3ui64NV;
#define glUniform3ui64NV glad_debug_glUniform3ui64NV
typedef void (APIENTRYP PFNGLUNIFORM4UI64NVPROC)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
GLAPI PFNGLUNIFORM4UI64NVPROC glad_glUniform4ui64NV;
GLAPI PFNGLUNIFORM4UI64NVPROC glad_debug_glUniform4ui64NV;
#define glUniform4ui64NV glad_debug_glUniform4ui64NV
typedef void (APIENTRYP PFNGLUNIFORM1UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLUNIFORM1UI64VNVPROC glad_glUniform1ui64vNV;
GLAPI PFNGLUNIFORM1UI64VNVPROC glad_debug_glUniform1ui64vNV;
#define glUniform1ui64vNV glad_debug_glUniform1ui64vNV
typedef void (APIENTRYP PFNGLUNIFORM2UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLUNIFORM2UI64VNVPROC glad_glUniform2ui64vNV;
GLAPI PFNGLUNIFORM2UI64VNVPROC glad_debug_glUniform2ui64vNV;
#define glUniform2ui64vNV glad_debug_glUniform2ui64vNV
typedef void (APIENTRYP PFNGLUNIFORM3UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLUNIFORM3UI64VNVPROC glad_glUniform3ui64vNV;
GLAPI PFNGLUNIFORM3UI64VNVPROC glad_debug_glUniform3ui64vNV;
#define glUniform3ui64vNV glad_debug_glUniform3ui64vNV
typedef void (APIENTRYP PFNGLUNIFORM4UI64VNVPROC)(GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLUNIFORM4UI64VNVPROC glad_glUniform4ui64vNV;
GLAPI PFNGLUNIFORM4UI64VNVPROC glad_debug_glUniform4ui64vNV;
#define glUniform4ui64vNV glad_debug_glUniform4ui64vNV
typedef void (APIENTRYP PFNGLGETUNIFORMI64VNVPROC)(GLuint program, GLint location, GLint64EXT* params);
GLAPI PFNGLGETUNIFORMI64VNVPROC glad_glGetUniformi64vNV;
GLAPI PFNGLGETUNIFORMI64VNVPROC glad_debug_glGetUniformi64vNV;
#define glGetUniformi64vNV glad_debug_glGetUniformi64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC)(GLuint program, GLint location, GLint64EXT x);
GLAPI PFNGLPROGRAMUNIFORM1I64NVPROC glad_glProgramUniform1i64NV;
GLAPI PFNGLPROGRAMUNIFORM1I64NVPROC glad_debug_glProgramUniform1i64NV;
#define glProgramUniform1i64NV glad_debug_glProgramUniform1i64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
GLAPI PFNGLPROGRAMUNIFORM2I64NVPROC glad_glProgramUniform2i64NV;
GLAPI PFNGLPROGRAMUNIFORM2I64NVPROC glad_debug_glProgramUniform2i64NV;
#define glProgramUniform2i64NV glad_debug_glProgramUniform2i64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
GLAPI PFNGLPROGRAMUNIFORM3I64NVPROC glad_glProgramUniform3i64NV;
GLAPI PFNGLPROGRAMUNIFORM3I64NVPROC glad_debug_glProgramUniform3i64NV;
#define glProgramUniform3i64NV glad_debug_glProgramUniform3i64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
GLAPI PFNGLPROGRAMUNIFORM4I64NVPROC glad_glProgramUniform4i64NV;
GLAPI PFNGLPROGRAMUNIFORM4I64NVPROC glad_debug_glProgramUniform4i64NV;
#define glProgramUniform4i64NV glad_debug_glProgramUniform4i64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
GLAPI PFNGLPROGRAMUNIFORM1I64VNVPROC glad_glProgramUniform1i64vNV;
GLAPI PFNGLPROGRAMUNIFORM1I64VNVPROC glad_debug_glProgramUniform1i64vNV;
#define glProgramUniform1i64vNV glad_debug_glProgramUniform1i64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
GLAPI PFNGLPROGRAMUNIFORM2I64VNVPROC glad_glProgramUniform2i64vNV;
GLAPI PFNGLPROGRAMUNIFORM2I64VNVPROC glad_debug_glProgramUniform2i64vNV;
#define glProgramUniform2i64vNV glad_debug_glProgramUniform2i64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
GLAPI PFNGLPROGRAMUNIFORM3I64VNVPROC glad_glProgramUniform3i64vNV;
GLAPI PFNGLPROGRAMUNIFORM3I64VNVPROC glad_debug_glProgramUniform3i64vNV;
#define glProgramUniform3i64vNV glad_debug_glProgramUniform3i64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value);
GLAPI PFNGLPROGRAMUNIFORM4I64VNVPROC glad_glProgramUniform4i64vNV;
GLAPI PFNGLPROGRAMUNIFORM4I64VNVPROC glad_debug_glProgramUniform4i64vNV;
#define glProgramUniform4i64vNV glad_debug_glProgramUniform4i64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x);
GLAPI PFNGLPROGRAMUNIFORM1UI64NVPROC glad_glProgramUniform1ui64NV;
GLAPI PFNGLPROGRAMUNIFORM1UI64NVPROC glad_debug_glProgramUniform1ui64NV;
#define glProgramUniform1ui64NV glad_debug_glProgramUniform1ui64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
GLAPI PFNGLPROGRAMUNIFORM2UI64NVPROC glad_glProgramUniform2ui64NV;
GLAPI PFNGLPROGRAMUNIFORM2UI64NVPROC glad_debug_glProgramUniform2ui64NV;
#define glProgramUniform2ui64NV glad_debug_glProgramUniform2ui64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
GLAPI PFNGLPROGRAMUNIFORM3UI64NVPROC glad_glProgramUniform3ui64NV;
GLAPI PFNGLPROGRAMUNIFORM3UI64NVPROC glad_debug_glProgramUniform3ui64NV;
#define glProgramUniform3ui64NV glad_debug_glProgramUniform3ui64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
GLAPI PFNGLPROGRAMUNIFORM4UI64NVPROC glad_glProgramUniform4ui64NV;
GLAPI PFNGLPROGRAMUNIFORM4UI64NVPROC glad_debug_glProgramUniform4ui64NV;
#define glProgramUniform4ui64NV glad_debug_glProgramUniform4ui64NV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLPROGRAMUNIFORM1UI64VNVPROC glad_glProgramUniform1ui64vNV;
GLAPI PFNGLPROGRAMUNIFORM1UI64VNVPROC glad_debug_glProgramUniform1ui64vNV;
#define glProgramUniform1ui64vNV glad_debug_glProgramUniform1ui64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLPROGRAMUNIFORM2UI64VNVPROC glad_glProgramUniform2ui64vNV;
GLAPI PFNGLPROGRAMUNIFORM2UI64VNVPROC glad_debug_glProgramUniform2ui64vNV;
#define glProgramUniform2ui64vNV glad_debug_glProgramUniform2ui64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLPROGRAMUNIFORM3UI64VNVPROC glad_glProgramUniform3ui64vNV;
GLAPI PFNGLPROGRAMUNIFORM3UI64VNVPROC glad_debug_glProgramUniform3ui64vNV;
#define glProgramUniform3ui64vNV glad_debug_glProgramUniform3ui64vNV
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value);
GLAPI PFNGLPROGRAMUNIFORM4UI64VNVPROC glad_glProgramUniform4ui64vNV;
GLAPI PFNGLPROGRAMUNIFORM4UI64VNVPROC glad_debug_glProgramUniform4ui64vNV;
#define glProgramUniform4ui64vNV glad_debug_glProgramUniform4ui64vNV
#endif
#ifndef GL_S3_s3tc
#define GL_S3_s3tc 1
GLAPI int GLAD_GL_S3_s3tc;
#endif
#ifndef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 1
GLAPI int GLAD_GL_ARB_query_buffer_object;
#endif
#ifndef GL_AMD_vertex_shader_tessellator
#define GL_AMD_vertex_shader_tessellator 1
GLAPI int GLAD_GL_AMD_vertex_shader_tessellator;
typedef void (APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC)(GLfloat factor);
GLAPI PFNGLTESSELLATIONFACTORAMDPROC glad_glTessellationFactorAMD;
GLAPI PFNGLTESSELLATIONFACTORAMDPROC glad_debug_glTessellationFactorAMD;
#define glTessellationFactorAMD glad_debug_glTessellationFactorAMD
typedef void (APIENTRYP PFNGLTESSELLATIONMODEAMDPROC)(GLenum mode);
GLAPI PFNGLTESSELLATIONMODEAMDPROC glad_glTessellationModeAMD;
GLAPI PFNGLTESSELLATIONMODEAMDPROC glad_debug_glTessellationModeAMD;
#define glTessellationModeAMD glad_debug_glTessellationModeAMD
#endif
#ifndef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 1
GLAPI int GLAD_GL_ARB_invalidate_subdata;
typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage;
GLAPI PFNGLINVALIDATETEXSUBIMAGEPROC glad_debug_glInvalidateTexSubImage;
#define glInvalidateTexSubImage glad_debug_glInvalidateTexSubImage
typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
GLAPI PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage;
GLAPI PFNGLINVALIDATETEXIMAGEPROC glad_debug_glInvalidateTexImage;
#define glInvalidateTexImage glad_debug_glInvalidateTexImage
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData;
GLAPI PFNGLINVALIDATEBUFFERSUBDATAPROC glad_debug_glInvalidateBufferSubData;
#define glInvalidateBufferSubData glad_debug_glInvalidateBufferSubData
typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
GLAPI PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData;
GLAPI PFNGLINVALIDATEBUFFERDATAPROC glad_debug_glInvalidateBufferData;
#define glInvalidateBufferData glad_debug_glInvalidateBufferData
typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum* attachments);
GLAPI PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer;
GLAPI PFNGLINVALIDATEFRAMEBUFFERPROC glad_debug_glInvalidateFramebuffer;
#define glInvalidateFramebuffer glad_debug_glInvalidateFramebuffer
typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer;
GLAPI PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_debug_glInvalidateSubFramebuffer;
#define glInvalidateSubFramebuffer glad_debug_glInvalidateSubFramebuffer
#endif
#ifndef GL_EXT_index_material
#define GL_EXT_index_material 1
GLAPI int GLAD_GL_EXT_index_material;
typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC)(GLenum face, GLenum mode);
GLAPI PFNGLINDEXMATERIALEXTPROC glad_glIndexMaterialEXT;
GLAPI PFNGLINDEXMATERIALEXTPROC glad_debug_glIndexMaterialEXT;
#define glIndexMaterialEXT glad_debug_glIndexMaterialEXT
#endif
#ifndef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent 1
GLAPI int GLAD_GL_NV_blend_equation_advanced_coherent;
#endif
#ifndef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 1
GLAPI int GLAD_GL_KHR_texture_compression_astc_sliced_3d;
#endif
#ifndef GL_INTEL_parallel_arrays
#define GL_INTEL_parallel_arrays 1
GLAPI int GLAD_GL_INTEL_parallel_arrays;
typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC)(GLint size, GLenum type, const void** pointer);
GLAPI PFNGLVERTEXPOINTERVINTELPROC glad_glVertexPointervINTEL;
GLAPI PFNGLVERTEXPOINTERVINTELPROC glad_debug_glVertexPointervINTEL;
#define glVertexPointervINTEL glad_debug_glVertexPointervINTEL
typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC)(GLenum type, const void** pointer);
GLAPI PFNGLNORMALPOINTERVINTELPROC glad_glNormalPointervINTEL;
GLAPI PFNGLNORMALPOINTERVINTELPROC glad_debug_glNormalPointervINTEL;
#define glNormalPointervINTEL glad_debug_glNormalPointervINTEL
typedef void (APIENTRYP PFNGLCOLORPOINTERVINTELPROC)(GLint size, GLenum type, const void** pointer);
GLAPI PFNGLCOLORPOINTERVINTELPROC glad_glColorPointervINTEL;
GLAPI PFNGLCOLORPOINTERVINTELPROC glad_debug_glColorPointervINTEL;
#define glColorPointervINTEL glad_debug_glColorPointervINTEL
typedef void (APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC)(GLint size, GLenum type, const void** pointer);
GLAPI PFNGLTEXCOORDPOINTERVINTELPROC glad_glTexCoordPointervINTEL;
GLAPI PFNGLTEXCOORDPOINTERVINTELPROC glad_debug_glTexCoordPointervINTEL;
#define glTexCoordPointervINTEL glad_debug_glTexCoordPointervINTEL
#endif
#ifndef GL_ATI_draw_buffers
#define GL_ATI_draw_buffers 1
GLAPI int GLAD_GL_ATI_draw_buffers;
typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC)(GLsizei n, const GLenum* bufs);
GLAPI PFNGLDRAWBUFFERSATIPROC glad_glDrawBuffersATI;
GLAPI PFNGLDRAWBUFFERSATIPROC glad_debug_glDrawBuffersATI;
#define glDrawBuffersATI glad_debug_glDrawBuffersATI
#endif
#ifndef GL_EXT_cmyka
#define GL_EXT_cmyka 1
GLAPI int GLAD_GL_EXT_cmyka;
#endif
#ifndef GL_SGIX_pixel_texture
#define GL_SGIX_pixel_texture 1
GLAPI int GLAD_GL_SGIX_pixel_texture;
typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC)(GLenum mode);
GLAPI PFNGLPIXELTEXGENSGIXPROC glad_glPixelTexGenSGIX;
GLAPI PFNGLPIXELTEXGENSGIXPROC glad_debug_glPixelTexGenSGIX;
#define glPixelTexGenSGIX glad_debug_glPixelTexGenSGIX
#endif
#ifndef GL_APPLE_specular_vector
#define GL_APPLE_specular_vector 1
GLAPI int GLAD_GL_APPLE_specular_vector;
#endif
#ifndef GL_ARB_compatibility
#define GL_ARB_compatibility 1
GLAPI int GLAD_GL_ARB_compatibility;
#endif
#ifndef GL_ARB_timer_query
#define GL_ARB_timer_query 1
GLAPI int GLAD_GL_ARB_timer_query;
#endif
#ifndef GL_SGIX_interlace
#define GL_SGIX_interlace 1
GLAPI int GLAD_GL_SGIX_interlace;
#endif
#ifndef GL_NV_parameter_buffer_object
#define GL_NV_parameter_buffer_object 1
GLAPI int GLAD_GL_NV_parameter_buffer_object;
typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat* params);
GLAPI PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glad_glProgramBufferParametersfvNV;
GLAPI PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glad_debug_glProgramBufferParametersfvNV;
#define glProgramBufferParametersfvNV glad_debug_glProgramBufferParametersfvNV
typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint* params);
GLAPI PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glad_glProgramBufferParametersIivNV;
GLAPI PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glad_debug_glProgramBufferParametersIivNV;
#define glProgramBufferParametersIivNV glad_debug_glProgramBufferParametersIivNV
typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint* params);
GLAPI PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glad_glProgramBufferParametersIuivNV;
GLAPI PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glad_debug_glProgramBufferParametersIuivNV;
#define glProgramBufferParametersIuivNV glad_debug_glProgramBufferParametersIuivNV
#endif
#ifndef GL_AMD_shader_trinary_minmax
#define GL_AMD_shader_trinary_minmax 1
GLAPI int GLAD_GL_AMD_shader_trinary_minmax;
#endif
#ifndef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 1
GLAPI int GLAD_GL_ARB_direct_state_access;
typedef void (APIENTRYP PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint* ids);
GLAPI PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks;
GLAPI PFNGLCREATETRANSFORMFEEDBACKSPROC glad_debug_glCreateTransformFeedbacks;
#define glCreateTransformFeedbacks glad_debug_glCreateTransformFeedbacks
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase;
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_debug_glTransformFeedbackBufferBase;
#define glTransformFeedbackBufferBase glad_debug_glTransformFeedbackBufferBase
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange;
GLAPI PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_debug_glTransformFeedbackBufferRange;
#define glTransformFeedbackBufferRange glad_debug_glTransformFeedbackBufferRange
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint* param);
GLAPI PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv;
GLAPI PFNGLGETTRANSFORMFEEDBACKIVPROC glad_debug_glGetTransformFeedbackiv;
#define glGetTransformFeedbackiv glad_debug_glGetTransformFeedbackiv
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint* param);
GLAPI PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v;
GLAPI PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_debug_glGetTransformFeedbacki_v;
#define glGetTransformFeedbacki_v glad_debug_glGetTransformFeedbacki_v
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
GLAPI PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v;
GLAPI PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_debug_glGetTransformFeedbacki64_v;
#define glGetTransformFeedbacki64_v glad_debug_glGetTransformFeedbacki64_v
typedef void (APIENTRYP PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint* buffers);
GLAPI PFNGLCREATEBUFFERSPROC glad_glCreateBuffers;
GLAPI PFNGLCREATEBUFFERSPROC glad_debug_glCreateBuffers;
#define glCreateBuffers glad_debug_glCreateBuffers
typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
GLAPI PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage;
GLAPI PFNGLNAMEDBUFFERSTORAGEPROC glad_debug_glNamedBufferStorage;
#define glNamedBufferStorage glad_debug_glNamedBufferStorage
typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
GLAPI PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData;
GLAPI PFNGLNAMEDBUFFERDATAPROC glad_debug_glNamedBufferData;
#define glNamedBufferData glad_debug_glNamedBufferData
typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
GLAPI PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData;
GLAPI PFNGLNAMEDBUFFERSUBDATAPROC glad_debug_glNamedBufferSubData;
#define glNamedBufferSubData glad_debug_glNamedBufferSubData
typedef void (APIENTRYP PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData;
GLAPI PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_debug_glCopyNamedBufferSubData;
#define glCopyNamedBufferSubData glad_debug_glCopyNamedBufferSubData
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData;
GLAPI PFNGLCLEARNAMEDBUFFERDATAPROC glad_debug_glClearNamedBufferData;
#define glClearNamedBufferData glad_debug_glClearNamedBufferData
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData;
GLAPI PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_debug_glClearNamedBufferSubData;
#define glClearNamedBufferSubData glad_debug_glClearNamedBufferSubData
typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
GLAPI PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer;
GLAPI PFNGLMAPNAMEDBUFFERPROC glad_debug_glMapNamedBuffer;
#define glMapNamedBuffer glad_debug_glMapNamedBuffer
typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange;
GLAPI PFNGLMAPNAMEDBUFFERRANGEPROC glad_debug_glMapNamedBufferRange;
#define glMapNamedBufferRange glad_debug_glMapNamedBufferRange
typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
GLAPI PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer;
GLAPI PFNGLUNMAPNAMEDBUFFERPROC glad_debug_glUnmapNamedBuffer;
#define glUnmapNamedBuffer glad_debug_glUnmapNamedBuffer
typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange;
GLAPI PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_debug_glFlushMappedNamedBufferRange;
#define glFlushMappedNamedBufferRange glad_debug_glFlushMappedNamedBufferRange
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv;
GLAPI PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_debug_glGetNamedBufferParameteriv;
#define glGetNamedBufferParameteriv glad_debug_glGetNamedBufferParameteriv
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64* params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v;
GLAPI PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_debug_glGetNamedBufferParameteri64v;
#define glGetNamedBufferParameteri64v glad_debug_glGetNamedBufferParameteri64v
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void** params);
GLAPI PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv;
GLAPI PFNGLGETNAMEDBUFFERPOINTERVPROC glad_debug_glGetNamedBufferPointerv;
#define glGetNamedBufferPointerv glad_debug_glGetNamedBufferPointerv
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
GLAPI PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData;
GLAPI PFNGLGETNAMEDBUFFERSUBDATAPROC glad_debug_glGetNamedBufferSubData;
#define glGetNamedBufferSubData glad_debug_glGetNamedBufferSubData
typedef void (APIENTRYP PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
GLAPI PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers;
GLAPI PFNGLCREATEFRAMEBUFFERSPROC glad_debug_glCreateFramebuffers;
#define glCreateFramebuffers glad_debug_glCreateFramebuffers
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer;
GLAPI PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_debug_glNamedFramebufferRenderbuffer;
#define glNamedFramebufferRenderbuffer glad_debug_glNamedFramebufferRenderbuffer
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
GLAPI PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri;
GLAPI PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_debug_glNamedFramebufferParameteri;
#define glNamedFramebufferParameteri glad_debug_glNamedFramebufferParameteri
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture;
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_debug_glNamedFramebufferTexture;
#define glNamedFramebufferTexture glad_debug_glNamedFramebufferTexture
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer;
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_debug_glNamedFramebufferTextureLayer;
#define glNamedFramebufferTextureLayer glad_debug_glNamedFramebufferTextureLayer
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer;
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_debug_glNamedFramebufferDrawBuffer;
#define glNamedFramebufferDrawBuffer glad_debug_glNamedFramebufferDrawBuffer
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers;
GLAPI PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_debug_glNamedFramebufferDrawBuffers;
#define glNamedFramebufferDrawBuffers glad_debug_glNamedFramebufferDrawBuffers
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
GLAPI PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer;
GLAPI PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_debug_glNamedFramebufferReadBuffer;
#define glNamedFramebufferReadBuffer glad_debug_glNamedFramebufferReadBuffer
typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData;
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_debug_glInvalidateNamedFramebufferData;
#define glInvalidateNamedFramebufferData glad_debug_glInvalidateNamedFramebufferData
typedef void (APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData;
GLAPI PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_debug_glInvalidateNamedFramebufferSubData;
#define glInvalidateNamedFramebufferSubData glad_debug_glInvalidateNamedFramebufferSubData
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv;
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_debug_glClearNamedFramebufferiv;
#define glClearNamedFramebufferiv glad_debug_glClearNamedFramebufferiv
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv;
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_debug_glClearNamedFramebufferuiv;
#define glClearNamedFramebufferuiv glad_debug_glClearNamedFramebufferuiv
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv;
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_debug_glClearNamedFramebufferfv;
#define glClearNamedFramebufferfv glad_debug_glClearNamedFramebufferfv
typedef void (APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi;
GLAPI PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_debug_glClearNamedFramebufferfi;
#define glClearNamedFramebufferfi glad_debug_glClearNamedFramebufferfi
typedef void (APIENTRYP PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLAPI PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer;
GLAPI PFNGLBLITNAMEDFRAMEBUFFERPROC glad_debug_glBlitNamedFramebuffer;
#define glBlitNamedFramebuffer glad_debug_glBlitNamedFramebuffer
typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
GLAPI PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus;
GLAPI PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_debug_glCheckNamedFramebufferStatus;
#define glCheckNamedFramebufferStatus glad_debug_glCheckNamedFramebufferStatus
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint* param);
GLAPI PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv;
GLAPI PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_debug_glGetNamedFramebufferParameteriv;
#define glGetNamedFramebufferParameteriv glad_debug_glGetNamedFramebufferParameteriv
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv;
GLAPI PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetNamedFramebufferAttachmentParameteriv;
#define glGetNamedFramebufferAttachmentParameteriv glad_debug_glGetNamedFramebufferAttachmentParameteriv
typedef void (APIENTRYP PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
GLAPI PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers;
GLAPI PFNGLCREATERENDERBUFFERSPROC glad_debug_glCreateRenderbuffers;
#define glCreateRenderbuffers glad_debug_glCreateRenderbuffers
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage;
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_debug_glNamedRenderbufferStorage;
#define glNamedRenderbufferStorage glad_debug_glNamedRenderbufferStorage
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample;
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glNamedRenderbufferStorageMultisample;
#define glNamedRenderbufferStorageMultisample glad_debug_glNamedRenderbufferStorageMultisample
typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv;
GLAPI PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_debug_glGetNamedRenderbufferParameteriv;
#define glGetNamedRenderbufferParameteriv glad_debug_glGetNamedRenderbufferParameteriv
typedef void (APIENTRYP PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint* textures);
GLAPI PFNGLCREATETEXTURESPROC glad_glCreateTextures;
GLAPI PFNGLCREATETEXTURESPROC glad_debug_glCreateTextures;
#define glCreateTextures glad_debug_glCreateTextures
typedef void (APIENTRYP PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer;
GLAPI PFNGLTEXTUREBUFFERPROC glad_debug_glTextureBuffer;
#define glTextureBuffer glad_debug_glTextureBuffer
typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange;
GLAPI PFNGLTEXTUREBUFFERRANGEPROC glad_debug_glTextureBufferRange;
#define glTextureBufferRange glad_debug_glTextureBufferRange
typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D;
GLAPI PFNGLTEXTURESTORAGE1DPROC glad_debug_glTextureStorage1D;
#define glTextureStorage1D glad_debug_glTextureStorage1D
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D;
GLAPI PFNGLTEXTURESTORAGE2DPROC glad_debug_glTextureStorage2D;
#define glTextureStorage2D glad_debug_glTextureStorage2D
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D;
GLAPI PFNGLTEXTURESTORAGE3DPROC glad_debug_glTextureStorage3D;
#define glTextureStorage3D glad_debug_glTextureStorage3D
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample;
GLAPI PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_debug_glTextureStorage2DMultisample;
#define glTextureStorage2DMultisample glad_debug_glTextureStorage2DMultisample
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample;
GLAPI PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_debug_glTextureStorage3DMultisample;
#define glTextureStorage3DMultisample glad_debug_glTextureStorage3DMultisample
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D;
GLAPI PFNGLTEXTURESUBIMAGE1DPROC glad_debug_glTextureSubImage1D;
#define glTextureSubImage1D glad_debug_glTextureSubImage1D
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D;
GLAPI PFNGLTEXTURESUBIMAGE2DPROC glad_debug_glTextureSubImage2D;
#define glTextureSubImage2D glad_debug_glTextureSubImage2D
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D;
GLAPI PFNGLTEXTURESUBIMAGE3DPROC glad_debug_glTextureSubImage3D;
#define glTextureSubImage3D glad_debug_glTextureSubImage3D
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D;
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_debug_glCompressedTextureSubImage1D;
#define glCompressedTextureSubImage1D glad_debug_glCompressedTextureSubImage1D
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D;
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_debug_glCompressedTextureSubImage2D;
#define glCompressedTextureSubImage2D glad_debug_glCompressedTextureSubImage2D
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D;
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_debug_glCompressedTextureSubImage3D;
#define glCompressedTextureSubImage3D glad_debug_glCompressedTextureSubImage3D
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D;
GLAPI PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_debug_glCopyTextureSubImage1D;
#define glCopyTextureSubImage1D glad_debug_glCopyTextureSubImage1D
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D;
GLAPI PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_debug_glCopyTextureSubImage2D;
#define glCopyTextureSubImage2D glad_debug_glCopyTextureSubImage2D
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D;
GLAPI PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_debug_glCopyTextureSubImage3D;
#define glCopyTextureSubImage3D glad_debug_glCopyTextureSubImage3D
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
GLAPI PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf;
GLAPI PFNGLTEXTUREPARAMETERFPROC glad_debug_glTextureParameterf;
#define glTextureParameterf glad_debug_glTextureParameterf
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat* param);
GLAPI PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv;
GLAPI PFNGLTEXTUREPARAMETERFVPROC glad_debug_glTextureParameterfv;
#define glTextureParameterfv glad_debug_glTextureParameterfv
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
GLAPI PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri;
GLAPI PFNGLTEXTUREPARAMETERIPROC glad_debug_glTextureParameteri;
#define glTextureParameteri glad_debug_glTextureParameteri
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint* params);
GLAPI PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv;
GLAPI PFNGLTEXTUREPARAMETERIIVPROC glad_debug_glTextureParameterIiv;
#define glTextureParameterIiv glad_debug_glTextureParameterIiv
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint* params);
GLAPI PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv;
GLAPI PFNGLTEXTUREPARAMETERIUIVPROC glad_debug_glTextureParameterIuiv;
#define glTextureParameterIuiv glad_debug_glTextureParameterIuiv
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint* param);
GLAPI PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv;
GLAPI PFNGLTEXTUREPARAMETERIVPROC glad_debug_glTextureParameteriv;
#define glTextureParameteriv glad_debug_glTextureParameteriv
typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
GLAPI PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap;
GLAPI PFNGLGENERATETEXTUREMIPMAPPROC glad_debug_glGenerateTextureMipmap;
#define glGenerateTextureMipmap glad_debug_glGenerateTextureMipmap
typedef void (APIENTRYP PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
GLAPI PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit;
GLAPI PFNGLBINDTEXTUREUNITPROC glad_debug_glBindTextureUnit;
#define glBindTextureUnit glad_debug_glBindTextureUnit
typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage;
GLAPI PFNGLGETTEXTUREIMAGEPROC glad_debug_glGetTextureImage;
#define glGetTextureImage glad_debug_glGetTextureImage
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
GLAPI PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage;
GLAPI PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_debug_glGetCompressedTextureImage;
#define glGetCompressedTextureImage glad_debug_glGetCompressedTextureImage
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv;
GLAPI PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_debug_glGetTextureLevelParameterfv;
#define glGetTextureLevelParameterfv glad_debug_glGetTextureLevelParameterfv
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv;
GLAPI PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_debug_glGetTextureLevelParameteriv;
#define glGetTextureLevelParameteriv glad_debug_glGetTextureLevelParameteriv
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv;
GLAPI PFNGLGETTEXTUREPARAMETERFVPROC glad_debug_glGetTextureParameterfv;
#define glGetTextureParameterfv glad_debug_glGetTextureParameterfv
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv;
GLAPI PFNGLGETTEXTUREPARAMETERIIVPROC glad_debug_glGetTextureParameterIiv;
#define glGetTextureParameterIiv glad_debug_glGetTextureParameterIiv
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint* params);
GLAPI PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv;
GLAPI PFNGLGETTEXTUREPARAMETERIUIVPROC glad_debug_glGetTextureParameterIuiv;
#define glGetTextureParameterIuiv glad_debug_glGetTextureParameterIuiv
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv;
GLAPI PFNGLGETTEXTUREPARAMETERIVPROC glad_debug_glGetTextureParameteriv;
#define glGetTextureParameteriv glad_debug_glGetTextureParameteriv
typedef void (APIENTRYP PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
GLAPI PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays;
GLAPI PFNGLCREATEVERTEXARRAYSPROC glad_debug_glCreateVertexArrays;
#define glCreateVertexArrays glad_debug_glCreateVertexArrays
typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib;
GLAPI PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_debug_glDisableVertexArrayAttrib;
#define glDisableVertexArrayAttrib glad_debug_glDisableVertexArrayAttrib
typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib;
GLAPI PFNGLENABLEVERTEXARRAYATTRIBPROC glad_debug_glEnableVertexArrayAttrib;
#define glEnableVertexArrayAttrib glad_debug_glEnableVertexArrayAttrib
typedef void (APIENTRYP PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
GLAPI PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer;
GLAPI PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_debug_glVertexArrayElementBuffer;
#define glVertexArrayElementBuffer glad_debug_glVertexArrayElementBuffer
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer;
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_debug_glVertexArrayVertexBuffer;
#define glVertexArrayVertexBuffer glad_debug_glVertexArrayVertexBuffer
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers;
GLAPI PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_debug_glVertexArrayVertexBuffers;
#define glVertexArrayVertexBuffers glad_debug_glVertexArrayVertexBuffers
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding;
GLAPI PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_debug_glVertexArrayAttribBinding;
#define glVertexArrayAttribBinding glad_debug_glVertexArrayAttribBinding
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat;
GLAPI PFNGLVERTEXARRAYATTRIBFORMATPROC glad_debug_glVertexArrayAttribFormat;
#define glVertexArrayAttribFormat glad_debug_glVertexArrayAttribFormat
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat;
GLAPI PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_debug_glVertexArrayAttribIFormat;
#define glVertexArrayAttribIFormat glad_debug_glVertexArrayAttribIFormat
typedef void (APIENTRYP PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat;
GLAPI PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_debug_glVertexArrayAttribLFormat;
#define glVertexArrayAttribLFormat glad_debug_glVertexArrayAttribLFormat
typedef void (APIENTRYP PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor;
GLAPI PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_debug_glVertexArrayBindingDivisor;
#define glVertexArrayBindingDivisor glad_debug_glVertexArrayBindingDivisor
typedef void (APIENTRYP PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint* param);
GLAPI PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv;
GLAPI PFNGLGETVERTEXARRAYIVPROC glad_debug_glGetVertexArrayiv;
#define glGetVertexArrayiv glad_debug_glGetVertexArrayiv
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
GLAPI PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv;
GLAPI PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_debug_glGetVertexArrayIndexediv;
#define glGetVertexArrayIndexediv glad_debug_glGetVertexArrayIndexediv
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
GLAPI PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv;
GLAPI PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_debug_glGetVertexArrayIndexed64iv;
#define glGetVertexArrayIndexed64iv glad_debug_glGetVertexArrayIndexed64iv
typedef void (APIENTRYP PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint* samplers);
GLAPI PFNGLCREATESAMPLERSPROC glad_glCreateSamplers;
GLAPI PFNGLCREATESAMPLERSPROC glad_debug_glCreateSamplers;
#define glCreateSamplers glad_debug_glCreateSamplers
typedef void (APIENTRYP PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint* pipelines);
GLAPI PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines;
GLAPI PFNGLCREATEPROGRAMPIPELINESPROC glad_debug_glCreateProgramPipelines;
#define glCreateProgramPipelines glad_debug_glCreateProgramPipelines
typedef void (APIENTRYP PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint* ids);
GLAPI PFNGLCREATEQUERIESPROC glad_glCreateQueries;
GLAPI PFNGLCREATEQUERIESPROC glad_debug_glCreateQueries;
#define glCreateQueries glad_debug_glCreateQueries
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v;
GLAPI PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_debug_glGetQueryBufferObjecti64v;
#define glGetQueryBufferObjecti64v glad_debug_glGetQueryBufferObjecti64v
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv;
GLAPI PFNGLGETQUERYBUFFEROBJECTIVPROC glad_debug_glGetQueryBufferObjectiv;
#define glGetQueryBufferObjectiv glad_debug_glGetQueryBufferObjectiv
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v;
GLAPI PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_debug_glGetQueryBufferObjectui64v;
#define glGetQueryBufferObjectui64v glad_debug_glGetQueryBufferObjectui64v
typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLAPI PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv;
GLAPI PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_debug_glGetQueryBufferObjectuiv;
#define glGetQueryBufferObjectuiv glad_debug_glGetQueryBufferObjectuiv
#endif
#ifndef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal 1
GLAPI int GLAD_GL_EXT_rescale_normal;
#endif
#ifndef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 1
GLAPI int GLAD_GL_ARB_pixel_buffer_object;
#endif
#ifndef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 1
GLAPI int GLAD_GL_ARB_uniform_buffer_object;
#endif
#ifndef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 1
GLAPI int GLAD_GL_ARB_vertex_type_10f_11f_11f_rev;
#endif
#ifndef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 1
GLAPI int GLAD_GL_ARB_texture_swizzle;
#endif
#ifndef GL_NV_transform_feedback2
#define GL_NV_transform_feedback2 1
GLAPI int GLAD_GL_NV_transform_feedback2;
typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC)(GLenum target, GLuint id);
GLAPI PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_glBindTransformFeedbackNV;
GLAPI PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_debug_glBindTransformFeedbackNV;
#define glBindTransformFeedbackNV glad_debug_glBindTransformFeedbackNV
typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC)(GLsizei n, const GLuint* ids);
GLAPI PFNGLDELETETRANSFORMFEEDBACKSNVPROC glad_glDeleteTransformFeedbacksNV;
GLAPI PFNGLDELETETRANSFORMFEEDBACKSNVPROC glad_debug_glDeleteTransformFeedbacksNV;
#define glDeleteTransformFeedbacksNV glad_debug_glDeleteTransformFeedbacksNV
typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC)(GLsizei n, GLuint* ids);
GLAPI PFNGLGENTRANSFORMFEEDBACKSNVPROC glad_glGenTransformFeedbacksNV;
GLAPI PFNGLGENTRANSFORMFEEDBACKSNVPROC glad_debug_glGenTransformFeedbacksNV;
#define glGenTransformFeedbacksNV glad_debug_glGenTransformFeedbacksNV
typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKNVPROC)(GLuint id);
GLAPI PFNGLISTRANSFORMFEEDBACKNVPROC glad_glIsTransformFeedbackNV;
GLAPI PFNGLISTRANSFORMFEEDBACKNVPROC glad_debug_glIsTransformFeedbackNV;
#define glIsTransformFeedbackNV glad_debug_glIsTransformFeedbackNV
typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC)();
GLAPI PFNGLPAUSETRANSFORMFEEDBACKNVPROC glad_glPauseTransformFeedbackNV;
GLAPI PFNGLPAUSETRANSFORMFEEDBACKNVPROC glad_debug_glPauseTransformFeedbackNV;
#define glPauseTransformFeedbackNV glad_debug_glPauseTransformFeedbackNV
typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC)();
GLAPI PFNGLRESUMETRANSFORMFEEDBACKNVPROC glad_glResumeTransformFeedbackNV;
GLAPI PFNGLRESUMETRANSFORMFEEDBACKNVPROC glad_debug_glResumeTransformFeedbackNV;
#define glResumeTransformFeedbackNV glad_debug_glResumeTransformFeedbackNV
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC)(GLenum mode, GLuint id);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKNVPROC glad_glDrawTransformFeedbackNV;
GLAPI PFNGLDRAWTRANSFORMFEEDBACKNVPROC glad_debug_glDrawTransformFeedbackNV;
#define glDrawTransformFeedbackNV glad_debug_glDrawTransformFeedbackNV
#endif
#ifndef GL_SGIX_async_pixel
#define GL_SGIX_async_pixel 1
GLAPI int GLAD_GL_SGIX_async_pixel;
#endif
#ifndef GL_NV_fragment_program_option
#define GL_NV_fragment_program_option 1
GLAPI int GLAD_GL_NV_fragment_program_option;
#endif
#ifndef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 1
GLAPI int GLAD_GL_ARB_explicit_attrib_location;
#endif
#ifndef GL_EXT_blend_color
#define GL_EXT_blend_color 1
GLAPI int GLAD_GL_EXT_blend_color;
typedef void (APIENTRYP PFNGLBLENDCOLOREXTPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLAPI PFNGLBLENDCOLOREXTPROC glad_glBlendColorEXT;
GLAPI PFNGLBLENDCOLOREXTPROC glad_debug_glBlendColorEXT;
#define glBlendColorEXT glad_debug_glBlendColorEXT
#endif
#ifndef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group 1
GLAPI int GLAD_GL_NV_shader_thread_group;
#endif
#ifndef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap 1
GLAPI int GLAD_GL_EXT_stencil_wrap;
#endif
#ifndef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats 1
GLAPI int GLAD_GL_EXT_index_array_formats;
#endif
#ifndef GL_OVR_multiview2
#define GL_OVR_multiview2 1
GLAPI int GLAD_GL_OVR_multiview2;
#endif
#ifndef GL_EXT_histogram
#define GL_EXT_histogram 1
GLAPI int GLAD_GL_EXT_histogram;
typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
GLAPI PFNGLGETHISTOGRAMEXTPROC glad_glGetHistogramEXT;
GLAPI PFNGLGETHISTOGRAMEXTPROC glad_debug_glGetHistogramEXT;
#define glGetHistogramEXT glad_debug_glGetHistogramEXT
typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glad_glGetHistogramParameterfvEXT;
GLAPI PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glad_debug_glGetHistogramParameterfvEXT;
#define glGetHistogramParameterfvEXT glad_debug_glGetHistogramParameterfvEXT
typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glad_glGetHistogramParameterivEXT;
GLAPI PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glad_debug_glGetHistogramParameterivEXT;
#define glGetHistogramParameterivEXT glad_debug_glGetHistogramParameterivEXT
typedef void (APIENTRYP PFNGLGETMINMAXEXTPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
GLAPI PFNGLGETMINMAXEXTPROC glad_glGetMinmaxEXT;
GLAPI PFNGLGETMINMAXEXTPROC glad_debug_glGetMinmaxEXT;
#define glGetMinmaxEXT glad_debug_glGetMinmaxEXT
typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETMINMAXPARAMETERFVEXTPROC glad_glGetMinmaxParameterfvEXT;
GLAPI PFNGLGETMINMAXPARAMETERFVEXTPROC glad_debug_glGetMinmaxParameterfvEXT;
#define glGetMinmaxParameterfvEXT glad_debug_glGetMinmaxParameterfvEXT
typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETMINMAXPARAMETERIVEXTPROC glad_glGetMinmaxParameterivEXT;
GLAPI PFNGLGETMINMAXPARAMETERIVEXTPROC glad_debug_glGetMinmaxParameterivEXT;
#define glGetMinmaxParameterivEXT glad_debug_glGetMinmaxParameterivEXT
typedef void (APIENTRYP PFNGLHISTOGRAMEXTPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
GLAPI PFNGLHISTOGRAMEXTPROC glad_glHistogramEXT;
GLAPI PFNGLHISTOGRAMEXTPROC glad_debug_glHistogramEXT;
#define glHistogramEXT glad_debug_glHistogramEXT
typedef void (APIENTRYP PFNGLMINMAXEXTPROC)(GLenum target, GLenum internalformat, GLboolean sink);
GLAPI PFNGLMINMAXEXTPROC glad_glMinmaxEXT;
GLAPI PFNGLMINMAXEXTPROC glad_debug_glMinmaxEXT;
#define glMinmaxEXT glad_debug_glMinmaxEXT
typedef void (APIENTRYP PFNGLRESETHISTOGRAMEXTPROC)(GLenum target);
GLAPI PFNGLRESETHISTOGRAMEXTPROC glad_glResetHistogramEXT;
GLAPI PFNGLRESETHISTOGRAMEXTPROC glad_debug_glResetHistogramEXT;
#define glResetHistogramEXT glad_debug_glResetHistogramEXT
typedef void (APIENTRYP PFNGLRESETMINMAXEXTPROC)(GLenum target);
GLAPI PFNGLRESETMINMAXEXTPROC glad_glResetMinmaxEXT;
GLAPI PFNGLRESETMINMAXEXTPROC glad_debug_glResetMinmaxEXT;
#define glResetMinmaxEXT glad_debug_glResetMinmaxEXT
#endif
#ifndef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset 1
GLAPI int GLAD_GL_EXT_polygon_offset;
typedef void (APIENTRYP PFNGLPOLYGONOFFSETEXTPROC)(GLfloat factor, GLfloat bias);
GLAPI PFNGLPOLYGONOFFSETEXTPROC glad_glPolygonOffsetEXT;
GLAPI PFNGLPOLYGONOFFSETEXTPROC glad_debug_glPolygonOffsetEXT;
#define glPolygonOffsetEXT glad_debug_glPolygonOffsetEXT
#endif
#ifndef GL_SGIS_point_parameters
#define GL_SGIS_point_parameters 1
GLAPI int GLAD_GL_SGIS_point_parameters;
typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPOINTPARAMETERFSGISPROC glad_glPointParameterfSGIS;
GLAPI PFNGLPOINTPARAMETERFSGISPROC glad_debug_glPointParameterfSGIS;
#define glPointParameterfSGIS glad_debug_glPointParameterfSGIS
typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLPOINTPARAMETERFVSGISPROC glad_glPointParameterfvSGIS;
GLAPI PFNGLPOINTPARAMETERFVSGISPROC glad_debug_glPointParameterfvSGIS;
#define glPointParameterfvSGIS glad_debug_glPointParameterfvSGIS
#endif
#ifndef GL_SGIX_ycrcb
#define GL_SGIX_ycrcb 1
GLAPI int GLAD_GL_SGIX_ycrcb;
#endif
#ifndef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 1
GLAPI int GLAD_GL_EXT_direct_state_access;
typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC)(GLenum mode, const GLfloat* m);
GLAPI PFNGLMATRIXLOADFEXTPROC glad_glMatrixLoadfEXT;
GLAPI PFNGLMATRIXLOADFEXTPROC glad_debug_glMatrixLoadfEXT;
#define glMatrixLoadfEXT glad_debug_glMatrixLoadfEXT
typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC)(GLenum mode, const GLdouble* m);
GLAPI PFNGLMATRIXLOADDEXTPROC glad_glMatrixLoaddEXT;
GLAPI PFNGLMATRIXLOADDEXTPROC glad_debug_glMatrixLoaddEXT;
#define glMatrixLoaddEXT glad_debug_glMatrixLoaddEXT
typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC)(GLenum mode, const GLfloat* m);
GLAPI PFNGLMATRIXMULTFEXTPROC glad_glMatrixMultfEXT;
GLAPI PFNGLMATRIXMULTFEXTPROC glad_debug_glMatrixMultfEXT;
#define glMatrixMultfEXT glad_debug_glMatrixMultfEXT
typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC)(GLenum mode, const GLdouble* m);
GLAPI PFNGLMATRIXMULTDEXTPROC glad_glMatrixMultdEXT;
GLAPI PFNGLMATRIXMULTDEXTPROC glad_debug_glMatrixMultdEXT;
#define glMatrixMultdEXT glad_debug_glMatrixMultdEXT
typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC)(GLenum mode);
GLAPI PFNGLMATRIXLOADIDENTITYEXTPROC glad_glMatrixLoadIdentityEXT;
GLAPI PFNGLMATRIXLOADIDENTITYEXTPROC glad_debug_glMatrixLoadIdentityEXT;
#define glMatrixLoadIdentityEXT glad_debug_glMatrixLoadIdentityEXT
typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLMATRIXROTATEFEXTPROC glad_glMatrixRotatefEXT;
GLAPI PFNGLMATRIXROTATEFEXTPROC glad_debug_glMatrixRotatefEXT;
#define glMatrixRotatefEXT glad_debug_glMatrixRotatefEXT
typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLMATRIXROTATEDEXTPROC glad_glMatrixRotatedEXT;
GLAPI PFNGLMATRIXROTATEDEXTPROC glad_debug_glMatrixRotatedEXT;
#define glMatrixRotatedEXT glad_debug_glMatrixRotatedEXT
typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLMATRIXSCALEFEXTPROC glad_glMatrixScalefEXT;
GLAPI PFNGLMATRIXSCALEFEXTPROC glad_debug_glMatrixScalefEXT;
#define glMatrixScalefEXT glad_debug_glMatrixScalefEXT
typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLMATRIXSCALEDEXTPROC glad_glMatrixScaledEXT;
GLAPI PFNGLMATRIXSCALEDEXTPROC glad_debug_glMatrixScaledEXT;
#define glMatrixScaledEXT glad_debug_glMatrixScaledEXT
typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLMATRIXTRANSLATEFEXTPROC glad_glMatrixTranslatefEXT;
GLAPI PFNGLMATRIXTRANSLATEFEXTPROC glad_debug_glMatrixTranslatefEXT;
#define glMatrixTranslatefEXT glad_debug_glMatrixTranslatefEXT
typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLMATRIXTRANSLATEDEXTPROC glad_glMatrixTranslatedEXT;
GLAPI PFNGLMATRIXTRANSLATEDEXTPROC glad_debug_glMatrixTranslatedEXT;
#define glMatrixTranslatedEXT glad_debug_glMatrixTranslatedEXT
typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI PFNGLMATRIXFRUSTUMEXTPROC glad_glMatrixFrustumEXT;
GLAPI PFNGLMATRIXFRUSTUMEXTPROC glad_debug_glMatrixFrustumEXT;
#define glMatrixFrustumEXT glad_debug_glMatrixFrustumEXT
typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI PFNGLMATRIXORTHOEXTPROC glad_glMatrixOrthoEXT;
GLAPI PFNGLMATRIXORTHOEXTPROC glad_debug_glMatrixOrthoEXT;
#define glMatrixOrthoEXT glad_debug_glMatrixOrthoEXT
typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC)(GLenum mode);
GLAPI PFNGLMATRIXPOPEXTPROC glad_glMatrixPopEXT;
GLAPI PFNGLMATRIXPOPEXTPROC glad_debug_glMatrixPopEXT;
#define glMatrixPopEXT glad_debug_glMatrixPopEXT
typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC)(GLenum mode);
GLAPI PFNGLMATRIXPUSHEXTPROC glad_glMatrixPushEXT;
GLAPI PFNGLMATRIXPUSHEXTPROC glad_debug_glMatrixPushEXT;
#define glMatrixPushEXT glad_debug_glMatrixPushEXT
typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
GLAPI PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_glClientAttribDefaultEXT;
GLAPI PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_debug_glClientAttribDefaultEXT;
#define glClientAttribDefaultEXT glad_debug_glClientAttribDefaultEXT
typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
GLAPI PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glad_glPushClientAttribDefaultEXT;
GLAPI PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glad_debug_glPushClientAttribDefaultEXT;
#define glPushClientAttribDefaultEXT glad_debug_glPushClientAttribDefaultEXT
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLTEXTUREPARAMETERFEXTPROC glad_glTextureParameterfEXT;
GLAPI PFNGLTEXTUREPARAMETERFEXTPROC glad_debug_glTextureParameterfEXT;
#define glTextureParameterfEXT glad_debug_glTextureParameterfEXT
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLTEXTUREPARAMETERFVEXTPROC glad_glTextureParameterfvEXT;
GLAPI PFNGLTEXTUREPARAMETERFVEXTPROC glad_debug_glTextureParameterfvEXT;
#define glTextureParameterfvEXT glad_debug_glTextureParameterfvEXT
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint param);
GLAPI PFNGLTEXTUREPARAMETERIEXTPROC glad_glTextureParameteriEXT;
GLAPI PFNGLTEXTUREPARAMETERIEXTPROC glad_debug_glTextureParameteriEXT;
#define glTextureParameteriEXT glad_debug_glTextureParameteriEXT
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLTEXTUREPARAMETERIVEXTPROC glad_glTextureParameterivEXT;
GLAPI PFNGLTEXTUREPARAMETERIVEXTPROC glad_debug_glTextureParameterivEXT;
#define glTextureParameterivEXT glad_debug_glTextureParameterivEXT
typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTUREIMAGE1DEXTPROC glad_glTextureImage1DEXT;
GLAPI PFNGLTEXTUREIMAGE1DEXTPROC glad_debug_glTextureImage1DEXT;
#define glTextureImage1DEXT glad_debug_glTextureImage1DEXT
typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTUREIMAGE2DEXTPROC glad_glTextureImage2DEXT;
GLAPI PFNGLTEXTUREIMAGE2DEXTPROC glad_debug_glTextureImage2DEXT;
#define glTextureImage2DEXT glad_debug_glTextureImage2DEXT
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTURESUBIMAGE1DEXTPROC glad_glTextureSubImage1DEXT;
GLAPI PFNGLTEXTURESUBIMAGE1DEXTPROC glad_debug_glTextureSubImage1DEXT;
#define glTextureSubImage1DEXT glad_debug_glTextureSubImage1DEXT
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTURESUBIMAGE2DEXTPROC glad_glTextureSubImage2DEXT;
GLAPI PFNGLTEXTURESUBIMAGE2DEXTPROC glad_debug_glTextureSubImage2DEXT;
#define glTextureSubImage2DEXT glad_debug_glTextureSubImage2DEXT
typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_glCopyTextureImage1DEXT;
GLAPI PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_debug_glCopyTextureImage1DEXT;
#define glCopyTextureImage1DEXT glad_debug_glCopyTextureImage1DEXT
typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_glCopyTextureImage2DEXT;
GLAPI PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_debug_glCopyTextureImage2DEXT;
#define glCopyTextureImage2DEXT glad_debug_glCopyTextureImage2DEXT
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_glCopyTextureSubImage1DEXT;
GLAPI PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_debug_glCopyTextureSubImage1DEXT;
#define glCopyTextureSubImage1DEXT glad_debug_glCopyTextureSubImage1DEXT
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glad_glCopyTextureSubImage2DEXT;
GLAPI PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glad_debug_glCopyTextureSubImage2DEXT;
#define glCopyTextureSubImage2DEXT glad_debug_glCopyTextureSubImage2DEXT
typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
GLAPI PFNGLGETTEXTUREIMAGEEXTPROC glad_glGetTextureImageEXT;
GLAPI PFNGLGETTEXTUREIMAGEEXTPROC glad_debug_glGetTextureImageEXT;
#define glGetTextureImageEXT glad_debug_glGetTextureImageEXT
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXTUREPARAMETERFVEXTPROC glad_glGetTextureParameterfvEXT;
GLAPI PFNGLGETTEXTUREPARAMETERFVEXTPROC glad_debug_glGetTextureParameterfvEXT;
#define glGetTextureParameterfvEXT glad_debug_glGetTextureParameterfvEXT
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXTUREPARAMETERIVEXTPROC glad_glGetTextureParameterivEXT;
GLAPI PFNGLGETTEXTUREPARAMETERIVEXTPROC glad_debug_glGetTextureParameterivEXT;
#define glGetTextureParameterivEXT glad_debug_glGetTextureParameterivEXT
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glad_glGetTextureLevelParameterfvEXT;
GLAPI PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glad_debug_glGetTextureLevelParameterfvEXT;
#define glGetTextureLevelParameterfvEXT glad_debug_glGetTextureLevelParameterfvEXT
typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glad_glGetTextureLevelParameterivEXT;
GLAPI PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glad_debug_glGetTextureLevelParameterivEXT;
#define glGetTextureLevelParameterivEXT glad_debug_glGetTextureLevelParameterivEXT
typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTUREIMAGE3DEXTPROC glad_glTextureImage3DEXT;
GLAPI PFNGLTEXTUREIMAGE3DEXTPROC glad_debug_glTextureImage3DEXT;
#define glTextureImage3DEXT glad_debug_glTextureImage3DEXT
typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXTURESUBIMAGE3DEXTPROC glad_glTextureSubImage3DEXT;
GLAPI PFNGLTEXTURESUBIMAGE3DEXTPROC glad_debug_glTextureSubImage3DEXT;
#define glTextureSubImage3DEXT glad_debug_glTextureSubImage3DEXT
typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glad_glCopyTextureSubImage3DEXT;
GLAPI PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glad_debug_glCopyTextureSubImage3DEXT;
#define glCopyTextureSubImage3DEXT glad_debug_glCopyTextureSubImage3DEXT
typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC)(GLenum texunit, GLenum target, GLuint texture);
GLAPI PFNGLBINDMULTITEXTUREEXTPROC glad_glBindMultiTextureEXT;
GLAPI PFNGLBINDMULTITEXTUREEXTPROC glad_debug_glBindMultiTextureEXT;
#define glBindMultiTextureEXT glad_debug_glBindMultiTextureEXT
typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLMULTITEXCOORDPOINTEREXTPROC glad_glMultiTexCoordPointerEXT;
GLAPI PFNGLMULTITEXCOORDPOINTEREXTPROC glad_debug_glMultiTexCoordPointerEXT;
#define glMultiTexCoordPointerEXT glad_debug_glMultiTexCoordPointerEXT
typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLMULTITEXENVFEXTPROC glad_glMultiTexEnvfEXT;
GLAPI PFNGLMULTITEXENVFEXTPROC glad_debug_glMultiTexEnvfEXT;
#define glMultiTexEnvfEXT glad_debug_glMultiTexEnvfEXT
typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLMULTITEXENVFVEXTPROC glad_glMultiTexEnvfvEXT;
GLAPI PFNGLMULTITEXENVFVEXTPROC glad_debug_glMultiTexEnvfvEXT;
#define glMultiTexEnvfvEXT glad_debug_glMultiTexEnvfvEXT
typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
GLAPI PFNGLMULTITEXENVIEXTPROC glad_glMultiTexEnviEXT;
GLAPI PFNGLMULTITEXENVIEXTPROC glad_debug_glMultiTexEnviEXT;
#define glMultiTexEnviEXT glad_debug_glMultiTexEnviEXT
typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLMULTITEXENVIVEXTPROC glad_glMultiTexEnvivEXT;
GLAPI PFNGLMULTITEXENVIVEXTPROC glad_debug_glMultiTexEnvivEXT;
#define glMultiTexEnvivEXT glad_debug_glMultiTexEnvivEXT
typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
GLAPI PFNGLMULTITEXGENDEXTPROC glad_glMultiTexGendEXT;
GLAPI PFNGLMULTITEXGENDEXTPROC glad_debug_glMultiTexGendEXT;
#define glMultiTexGendEXT glad_debug_glMultiTexGendEXT
typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params);
GLAPI PFNGLMULTITEXGENDVEXTPROC glad_glMultiTexGendvEXT;
GLAPI PFNGLMULTITEXGENDVEXTPROC glad_debug_glMultiTexGendvEXT;
#define glMultiTexGendvEXT glad_debug_glMultiTexGendvEXT
typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
GLAPI PFNGLMULTITEXGENFEXTPROC glad_glMultiTexGenfEXT;
GLAPI PFNGLMULTITEXGENFEXTPROC glad_debug_glMultiTexGenfEXT;
#define glMultiTexGenfEXT glad_debug_glMultiTexGenfEXT
typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params);
GLAPI PFNGLMULTITEXGENFVEXTPROC glad_glMultiTexGenfvEXT;
GLAPI PFNGLMULTITEXGENFVEXTPROC glad_debug_glMultiTexGenfvEXT;
#define glMultiTexGenfvEXT glad_debug_glMultiTexGenfvEXT
typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
GLAPI PFNGLMULTITEXGENIEXTPROC glad_glMultiTexGeniEXT;
GLAPI PFNGLMULTITEXGENIEXTPROC glad_debug_glMultiTexGeniEXT;
#define glMultiTexGeniEXT glad_debug_glMultiTexGeniEXT
typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLint* params);
GLAPI PFNGLMULTITEXGENIVEXTPROC glad_glMultiTexGenivEXT;
GLAPI PFNGLMULTITEXGENIVEXTPROC glad_debug_glMultiTexGenivEXT;
#define glMultiTexGenivEXT glad_debug_glMultiTexGenivEXT
typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETMULTITEXENVFVEXTPROC glad_glGetMultiTexEnvfvEXT;
GLAPI PFNGLGETMULTITEXENVFVEXTPROC glad_debug_glGetMultiTexEnvfvEXT;
#define glGetMultiTexEnvfvEXT glad_debug_glGetMultiTexEnvfvEXT
typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETMULTITEXENVIVEXTPROC glad_glGetMultiTexEnvivEXT;
GLAPI PFNGLGETMULTITEXENVIVEXTPROC glad_debug_glGetMultiTexEnvivEXT;
#define glGetMultiTexEnvivEXT glad_debug_glGetMultiTexEnvivEXT
typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params);
GLAPI PFNGLGETMULTITEXGENDVEXTPROC glad_glGetMultiTexGendvEXT;
GLAPI PFNGLGETMULTITEXGENDVEXTPROC glad_debug_glGetMultiTexGendvEXT;
#define glGetMultiTexGendvEXT glad_debug_glGetMultiTexGendvEXT
typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params);
GLAPI PFNGLGETMULTITEXGENFVEXTPROC glad_glGetMultiTexGenfvEXT;
GLAPI PFNGLGETMULTITEXGENFVEXTPROC glad_debug_glGetMultiTexGenfvEXT;
#define glGetMultiTexGenfvEXT glad_debug_glGetMultiTexGenfvEXT
typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint* params);
GLAPI PFNGLGETMULTITEXGENIVEXTPROC glad_glGetMultiTexGenivEXT;
GLAPI PFNGLGETMULTITEXGENIVEXTPROC glad_debug_glGetMultiTexGenivEXT;
#define glGetMultiTexGenivEXT glad_debug_glGetMultiTexGenivEXT
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
GLAPI PFNGLMULTITEXPARAMETERIEXTPROC glad_glMultiTexParameteriEXT;
GLAPI PFNGLMULTITEXPARAMETERIEXTPROC glad_debug_glMultiTexParameteriEXT;
#define glMultiTexParameteriEXT glad_debug_glMultiTexParameteriEXT
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLMULTITEXPARAMETERIVEXTPROC glad_glMultiTexParameterivEXT;
GLAPI PFNGLMULTITEXPARAMETERIVEXTPROC glad_debug_glMultiTexParameterivEXT;
#define glMultiTexParameterivEXT glad_debug_glMultiTexParameterivEXT
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLMULTITEXPARAMETERFEXTPROC glad_glMultiTexParameterfEXT;
GLAPI PFNGLMULTITEXPARAMETERFEXTPROC glad_debug_glMultiTexParameterfEXT;
#define glMultiTexParameterfEXT glad_debug_glMultiTexParameterfEXT
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLMULTITEXPARAMETERFVEXTPROC glad_glMultiTexParameterfvEXT;
GLAPI PFNGLMULTITEXPARAMETERFVEXTPROC glad_debug_glMultiTexParameterfvEXT;
#define glMultiTexParameterfvEXT glad_debug_glMultiTexParameterfvEXT
typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLMULTITEXIMAGE1DEXTPROC glad_glMultiTexImage1DEXT;
GLAPI PFNGLMULTITEXIMAGE1DEXTPROC glad_debug_glMultiTexImage1DEXT;
#define glMultiTexImage1DEXT glad_debug_glMultiTexImage1DEXT
typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLMULTITEXIMAGE2DEXTPROC glad_glMultiTexImage2DEXT;
GLAPI PFNGLMULTITEXIMAGE2DEXTPROC glad_debug_glMultiTexImage2DEXT;
#define glMultiTexImage2DEXT glad_debug_glMultiTexImage2DEXT
typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLMULTITEXSUBIMAGE1DEXTPROC glad_glMultiTexSubImage1DEXT;
GLAPI PFNGLMULTITEXSUBIMAGE1DEXTPROC glad_debug_glMultiTexSubImage1DEXT;
#define glMultiTexSubImage1DEXT glad_debug_glMultiTexSubImage1DEXT
typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLMULTITEXSUBIMAGE2DEXTPROC glad_glMultiTexSubImage2DEXT;
GLAPI PFNGLMULTITEXSUBIMAGE2DEXTPROC glad_debug_glMultiTexSubImage2DEXT;
#define glMultiTexSubImage2DEXT glad_debug_glMultiTexSubImage2DEXT
typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_glCopyMultiTexImage1DEXT;
GLAPI PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_debug_glCopyMultiTexImage1DEXT;
#define glCopyMultiTexImage1DEXT glad_debug_glCopyMultiTexImage1DEXT
typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_glCopyMultiTexImage2DEXT;
GLAPI PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_debug_glCopyMultiTexImage2DEXT;
#define glCopyMultiTexImage2DEXT glad_debug_glCopyMultiTexImage2DEXT
typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_glCopyMultiTexSubImage1DEXT;
GLAPI PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCopyMultiTexSubImage1DEXT;
#define glCopyMultiTexSubImage1DEXT glad_debug_glCopyMultiTexSubImage1DEXT
typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_glCopyMultiTexSubImage2DEXT;
GLAPI PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCopyMultiTexSubImage2DEXT;
#define glCopyMultiTexSubImage2DEXT glad_debug_glCopyMultiTexSubImage2DEXT
typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
GLAPI PFNGLGETMULTITEXIMAGEEXTPROC glad_glGetMultiTexImageEXT;
GLAPI PFNGLGETMULTITEXIMAGEEXTPROC glad_debug_glGetMultiTexImageEXT;
#define glGetMultiTexImageEXT glad_debug_glGetMultiTexImageEXT
typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETMULTITEXPARAMETERFVEXTPROC glad_glGetMultiTexParameterfvEXT;
GLAPI PFNGLGETMULTITEXPARAMETERFVEXTPROC glad_debug_glGetMultiTexParameterfvEXT;
#define glGetMultiTexParameterfvEXT glad_debug_glGetMultiTexParameterfvEXT
typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETMULTITEXPARAMETERIVEXTPROC glad_glGetMultiTexParameterivEXT;
GLAPI PFNGLGETMULTITEXPARAMETERIVEXTPROC glad_debug_glGetMultiTexParameterivEXT;
#define glGetMultiTexParameterivEXT glad_debug_glGetMultiTexParameterivEXT
typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params);
GLAPI PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glad_glGetMultiTexLevelParameterfvEXT;
GLAPI PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glad_debug_glGetMultiTexLevelParameterfvEXT;
#define glGetMultiTexLevelParameterfvEXT glad_debug_glGetMultiTexLevelParameterfvEXT
typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params);
GLAPI PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glad_glGetMultiTexLevelParameterivEXT;
GLAPI PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glad_debug_glGetMultiTexLevelParameterivEXT;
#define glGetMultiTexLevelParameterivEXT glad_debug_glGetMultiTexLevelParameterivEXT
typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLMULTITEXIMAGE3DEXTPROC glad_glMultiTexImage3DEXT;
GLAPI PFNGLMULTITEXIMAGE3DEXTPROC glad_debug_glMultiTexImage3DEXT;
#define glMultiTexImage3DEXT glad_debug_glMultiTexImage3DEXT
typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLMULTITEXSUBIMAGE3DEXTPROC glad_glMultiTexSubImage3DEXT;
GLAPI PFNGLMULTITEXSUBIMAGE3DEXTPROC glad_debug_glMultiTexSubImage3DEXT;
#define glMultiTexSubImage3DEXT glad_debug_glMultiTexSubImage3DEXT
typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_glCopyMultiTexSubImage3DEXT;
GLAPI PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCopyMultiTexSubImage3DEXT;
#define glCopyMultiTexSubImage3DEXT glad_debug_glCopyMultiTexSubImage3DEXT
typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
GLAPI PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glad_glEnableClientStateIndexedEXT;
GLAPI PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glad_debug_glEnableClientStateIndexedEXT;
#define glEnableClientStateIndexedEXT glad_debug_glEnableClientStateIndexedEXT
typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
GLAPI PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glad_glDisableClientStateIndexedEXT;
GLAPI PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glad_debug_glDisableClientStateIndexedEXT;
#define glDisableClientStateIndexedEXT glad_debug_glDisableClientStateIndexedEXT
typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC)(GLenum target, GLuint index, GLfloat* data);
GLAPI PFNGLGETFLOATINDEXEDVEXTPROC glad_glGetFloatIndexedvEXT;
GLAPI PFNGLGETFLOATINDEXEDVEXTPROC glad_debug_glGetFloatIndexedvEXT;
#define glGetFloatIndexedvEXT glad_debug_glGetFloatIndexedvEXT
typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC)(GLenum target, GLuint index, GLdouble* data);
GLAPI PFNGLGETDOUBLEINDEXEDVEXTPROC glad_glGetDoubleIndexedvEXT;
GLAPI PFNGLGETDOUBLEINDEXEDVEXTPROC glad_debug_glGetDoubleIndexedvEXT;
#define glGetDoubleIndexedvEXT glad_debug_glGetDoubleIndexedvEXT
typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC)(GLenum target, GLuint index, void** data);
GLAPI PFNGLGETPOINTERINDEXEDVEXTPROC glad_glGetPointerIndexedvEXT;
GLAPI PFNGLGETPOINTERINDEXEDVEXTPROC glad_debug_glGetPointerIndexedvEXT;
#define glGetPointerIndexedvEXT glad_debug_glGetPointerIndexedvEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_glCompressedTextureImage3DEXT;
GLAPI PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_debug_glCompressedTextureImage3DEXT;
#define glCompressedTextureImage3DEXT glad_debug_glCompressedTextureImage3DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_glCompressedTextureImage2DEXT;
GLAPI PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_debug_glCompressedTextureImage2DEXT;
#define glCompressedTextureImage2DEXT glad_debug_glCompressedTextureImage2DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_glCompressedTextureImage1DEXT;
GLAPI PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_debug_glCompressedTextureImage1DEXT;
#define glCompressedTextureImage1DEXT glad_debug_glCompressedTextureImage1DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_glCompressedTextureSubImage3DEXT;
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_debug_glCompressedTextureSubImage3DEXT;
#define glCompressedTextureSubImage3DEXT glad_debug_glCompressedTextureSubImage3DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_glCompressedTextureSubImage2DEXT;
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_debug_glCompressedTextureSubImage2DEXT;
#define glCompressedTextureSubImage2DEXT glad_debug_glCompressedTextureSubImage2DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_glCompressedTextureSubImage1DEXT;
GLAPI PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_debug_glCompressedTextureSubImage1DEXT;
#define glCompressedTextureSubImage1DEXT glad_debug_glCompressedTextureSubImage1DEXT
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint lod, void* img);
GLAPI PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glad_glGetCompressedTextureImageEXT;
GLAPI PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glad_debug_glGetCompressedTextureImageEXT;
#define glGetCompressedTextureImageEXT glad_debug_glGetCompressedTextureImageEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_glCompressedMultiTexImage3DEXT;
GLAPI PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_debug_glCompressedMultiTexImage3DEXT;
#define glCompressedMultiTexImage3DEXT glad_debug_glCompressedMultiTexImage3DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_glCompressedMultiTexImage2DEXT;
GLAPI PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_debug_glCompressedMultiTexImage2DEXT;
#define glCompressedMultiTexImage2DEXT glad_debug_glCompressedMultiTexImage2DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_glCompressedMultiTexImage1DEXT;
GLAPI PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_debug_glCompressedMultiTexImage1DEXT;
#define glCompressedMultiTexImage1DEXT glad_debug_glCompressedMultiTexImage1DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_glCompressedMultiTexSubImage3DEXT;
GLAPI PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCompressedMultiTexSubImage3DEXT;
#define glCompressedMultiTexSubImage3DEXT glad_debug_glCompressedMultiTexSubImage3DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_glCompressedMultiTexSubImage2DEXT;
GLAPI PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCompressedMultiTexSubImage2DEXT;
#define glCompressedMultiTexSubImage2DEXT glad_debug_glCompressedMultiTexSubImage2DEXT
typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits);
GLAPI PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_glCompressedMultiTexSubImage1DEXT;
GLAPI PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCompressedMultiTexSubImage1DEXT;
#define glCompressedMultiTexSubImage1DEXT glad_debug_glCompressedMultiTexSubImage1DEXT
typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint lod, void* img);
GLAPI PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glad_glGetCompressedMultiTexImageEXT;
GLAPI PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glad_debug_glGetCompressedMultiTexImageEXT;
#define glGetCompressedMultiTexImageEXT glad_debug_glGetCompressedMultiTexImageEXT
typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat* m);
GLAPI PFNGLMATRIXLOADTRANSPOSEFEXTPROC glad_glMatrixLoadTransposefEXT;
GLAPI PFNGLMATRIXLOADTRANSPOSEFEXTPROC glad_debug_glMatrixLoadTransposefEXT;
#define glMatrixLoadTransposefEXT glad_debug_glMatrixLoadTransposefEXT
typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble* m);
GLAPI PFNGLMATRIXLOADTRANSPOSEDEXTPROC glad_glMatrixLoadTransposedEXT;
GLAPI PFNGLMATRIXLOADTRANSPOSEDEXTPROC glad_debug_glMatrixLoadTransposedEXT;
#define glMatrixLoadTransposedEXT glad_debug_glMatrixLoadTransposedEXT
typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat* m);
GLAPI PFNGLMATRIXMULTTRANSPOSEFEXTPROC glad_glMatrixMultTransposefEXT;
GLAPI PFNGLMATRIXMULTTRANSPOSEFEXTPROC glad_debug_glMatrixMultTransposefEXT;
#define glMatrixMultTransposefEXT glad_debug_glMatrixMultTransposefEXT
typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble* m);
GLAPI PFNGLMATRIXMULTTRANSPOSEDEXTPROC glad_glMatrixMultTransposedEXT;
GLAPI PFNGLMATRIXMULTTRANSPOSEDEXTPROC glad_debug_glMatrixMultTransposedEXT;
#define glMatrixMultTransposedEXT glad_debug_glMatrixMultTransposedEXT
typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage);
GLAPI PFNGLNAMEDBUFFERDATAEXTPROC glad_glNamedBufferDataEXT;
GLAPI PFNGLNAMEDBUFFERDATAEXTPROC glad_debug_glNamedBufferDataEXT;
#define glNamedBufferDataEXT glad_debug_glNamedBufferDataEXT
typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data);
GLAPI PFNGLNAMEDBUFFERSUBDATAEXTPROC glad_glNamedBufferSubDataEXT;
GLAPI PFNGLNAMEDBUFFERSUBDATAEXTPROC glad_debug_glNamedBufferSubDataEXT;
#define glNamedBufferSubDataEXT glad_debug_glNamedBufferSubDataEXT
typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC)(GLuint buffer, GLenum access);
GLAPI PFNGLMAPNAMEDBUFFEREXTPROC glad_glMapNamedBufferEXT;
GLAPI PFNGLMAPNAMEDBUFFEREXTPROC glad_debug_glMapNamedBufferEXT;
#define glMapNamedBufferEXT glad_debug_glMapNamedBufferEXT
typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC)(GLuint buffer);
GLAPI PFNGLUNMAPNAMEDBUFFEREXTPROC glad_glUnmapNamedBufferEXT;
GLAPI PFNGLUNMAPNAMEDBUFFEREXTPROC glad_debug_glUnmapNamedBufferEXT;
#define glUnmapNamedBufferEXT glad_debug_glUnmapNamedBufferEXT
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)(GLuint buffer, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glad_glGetNamedBufferParameterivEXT;
GLAPI PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glad_debug_glGetNamedBufferParameterivEXT;
#define glGetNamedBufferParameterivEXT glad_debug_glGetNamedBufferParameterivEXT
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)(GLuint buffer, GLenum pname, void** params);
GLAPI PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glad_glGetNamedBufferPointervEXT;
GLAPI PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glad_debug_glGetNamedBufferPointervEXT;
#define glGetNamedBufferPointervEXT glad_debug_glGetNamedBufferPointervEXT
typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
GLAPI PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glad_glGetNamedBufferSubDataEXT;
GLAPI PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glad_debug_glGetNamedBufferSubDataEXT;
#define glGetNamedBufferSubDataEXT glad_debug_glGetNamedBufferSubDataEXT
typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
GLAPI PFNGLTEXTUREBUFFEREXTPROC glad_glTextureBufferEXT;
GLAPI PFNGLTEXTUREBUFFEREXTPROC glad_debug_glTextureBufferEXT;
#define glTextureBufferEXT glad_debug_glTextureBufferEXT
typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
GLAPI PFNGLMULTITEXBUFFEREXTPROC glad_glMultiTexBufferEXT;
GLAPI PFNGLMULTITEXBUFFEREXTPROC glad_debug_glMultiTexBufferEXT;
#define glMultiTexBufferEXT glad_debug_glMultiTexBufferEXT
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLTEXTUREPARAMETERIIVEXTPROC glad_glTextureParameterIivEXT;
GLAPI PFNGLTEXTUREPARAMETERIIVEXTPROC glad_debug_glTextureParameterIivEXT;
#define glTextureParameterIivEXT glad_debug_glTextureParameterIivEXT
typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLuint* params);
GLAPI PFNGLTEXTUREPARAMETERIUIVEXTPROC glad_glTextureParameterIuivEXT;
GLAPI PFNGLTEXTUREPARAMETERIUIVEXTPROC glad_debug_glTextureParameterIuivEXT;
#define glTextureParameterIuivEXT glad_debug_glTextureParameterIuivEXT
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETTEXTUREPARAMETERIIVEXTPROC glad_glGetTextureParameterIivEXT;
GLAPI PFNGLGETTEXTUREPARAMETERIIVEXTPROC glad_debug_glGetTextureParameterIivEXT;
#define glGetTextureParameterIivEXT glad_debug_glGetTextureParameterIivEXT
typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLuint* params);
GLAPI PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glad_glGetTextureParameterIuivEXT;
GLAPI PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glad_debug_glGetTextureParameterIuivEXT;
#define glGetTextureParameterIuivEXT glad_debug_glGetTextureParameterIuivEXT
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLMULTITEXPARAMETERIIVEXTPROC glad_glMultiTexParameterIivEXT;
GLAPI PFNGLMULTITEXPARAMETERIIVEXTPROC glad_debug_glMultiTexParameterIivEXT;
#define glMultiTexParameterIivEXT glad_debug_glMultiTexParameterIivEXT
typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLuint* params);
GLAPI PFNGLMULTITEXPARAMETERIUIVEXTPROC glad_glMultiTexParameterIuivEXT;
GLAPI PFNGLMULTITEXPARAMETERIUIVEXTPROC glad_debug_glMultiTexParameterIuivEXT;
#define glMultiTexParameterIuivEXT glad_debug_glMultiTexParameterIuivEXT
typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETMULTITEXPARAMETERIIVEXTPROC glad_glGetMultiTexParameterIivEXT;
GLAPI PFNGLGETMULTITEXPARAMETERIIVEXTPROC glad_debug_glGetMultiTexParameterIivEXT;
#define glGetMultiTexParameterIivEXT glad_debug_glGetMultiTexParameterIivEXT
typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLuint* params);
GLAPI PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glad_glGetMultiTexParameterIuivEXT;
GLAPI PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glad_debug_glGetMultiTexParameterIuivEXT;
#define glGetMultiTexParameterIuivEXT glad_debug_glGetMultiTexParameterIuivEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glad_glNamedProgramLocalParameters4fvEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glad_debug_glNamedProgramLocalParameters4fvEXT;
#define glNamedProgramLocalParameters4fvEXT glad_debug_glNamedProgramLocalParameters4fvEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glad_glNamedProgramLocalParameterI4iEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glad_debug_glNamedProgramLocalParameterI4iEXT;
#define glNamedProgramLocalParameterI4iEXT glad_debug_glNamedProgramLocalParameterI4iEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLint* params);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glad_glNamedProgramLocalParameterI4ivEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glad_debug_glNamedProgramLocalParameterI4ivEXT;
#define glNamedProgramLocalParameterI4ivEXT glad_debug_glNamedProgramLocalParameterI4ivEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glad_glNamedProgramLocalParametersI4ivEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glad_debug_glNamedProgramLocalParametersI4ivEXT;
#define glNamedProgramLocalParametersI4ivEXT glad_debug_glNamedProgramLocalParametersI4ivEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glad_glNamedProgramLocalParameterI4uiEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glad_debug_glNamedProgramLocalParameterI4uiEXT;
#define glNamedProgramLocalParameterI4uiEXT glad_debug_glNamedProgramLocalParameterI4uiEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLuint* params);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glad_glNamedProgramLocalParameterI4uivEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glad_debug_glNamedProgramLocalParameterI4uivEXT;
#define glNamedProgramLocalParameterI4uivEXT glad_debug_glNamedProgramLocalParameterI4uivEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glad_glNamedProgramLocalParametersI4uivEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glad_debug_glNamedProgramLocalParametersI4uivEXT;
#define glNamedProgramLocalParametersI4uivEXT glad_debug_glNamedProgramLocalParametersI4uivEXT
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLint* params);
GLAPI PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glad_glGetNamedProgramLocalParameterIivEXT;
GLAPI PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glad_debug_glGetNamedProgramLocalParameterIivEXT;
#define glGetNamedProgramLocalParameterIivEXT glad_debug_glGetNamedProgramLocalParameterIivEXT
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint* params);
GLAPI PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glad_glGetNamedProgramLocalParameterIuivEXT;
GLAPI PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glad_debug_glGetNamedProgramLocalParameterIuivEXT;
#define glGetNamedProgramLocalParameterIuivEXT glad_debug_glGetNamedProgramLocalParameterIuivEXT
typedef void (APIENTRYP PFNGLENABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
GLAPI PFNGLENABLECLIENTSTATEIEXTPROC glad_glEnableClientStateiEXT;
GLAPI PFNGLENABLECLIENTSTATEIEXTPROC glad_debug_glEnableClientStateiEXT;
#define glEnableClientStateiEXT glad_debug_glEnableClientStateiEXT
typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
GLAPI PFNGLDISABLECLIENTSTATEIEXTPROC glad_glDisableClientStateiEXT;
GLAPI PFNGLDISABLECLIENTSTATEIEXTPROC glad_debug_glDisableClientStateiEXT;
#define glDisableClientStateiEXT glad_debug_glDisableClientStateiEXT
typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC)(GLenum pname, GLuint index, GLfloat* params);
GLAPI PFNGLGETFLOATI_VEXTPROC glad_glGetFloati_vEXT;
GLAPI PFNGLGETFLOATI_VEXTPROC glad_debug_glGetFloati_vEXT;
#define glGetFloati_vEXT glad_debug_glGetFloati_vEXT
typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC)(GLenum pname, GLuint index, GLdouble* params);
GLAPI PFNGLGETDOUBLEI_VEXTPROC glad_glGetDoublei_vEXT;
GLAPI PFNGLGETDOUBLEI_VEXTPROC glad_debug_glGetDoublei_vEXT;
#define glGetDoublei_vEXT glad_debug_glGetDoublei_vEXT
typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC)(GLenum pname, GLuint index, void** params);
GLAPI PFNGLGETPOINTERI_VEXTPROC glad_glGetPointeri_vEXT;
GLAPI PFNGLGETPOINTERI_VEXTPROC glad_debug_glGetPointeri_vEXT;
#define glGetPointeri_vEXT glad_debug_glGetPointeri_vEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum format, GLsizei len, const void* string);
GLAPI PFNGLNAMEDPROGRAMSTRINGEXTPROC glad_glNamedProgramStringEXT;
GLAPI PFNGLNAMEDPROGRAMSTRINGEXTPROC glad_debug_glNamedProgramStringEXT;
#define glNamedProgramStringEXT glad_debug_glNamedProgramStringEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glad_glNamedProgramLocalParameter4dEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glad_debug_glNamedProgramLocalParameter4dEXT;
#define glNamedProgramLocalParameter4dEXT glad_debug_glNamedProgramLocalParameter4dEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLdouble* params);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glad_glNamedProgramLocalParameter4dvEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glad_debug_glNamedProgramLocalParameter4dvEXT;
#define glNamedProgramLocalParameter4dvEXT glad_debug_glNamedProgramLocalParameter4dvEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glad_glNamedProgramLocalParameter4fEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glad_debug_glNamedProgramLocalParameter4fEXT;
#define glNamedProgramLocalParameter4fEXT glad_debug_glNamedProgramLocalParameter4fEXT
typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLfloat* params);
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glad_glNamedProgramLocalParameter4fvEXT;
GLAPI PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glad_debug_glNamedProgramLocalParameter4fvEXT;
#define glNamedProgramLocalParameter4fvEXT glad_debug_glNamedProgramLocalParameter4fvEXT
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble* params);
GLAPI PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glad_glGetNamedProgramLocalParameterdvEXT;
GLAPI PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glad_debug_glGetNamedProgramLocalParameterdvEXT;
#define glGetNamedProgramLocalParameterdvEXT glad_debug_glGetNamedProgramLocalParameterdvEXT
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat* params);
GLAPI PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glad_glGetNamedProgramLocalParameterfvEXT;
GLAPI PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glad_debug_glGetNamedProgramLocalParameterfvEXT;
#define glGetNamedProgramLocalParameterfvEXT glad_debug_glGetNamedProgramLocalParameterfvEXT
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC)(GLuint program, GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDPROGRAMIVEXTPROC glad_glGetNamedProgramivEXT;
GLAPI PFNGLGETNAMEDPROGRAMIVEXTPROC glad_debug_glGetNamedProgramivEXT;
#define glGetNamedProgramivEXT glad_debug_glGetNamedProgramivEXT
typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum pname, void* string);
GLAPI PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glad_glGetNamedProgramStringEXT;
GLAPI PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glad_debug_glGetNamedProgramStringEXT;
#define glGetNamedProgramStringEXT glad_debug_glGetNamedProgramStringEXT
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glad_glNamedRenderbufferStorageEXT;
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glad_debug_glNamedRenderbufferStorageEXT;
#define glNamedRenderbufferStorageEXT glad_debug_glNamedRenderbufferStorageEXT
typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)(GLuint renderbuffer, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glad_glGetNamedRenderbufferParameterivEXT;
GLAPI PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glad_debug_glGetNamedRenderbufferParameterivEXT;
#define glGetNamedRenderbufferParameterivEXT glad_debug_glGetNamedRenderbufferParameterivEXT
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_glNamedRenderbufferStorageMultisampleEXT;
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_debug_glNamedRenderbufferStorageMultisampleEXT;
#define glNamedRenderbufferStorageMultisampleEXT glad_debug_glNamedRenderbufferStorageMultisampleEXT
typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glad_glNamedRenderbufferStorageMultisampleCoverageEXT;
GLAPI PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glad_debug_glNamedRenderbufferStorageMultisampleCoverageEXT;
#define glNamedRenderbufferStorageMultisampleCoverageEXT glad_debug_glNamedRenderbufferStorageMultisampleCoverageEXT
typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)(GLuint framebuffer, GLenum target);
GLAPI PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_glCheckNamedFramebufferStatusEXT;
GLAPI PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckNamedFramebufferStatusEXT;
#define glCheckNamedFramebufferStatusEXT glad_debug_glCheckNamedFramebufferStatusEXT
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glad_glNamedFramebufferTexture1DEXT;
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glad_debug_glNamedFramebufferTexture1DEXT;
#define glNamedFramebufferTexture1DEXT glad_debug_glNamedFramebufferTexture1DEXT
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glad_glNamedFramebufferTexture2DEXT;
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glad_debug_glNamedFramebufferTexture2DEXT;
#define glNamedFramebufferTexture2DEXT glad_debug_glNamedFramebufferTexture2DEXT
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glad_glNamedFramebufferTexture3DEXT;
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glad_debug_glNamedFramebufferTexture3DEXT;
#define glNamedFramebufferTexture3DEXT glad_debug_glNamedFramebufferTexture3DEXT
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glad_glNamedFramebufferRenderbufferEXT;
GLAPI PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glad_debug_glNamedFramebufferRenderbufferEXT;
#define glNamedFramebufferRenderbufferEXT glad_debug_glNamedFramebufferRenderbufferEXT
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_glGetNamedFramebufferAttachmentParameterivEXT;
GLAPI PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_debug_glGetNamedFramebufferAttachmentParameterivEXT;
#define glGetNamedFramebufferAttachmentParameterivEXT glad_debug_glGetNamedFramebufferAttachmentParameterivEXT
typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC)(GLuint texture, GLenum target);
GLAPI PFNGLGENERATETEXTUREMIPMAPEXTPROC glad_glGenerateTextureMipmapEXT;
GLAPI PFNGLGENERATETEXTUREMIPMAPEXTPROC glad_debug_glGenerateTextureMipmapEXT;
#define glGenerateTextureMipmapEXT glad_debug_glGenerateTextureMipmapEXT
typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC)(GLenum texunit, GLenum target);
GLAPI PFNGLGENERATEMULTITEXMIPMAPEXTPROC glad_glGenerateMultiTexMipmapEXT;
GLAPI PFNGLGENERATEMULTITEXMIPMAPEXTPROC glad_debug_glGenerateMultiTexMipmapEXT;
#define glGenerateMultiTexMipmapEXT glad_debug_glGenerateMultiTexMipmapEXT
typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
GLAPI PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glad_glFramebufferDrawBufferEXT;
GLAPI PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glad_debug_glFramebufferDrawBufferEXT;
#define glFramebufferDrawBufferEXT glad_debug_glFramebufferDrawBufferEXT
typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)(GLuint framebuffer, GLsizei n, const GLenum* bufs);
GLAPI PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glad_glFramebufferDrawBuffersEXT;
GLAPI PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glad_debug_glFramebufferDrawBuffersEXT;
#define glFramebufferDrawBuffersEXT glad_debug_glFramebufferDrawBuffersEXT
typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
GLAPI PFNGLFRAMEBUFFERREADBUFFEREXTPROC glad_glFramebufferReadBufferEXT;
GLAPI PFNGLFRAMEBUFFERREADBUFFEREXTPROC glad_debug_glFramebufferReadBufferEXT;
#define glFramebufferReadBufferEXT glad_debug_glFramebufferReadBufferEXT
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint* params);
GLAPI PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glad_glGetFramebufferParameterivEXT;
GLAPI PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glad_debug_glGetFramebufferParameterivEXT;
#define glGetFramebufferParameterivEXT glad_debug_glGetFramebufferParameterivEXT
typedef void (APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLAPI PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glad_glNamedCopyBufferSubDataEXT;
GLAPI PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glad_debug_glNamedCopyBufferSubDataEXT;
#define glNamedCopyBufferSubDataEXT glad_debug_glNamedCopyBufferSubDataEXT
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glad_glNamedFramebufferTextureEXT;
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glad_debug_glNamedFramebufferTextureEXT;
#define glNamedFramebufferTextureEXT glad_debug_glNamedFramebufferTextureEXT
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glad_glNamedFramebufferTextureLayerEXT;
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glad_debug_glNamedFramebufferTextureLayerEXT;
#define glNamedFramebufferTextureLayerEXT glad_debug_glNamedFramebufferTextureLayerEXT
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glad_glNamedFramebufferTextureFaceEXT;
GLAPI PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glad_debug_glNamedFramebufferTextureFaceEXT;
#define glNamedFramebufferTextureFaceEXT glad_debug_glNamedFramebufferTextureFaceEXT
typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC)(GLuint texture, GLenum target, GLuint renderbuffer);
GLAPI PFNGLTEXTURERENDERBUFFEREXTPROC glad_glTextureRenderbufferEXT;
GLAPI PFNGLTEXTURERENDERBUFFEREXTPROC glad_debug_glTextureRenderbufferEXT;
#define glTextureRenderbufferEXT glad_debug_glTextureRenderbufferEXT
typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC)(GLenum texunit, GLenum target, GLuint renderbuffer);
GLAPI PFNGLMULTITEXRENDERBUFFEREXTPROC glad_glMultiTexRenderbufferEXT;
GLAPI PFNGLMULTITEXRENDERBUFFEREXTPROC glad_debug_glMultiTexRenderbufferEXT;
#define glMultiTexRenderbufferEXT glad_debug_glMultiTexRenderbufferEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glad_glVertexArrayVertexOffsetEXT;
GLAPI PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glad_debug_glVertexArrayVertexOffsetEXT;
#define glVertexArrayVertexOffsetEXT glad_debug_glVertexArrayVertexOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glad_glVertexArrayColorOffsetEXT;
GLAPI PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glad_debug_glVertexArrayColorOffsetEXT;
#define glVertexArrayColorOffsetEXT glad_debug_glVertexArrayColorOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glad_glVertexArrayEdgeFlagOffsetEXT;
GLAPI PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glad_debug_glVertexArrayEdgeFlagOffsetEXT;
#define glVertexArrayEdgeFlagOffsetEXT glad_debug_glVertexArrayEdgeFlagOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glad_glVertexArrayIndexOffsetEXT;
GLAPI PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glad_debug_glVertexArrayIndexOffsetEXT;
#define glVertexArrayIndexOffsetEXT glad_debug_glVertexArrayIndexOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glad_glVertexArrayNormalOffsetEXT;
GLAPI PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glad_debug_glVertexArrayNormalOffsetEXT;
#define glVertexArrayNormalOffsetEXT glad_debug_glVertexArrayNormalOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glad_glVertexArrayTexCoordOffsetEXT;
GLAPI PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glad_debug_glVertexArrayTexCoordOffsetEXT;
#define glVertexArrayTexCoordOffsetEXT glad_debug_glVertexArrayTexCoordOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glad_glVertexArrayMultiTexCoordOffsetEXT;
GLAPI PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glad_debug_glVertexArrayMultiTexCoordOffsetEXT;
#define glVertexArrayMultiTexCoordOffsetEXT glad_debug_glVertexArrayMultiTexCoordOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glad_glVertexArrayFogCoordOffsetEXT;
GLAPI PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glad_debug_glVertexArrayFogCoordOffsetEXT;
#define glVertexArrayFogCoordOffsetEXT glad_debug_glVertexArrayFogCoordOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glad_glVertexArraySecondaryColorOffsetEXT;
GLAPI PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glad_debug_glVertexArraySecondaryColorOffsetEXT;
#define glVertexArraySecondaryColorOffsetEXT glad_debug_glVertexArraySecondaryColorOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glad_glVertexArrayVertexAttribOffsetEXT;
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glad_debug_glVertexArrayVertexAttribOffsetEXT;
#define glVertexArrayVertexAttribOffsetEXT glad_debug_glVertexArrayVertexAttribOffsetEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glad_glVertexArrayVertexAttribIOffsetEXT;
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glad_debug_glVertexArrayVertexAttribIOffsetEXT;
#define glVertexArrayVertexAttribIOffsetEXT glad_debug_glVertexArrayVertexAttribIOffsetEXT
typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
GLAPI PFNGLENABLEVERTEXARRAYEXTPROC glad_glEnableVertexArrayEXT;
GLAPI PFNGLENABLEVERTEXARRAYEXTPROC glad_debug_glEnableVertexArrayEXT;
#define glEnableVertexArrayEXT glad_debug_glEnableVertexArrayEXT
typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
GLAPI PFNGLDISABLEVERTEXARRAYEXTPROC glad_glDisableVertexArrayEXT;
GLAPI PFNGLDISABLEVERTEXARRAYEXTPROC glad_debug_glDisableVertexArrayEXT;
#define glDisableVertexArrayEXT glad_debug_glDisableVertexArrayEXT
typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glad_glEnableVertexArrayAttribEXT;
GLAPI PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glad_debug_glEnableVertexArrayAttribEXT;
#define glEnableVertexArrayAttribEXT glad_debug_glEnableVertexArrayAttribEXT
typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
GLAPI PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glad_glDisableVertexArrayAttribEXT;
GLAPI PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glad_debug_glDisableVertexArrayAttribEXT;
#define glDisableVertexArrayAttribEXT glad_debug_glDisableVertexArrayAttribEXT
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERVEXTPROC)(GLuint vaobj, GLenum pname, GLint* param);
GLAPI PFNGLGETVERTEXARRAYINTEGERVEXTPROC glad_glGetVertexArrayIntegervEXT;
GLAPI PFNGLGETVERTEXARRAYINTEGERVEXTPROC glad_debug_glGetVertexArrayIntegervEXT;
#define glGetVertexArrayIntegervEXT glad_debug_glGetVertexArrayIntegervEXT
typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERVEXTPROC)(GLuint vaobj, GLenum pname, void** param);
GLAPI PFNGLGETVERTEXARRAYPOINTERVEXTPROC glad_glGetVertexArrayPointervEXT;
GLAPI PFNGLGETVERTEXARRAYPOINTERVEXTPROC glad_debug_glGetVertexArrayPointervEXT;
#define glGetVertexArrayPointervEXT glad_debug_glGetVertexArrayPointervEXT
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
GLAPI PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glad_glGetVertexArrayIntegeri_vEXT;
GLAPI PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glad_debug_glGetVertexArrayIntegeri_vEXT;
#define glGetVertexArrayIntegeri_vEXT glad_debug_glGetVertexArrayIntegeri_vEXT
typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, void** param);
GLAPI PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glad_glGetVertexArrayPointeri_vEXT;
GLAPI PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glad_debug_glGetVertexArrayPointeri_vEXT;
#define glGetVertexArrayPointeri_vEXT glad_debug_glGetVertexArrayPointeri_vEXT
typedef void* (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLAPI PFNGLMAPNAMEDBUFFERRANGEEXTPROC glad_glMapNamedBufferRangeEXT;
GLAPI PFNGLMAPNAMEDBUFFERRANGEEXTPROC glad_debug_glMapNamedBufferRangeEXT;
#define glMapNamedBufferRangeEXT glad_debug_glMapNamedBufferRangeEXT
typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLAPI PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glad_glFlushMappedNamedBufferRangeEXT;
GLAPI PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glad_debug_glFlushMappedNamedBufferRangeEXT;
#define glFlushMappedNamedBufferRangeEXT glad_debug_glFlushMappedNamedBufferRangeEXT
typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEEXTPROC)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags);
GLAPI PFNGLNAMEDBUFFERSTORAGEEXTPROC glad_glNamedBufferStorageEXT;
GLAPI PFNGLNAMEDBUFFERSTORAGEEXTPROC glad_debug_glNamedBufferStorageEXT;
#define glNamedBufferStorageEXT glad_debug_glNamedBufferStorageEXT
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_glClearNamedBufferDataEXT;
GLAPI PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_debug_glClearNamedBufferDataEXT;
#define glClearNamedBufferDataEXT glad_debug_glClearNamedBufferDataEXT
typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_glClearNamedBufferSubDataEXT;
GLAPI PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_debug_glClearNamedBufferSubDataEXT;
#define glClearNamedBufferSubDataEXT glad_debug_glClearNamedBufferSubDataEXT
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)(GLuint framebuffer, GLenum pname, GLint param);
GLAPI PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glad_glNamedFramebufferParameteriEXT;
GLAPI PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glad_debug_glNamedFramebufferParameteriEXT;
#define glNamedFramebufferParameteriEXT glad_debug_glNamedFramebufferParameteriEXT
typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glad_glGetNamedFramebufferParameterivEXT;
GLAPI PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glad_debug_glGetNamedFramebufferParameterivEXT;
#define glGetNamedFramebufferParameterivEXT glad_debug_glGetNamedFramebufferParameterivEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC)(GLuint program, GLint location, GLdouble x);
GLAPI PFNGLPROGRAMUNIFORM1DEXTPROC glad_glProgramUniform1dEXT;
GLAPI PFNGLPROGRAMUNIFORM1DEXTPROC glad_debug_glProgramUniform1dEXT;
#define glProgramUniform1dEXT glad_debug_glProgramUniform1dEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y);
GLAPI PFNGLPROGRAMUNIFORM2DEXTPROC glad_glProgramUniform2dEXT;
GLAPI PFNGLPROGRAMUNIFORM2DEXTPROC glad_debug_glProgramUniform2dEXT;
#define glProgramUniform2dEXT glad_debug_glProgramUniform2dEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLPROGRAMUNIFORM3DEXTPROC glad_glProgramUniform3dEXT;
GLAPI PFNGLPROGRAMUNIFORM3DEXTPROC glad_debug_glProgramUniform3dEXT;
#define glProgramUniform3dEXT glad_debug_glProgramUniform3dEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLPROGRAMUNIFORM4DEXTPROC glad_glProgramUniform4dEXT;
GLAPI PFNGLPROGRAMUNIFORM4DEXTPROC glad_debug_glProgramUniform4dEXT;
#define glProgramUniform4dEXT glad_debug_glProgramUniform4dEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM1DVEXTPROC glad_glProgramUniform1dvEXT;
GLAPI PFNGLPROGRAMUNIFORM1DVEXTPROC glad_debug_glProgramUniform1dvEXT;
#define glProgramUniform1dvEXT glad_debug_glProgramUniform1dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM2DVEXTPROC glad_glProgramUniform2dvEXT;
GLAPI PFNGLPROGRAMUNIFORM2DVEXTPROC glad_debug_glProgramUniform2dvEXT;
#define glProgramUniform2dvEXT glad_debug_glProgramUniform2dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM3DVEXTPROC glad_glProgramUniform3dvEXT;
GLAPI PFNGLPROGRAMUNIFORM3DVEXTPROC glad_debug_glProgramUniform3dvEXT;
#define glProgramUniform3dvEXT glad_debug_glProgramUniform3dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM4DVEXTPROC glad_glProgramUniform4dvEXT;
GLAPI PFNGLPROGRAMUNIFORM4DVEXTPROC glad_debug_glProgramUniform4dvEXT;
#define glProgramUniform4dvEXT glad_debug_glProgramUniform4dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glad_glProgramUniformMatrix2dvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glad_debug_glProgramUniformMatrix2dvEXT;
#define glProgramUniformMatrix2dvEXT glad_debug_glProgramUniformMatrix2dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glad_glProgramUniformMatrix3dvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glad_debug_glProgramUniformMatrix3dvEXT;
#define glProgramUniformMatrix3dvEXT glad_debug_glProgramUniformMatrix3dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glad_glProgramUniformMatrix4dvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glad_debug_glProgramUniformMatrix4dvEXT;
#define glProgramUniformMatrix4dvEXT glad_debug_glProgramUniformMatrix4dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glad_glProgramUniformMatrix2x3dvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glad_debug_glProgramUniformMatrix2x3dvEXT;
#define glProgramUniformMatrix2x3dvEXT glad_debug_glProgramUniformMatrix2x3dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glad_glProgramUniformMatrix2x4dvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glad_debug_glProgramUniformMatrix2x4dvEXT;
#define glProgramUniformMatrix2x4dvEXT glad_debug_glProgramUniformMatrix2x4dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glad_glProgramUniformMatrix3x2dvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glad_debug_glProgramUniformMatrix3x2dvEXT;
#define glProgramUniformMatrix3x2dvEXT glad_debug_glProgramUniformMatrix3x2dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glad_glProgramUniformMatrix3x4dvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glad_debug_glProgramUniformMatrix3x4dvEXT;
#define glProgramUniformMatrix3x4dvEXT glad_debug_glProgramUniformMatrix3x4dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glad_glProgramUniformMatrix4x2dvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glad_debug_glProgramUniformMatrix4x2dvEXT;
#define glProgramUniformMatrix4x2dvEXT glad_debug_glProgramUniformMatrix4x2dvEXT
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glad_glProgramUniformMatrix4x3dvEXT;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glad_debug_glProgramUniformMatrix4x3dvEXT;
#define glProgramUniformMatrix4x3dvEXT glad_debug_glProgramUniformMatrix4x3dvEXT
typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEEXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLTEXTUREBUFFERRANGEEXTPROC glad_glTextureBufferRangeEXT;
GLAPI PFNGLTEXTUREBUFFERRANGEEXTPROC glad_debug_glTextureBufferRangeEXT;
#define glTextureBufferRangeEXT glad_debug_glTextureBufferRangeEXT
typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GLAPI PFNGLTEXTURESTORAGE1DEXTPROC glad_glTextureStorage1DEXT;
GLAPI PFNGLTEXTURESTORAGE1DEXTPROC glad_debug_glTextureStorage1DEXT;
#define glTextureStorage1DEXT glad_debug_glTextureStorage1DEXT
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLTEXTURESTORAGE2DEXTPROC glad_glTextureStorage2DEXT;
GLAPI PFNGLTEXTURESTORAGE2DEXTPROC glad_debug_glTextureStorage2DEXT;
#define glTextureStorage2DEXT glad_debug_glTextureStorage2DEXT
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLTEXTURESTORAGE3DEXTPROC glad_glTextureStorage3DEXT;
GLAPI PFNGLTEXTURESTORAGE3DEXTPROC glad_debug_glTextureStorage3DEXT;
#define glTextureStorage3DEXT glad_debug_glTextureStorage3DEXT
typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glad_glTextureStorage2DMultisampleEXT;
GLAPI PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glad_debug_glTextureStorage2DMultisampleEXT;
#define glTextureStorage2DMultisampleEXT glad_debug_glTextureStorage2DMultisampleEXT
typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glad_glTextureStorage3DMultisampleEXT;
GLAPI PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glad_debug_glTextureStorage3DMultisampleEXT;
#define glTextureStorage3DMultisampleEXT glad_debug_glTextureStorage3DMultisampleEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLAPI PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glad_glVertexArrayBindVertexBufferEXT;
GLAPI PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glad_debug_glVertexArrayBindVertexBufferEXT;
#define glVertexArrayBindVertexBufferEXT glad_debug_glVertexArrayBindVertexBufferEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glad_glVertexArrayVertexAttribFormatEXT;
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glad_debug_glVertexArrayVertexAttribFormatEXT;
#define glVertexArrayVertexAttribFormatEXT glad_debug_glVertexArrayVertexAttribFormatEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glad_glVertexArrayVertexAttribIFormatEXT;
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glad_debug_glVertexArrayVertexAttribIFormatEXT;
#define glVertexArrayVertexAttribIFormatEXT glad_debug_glVertexArrayVertexAttribIFormatEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glad_glVertexArrayVertexAttribLFormatEXT;
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glad_debug_glVertexArrayVertexAttribLFormatEXT;
#define glVertexArrayVertexAttribLFormatEXT glad_debug_glVertexArrayVertexAttribLFormatEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glad_glVertexArrayVertexAttribBindingEXT;
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glad_debug_glVertexArrayVertexAttribBindingEXT;
#define glVertexArrayVertexAttribBindingEXT glad_debug_glVertexArrayVertexAttribBindingEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
GLAPI PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glad_glVertexArrayVertexBindingDivisorEXT;
GLAPI PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glad_debug_glVertexArrayVertexBindingDivisorEXT;
#define glVertexArrayVertexBindingDivisorEXT glad_debug_glVertexArrayVertexBindingDivisorEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glad_glVertexArrayVertexAttribLOffsetEXT;
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glad_debug_glVertexArrayVertexAttribLOffsetEXT;
#define glVertexArrayVertexAttribLOffsetEXT glad_debug_glVertexArrayVertexAttribLOffsetEXT
typedef void (APIENTRYP PFNGLTEXTUREPAGECOMMITMENTEXTPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
GLAPI PFNGLTEXTUREPAGECOMMITMENTEXTPROC glad_glTexturePageCommitmentEXT;
GLAPI PFNGLTEXTUREPAGECOMMITMENTEXTPROC glad_debug_glTexturePageCommitmentEXT;
#define glTexturePageCommitmentEXT glad_debug_glTexturePageCommitmentEXT
typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)(GLuint vaobj, GLuint index, GLuint divisor);
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glad_glVertexArrayVertexAttribDivisorEXT;
GLAPI PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glad_debug_glVertexArrayVertexAttribDivisorEXT;
#define glVertexArrayVertexAttribDivisorEXT glad_debug_glVertexArrayVertexAttribDivisorEXT
#endif
#ifndef GL_ARB_cull_distance
#define GL_ARB_cull_distance 1
GLAPI int GLAD_GL_ARB_cull_distance;
#endif
#ifndef GL_AMD_sample_positions
#define GL_AMD_sample_positions 1
GLAPI int GLAD_GL_AMD_sample_positions;
typedef void (APIENTRYP PFNGLSETMULTISAMPLEFVAMDPROC)(GLenum pname, GLuint index, const GLfloat* val);
GLAPI PFNGLSETMULTISAMPLEFVAMDPROC glad_glSetMultisamplefvAMD;
GLAPI PFNGLSETMULTISAMPLEFVAMDPROC glad_debug_glSetMultisamplefvAMD;
#define glSetMultisamplefvAMD glad_debug_glSetMultisamplefvAMD
#endif
#ifndef GL_NV_vertex_program
#define GL_NV_vertex_program 1
GLAPI int GLAD_GL_NV_vertex_program;
typedef GLboolean (APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC)(GLsizei n, const GLuint* programs, GLboolean* residences);
GLAPI PFNGLAREPROGRAMSRESIDENTNVPROC glad_glAreProgramsResidentNV;
GLAPI PFNGLAREPROGRAMSRESIDENTNVPROC glad_debug_glAreProgramsResidentNV;
#define glAreProgramsResidentNV glad_debug_glAreProgramsResidentNV
typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC)(GLenum target, GLuint id);
GLAPI PFNGLBINDPROGRAMNVPROC glad_glBindProgramNV;
GLAPI PFNGLBINDPROGRAMNVPROC glad_debug_glBindProgramNV;
#define glBindProgramNV glad_debug_glBindProgramNV
typedef void (APIENTRYP PFNGLDELETEPROGRAMSNVPROC)(GLsizei n, const GLuint* programs);
GLAPI PFNGLDELETEPROGRAMSNVPROC glad_glDeleteProgramsNV;
GLAPI PFNGLDELETEPROGRAMSNVPROC glad_debug_glDeleteProgramsNV;
#define glDeleteProgramsNV glad_debug_glDeleteProgramsNV
typedef void (APIENTRYP PFNGLEXECUTEPROGRAMNVPROC)(GLenum target, GLuint id, const GLfloat* params);
GLAPI PFNGLEXECUTEPROGRAMNVPROC glad_glExecuteProgramNV;
GLAPI PFNGLEXECUTEPROGRAMNVPROC glad_debug_glExecuteProgramNV;
#define glExecuteProgramNV glad_debug_glExecuteProgramNV
typedef void (APIENTRYP PFNGLGENPROGRAMSNVPROC)(GLsizei n, GLuint* programs);
GLAPI PFNGLGENPROGRAMSNVPROC glad_glGenProgramsNV;
GLAPI PFNGLGENPROGRAMSNVPROC glad_debug_glGenProgramsNV;
#define glGenProgramsNV glad_debug_glGenProgramsNV
typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC)(GLenum target, GLuint index, GLenum pname, GLdouble* params);
GLAPI PFNGLGETPROGRAMPARAMETERDVNVPROC glad_glGetProgramParameterdvNV;
GLAPI PFNGLGETPROGRAMPARAMETERDVNVPROC glad_debug_glGetProgramParameterdvNV;
#define glGetProgramParameterdvNV glad_debug_glGetProgramParameterdvNV
typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat* params);
GLAPI PFNGLGETPROGRAMPARAMETERFVNVPROC glad_glGetProgramParameterfvNV;
GLAPI PFNGLGETPROGRAMPARAMETERFVNVPROC glad_debug_glGetProgramParameterfvNV;
#define glGetProgramParameterfvNV glad_debug_glGetProgramParameterfvNV
typedef void (APIENTRYP PFNGLGETPROGRAMIVNVPROC)(GLuint id, GLenum pname, GLint* params);
GLAPI PFNGLGETPROGRAMIVNVPROC glad_glGetProgramivNV;
GLAPI PFNGLGETPROGRAMIVNVPROC glad_debug_glGetProgramivNV;
#define glGetProgramivNV glad_debug_glGetProgramivNV
typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC)(GLuint id, GLenum pname, GLubyte* program);
GLAPI PFNGLGETPROGRAMSTRINGNVPROC glad_glGetProgramStringNV;
GLAPI PFNGLGETPROGRAMSTRINGNVPROC glad_debug_glGetProgramStringNV;
#define glGetProgramStringNV glad_debug_glGetProgramStringNV
typedef void (APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC)(GLenum target, GLuint address, GLenum pname, GLint* params);
GLAPI PFNGLGETTRACKMATRIXIVNVPROC glad_glGetTrackMatrixivNV;
GLAPI PFNGLGETTRACKMATRIXIVNVPROC glad_debug_glGetTrackMatrixivNV;
#define glGetTrackMatrixivNV glad_debug_glGetTrackMatrixivNV
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC)(GLuint index, GLenum pname, GLdouble* params);
GLAPI PFNGLGETVERTEXATTRIBDVNVPROC glad_glGetVertexAttribdvNV;
GLAPI PFNGLGETVERTEXATTRIBDVNVPROC glad_debug_glGetVertexAttribdvNV;
#define glGetVertexAttribdvNV glad_debug_glGetVertexAttribdvNV
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC)(GLuint index, GLenum pname, GLfloat* params);
GLAPI PFNGLGETVERTEXATTRIBFVNVPROC glad_glGetVertexAttribfvNV;
GLAPI PFNGLGETVERTEXATTRIBFVNVPROC glad_debug_glGetVertexAttribfvNV;
#define glGetVertexAttribfvNV glad_debug_glGetVertexAttribfvNV
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC)(GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETVERTEXATTRIBIVNVPROC glad_glGetVertexAttribivNV;
GLAPI PFNGLGETVERTEXATTRIBIVNVPROC glad_debug_glGetVertexAttribivNV;
#define glGetVertexAttribivNV glad_debug_glGetVertexAttribivNV
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC)(GLuint index, GLenum pname, void** pointer);
GLAPI PFNGLGETVERTEXATTRIBPOINTERVNVPROC glad_glGetVertexAttribPointervNV;
GLAPI PFNGLGETVERTEXATTRIBPOINTERVNVPROC glad_debug_glGetVertexAttribPointervNV;
#define glGetVertexAttribPointervNV glad_debug_glGetVertexAttribPointervNV
typedef GLboolean (APIENTRYP PFNGLISPROGRAMNVPROC)(GLuint id);
GLAPI PFNGLISPROGRAMNVPROC glad_glIsProgramNV;
GLAPI PFNGLISPROGRAMNVPROC glad_debug_glIsProgramNV;
#define glIsProgramNV glad_debug_glIsProgramNV
typedef void (APIENTRYP PFNGLLOADPROGRAMNVPROC)(GLenum target, GLuint id, GLsizei len, const GLubyte* program);
GLAPI PFNGLLOADPROGRAMNVPROC glad_glLoadProgramNV;
GLAPI PFNGLLOADPROGRAMNVPROC glad_debug_glLoadProgramNV;
#define glLoadProgramNV glad_debug_glLoadProgramNV
typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLPROGRAMPARAMETER4DNVPROC glad_glProgramParameter4dNV;
GLAPI PFNGLPROGRAMPARAMETER4DNVPROC glad_debug_glProgramParameter4dNV;
#define glProgramParameter4dNV glad_debug_glProgramParameter4dNV
typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC)(GLenum target, GLuint index, const GLdouble* v);
GLAPI PFNGLPROGRAMPARAMETER4DVNVPROC glad_glProgramParameter4dvNV;
GLAPI PFNGLPROGRAMPARAMETER4DVNVPROC glad_debug_glProgramParameter4dvNV;
#define glProgramParameter4dvNV glad_debug_glProgramParameter4dvNV
typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLPROGRAMPARAMETER4FNVPROC glad_glProgramParameter4fNV;
GLAPI PFNGLPROGRAMPARAMETER4FNVPROC glad_debug_glProgramParameter4fNV;
#define glProgramParameter4fNV glad_debug_glProgramParameter4fNV
typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC)(GLenum target, GLuint index, const GLfloat* v);
GLAPI PFNGLPROGRAMPARAMETER4FVNVPROC glad_glProgramParameter4fvNV;
GLAPI PFNGLPROGRAMPARAMETER4FVNVPROC glad_debug_glProgramParameter4fvNV;
#define glProgramParameter4fvNV glad_debug_glProgramParameter4fvNV
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLdouble* v);
GLAPI PFNGLPROGRAMPARAMETERS4DVNVPROC glad_glProgramParameters4dvNV;
GLAPI PFNGLPROGRAMPARAMETERS4DVNVPROC glad_debug_glProgramParameters4dvNV;
#define glProgramParameters4dvNV glad_debug_glProgramParameters4dvNV
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat* v);
GLAPI PFNGLPROGRAMPARAMETERS4FVNVPROC glad_glProgramParameters4fvNV;
GLAPI PFNGLPROGRAMPARAMETERS4FVNVPROC glad_debug_glProgramParameters4fvNV;
#define glProgramParameters4fvNV glad_debug_glProgramParameters4fvNV
typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC)(GLsizei n, const GLuint* programs);
GLAPI PFNGLREQUESTRESIDENTPROGRAMSNVPROC glad_glRequestResidentProgramsNV;
GLAPI PFNGLREQUESTRESIDENTPROGRAMSNVPROC glad_debug_glRequestResidentProgramsNV;
#define glRequestResidentProgramsNV glad_debug_glRequestResidentProgramsNV
typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
GLAPI PFNGLTRACKMATRIXNVPROC glad_glTrackMatrixNV;
GLAPI PFNGLTRACKMATRIXNVPROC glad_debug_glTrackMatrixNV;
#define glTrackMatrixNV glad_debug_glTrackMatrixNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBPOINTERNVPROC glad_glVertexAttribPointerNV;
GLAPI PFNGLVERTEXATTRIBPOINTERNVPROC glad_debug_glVertexAttribPointerNV;
#define glVertexAttribPointerNV glad_debug_glVertexAttribPointerNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DNVPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIB1DNVPROC glad_glVertexAttrib1dNV;
GLAPI PFNGLVERTEXATTRIB1DNVPROC glad_debug_glVertexAttrib1dNV;
#define glVertexAttrib1dNV glad_debug_glVertexAttrib1dNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB1DVNVPROC glad_glVertexAttrib1dvNV;
GLAPI PFNGLVERTEXATTRIB1DVNVPROC glad_debug_glVertexAttrib1dvNV;
#define glVertexAttrib1dvNV glad_debug_glVertexAttrib1dvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FNVPROC)(GLuint index, GLfloat x);
GLAPI PFNGLVERTEXATTRIB1FNVPROC glad_glVertexAttrib1fNV;
GLAPI PFNGLVERTEXATTRIB1FNVPROC glad_debug_glVertexAttrib1fNV;
#define glVertexAttrib1fNV glad_debug_glVertexAttrib1fNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVNVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB1FVNVPROC glad_glVertexAttrib1fvNV;
GLAPI PFNGLVERTEXATTRIB1FVNVPROC glad_debug_glVertexAttrib1fvNV;
#define glVertexAttrib1fvNV glad_debug_glVertexAttrib1fvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SNVPROC)(GLuint index, GLshort x);
GLAPI PFNGLVERTEXATTRIB1SNVPROC glad_glVertexAttrib1sNV;
GLAPI PFNGLVERTEXATTRIB1SNVPROC glad_debug_glVertexAttrib1sNV;
#define glVertexAttrib1sNV glad_debug_glVertexAttrib1sNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVNVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB1SVNVPROC glad_glVertexAttrib1svNV;
GLAPI PFNGLVERTEXATTRIB1SVNVPROC glad_debug_glVertexAttrib1svNV;
#define glVertexAttrib1svNV glad_debug_glVertexAttrib1svNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DNVPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIB2DNVPROC glad_glVertexAttrib2dNV;
GLAPI PFNGLVERTEXATTRIB2DNVPROC glad_debug_glVertexAttrib2dNV;
#define glVertexAttrib2dNV glad_debug_glVertexAttrib2dNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVNVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB2DVNVPROC glad_glVertexAttrib2dvNV;
GLAPI PFNGLVERTEXATTRIB2DVNVPROC glad_debug_glVertexAttrib2dvNV;
#define glVertexAttrib2dvNV glad_debug_glVertexAttrib2dvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FNVPROC)(GLuint index, GLfloat x, GLfloat y);
GLAPI PFNGLVERTEXATTRIB2FNVPROC glad_glVertexAttrib2fNV;
GLAPI PFNGLVERTEXATTRIB2FNVPROC glad_debug_glVertexAttrib2fNV;
#define glVertexAttrib2fNV glad_debug_glVertexAttrib2fNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVNVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB2FVNVPROC glad_glVertexAttrib2fvNV;
GLAPI PFNGLVERTEXATTRIB2FVNVPROC glad_debug_glVertexAttrib2fvNV;
#define glVertexAttrib2fvNV glad_debug_glVertexAttrib2fvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SNVPROC)(GLuint index, GLshort x, GLshort y);
GLAPI PFNGLVERTEXATTRIB2SNVPROC glad_glVertexAttrib2sNV;
GLAPI PFNGLVERTEXATTRIB2SNVPROC glad_debug_glVertexAttrib2sNV;
#define glVertexAttrib2sNV glad_debug_glVertexAttrib2sNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVNVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB2SVNVPROC glad_glVertexAttrib2svNV;
GLAPI PFNGLVERTEXATTRIB2SVNVPROC glad_debug_glVertexAttrib2svNV;
#define glVertexAttrib2svNV glad_debug_glVertexAttrib2svNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIB3DNVPROC glad_glVertexAttrib3dNV;
GLAPI PFNGLVERTEXATTRIB3DNVPROC glad_debug_glVertexAttrib3dNV;
#define glVertexAttrib3dNV glad_debug_glVertexAttrib3dNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVNVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB3DVNVPROC glad_glVertexAttrib3dvNV;
GLAPI PFNGLVERTEXATTRIB3DVNVPROC glad_debug_glVertexAttrib3dvNV;
#define glVertexAttrib3dvNV glad_debug_glVertexAttrib3dvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLVERTEXATTRIB3FNVPROC glad_glVertexAttrib3fNV;
GLAPI PFNGLVERTEXATTRIB3FNVPROC glad_debug_glVertexAttrib3fNV;
#define glVertexAttrib3fNV glad_debug_glVertexAttrib3fNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVNVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB3FVNVPROC glad_glVertexAttrib3fvNV;
GLAPI PFNGLVERTEXATTRIB3FVNVPROC glad_debug_glVertexAttrib3fvNV;
#define glVertexAttrib3fvNV glad_debug_glVertexAttrib3fvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
GLAPI PFNGLVERTEXATTRIB3SNVPROC glad_glVertexAttrib3sNV;
GLAPI PFNGLVERTEXATTRIB3SNVPROC glad_debug_glVertexAttrib3sNV;
#define glVertexAttrib3sNV glad_debug_glVertexAttrib3sNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVNVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB3SVNVPROC glad_glVertexAttrib3svNV;
GLAPI PFNGLVERTEXATTRIB3SVNVPROC glad_debug_glVertexAttrib3svNV;
#define glVertexAttrib3svNV glad_debug_glVertexAttrib3svNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIB4DNVPROC glad_glVertexAttrib4dNV;
GLAPI PFNGLVERTEXATTRIB4DNVPROC glad_debug_glVertexAttrib4dNV;
#define glVertexAttrib4dNV glad_debug_glVertexAttrib4dNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVNVPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIB4DVNVPROC glad_glVertexAttrib4dvNV;
GLAPI PFNGLVERTEXATTRIB4DVNVPROC glad_debug_glVertexAttrib4dvNV;
#define glVertexAttrib4dvNV glad_debug_glVertexAttrib4dvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLVERTEXATTRIB4FNVPROC glad_glVertexAttrib4fNV;
GLAPI PFNGLVERTEXATTRIB4FNVPROC glad_debug_glVertexAttrib4fNV;
#define glVertexAttrib4fNV glad_debug_glVertexAttrib4fNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVNVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIB4FVNVPROC glad_glVertexAttrib4fvNV;
GLAPI PFNGLVERTEXATTRIB4FVNVPROC glad_debug_glVertexAttrib4fvNV;
#define glVertexAttrib4fvNV glad_debug_glVertexAttrib4fvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLVERTEXATTRIB4SNVPROC glad_glVertexAttrib4sNV;
GLAPI PFNGLVERTEXATTRIB4SNVPROC glad_debug_glVertexAttrib4sNV;
#define glVertexAttrib4sNV glad_debug_glVertexAttrib4sNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVNVPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIB4SVNVPROC glad_glVertexAttrib4svNV;
GLAPI PFNGLVERTEXATTRIB4SVNVPROC glad_debug_glVertexAttrib4svNV;
#define glVertexAttrib4svNV glad_debug_glVertexAttrib4svNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBNVPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLAPI PFNGLVERTEXATTRIB4UBNVPROC glad_glVertexAttrib4ubNV;
GLAPI PFNGLVERTEXATTRIB4UBNVPROC glad_debug_glVertexAttrib4ubNV;
#define glVertexAttrib4ubNV glad_debug_glVertexAttrib4ubNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVNVPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIB4UBVNVPROC glad_glVertexAttrib4ubvNV;
GLAPI PFNGLVERTEXATTRIB4UBVNVPROC glad_debug_glVertexAttrib4ubvNV;
#define glVertexAttrib4ubvNV glad_debug_glVertexAttrib4ubvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS1DVNVPROC)(GLuint index, GLsizei count, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBS1DVNVPROC glad_glVertexAttribs1dvNV;
GLAPI PFNGLVERTEXATTRIBS1DVNVPROC glad_debug_glVertexAttribs1dvNV;
#define glVertexAttribs1dvNV glad_debug_glVertexAttribs1dvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS1FVNVPROC)(GLuint index, GLsizei count, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIBS1FVNVPROC glad_glVertexAttribs1fvNV;
GLAPI PFNGLVERTEXATTRIBS1FVNVPROC glad_debug_glVertexAttribs1fvNV;
#define glVertexAttribs1fvNV glad_debug_glVertexAttribs1fvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS1SVNVPROC)(GLuint index, GLsizei count, const GLshort* v);
GLAPI PFNGLVERTEXATTRIBS1SVNVPROC glad_glVertexAttribs1svNV;
GLAPI PFNGLVERTEXATTRIBS1SVNVPROC glad_debug_glVertexAttribs1svNV;
#define glVertexAttribs1svNV glad_debug_glVertexAttribs1svNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS2DVNVPROC)(GLuint index, GLsizei count, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBS2DVNVPROC glad_glVertexAttribs2dvNV;
GLAPI PFNGLVERTEXATTRIBS2DVNVPROC glad_debug_glVertexAttribs2dvNV;
#define glVertexAttribs2dvNV glad_debug_glVertexAttribs2dvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS2FVNVPROC)(GLuint index, GLsizei count, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIBS2FVNVPROC glad_glVertexAttribs2fvNV;
GLAPI PFNGLVERTEXATTRIBS2FVNVPROC glad_debug_glVertexAttribs2fvNV;
#define glVertexAttribs2fvNV glad_debug_glVertexAttribs2fvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS2SVNVPROC)(GLuint index, GLsizei count, const GLshort* v);
GLAPI PFNGLVERTEXATTRIBS2SVNVPROC glad_glVertexAttribs2svNV;
GLAPI PFNGLVERTEXATTRIBS2SVNVPROC glad_debug_glVertexAttribs2svNV;
#define glVertexAttribs2svNV glad_debug_glVertexAttribs2svNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS3DVNVPROC)(GLuint index, GLsizei count, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBS3DVNVPROC glad_glVertexAttribs3dvNV;
GLAPI PFNGLVERTEXATTRIBS3DVNVPROC glad_debug_glVertexAttribs3dvNV;
#define glVertexAttribs3dvNV glad_debug_glVertexAttribs3dvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS3FVNVPROC)(GLuint index, GLsizei count, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIBS3FVNVPROC glad_glVertexAttribs3fvNV;
GLAPI PFNGLVERTEXATTRIBS3FVNVPROC glad_debug_glVertexAttribs3fvNV;
#define glVertexAttribs3fvNV glad_debug_glVertexAttribs3fvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS3SVNVPROC)(GLuint index, GLsizei count, const GLshort* v);
GLAPI PFNGLVERTEXATTRIBS3SVNVPROC glad_glVertexAttribs3svNV;
GLAPI PFNGLVERTEXATTRIBS3SVNVPROC glad_debug_glVertexAttribs3svNV;
#define glVertexAttribs3svNV glad_debug_glVertexAttribs3svNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS4DVNVPROC)(GLuint index, GLsizei count, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBS4DVNVPROC glad_glVertexAttribs4dvNV;
GLAPI PFNGLVERTEXATTRIBS4DVNVPROC glad_debug_glVertexAttribs4dvNV;
#define glVertexAttribs4dvNV glad_debug_glVertexAttribs4dvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS4FVNVPROC)(GLuint index, GLsizei count, const GLfloat* v);
GLAPI PFNGLVERTEXATTRIBS4FVNVPROC glad_glVertexAttribs4fvNV;
GLAPI PFNGLVERTEXATTRIBS4FVNVPROC glad_debug_glVertexAttribs4fvNV;
#define glVertexAttribs4fvNV glad_debug_glVertexAttribs4fvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS4SVNVPROC)(GLuint index, GLsizei count, const GLshort* v);
GLAPI PFNGLVERTEXATTRIBS4SVNVPROC glad_glVertexAttribs4svNV;
GLAPI PFNGLVERTEXATTRIBS4SVNVPROC glad_debug_glVertexAttribs4svNV;
#define glVertexAttribs4svNV glad_debug_glVertexAttribs4svNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS4UBVNVPROC)(GLuint index, GLsizei count, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIBS4UBVNVPROC glad_glVertexAttribs4ubvNV;
GLAPI PFNGLVERTEXATTRIBS4UBVNVPROC glad_debug_glVertexAttribs4ubvNV;
#define glVertexAttribs4ubvNV glad_debug_glVertexAttribs4ubvNV
#endif
#ifndef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle 1
GLAPI int GLAD_GL_NV_shader_thread_shuffle;
#endif
#ifndef GL_ARB_shader_precision
#define GL_ARB_shader_precision 1
GLAPI int GLAD_GL_ARB_shader_precision;
#endif
#ifndef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader 1
GLAPI int GLAD_GL_EXT_vertex_shader;
typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC)();
GLAPI PFNGLBEGINVERTEXSHADEREXTPROC glad_glBeginVertexShaderEXT;
GLAPI PFNGLBEGINVERTEXSHADEREXTPROC glad_debug_glBeginVertexShaderEXT;
#define glBeginVertexShaderEXT glad_debug_glBeginVertexShaderEXT
typedef void (APIENTRYP PFNGLENDVERTEXSHADEREXTPROC)();
GLAPI PFNGLENDVERTEXSHADEREXTPROC glad_glEndVertexShaderEXT;
GLAPI PFNGLENDVERTEXSHADEREXTPROC glad_debug_glEndVertexShaderEXT;
#define glEndVertexShaderEXT glad_debug_glEndVertexShaderEXT
typedef void (APIENTRYP PFNGLBINDVERTEXSHADEREXTPROC)(GLuint id);
GLAPI PFNGLBINDVERTEXSHADEREXTPROC glad_glBindVertexShaderEXT;
GLAPI PFNGLBINDVERTEXSHADEREXTPROC glad_debug_glBindVertexShaderEXT;
#define glBindVertexShaderEXT glad_debug_glBindVertexShaderEXT
typedef GLuint (APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC)(GLuint range);
GLAPI PFNGLGENVERTEXSHADERSEXTPROC glad_glGenVertexShadersEXT;
GLAPI PFNGLGENVERTEXSHADERSEXTPROC glad_debug_glGenVertexShadersEXT;
#define glGenVertexShadersEXT glad_debug_glGenVertexShadersEXT
typedef void (APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC)(GLuint id);
GLAPI PFNGLDELETEVERTEXSHADEREXTPROC glad_glDeleteVertexShaderEXT;
GLAPI PFNGLDELETEVERTEXSHADEREXTPROC glad_debug_glDeleteVertexShaderEXT;
#define glDeleteVertexShaderEXT glad_debug_glDeleteVertexShaderEXT
typedef void (APIENTRYP PFNGLSHADEROP1EXTPROC)(GLenum op, GLuint res, GLuint arg1);
GLAPI PFNGLSHADEROP1EXTPROC glad_glShaderOp1EXT;
GLAPI PFNGLSHADEROP1EXTPROC glad_debug_glShaderOp1EXT;
#define glShaderOp1EXT glad_debug_glShaderOp1EXT
typedef void (APIENTRYP PFNGLSHADEROP2EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
GLAPI PFNGLSHADEROP2EXTPROC glad_glShaderOp2EXT;
GLAPI PFNGLSHADEROP2EXTPROC glad_debug_glShaderOp2EXT;
#define glShaderOp2EXT glad_debug_glShaderOp2EXT
typedef void (APIENTRYP PFNGLSHADEROP3EXTPROC)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
GLAPI PFNGLSHADEROP3EXTPROC glad_glShaderOp3EXT;
GLAPI PFNGLSHADEROP3EXTPROC glad_debug_glShaderOp3EXT;
#define glShaderOp3EXT glad_debug_glShaderOp3EXT
typedef void (APIENTRYP PFNGLSWIZZLEEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
GLAPI PFNGLSWIZZLEEXTPROC glad_glSwizzleEXT;
GLAPI PFNGLSWIZZLEEXTPROC glad_debug_glSwizzleEXT;
#define glSwizzleEXT glad_debug_glSwizzleEXT
typedef void (APIENTRYP PFNGLWRITEMASKEXTPROC)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
GLAPI PFNGLWRITEMASKEXTPROC glad_glWriteMaskEXT;
GLAPI PFNGLWRITEMASKEXTPROC glad_debug_glWriteMaskEXT;
#define glWriteMaskEXT glad_debug_glWriteMaskEXT
typedef void (APIENTRYP PFNGLINSERTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
GLAPI PFNGLINSERTCOMPONENTEXTPROC glad_glInsertComponentEXT;
GLAPI PFNGLINSERTCOMPONENTEXTPROC glad_debug_glInsertComponentEXT;
#define glInsertComponentEXT glad_debug_glInsertComponentEXT
typedef void (APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC)(GLuint res, GLuint src, GLuint num);
GLAPI PFNGLEXTRACTCOMPONENTEXTPROC glad_glExtractComponentEXT;
GLAPI PFNGLEXTRACTCOMPONENTEXTPROC glad_debug_glExtractComponentEXT;
#define glExtractComponentEXT glad_debug_glExtractComponentEXT
typedef GLuint (APIENTRYP PFNGLGENSYMBOLSEXTPROC)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
GLAPI PFNGLGENSYMBOLSEXTPROC glad_glGenSymbolsEXT;
GLAPI PFNGLGENSYMBOLSEXTPROC glad_debug_glGenSymbolsEXT;
#define glGenSymbolsEXT glad_debug_glGenSymbolsEXT
typedef void (APIENTRYP PFNGLSETINVARIANTEXTPROC)(GLuint id, GLenum type, const void* addr);
GLAPI PFNGLSETINVARIANTEXTPROC glad_glSetInvariantEXT;
GLAPI PFNGLSETINVARIANTEXTPROC glad_debug_glSetInvariantEXT;
#define glSetInvariantEXT glad_debug_glSetInvariantEXT
typedef void (APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC)(GLuint id, GLenum type, const void* addr);
GLAPI PFNGLSETLOCALCONSTANTEXTPROC glad_glSetLocalConstantEXT;
GLAPI PFNGLSETLOCALCONSTANTEXTPROC glad_debug_glSetLocalConstantEXT;
#define glSetLocalConstantEXT glad_debug_glSetLocalConstantEXT
typedef void (APIENTRYP PFNGLVARIANTBVEXTPROC)(GLuint id, const GLbyte* addr);
GLAPI PFNGLVARIANTBVEXTPROC glad_glVariantbvEXT;
GLAPI PFNGLVARIANTBVEXTPROC glad_debug_glVariantbvEXT;
#define glVariantbvEXT glad_debug_glVariantbvEXT
typedef void (APIENTRYP PFNGLVARIANTSVEXTPROC)(GLuint id, const GLshort* addr);
GLAPI PFNGLVARIANTSVEXTPROC glad_glVariantsvEXT;
GLAPI PFNGLVARIANTSVEXTPROC glad_debug_glVariantsvEXT;
#define glVariantsvEXT glad_debug_glVariantsvEXT
typedef void (APIENTRYP PFNGLVARIANTIVEXTPROC)(GLuint id, const GLint* addr);
GLAPI PFNGLVARIANTIVEXTPROC glad_glVariantivEXT;
GLAPI PFNGLVARIANTIVEXTPROC glad_debug_glVariantivEXT;
#define glVariantivEXT glad_debug_glVariantivEXT
typedef void (APIENTRYP PFNGLVARIANTFVEXTPROC)(GLuint id, const GLfloat* addr);
GLAPI PFNGLVARIANTFVEXTPROC glad_glVariantfvEXT;
GLAPI PFNGLVARIANTFVEXTPROC glad_debug_glVariantfvEXT;
#define glVariantfvEXT glad_debug_glVariantfvEXT
typedef void (APIENTRYP PFNGLVARIANTDVEXTPROC)(GLuint id, const GLdouble* addr);
GLAPI PFNGLVARIANTDVEXTPROC glad_glVariantdvEXT;
GLAPI PFNGLVARIANTDVEXTPROC glad_debug_glVariantdvEXT;
#define glVariantdvEXT glad_debug_glVariantdvEXT
typedef void (APIENTRYP PFNGLVARIANTUBVEXTPROC)(GLuint id, const GLubyte* addr);
GLAPI PFNGLVARIANTUBVEXTPROC glad_glVariantubvEXT;
GLAPI PFNGLVARIANTUBVEXTPROC glad_debug_glVariantubvEXT;
#define glVariantubvEXT glad_debug_glVariantubvEXT
typedef void (APIENTRYP PFNGLVARIANTUSVEXTPROC)(GLuint id, const GLushort* addr);
GLAPI PFNGLVARIANTUSVEXTPROC glad_glVariantusvEXT;
GLAPI PFNGLVARIANTUSVEXTPROC glad_debug_glVariantusvEXT;
#define glVariantusvEXT glad_debug_glVariantusvEXT
typedef void (APIENTRYP PFNGLVARIANTUIVEXTPROC)(GLuint id, const GLuint* addr);
GLAPI PFNGLVARIANTUIVEXTPROC glad_glVariantuivEXT;
GLAPI PFNGLVARIANTUIVEXTPROC glad_debug_glVariantuivEXT;
#define glVariantuivEXT glad_debug_glVariantuivEXT
typedef void (APIENTRYP PFNGLVARIANTPOINTEREXTPROC)(GLuint id, GLenum type, GLuint stride, const void* addr);
GLAPI PFNGLVARIANTPOINTEREXTPROC glad_glVariantPointerEXT;
GLAPI PFNGLVARIANTPOINTEREXTPROC glad_debug_glVariantPointerEXT;
#define glVariantPointerEXT glad_debug_glVariantPointerEXT
typedef void (APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
GLAPI PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glad_glEnableVariantClientStateEXT;
GLAPI PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glad_debug_glEnableVariantClientStateEXT;
#define glEnableVariantClientStateEXT glad_debug_glEnableVariantClientStateEXT
typedef void (APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)(GLuint id);
GLAPI PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glad_glDisableVariantClientStateEXT;
GLAPI PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glad_debug_glDisableVariantClientStateEXT;
#define glDisableVariantClientStateEXT glad_debug_glDisableVariantClientStateEXT
typedef GLuint (APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC)(GLenum light, GLenum value);
GLAPI PFNGLBINDLIGHTPARAMETEREXTPROC glad_glBindLightParameterEXT;
GLAPI PFNGLBINDLIGHTPARAMETEREXTPROC glad_debug_glBindLightParameterEXT;
#define glBindLightParameterEXT glad_debug_glBindLightParameterEXT
typedef GLuint (APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC)(GLenum face, GLenum value);
GLAPI PFNGLBINDMATERIALPARAMETEREXTPROC glad_glBindMaterialParameterEXT;
GLAPI PFNGLBINDMATERIALPARAMETEREXTPROC glad_debug_glBindMaterialParameterEXT;
#define glBindMaterialParameterEXT glad_debug_glBindMaterialParameterEXT
typedef GLuint (APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC)(GLenum unit, GLenum coord, GLenum value);
GLAPI PFNGLBINDTEXGENPARAMETEREXTPROC glad_glBindTexGenParameterEXT;
GLAPI PFNGLBINDTEXGENPARAMETEREXTPROC glad_debug_glBindTexGenParameterEXT;
#define glBindTexGenParameterEXT glad_debug_glBindTexGenParameterEXT
typedef GLuint (APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)(GLenum unit, GLenum value);
GLAPI PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glad_glBindTextureUnitParameterEXT;
GLAPI PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glad_debug_glBindTextureUnitParameterEXT;
#define glBindTextureUnitParameterEXT glad_debug_glBindTextureUnitParameterEXT
typedef GLuint (APIENTRYP PFNGLBINDPARAMETEREXTPROC)(GLenum value);
GLAPI PFNGLBINDPARAMETEREXTPROC glad_glBindParameterEXT;
GLAPI PFNGLBINDPARAMETEREXTPROC glad_debug_glBindParameterEXT;
#define glBindParameterEXT glad_debug_glBindParameterEXT
typedef GLboolean (APIENTRYP PFNGLISVARIANTENABLEDEXTPROC)(GLuint id, GLenum cap);
GLAPI PFNGLISVARIANTENABLEDEXTPROC glad_glIsVariantEnabledEXT;
GLAPI PFNGLISVARIANTENABLEDEXTPROC glad_debug_glIsVariantEnabledEXT;
#define glIsVariantEnabledEXT glad_debug_glIsVariantEnabledEXT
typedef void (APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean* data);
GLAPI PFNGLGETVARIANTBOOLEANVEXTPROC glad_glGetVariantBooleanvEXT;
GLAPI PFNGLGETVARIANTBOOLEANVEXTPROC glad_debug_glGetVariantBooleanvEXT;
#define glGetVariantBooleanvEXT glad_debug_glGetVariantBooleanvEXT
typedef void (APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint* data);
GLAPI PFNGLGETVARIANTINTEGERVEXTPROC glad_glGetVariantIntegervEXT;
GLAPI PFNGLGETVARIANTINTEGERVEXTPROC glad_debug_glGetVariantIntegervEXT;
#define glGetVariantIntegervEXT glad_debug_glGetVariantIntegervEXT
typedef void (APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat* data);
GLAPI PFNGLGETVARIANTFLOATVEXTPROC glad_glGetVariantFloatvEXT;
GLAPI PFNGLGETVARIANTFLOATVEXTPROC glad_debug_glGetVariantFloatvEXT;
#define glGetVariantFloatvEXT glad_debug_glGetVariantFloatvEXT
typedef void (APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC)(GLuint id, GLenum value, void** data);
GLAPI PFNGLGETVARIANTPOINTERVEXTPROC glad_glGetVariantPointervEXT;
GLAPI PFNGLGETVARIANTPOINTERVEXTPROC glad_debug_glGetVariantPointervEXT;
#define glGetVariantPointervEXT glad_debug_glGetVariantPointervEXT
typedef void (APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean* data);
GLAPI PFNGLGETINVARIANTBOOLEANVEXTPROC glad_glGetInvariantBooleanvEXT;
GLAPI PFNGLGETINVARIANTBOOLEANVEXTPROC glad_debug_glGetInvariantBooleanvEXT;
#define glGetInvariantBooleanvEXT glad_debug_glGetInvariantBooleanvEXT
typedef void (APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint* data);
GLAPI PFNGLGETINVARIANTINTEGERVEXTPROC glad_glGetInvariantIntegervEXT;
GLAPI PFNGLGETINVARIANTINTEGERVEXTPROC glad_debug_glGetInvariantIntegervEXT;
#define glGetInvariantIntegervEXT glad_debug_glGetInvariantIntegervEXT
typedef void (APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat* data);
GLAPI PFNGLGETINVARIANTFLOATVEXTPROC glad_glGetInvariantFloatvEXT;
GLAPI PFNGLGETINVARIANTFLOATVEXTPROC glad_debug_glGetInvariantFloatvEXT;
#define glGetInvariantFloatvEXT glad_debug_glGetInvariantFloatvEXT
typedef void (APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)(GLuint id, GLenum value, GLboolean* data);
GLAPI PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glad_glGetLocalConstantBooleanvEXT;
GLAPI PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glad_debug_glGetLocalConstantBooleanvEXT;
#define glGetLocalConstantBooleanvEXT glad_debug_glGetLocalConstantBooleanvEXT
typedef void (APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)(GLuint id, GLenum value, GLint* data);
GLAPI PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glad_glGetLocalConstantIntegervEXT;
GLAPI PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glad_debug_glGetLocalConstantIntegervEXT;
#define glGetLocalConstantIntegervEXT glad_debug_glGetLocalConstantIntegervEXT
typedef void (APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC)(GLuint id, GLenum value, GLfloat* data);
GLAPI PFNGLGETLOCALCONSTANTFLOATVEXTPROC glad_glGetLocalConstantFloatvEXT;
GLAPI PFNGLGETLOCALCONSTANTFLOATVEXTPROC glad_debug_glGetLocalConstantFloatvEXT;
#define glGetLocalConstantFloatvEXT glad_debug_glGetLocalConstantFloatvEXT
#endif
#ifndef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate 1
GLAPI int GLAD_GL_EXT_blend_func_separate;
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEEXTPROC glad_glBlendFuncSeparateEXT;
GLAPI PFNGLBLENDFUNCSEPARATEEXTPROC glad_debug_glBlendFuncSeparateEXT;
#define glBlendFuncSeparateEXT glad_debug_glBlendFuncSeparateEXT
#endif
#ifndef GL_APPLE_fence
#define GL_APPLE_fence 1
GLAPI int GLAD_GL_APPLE_fence;
typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC)(GLsizei n, GLuint* fences);
GLAPI PFNGLGENFENCESAPPLEPROC glad_glGenFencesAPPLE;
GLAPI PFNGLGENFENCESAPPLEPROC glad_debug_glGenFencesAPPLE;
#define glGenFencesAPPLE glad_debug_glGenFencesAPPLE
typedef void (APIENTRYP PFNGLDELETEFENCESAPPLEPROC)(GLsizei n, const GLuint* fences);
GLAPI PFNGLDELETEFENCESAPPLEPROC glad_glDeleteFencesAPPLE;
GLAPI PFNGLDELETEFENCESAPPLEPROC glad_debug_glDeleteFencesAPPLE;
#define glDeleteFencesAPPLE glad_debug_glDeleteFencesAPPLE
typedef void (APIENTRYP PFNGLSETFENCEAPPLEPROC)(GLuint fence);
GLAPI PFNGLSETFENCEAPPLEPROC glad_glSetFenceAPPLE;
GLAPI PFNGLSETFENCEAPPLEPROC glad_debug_glSetFenceAPPLE;
#define glSetFenceAPPLE glad_debug_glSetFenceAPPLE
typedef GLboolean (APIENTRYP PFNGLISFENCEAPPLEPROC)(GLuint fence);
GLAPI PFNGLISFENCEAPPLEPROC glad_glIsFenceAPPLE;
GLAPI PFNGLISFENCEAPPLEPROC glad_debug_glIsFenceAPPLE;
#define glIsFenceAPPLE glad_debug_glIsFenceAPPLE
typedef GLboolean (APIENTRYP PFNGLTESTFENCEAPPLEPROC)(GLuint fence);
GLAPI PFNGLTESTFENCEAPPLEPROC glad_glTestFenceAPPLE;
GLAPI PFNGLTESTFENCEAPPLEPROC glad_debug_glTestFenceAPPLE;
#define glTestFenceAPPLE glad_debug_glTestFenceAPPLE
typedef void (APIENTRYP PFNGLFINISHFENCEAPPLEPROC)(GLuint fence);
GLAPI PFNGLFINISHFENCEAPPLEPROC glad_glFinishFenceAPPLE;
GLAPI PFNGLFINISHFENCEAPPLEPROC glad_debug_glFinishFenceAPPLE;
#define glFinishFenceAPPLE glad_debug_glFinishFenceAPPLE
typedef GLboolean (APIENTRYP PFNGLTESTOBJECTAPPLEPROC)(GLenum object, GLuint name);
GLAPI PFNGLTESTOBJECTAPPLEPROC glad_glTestObjectAPPLE;
GLAPI PFNGLTESTOBJECTAPPLEPROC glad_debug_glTestObjectAPPLE;
#define glTestObjectAPPLE glad_debug_glTestObjectAPPLE
typedef void (APIENTRYP PFNGLFINISHOBJECTAPPLEPROC)(GLenum object, GLint name);
GLAPI PFNGLFINISHOBJECTAPPLEPROC glad_glFinishObjectAPPLE;
GLAPI PFNGLFINISHOBJECTAPPLEPROC glad_debug_glFinishObjectAPPLE;
#define glFinishObjectAPPLE glad_debug_glFinishObjectAPPLE
#endif
#ifndef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates 1
GLAPI int GLAD_GL_OES_byte_coordinates;
typedef void (APIENTRYP PFNGLMULTITEXCOORD1BOESPROC)(GLenum texture, GLbyte s);
GLAPI PFNGLMULTITEXCOORD1BOESPROC glad_glMultiTexCoord1bOES;
GLAPI PFNGLMULTITEXCOORD1BOESPROC glad_debug_glMultiTexCoord1bOES;
#define glMultiTexCoord1bOES glad_debug_glMultiTexCoord1bOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD1BVOESPROC)(GLenum texture, const GLbyte* coords);
GLAPI PFNGLMULTITEXCOORD1BVOESPROC glad_glMultiTexCoord1bvOES;
GLAPI PFNGLMULTITEXCOORD1BVOESPROC glad_debug_glMultiTexCoord1bvOES;
#define glMultiTexCoord1bvOES glad_debug_glMultiTexCoord1bvOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD2BOESPROC)(GLenum texture, GLbyte s, GLbyte t);
GLAPI PFNGLMULTITEXCOORD2BOESPROC glad_glMultiTexCoord2bOES;
GLAPI PFNGLMULTITEXCOORD2BOESPROC glad_debug_glMultiTexCoord2bOES;
#define glMultiTexCoord2bOES glad_debug_glMultiTexCoord2bOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD2BVOESPROC)(GLenum texture, const GLbyte* coords);
GLAPI PFNGLMULTITEXCOORD2BVOESPROC glad_glMultiTexCoord2bvOES;
GLAPI PFNGLMULTITEXCOORD2BVOESPROC glad_debug_glMultiTexCoord2bvOES;
#define glMultiTexCoord2bvOES glad_debug_glMultiTexCoord2bvOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD3BOESPROC)(GLenum texture, GLbyte s, GLbyte t, GLbyte r);
GLAPI PFNGLMULTITEXCOORD3BOESPROC glad_glMultiTexCoord3bOES;
GLAPI PFNGLMULTITEXCOORD3BOESPROC glad_debug_glMultiTexCoord3bOES;
#define glMultiTexCoord3bOES glad_debug_glMultiTexCoord3bOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD3BVOESPROC)(GLenum texture, const GLbyte* coords);
GLAPI PFNGLMULTITEXCOORD3BVOESPROC glad_glMultiTexCoord3bvOES;
GLAPI PFNGLMULTITEXCOORD3BVOESPROC glad_debug_glMultiTexCoord3bvOES;
#define glMultiTexCoord3bvOES glad_debug_glMultiTexCoord3bvOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD4BOESPROC)(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
GLAPI PFNGLMULTITEXCOORD4BOESPROC glad_glMultiTexCoord4bOES;
GLAPI PFNGLMULTITEXCOORD4BOESPROC glad_debug_glMultiTexCoord4bOES;
#define glMultiTexCoord4bOES glad_debug_glMultiTexCoord4bOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD4BVOESPROC)(GLenum texture, const GLbyte* coords);
GLAPI PFNGLMULTITEXCOORD4BVOESPROC glad_glMultiTexCoord4bvOES;
GLAPI PFNGLMULTITEXCOORD4BVOESPROC glad_debug_glMultiTexCoord4bvOES;
#define glMultiTexCoord4bvOES glad_debug_glMultiTexCoord4bvOES
typedef void (APIENTRYP PFNGLTEXCOORD1BOESPROC)(GLbyte s);
GLAPI PFNGLTEXCOORD1BOESPROC glad_glTexCoord1bOES;
GLAPI PFNGLTEXCOORD1BOESPROC glad_debug_glTexCoord1bOES;
#define glTexCoord1bOES glad_debug_glTexCoord1bOES
typedef void (APIENTRYP PFNGLTEXCOORD1BVOESPROC)(const GLbyte* coords);
GLAPI PFNGLTEXCOORD1BVOESPROC glad_glTexCoord1bvOES;
GLAPI PFNGLTEXCOORD1BVOESPROC glad_debug_glTexCoord1bvOES;
#define glTexCoord1bvOES glad_debug_glTexCoord1bvOES
typedef void (APIENTRYP PFNGLTEXCOORD2BOESPROC)(GLbyte s, GLbyte t);
GLAPI PFNGLTEXCOORD2BOESPROC glad_glTexCoord2bOES;
GLAPI PFNGLTEXCOORD2BOESPROC glad_debug_glTexCoord2bOES;
#define glTexCoord2bOES glad_debug_glTexCoord2bOES
typedef void (APIENTRYP PFNGLTEXCOORD2BVOESPROC)(const GLbyte* coords);
GLAPI PFNGLTEXCOORD2BVOESPROC glad_glTexCoord2bvOES;
GLAPI PFNGLTEXCOORD2BVOESPROC glad_debug_glTexCoord2bvOES;
#define glTexCoord2bvOES glad_debug_glTexCoord2bvOES
typedef void (APIENTRYP PFNGLTEXCOORD3BOESPROC)(GLbyte s, GLbyte t, GLbyte r);
GLAPI PFNGLTEXCOORD3BOESPROC glad_glTexCoord3bOES;
GLAPI PFNGLTEXCOORD3BOESPROC glad_debug_glTexCoord3bOES;
#define glTexCoord3bOES glad_debug_glTexCoord3bOES
typedef void (APIENTRYP PFNGLTEXCOORD3BVOESPROC)(const GLbyte* coords);
GLAPI PFNGLTEXCOORD3BVOESPROC glad_glTexCoord3bvOES;
GLAPI PFNGLTEXCOORD3BVOESPROC glad_debug_glTexCoord3bvOES;
#define glTexCoord3bvOES glad_debug_glTexCoord3bvOES
typedef void (APIENTRYP PFNGLTEXCOORD4BOESPROC)(GLbyte s, GLbyte t, GLbyte r, GLbyte q);
GLAPI PFNGLTEXCOORD4BOESPROC glad_glTexCoord4bOES;
GLAPI PFNGLTEXCOORD4BOESPROC glad_debug_glTexCoord4bOES;
#define glTexCoord4bOES glad_debug_glTexCoord4bOES
typedef void (APIENTRYP PFNGLTEXCOORD4BVOESPROC)(const GLbyte* coords);
GLAPI PFNGLTEXCOORD4BVOESPROC glad_glTexCoord4bvOES;
GLAPI PFNGLTEXCOORD4BVOESPROC glad_debug_glTexCoord4bvOES;
#define glTexCoord4bvOES glad_debug_glTexCoord4bvOES
typedef void (APIENTRYP PFNGLVERTEX2BOESPROC)(GLbyte x, GLbyte y);
GLAPI PFNGLVERTEX2BOESPROC glad_glVertex2bOES;
GLAPI PFNGLVERTEX2BOESPROC glad_debug_glVertex2bOES;
#define glVertex2bOES glad_debug_glVertex2bOES
typedef void (APIENTRYP PFNGLVERTEX2BVOESPROC)(const GLbyte* coords);
GLAPI PFNGLVERTEX2BVOESPROC glad_glVertex2bvOES;
GLAPI PFNGLVERTEX2BVOESPROC glad_debug_glVertex2bvOES;
#define glVertex2bvOES glad_debug_glVertex2bvOES
typedef void (APIENTRYP PFNGLVERTEX3BOESPROC)(GLbyte x, GLbyte y, GLbyte z);
GLAPI PFNGLVERTEX3BOESPROC glad_glVertex3bOES;
GLAPI PFNGLVERTEX3BOESPROC glad_debug_glVertex3bOES;
#define glVertex3bOES glad_debug_glVertex3bOES
typedef void (APIENTRYP PFNGLVERTEX3BVOESPROC)(const GLbyte* coords);
GLAPI PFNGLVERTEX3BVOESPROC glad_glVertex3bvOES;
GLAPI PFNGLVERTEX3BVOESPROC glad_debug_glVertex3bvOES;
#define glVertex3bvOES glad_debug_glVertex3bvOES
typedef void (APIENTRYP PFNGLVERTEX4BOESPROC)(GLbyte x, GLbyte y, GLbyte z, GLbyte w);
GLAPI PFNGLVERTEX4BOESPROC glad_glVertex4bOES;
GLAPI PFNGLVERTEX4BOESPROC glad_debug_glVertex4bOES;
#define glVertex4bOES glad_debug_glVertex4bOES
typedef void (APIENTRYP PFNGLVERTEX4BVOESPROC)(const GLbyte* coords);
GLAPI PFNGLVERTEX4BVOESPROC glad_glVertex4bvOES;
GLAPI PFNGLVERTEX4BVOESPROC glad_debug_glVertex4bvOES;
#define glVertex4bvOES glad_debug_glVertex4bvOES
#endif
#ifndef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix 1
GLAPI int GLAD_GL_ARB_transpose_matrix;
typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC)(const GLfloat* m);
GLAPI PFNGLLOADTRANSPOSEMATRIXFARBPROC glad_glLoadTransposeMatrixfARB;
GLAPI PFNGLLOADTRANSPOSEMATRIXFARBPROC glad_debug_glLoadTransposeMatrixfARB;
#define glLoadTransposeMatrixfARB glad_debug_glLoadTransposeMatrixfARB
typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC)(const GLdouble* m);
GLAPI PFNGLLOADTRANSPOSEMATRIXDARBPROC glad_glLoadTransposeMatrixdARB;
GLAPI PFNGLLOADTRANSPOSEMATRIXDARBPROC glad_debug_glLoadTransposeMatrixdARB;
#define glLoadTransposeMatrixdARB glad_debug_glLoadTransposeMatrixdARB
typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFARBPROC)(const GLfloat* m);
GLAPI PFNGLMULTTRANSPOSEMATRIXFARBPROC glad_glMultTransposeMatrixfARB;
GLAPI PFNGLMULTTRANSPOSEMATRIXFARBPROC glad_debug_glMultTransposeMatrixfARB;
#define glMultTransposeMatrixfARB glad_debug_glMultTransposeMatrixfARB
typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDARBPROC)(const GLdouble* m);
GLAPI PFNGLMULTTRANSPOSEMATRIXDARBPROC glad_glMultTransposeMatrixdARB;
GLAPI PFNGLMULTTRANSPOSEMATRIXDARBPROC glad_debug_glMultTransposeMatrixdARB;
#define glMultTransposeMatrixdARB glad_debug_glMultTransposeMatrixdARB
#endif
#ifndef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 1
GLAPI int GLAD_GL_ARB_provoking_vertex;
#endif
#ifndef GL_EXT_fog_coord
#define GL_EXT_fog_coord 1
GLAPI int GLAD_GL_EXT_fog_coord;
typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC)(GLfloat coord);
GLAPI PFNGLFOGCOORDFEXTPROC glad_glFogCoordfEXT;
GLAPI PFNGLFOGCOORDFEXTPROC glad_debug_glFogCoordfEXT;
#define glFogCoordfEXT glad_debug_glFogCoordfEXT
typedef void (APIENTRYP PFNGLFOGCOORDFVEXTPROC)(const GLfloat* coord);
GLAPI PFNGLFOGCOORDFVEXTPROC glad_glFogCoordfvEXT;
GLAPI PFNGLFOGCOORDFVEXTPROC glad_debug_glFogCoordfvEXT;
#define glFogCoordfvEXT glad_debug_glFogCoordfvEXT
typedef void (APIENTRYP PFNGLFOGCOORDDEXTPROC)(GLdouble coord);
GLAPI PFNGLFOGCOORDDEXTPROC glad_glFogCoorddEXT;
GLAPI PFNGLFOGCOORDDEXTPROC glad_debug_glFogCoorddEXT;
#define glFogCoorddEXT glad_debug_glFogCoorddEXT
typedef void (APIENTRYP PFNGLFOGCOORDDVEXTPROC)(const GLdouble* coord);
GLAPI PFNGLFOGCOORDDVEXTPROC glad_glFogCoorddvEXT;
GLAPI PFNGLFOGCOORDDVEXTPROC glad_debug_glFogCoorddvEXT;
#define glFogCoorddvEXT glad_debug_glFogCoorddvEXT
typedef void (APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC)(GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLFOGCOORDPOINTEREXTPROC glad_glFogCoordPointerEXT;
GLAPI PFNGLFOGCOORDPOINTEREXTPROC glad_debug_glFogCoordPointerEXT;
#define glFogCoordPointerEXT glad_debug_glFogCoordPointerEXT
#endif
#ifndef GL_EXT_vertex_array
#define GL_EXT_vertex_array 1
GLAPI int GLAD_GL_EXT_vertex_array;
typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC)(GLint i);
GLAPI PFNGLARRAYELEMENTEXTPROC glad_glArrayElementEXT;
GLAPI PFNGLARRAYELEMENTEXTPROC glad_debug_glArrayElementEXT;
#define glArrayElementEXT glad_debug_glArrayElementEXT
typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
GLAPI PFNGLCOLORPOINTEREXTPROC glad_glColorPointerEXT;
GLAPI PFNGLCOLORPOINTEREXTPROC glad_debug_glColorPointerEXT;
#define glColorPointerEXT glad_debug_glColorPointerEXT
typedef void (APIENTRYP PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count);
GLAPI PFNGLDRAWARRAYSEXTPROC glad_glDrawArraysEXT;
GLAPI PFNGLDRAWARRAYSEXTPROC glad_debug_glDrawArraysEXT;
#define glDrawArraysEXT glad_debug_glDrawArraysEXT
typedef void (APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count, const GLboolean* pointer);
GLAPI PFNGLEDGEFLAGPOINTEREXTPROC glad_glEdgeFlagPointerEXT;
GLAPI PFNGLEDGEFLAGPOINTEREXTPROC glad_debug_glEdgeFlagPointerEXT;
#define glEdgeFlagPointerEXT glad_debug_glEdgeFlagPointerEXT
typedef void (APIENTRYP PFNGLGETPOINTERVEXTPROC)(GLenum pname, void** params);
GLAPI PFNGLGETPOINTERVEXTPROC glad_glGetPointervEXT;
GLAPI PFNGLGETPOINTERVEXTPROC glad_debug_glGetPointervEXT;
#define glGetPointervEXT glad_debug_glGetPointervEXT
typedef void (APIENTRYP PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void* pointer);
GLAPI PFNGLINDEXPOINTEREXTPROC glad_glIndexPointerEXT;
GLAPI PFNGLINDEXPOINTEREXTPROC glad_debug_glIndexPointerEXT;
#define glIndexPointerEXT glad_debug_glIndexPointerEXT
typedef void (APIENTRYP PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void* pointer);
GLAPI PFNGLNORMALPOINTEREXTPROC glad_glNormalPointerEXT;
GLAPI PFNGLNORMALPOINTEREXTPROC glad_debug_glNormalPointerEXT;
#define glNormalPointerEXT glad_debug_glNormalPointerEXT
typedef void (APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
GLAPI PFNGLTEXCOORDPOINTEREXTPROC glad_glTexCoordPointerEXT;
GLAPI PFNGLTEXCOORDPOINTEREXTPROC glad_debug_glTexCoordPointerEXT;
#define glTexCoordPointerEXT glad_debug_glTexCoordPointerEXT
typedef void (APIENTRYP PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer);
GLAPI PFNGLVERTEXPOINTEREXTPROC glad_glVertexPointerEXT;
GLAPI PFNGLVERTEXPOINTEREXTPROC glad_debug_glVertexPointerEXT;
#define glVertexPointerEXT glad_debug_glVertexPointerEXT
#endif
#ifndef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 1
GLAPI int GLAD_GL_ARB_half_float_vertex;
#endif
#ifndef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate 1
GLAPI int GLAD_GL_EXT_blend_equation_separate;
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC)(GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_glBlendEquationSeparateEXT;
GLAPI PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_debug_glBlendEquationSeparateEXT;
#define glBlendEquationSeparateEXT glad_debug_glBlendEquationSeparateEXT
#endif
#ifndef GL_NV_framebuffer_mixed_samples
#define GL_NV_framebuffer_mixed_samples 1
GLAPI int GLAD_GL_NV_framebuffer_mixed_samples;
typedef void (APIENTRYP PFNGLCOVERAGEMODULATIONTABLENVPROC)(GLsizei n, const GLfloat* v);
GLAPI PFNGLCOVERAGEMODULATIONTABLENVPROC glad_glCoverageModulationTableNV;
GLAPI PFNGLCOVERAGEMODULATIONTABLENVPROC glad_debug_glCoverageModulationTableNV;
#define glCoverageModulationTableNV glad_debug_glCoverageModulationTableNV
typedef void (APIENTRYP PFNGLGETCOVERAGEMODULATIONTABLENVPROC)(GLsizei bufsize, GLfloat* v);
GLAPI PFNGLGETCOVERAGEMODULATIONTABLENVPROC glad_glGetCoverageModulationTableNV;
GLAPI PFNGLGETCOVERAGEMODULATIONTABLENVPROC glad_debug_glGetCoverageModulationTableNV;
#define glGetCoverageModulationTableNV glad_debug_glGetCoverageModulationTableNV
typedef void (APIENTRYP PFNGLCOVERAGEMODULATIONNVPROC)(GLenum components);
GLAPI PFNGLCOVERAGEMODULATIONNVPROC glad_glCoverageModulationNV;
GLAPI PFNGLCOVERAGEMODULATIONNVPROC glad_debug_glCoverageModulationNV;
#define glCoverageModulationNV glad_debug_glCoverageModulationNV
#endif
#ifndef GL_NVX_conditional_render
#define GL_NVX_conditional_render 1
GLAPI int GLAD_GL_NVX_conditional_render;
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVXPROC)(GLuint id);
GLAPI PFNGLBEGINCONDITIONALRENDERNVXPROC glad_glBeginConditionalRenderNVX;
GLAPI PFNGLBEGINCONDITIONALRENDERNVXPROC glad_debug_glBeginConditionalRenderNVX;
#define glBeginConditionalRenderNVX glad_debug_glBeginConditionalRenderNVX
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVXPROC)();
GLAPI PFNGLENDCONDITIONALRENDERNVXPROC glad_glEndConditionalRenderNVX;
GLAPI PFNGLENDCONDITIONALRENDERNVXPROC glad_debug_glEndConditionalRenderNVX;
#define glEndConditionalRenderNVX glad_debug_glEndConditionalRenderNVX
#endif
#ifndef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 1
GLAPI int GLAD_GL_ARB_multi_draw_indirect;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect;
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_debug_glMultiDrawArraysIndirect;
#define glMultiDrawArraysIndirect glad_debug_glMultiDrawArraysIndirect
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect;
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_debug_glMultiDrawElementsIndirect;
#define glMultiDrawElementsIndirect glad_debug_glMultiDrawElementsIndirect
#endif
#ifndef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 1
GLAPI int GLAD_GL_EXT_raster_multisample;
#endif
#ifndef GL_NV_copy_image
#define GL_NV_copy_image 1
GLAPI int GLAD_GL_NV_copy_image;
typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
GLAPI PFNGLCOPYIMAGESUBDATANVPROC glad_glCopyImageSubDataNV;
GLAPI PFNGLCOPYIMAGESUBDATANVPROC glad_debug_glCopyImageSubDataNV;
#define glCopyImageSubDataNV glad_debug_glCopyImageSubDataNV
#endif
#ifndef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 1
GLAPI int GLAD_GL_ARB_fragment_layer_viewport;
#endif
#ifndef GL_INTEL_framebuffer_CMAA
#define GL_INTEL_framebuffer_CMAA 1
GLAPI int GLAD_GL_INTEL_framebuffer_CMAA;
typedef void (APIENTRYP PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC)();
GLAPI PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC glad_glApplyFramebufferAttachmentCMAAINTEL;
GLAPI PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC glad_debug_glApplyFramebufferAttachmentCMAAINTEL;
#define glApplyFramebufferAttachmentCMAAINTEL glad_debug_glApplyFramebufferAttachmentCMAAINTEL
#endif
#ifndef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 1
GLAPI int GLAD_GL_ARB_transform_feedback2;
typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
GLAPI PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
GLAPI PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback;
#define glBindTransformFeedback glad_debug_glBindTransformFeedback
typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint* ids);
GLAPI PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
GLAPI PFNGLDELETETRANSFORMFEEDBACKSPROC glad_debug_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks glad_debug_glDeleteTransformFeedbacks
typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint* ids);
GLAPI PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
GLAPI PFNGLGENTRANSFORMFEEDBACKSPROC glad_debug_glGenTransformFeedbacks;
#define glGenTransformFeedbacks glad_debug_glGenTransformFeedbacks
typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
GLAPI PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
GLAPI PFNGLISTRANSFORMFEEDBACKPROC glad_debug_glIsTransformFeedback;
#define glIsTransformFeedback glad_debug_glIsTransformFeedback
typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC)();
GLAPI PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
GLAPI PFNGLPAUSETRANSFORMFEEDBACKPROC glad_debug_glPauseTransformFeedback;
#define glPauseTransformFeedback glad_debug_glPauseTransformFeedback
typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC)();
GLAPI PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
GLAPI PFNGLRESUMETRANSFORMFEEDBACKPROC glad_debug_glResumeTransformFeedback;
#define glResumeTransformFeedback glad_debug_glResumeTransformFeedback
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
GLAPI PFNGLDRAWTRANSFORMFEEDBACKPROC glad_debug_glDrawTransformFeedback;
#define glDrawTransformFeedback glad_debug_glDrawTransformFeedback
#endif
#ifndef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 1
GLAPI int GLAD_GL_ARB_transform_feedback3;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_debug_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream glad_debug_glDrawTransformFeedbackStream
typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
GLAPI PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
GLAPI PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed;
#define glBeginQueryIndexed glad_debug_glBeginQueryIndexed
typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
GLAPI PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
GLAPI PFNGLENDQUERYINDEXEDPROC glad_debug_glEndQueryIndexed;
#define glEndQueryIndexed glad_debug_glEndQueryIndexed
typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
GLAPI PFNGLGETQUERYINDEXEDIVPROC glad_debug_glGetQueryIndexediv;
#define glGetQueryIndexediv glad_debug_glGetQueryIndexediv
#endif
#ifndef GL_SGIX_ycrcba
#define GL_SGIX_ycrcba 1
GLAPI int GLAD_GL_SGIX_ycrcba;
#endif
#ifndef GL_EXT_debug_marker
#define GL_EXT_debug_marker 1
GLAPI int GLAD_GL_EXT_debug_marker;
typedef void (APIENTRYP PFNGLINSERTEVENTMARKEREXTPROC)(GLsizei length, const GLchar* marker);
GLAPI PFNGLINSERTEVENTMARKEREXTPROC glad_glInsertEventMarkerEXT;
GLAPI PFNGLINSERTEVENTMARKEREXTPROC glad_debug_glInsertEventMarkerEXT;
#define glInsertEventMarkerEXT glad_debug_glInsertEventMarkerEXT
typedef void (APIENTRYP PFNGLPUSHGROUPMARKEREXTPROC)(GLsizei length, const GLchar* marker);
GLAPI PFNGLPUSHGROUPMARKEREXTPROC glad_glPushGroupMarkerEXT;
GLAPI PFNGLPUSHGROUPMARKEREXTPROC glad_debug_glPushGroupMarkerEXT;
#define glPushGroupMarkerEXT glad_debug_glPushGroupMarkerEXT
typedef void (APIENTRYP PFNGLPOPGROUPMARKEREXTPROC)();
GLAPI PFNGLPOPGROUPMARKEREXTPROC glad_glPopGroupMarkerEXT;
GLAPI PFNGLPOPGROUPMARKEREXTPROC glad_debug_glPopGroupMarkerEXT;
#define glPopGroupMarkerEXT glad_debug_glPopGroupMarkerEXT
#endif
#ifndef GL_EXT_bgra
#define GL_EXT_bgra 1
GLAPI int GLAD_GL_EXT_bgra;
#endif
#ifndef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 1
GLAPI int GLAD_GL_ARB_sparse_texture_clamp;
#endif
#ifndef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform 1
GLAPI int GLAD_GL_EXT_pixel_transform;
typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glad_glPixelTransformParameteriEXT;
GLAPI PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glad_debug_glPixelTransformParameteriEXT;
#define glPixelTransformParameteriEXT glad_debug_glPixelTransformParameteriEXT
typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)(GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glad_glPixelTransformParameterfEXT;
GLAPI PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glad_debug_glPixelTransformParameterfEXT;
#define glPixelTransformParameterfEXT glad_debug_glPixelTransformParameterfEXT
typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glad_glPixelTransformParameterivEXT;
GLAPI PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glad_debug_glPixelTransformParameterivEXT;
#define glPixelTransformParameterivEXT glad_debug_glPixelTransformParameterivEXT
typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glad_glPixelTransformParameterfvEXT;
GLAPI PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glad_debug_glPixelTransformParameterfvEXT;
#define glPixelTransformParameterfvEXT glad_debug_glPixelTransformParameterfvEXT
typedef void (APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glad_glGetPixelTransformParameterivEXT;
GLAPI PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glad_debug_glGetPixelTransformParameterivEXT;
#define glGetPixelTransformParameterivEXT glad_debug_glGetPixelTransformParameterivEXT
typedef void (APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glad_glGetPixelTransformParameterfvEXT;
GLAPI PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glad_debug_glGetPixelTransformParameterfvEXT;
#define glGetPixelTransformParameterfvEXT glad_debug_glGetPixelTransformParameterfvEXT
#endif
#ifndef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 1
GLAPI int GLAD_GL_ARB_conservative_depth;
#endif
#ifndef GL_ATI_fragment_shader
#define GL_ATI_fragment_shader 1
GLAPI int GLAD_GL_ATI_fragment_shader;
typedef GLuint (APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC)(GLuint range);
GLAPI PFNGLGENFRAGMENTSHADERSATIPROC glad_glGenFragmentShadersATI;
GLAPI PFNGLGENFRAGMENTSHADERSATIPROC glad_debug_glGenFragmentShadersATI;
#define glGenFragmentShadersATI glad_debug_glGenFragmentShadersATI
typedef void (APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC)(GLuint id);
GLAPI PFNGLBINDFRAGMENTSHADERATIPROC glad_glBindFragmentShaderATI;
GLAPI PFNGLBINDFRAGMENTSHADERATIPROC glad_debug_glBindFragmentShaderATI;
#define glBindFragmentShaderATI glad_debug_glBindFragmentShaderATI
typedef void (APIENTRYP PFNGLDELETEFRAGMENTSHADERATIPROC)(GLuint id);
GLAPI PFNGLDELETEFRAGMENTSHADERATIPROC glad_glDeleteFragmentShaderATI;
GLAPI PFNGLDELETEFRAGMENTSHADERATIPROC glad_debug_glDeleteFragmentShaderATI;
#define glDeleteFragmentShaderATI glad_debug_glDeleteFragmentShaderATI
typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC)();
GLAPI PFNGLBEGINFRAGMENTSHADERATIPROC glad_glBeginFragmentShaderATI;
GLAPI PFNGLBEGINFRAGMENTSHADERATIPROC glad_debug_glBeginFragmentShaderATI;
#define glBeginFragmentShaderATI glad_debug_glBeginFragmentShaderATI
typedef void (APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC)();
GLAPI PFNGLENDFRAGMENTSHADERATIPROC glad_glEndFragmentShaderATI;
GLAPI PFNGLENDFRAGMENTSHADERATIPROC glad_debug_glEndFragmentShaderATI;
#define glEndFragmentShaderATI glad_debug_glEndFragmentShaderATI
typedef void (APIENTRYP PFNGLPASSTEXCOORDATIPROC)(GLuint dst, GLuint coord, GLenum swizzle);
GLAPI PFNGLPASSTEXCOORDATIPROC glad_glPassTexCoordATI;
GLAPI PFNGLPASSTEXCOORDATIPROC glad_debug_glPassTexCoordATI;
#define glPassTexCoordATI glad_debug_glPassTexCoordATI
typedef void (APIENTRYP PFNGLSAMPLEMAPATIPROC)(GLuint dst, GLuint interp, GLenum swizzle);
GLAPI PFNGLSAMPLEMAPATIPROC glad_glSampleMapATI;
GLAPI PFNGLSAMPLEMAPATIPROC glad_debug_glSampleMapATI;
#define glSampleMapATI glad_debug_glSampleMapATI
typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
GLAPI PFNGLCOLORFRAGMENTOP1ATIPROC glad_glColorFragmentOp1ATI;
GLAPI PFNGLCOLORFRAGMENTOP1ATIPROC glad_debug_glColorFragmentOp1ATI;
#define glColorFragmentOp1ATI glad_debug_glColorFragmentOp1ATI
typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
GLAPI PFNGLCOLORFRAGMENTOP2ATIPROC glad_glColorFragmentOp2ATI;
GLAPI PFNGLCOLORFRAGMENTOP2ATIPROC glad_debug_glColorFragmentOp2ATI;
#define glColorFragmentOp2ATI glad_debug_glColorFragmentOp2ATI
typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
GLAPI PFNGLCOLORFRAGMENTOP3ATIPROC glad_glColorFragmentOp3ATI;
GLAPI PFNGLCOLORFRAGMENTOP3ATIPROC glad_debug_glColorFragmentOp3ATI;
#define glColorFragmentOp3ATI glad_debug_glColorFragmentOp3ATI
typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
GLAPI PFNGLALPHAFRAGMENTOP1ATIPROC glad_glAlphaFragmentOp1ATI;
GLAPI PFNGLALPHAFRAGMENTOP1ATIPROC glad_debug_glAlphaFragmentOp1ATI;
#define glAlphaFragmentOp1ATI glad_debug_glAlphaFragmentOp1ATI
typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
GLAPI PFNGLALPHAFRAGMENTOP2ATIPROC glad_glAlphaFragmentOp2ATI;
GLAPI PFNGLALPHAFRAGMENTOP2ATIPROC glad_debug_glAlphaFragmentOp2ATI;
#define glAlphaFragmentOp2ATI glad_debug_glAlphaFragmentOp2ATI
typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
GLAPI PFNGLALPHAFRAGMENTOP3ATIPROC glad_glAlphaFragmentOp3ATI;
GLAPI PFNGLALPHAFRAGMENTOP3ATIPROC glad_debug_glAlphaFragmentOp3ATI;
#define glAlphaFragmentOp3ATI glad_debug_glAlphaFragmentOp3ATI
typedef void (APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)(GLuint dst, const GLfloat* value);
GLAPI PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glad_glSetFragmentShaderConstantATI;
GLAPI PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glad_debug_glSetFragmentShaderConstantATI;
#define glSetFragmentShaderConstantATI glad_debug_glSetFragmentShaderConstantATI
#endif
#ifndef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 1
GLAPI int GLAD_GL_ARB_vertex_array_object;
#endif
#ifndef GL_SUN_triangle_list
#define GL_SUN_triangle_list 1
GLAPI int GLAD_GL_SUN_triangle_list;
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC)(GLuint code);
GLAPI PFNGLREPLACEMENTCODEUISUNPROC glad_glReplacementCodeuiSUN;
GLAPI PFNGLREPLACEMENTCODEUISUNPROC glad_debug_glReplacementCodeuiSUN;
#define glReplacementCodeuiSUN glad_debug_glReplacementCodeuiSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC)(GLushort code);
GLAPI PFNGLREPLACEMENTCODEUSSUNPROC glad_glReplacementCodeusSUN;
GLAPI PFNGLREPLACEMENTCODEUSSUNPROC glad_debug_glReplacementCodeusSUN;
#define glReplacementCodeusSUN glad_debug_glReplacementCodeusSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBSUNPROC)(GLubyte code);
GLAPI PFNGLREPLACEMENTCODEUBSUNPROC glad_glReplacementCodeubSUN;
GLAPI PFNGLREPLACEMENTCODEUBSUNPROC glad_debug_glReplacementCodeubSUN;
#define glReplacementCodeubSUN glad_debug_glReplacementCodeubSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVSUNPROC)(const GLuint* code);
GLAPI PFNGLREPLACEMENTCODEUIVSUNPROC glad_glReplacementCodeuivSUN;
GLAPI PFNGLREPLACEMENTCODEUIVSUNPROC glad_debug_glReplacementCodeuivSUN;
#define glReplacementCodeuivSUN glad_debug_glReplacementCodeuivSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC)(const GLushort* code);
GLAPI PFNGLREPLACEMENTCODEUSVSUNPROC glad_glReplacementCodeusvSUN;
GLAPI PFNGLREPLACEMENTCODEUSVSUNPROC glad_debug_glReplacementCodeusvSUN;
#define glReplacementCodeusvSUN glad_debug_glReplacementCodeusvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC)(const GLubyte* code);
GLAPI PFNGLREPLACEMENTCODEUBVSUNPROC glad_glReplacementCodeubvSUN;
GLAPI PFNGLREPLACEMENTCODEUBVSUNPROC glad_debug_glReplacementCodeubvSUN;
#define glReplacementCodeubvSUN glad_debug_glReplacementCodeubvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC)(GLenum type, GLsizei stride, const void** pointer);
GLAPI PFNGLREPLACEMENTCODEPOINTERSUNPROC glad_glReplacementCodePointerSUN;
GLAPI PFNGLREPLACEMENTCODEPOINTERSUNPROC glad_debug_glReplacementCodePointerSUN;
#define glReplacementCodePointerSUN glad_debug_glReplacementCodePointerSUN
#endif
#ifndef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add 1
GLAPI int GLAD_GL_EXT_texture_env_add;
#endif
#ifndef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil 1
GLAPI int GLAD_GL_EXT_packed_depth_stencil;
#endif
#ifndef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp 1
GLAPI int GLAD_GL_EXT_texture_mirror_clamp;
#endif
#ifndef GL_NV_multisample_filter_hint
#define GL_NV_multisample_filter_hint 1
GLAPI int GLAD_GL_NV_multisample_filter_hint;
#endif
#ifndef GL_APPLE_float_pixels
#define GL_APPLE_float_pixels 1
GLAPI int GLAD_GL_APPLE_float_pixels;
#endif
#ifndef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 1
GLAPI int GLAD_GL_ARB_transform_feedback_instanced;
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced;
GLAPI PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_debug_glDrawTransformFeedbackInstanced;
#define glDrawTransformFeedbackInstanced glad_debug_glDrawTransformFeedbackInstanced
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced;
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_debug_glDrawTransformFeedbackStreamInstanced;
#define glDrawTransformFeedbackStreamInstanced glad_debug_glDrawTransformFeedbackStreamInstanced
#endif
#ifndef GL_SGIX_async
#define GL_SGIX_async 1
GLAPI int GLAD_GL_SGIX_async;
typedef void (APIENTRYP PFNGLASYNCMARKERSGIXPROC)(GLuint marker);
GLAPI PFNGLASYNCMARKERSGIXPROC glad_glAsyncMarkerSGIX;
GLAPI PFNGLASYNCMARKERSGIXPROC glad_debug_glAsyncMarkerSGIX;
#define glAsyncMarkerSGIX glad_debug_glAsyncMarkerSGIX
typedef GLint (APIENTRYP PFNGLFINISHASYNCSGIXPROC)(GLuint* markerp);
GLAPI PFNGLFINISHASYNCSGIXPROC glad_glFinishAsyncSGIX;
GLAPI PFNGLFINISHASYNCSGIXPROC glad_debug_glFinishAsyncSGIX;
#define glFinishAsyncSGIX glad_debug_glFinishAsyncSGIX
typedef GLint (APIENTRYP PFNGLPOLLASYNCSGIXPROC)(GLuint* markerp);
GLAPI PFNGLPOLLASYNCSGIXPROC glad_glPollAsyncSGIX;
GLAPI PFNGLPOLLASYNCSGIXPROC glad_debug_glPollAsyncSGIX;
#define glPollAsyncSGIX glad_debug_glPollAsyncSGIX
typedef GLuint (APIENTRYP PFNGLGENASYNCMARKERSSGIXPROC)(GLsizei range);
GLAPI PFNGLGENASYNCMARKERSSGIXPROC glad_glGenAsyncMarkersSGIX;
GLAPI PFNGLGENASYNCMARKERSSGIXPROC glad_debug_glGenAsyncMarkersSGIX;
#define glGenAsyncMarkersSGIX glad_debug_glGenAsyncMarkersSGIX
typedef void (APIENTRYP PFNGLDELETEASYNCMARKERSSGIXPROC)(GLuint marker, GLsizei range);
GLAPI PFNGLDELETEASYNCMARKERSSGIXPROC glad_glDeleteAsyncMarkersSGIX;
GLAPI PFNGLDELETEASYNCMARKERSSGIXPROC glad_debug_glDeleteAsyncMarkersSGIX;
#define glDeleteAsyncMarkersSGIX glad_debug_glDeleteAsyncMarkersSGIX
typedef GLboolean (APIENTRYP PFNGLISASYNCMARKERSGIXPROC)(GLuint marker);
GLAPI PFNGLISASYNCMARKERSGIXPROC glad_glIsAsyncMarkerSGIX;
GLAPI PFNGLISASYNCMARKERSGIXPROC glad_debug_glIsAsyncMarkerSGIX;
#define glIsAsyncMarkerSGIX glad_debug_glIsAsyncMarkerSGIX
#endif
#ifndef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc 1
GLAPI int GLAD_GL_EXT_texture_compression_latc;
#endif
#ifndef GL_NV_robustness_video_memory_purge
#define GL_NV_robustness_video_memory_purge 1
GLAPI int GLAD_GL_NV_robustness_video_memory_purge;
#endif
#ifndef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100 1
GLAPI int GLAD_GL_ARB_shading_language_100;
#endif
#ifndef GL_INTEL_performance_query
#define GL_INTEL_performance_query 1
GLAPI int GLAD_GL_INTEL_performance_query;
typedef void (APIENTRYP PFNGLBEGINPERFQUERYINTELPROC)(GLuint queryHandle);
GLAPI PFNGLBEGINPERFQUERYINTELPROC glad_glBeginPerfQueryINTEL;
GLAPI PFNGLBEGINPERFQUERYINTELPROC glad_debug_glBeginPerfQueryINTEL;
#define glBeginPerfQueryINTEL glad_debug_glBeginPerfQueryINTEL
typedef void (APIENTRYP PFNGLCREATEPERFQUERYINTELPROC)(GLuint queryId, GLuint* queryHandle);
GLAPI PFNGLCREATEPERFQUERYINTELPROC glad_glCreatePerfQueryINTEL;
GLAPI PFNGLCREATEPERFQUERYINTELPROC glad_debug_glCreatePerfQueryINTEL;
#define glCreatePerfQueryINTEL glad_debug_glCreatePerfQueryINTEL
typedef void (APIENTRYP PFNGLDELETEPERFQUERYINTELPROC)(GLuint queryHandle);
GLAPI PFNGLDELETEPERFQUERYINTELPROC glad_glDeletePerfQueryINTEL;
GLAPI PFNGLDELETEPERFQUERYINTELPROC glad_debug_glDeletePerfQueryINTEL;
#define glDeletePerfQueryINTEL glad_debug_glDeletePerfQueryINTEL
typedef void (APIENTRYP PFNGLENDPERFQUERYINTELPROC)(GLuint queryHandle);
GLAPI PFNGLENDPERFQUERYINTELPROC glad_glEndPerfQueryINTEL;
GLAPI PFNGLENDPERFQUERYINTELPROC glad_debug_glEndPerfQueryINTEL;
#define glEndPerfQueryINTEL glad_debug_glEndPerfQueryINTEL
typedef void (APIENTRYP PFNGLGETFIRSTPERFQUERYIDINTELPROC)(GLuint* queryId);
GLAPI PFNGLGETFIRSTPERFQUERYIDINTELPROC glad_glGetFirstPerfQueryIdINTEL;
GLAPI PFNGLGETFIRSTPERFQUERYIDINTELPROC glad_debug_glGetFirstPerfQueryIdINTEL;
#define glGetFirstPerfQueryIdINTEL glad_debug_glGetFirstPerfQueryIdINTEL
typedef void (APIENTRYP PFNGLGETNEXTPERFQUERYIDINTELPROC)(GLuint queryId, GLuint* nextQueryId);
GLAPI PFNGLGETNEXTPERFQUERYIDINTELPROC glad_glGetNextPerfQueryIdINTEL;
GLAPI PFNGLGETNEXTPERFQUERYIDINTELPROC glad_debug_glGetNextPerfQueryIdINTEL;
#define glGetNextPerfQueryIdINTEL glad_debug_glGetNextPerfQueryIdINTEL
typedef void (APIENTRYP PFNGLGETPERFCOUNTERINFOINTELPROC)(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar* counterDesc, GLuint* counterOffset, GLuint* counterDataSize, GLuint* counterTypeEnum, GLuint* counterDataTypeEnum, GLuint64* rawCounterMaxValue);
GLAPI PFNGLGETPERFCOUNTERINFOINTELPROC glad_glGetPerfCounterInfoINTEL;
GLAPI PFNGLGETPERFCOUNTERINFOINTELPROC glad_debug_glGetPerfCounterInfoINTEL;
#define glGetPerfCounterInfoINTEL glad_debug_glGetPerfCounterInfoINTEL
typedef void (APIENTRYP PFNGLGETPERFQUERYDATAINTELPROC)(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid* data, GLuint* bytesWritten);
GLAPI PFNGLGETPERFQUERYDATAINTELPROC glad_glGetPerfQueryDataINTEL;
GLAPI PFNGLGETPERFQUERYDATAINTELPROC glad_debug_glGetPerfQueryDataINTEL;
#define glGetPerfQueryDataINTEL glad_debug_glGetPerfQueryDataINTEL
typedef void (APIENTRYP PFNGLGETPERFQUERYIDBYNAMEINTELPROC)(GLchar* queryName, GLuint* queryId);
GLAPI PFNGLGETPERFQUERYIDBYNAMEINTELPROC glad_glGetPerfQueryIdByNameINTEL;
GLAPI PFNGLGETPERFQUERYIDBYNAMEINTELPROC glad_debug_glGetPerfQueryIdByNameINTEL;
#define glGetPerfQueryIdByNameINTEL glad_debug_glGetPerfQueryIdByNameINTEL
typedef void (APIENTRYP PFNGLGETPERFQUERYINFOINTELPROC)(GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint* dataSize, GLuint* noCounters, GLuint* noInstances, GLuint* capsMask);
GLAPI PFNGLGETPERFQUERYINFOINTELPROC glad_glGetPerfQueryInfoINTEL;
GLAPI PFNGLGETPERFQUERYINFOINTELPROC glad_debug_glGetPerfQueryInfoINTEL;
#define glGetPerfQueryInfoINTEL glad_debug_glGetPerfQueryInfoINTEL
#endif
#ifndef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 1
GLAPI int GLAD_GL_ARB_texture_mirror_clamp_to_edge;
#endif
#ifndef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5 1
GLAPI int GLAD_GL_NV_gpu_shader5;
#endif
#ifndef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count 1
GLAPI int GLAD_GL_NV_bindless_multi_draw_indirect_count;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC)(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC glad_glMultiDrawArraysIndirectBindlessCountNV;
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC glad_debug_glMultiDrawArraysIndirectBindlessCountNV;
#define glMultiDrawArraysIndirectBindlessCountNV glad_debug_glMultiDrawArraysIndirectBindlessCountNV
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC glad_glMultiDrawElementsIndirectBindlessCountNV;
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC glad_debug_glMultiDrawElementsIndirectBindlessCountNV;
#define glMultiDrawElementsIndirectBindlessCountNV glad_debug_glMultiDrawElementsIndirectBindlessCountNV
#endif
#ifndef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 1
GLAPI int GLAD_GL_ARB_ES2_compatibility;
typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC)();
GLAPI PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
GLAPI PFNGLRELEASESHADERCOMPILERPROC glad_debug_glReleaseShaderCompiler;
#define glReleaseShaderCompiler glad_debug_glReleaseShaderCompiler
typedef void (APIENTRYP PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length);
GLAPI PFNGLSHADERBINARYPROC glad_glShaderBinary;
GLAPI PFNGLSHADERBINARYPROC glad_debug_glShaderBinary;
#define glShaderBinary glad_debug_glShaderBinary
typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
GLAPI PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
GLAPI PFNGLGETSHADERPRECISIONFORMATPROC glad_debug_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat glad_debug_glGetShaderPrecisionFormat
typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
GLAPI PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
GLAPI PFNGLDEPTHRANGEFPROC glad_debug_glDepthRangef;
#define glDepthRangef glad_debug_glDepthRangef
typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC)(GLfloat d);
GLAPI PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
GLAPI PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf;
#define glClearDepthf glad_debug_glClearDepthf
#endif
#ifndef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 1
GLAPI int GLAD_GL_ARB_indirect_parameters;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glad_glMultiDrawArraysIndirectCountARB;
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glad_debug_glMultiDrawArraysIndirectCountARB;
#define glMultiDrawArraysIndirectCountARB glad_debug_glMultiDrawArraysIndirectCountARB
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glad_glMultiDrawElementsIndirectCountARB;
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glad_debug_glMultiDrawElementsIndirectCountARB;
#define glMultiDrawElementsIndirectCountARB glad_debug_glMultiDrawElementsIndirectCountARB
#endif
#ifndef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 1
GLAPI int GLAD_GL_EXT_window_rectangles;
typedef void (APIENTRYP PFNGLWINDOWRECTANGLESEXTPROC)(GLenum mode, GLsizei count, const GLint* box);
GLAPI PFNGLWINDOWRECTANGLESEXTPROC glad_glWindowRectanglesEXT;
GLAPI PFNGLWINDOWRECTANGLESEXTPROC glad_debug_glWindowRectanglesEXT;
#define glWindowRectanglesEXT glad_debug_glWindowRectanglesEXT
#endif
#ifndef GL_NV_half_float
#define GL_NV_half_float 1
GLAPI int GLAD_GL_NV_half_float;
typedef void (APIENTRYP PFNGLVERTEX2HNVPROC)(GLhalfNV x, GLhalfNV y);
GLAPI PFNGLVERTEX2HNVPROC glad_glVertex2hNV;
GLAPI PFNGLVERTEX2HNVPROC glad_debug_glVertex2hNV;
#define glVertex2hNV glad_debug_glVertex2hNV
typedef void (APIENTRYP PFNGLVERTEX2HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLVERTEX2HVNVPROC glad_glVertex2hvNV;
GLAPI PFNGLVERTEX2HVNVPROC glad_debug_glVertex2hvNV;
#define glVertex2hvNV glad_debug_glVertex2hvNV
typedef void (APIENTRYP PFNGLVERTEX3HNVPROC)(GLhalfNV x, GLhalfNV y, GLhalfNV z);
GLAPI PFNGLVERTEX3HNVPROC glad_glVertex3hNV;
GLAPI PFNGLVERTEX3HNVPROC glad_debug_glVertex3hNV;
#define glVertex3hNV glad_debug_glVertex3hNV
typedef void (APIENTRYP PFNGLVERTEX3HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLVERTEX3HVNVPROC glad_glVertex3hvNV;
GLAPI PFNGLVERTEX3HVNVPROC glad_debug_glVertex3hvNV;
#define glVertex3hvNV glad_debug_glVertex3hvNV
typedef void (APIENTRYP PFNGLVERTEX4HNVPROC)(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
GLAPI PFNGLVERTEX4HNVPROC glad_glVertex4hNV;
GLAPI PFNGLVERTEX4HNVPROC glad_debug_glVertex4hNV;
#define glVertex4hNV glad_debug_glVertex4hNV
typedef void (APIENTRYP PFNGLVERTEX4HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLVERTEX4HVNVPROC glad_glVertex4hvNV;
GLAPI PFNGLVERTEX4HVNVPROC glad_debug_glVertex4hvNV;
#define glVertex4hvNV glad_debug_glVertex4hvNV
typedef void (APIENTRYP PFNGLNORMAL3HNVPROC)(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
GLAPI PFNGLNORMAL3HNVPROC glad_glNormal3hNV;
GLAPI PFNGLNORMAL3HNVPROC glad_debug_glNormal3hNV;
#define glNormal3hNV glad_debug_glNormal3hNV
typedef void (APIENTRYP PFNGLNORMAL3HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLNORMAL3HVNVPROC glad_glNormal3hvNV;
GLAPI PFNGLNORMAL3HVNVPROC glad_debug_glNormal3hvNV;
#define glNormal3hvNV glad_debug_glNormal3hvNV
typedef void (APIENTRYP PFNGLCOLOR3HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
GLAPI PFNGLCOLOR3HNVPROC glad_glColor3hNV;
GLAPI PFNGLCOLOR3HNVPROC glad_debug_glColor3hNV;
#define glColor3hNV glad_debug_glColor3hNV
typedef void (APIENTRYP PFNGLCOLOR3HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLCOLOR3HVNVPROC glad_glColor3hvNV;
GLAPI PFNGLCOLOR3HVNVPROC glad_debug_glColor3hvNV;
#define glColor3hvNV glad_debug_glColor3hvNV
typedef void (APIENTRYP PFNGLCOLOR4HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
GLAPI PFNGLCOLOR4HNVPROC glad_glColor4hNV;
GLAPI PFNGLCOLOR4HNVPROC glad_debug_glColor4hNV;
#define glColor4hNV glad_debug_glColor4hNV
typedef void (APIENTRYP PFNGLCOLOR4HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLCOLOR4HVNVPROC glad_glColor4hvNV;
GLAPI PFNGLCOLOR4HVNVPROC glad_debug_glColor4hvNV;
#define glColor4hvNV glad_debug_glColor4hvNV
typedef void (APIENTRYP PFNGLTEXCOORD1HNVPROC)(GLhalfNV s);
GLAPI PFNGLTEXCOORD1HNVPROC glad_glTexCoord1hNV;
GLAPI PFNGLTEXCOORD1HNVPROC glad_debug_glTexCoord1hNV;
#define glTexCoord1hNV glad_debug_glTexCoord1hNV
typedef void (APIENTRYP PFNGLTEXCOORD1HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLTEXCOORD1HVNVPROC glad_glTexCoord1hvNV;
GLAPI PFNGLTEXCOORD1HVNVPROC glad_debug_glTexCoord1hvNV;
#define glTexCoord1hvNV glad_debug_glTexCoord1hvNV
typedef void (APIENTRYP PFNGLTEXCOORD2HNVPROC)(GLhalfNV s, GLhalfNV t);
GLAPI PFNGLTEXCOORD2HNVPROC glad_glTexCoord2hNV;
GLAPI PFNGLTEXCOORD2HNVPROC glad_debug_glTexCoord2hNV;
#define glTexCoord2hNV glad_debug_glTexCoord2hNV
typedef void (APIENTRYP PFNGLTEXCOORD2HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLTEXCOORD2HVNVPROC glad_glTexCoord2hvNV;
GLAPI PFNGLTEXCOORD2HVNVPROC glad_debug_glTexCoord2hvNV;
#define glTexCoord2hvNV glad_debug_glTexCoord2hvNV
typedef void (APIENTRYP PFNGLTEXCOORD3HNVPROC)(GLhalfNV s, GLhalfNV t, GLhalfNV r);
GLAPI PFNGLTEXCOORD3HNVPROC glad_glTexCoord3hNV;
GLAPI PFNGLTEXCOORD3HNVPROC glad_debug_glTexCoord3hNV;
#define glTexCoord3hNV glad_debug_glTexCoord3hNV
typedef void (APIENTRYP PFNGLTEXCOORD3HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLTEXCOORD3HVNVPROC glad_glTexCoord3hvNV;
GLAPI PFNGLTEXCOORD3HVNVPROC glad_debug_glTexCoord3hvNV;
#define glTexCoord3hvNV glad_debug_glTexCoord3hvNV
typedef void (APIENTRYP PFNGLTEXCOORD4HNVPROC)(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
GLAPI PFNGLTEXCOORD4HNVPROC glad_glTexCoord4hNV;
GLAPI PFNGLTEXCOORD4HNVPROC glad_debug_glTexCoord4hNV;
#define glTexCoord4hNV glad_debug_glTexCoord4hNV
typedef void (APIENTRYP PFNGLTEXCOORD4HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLTEXCOORD4HVNVPROC glad_glTexCoord4hvNV;
GLAPI PFNGLTEXCOORD4HVNVPROC glad_debug_glTexCoord4hvNV;
#define glTexCoord4hvNV glad_debug_glTexCoord4hvNV
typedef void (APIENTRYP PFNGLMULTITEXCOORD1HNVPROC)(GLenum target, GLhalfNV s);
GLAPI PFNGLMULTITEXCOORD1HNVPROC glad_glMultiTexCoord1hNV;
GLAPI PFNGLMULTITEXCOORD1HNVPROC glad_debug_glMultiTexCoord1hNV;
#define glMultiTexCoord1hNV glad_debug_glMultiTexCoord1hNV
typedef void (APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC)(GLenum target, const GLhalfNV* v);
GLAPI PFNGLMULTITEXCOORD1HVNVPROC glad_glMultiTexCoord1hvNV;
GLAPI PFNGLMULTITEXCOORD1HVNVPROC glad_debug_glMultiTexCoord1hvNV;
#define glMultiTexCoord1hvNV glad_debug_glMultiTexCoord1hvNV
typedef void (APIENTRYP PFNGLMULTITEXCOORD2HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t);
GLAPI PFNGLMULTITEXCOORD2HNVPROC glad_glMultiTexCoord2hNV;
GLAPI PFNGLMULTITEXCOORD2HNVPROC glad_debug_glMultiTexCoord2hNV;
#define glMultiTexCoord2hNV glad_debug_glMultiTexCoord2hNV
typedef void (APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC)(GLenum target, const GLhalfNV* v);
GLAPI PFNGLMULTITEXCOORD2HVNVPROC glad_glMultiTexCoord2hvNV;
GLAPI PFNGLMULTITEXCOORD2HVNVPROC glad_debug_glMultiTexCoord2hvNV;
#define glMultiTexCoord2hvNV glad_debug_glMultiTexCoord2hvNV
typedef void (APIENTRYP PFNGLMULTITEXCOORD3HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
GLAPI PFNGLMULTITEXCOORD3HNVPROC glad_glMultiTexCoord3hNV;
GLAPI PFNGLMULTITEXCOORD3HNVPROC glad_debug_glMultiTexCoord3hNV;
#define glMultiTexCoord3hNV glad_debug_glMultiTexCoord3hNV
typedef void (APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC)(GLenum target, const GLhalfNV* v);
GLAPI PFNGLMULTITEXCOORD3HVNVPROC glad_glMultiTexCoord3hvNV;
GLAPI PFNGLMULTITEXCOORD3HVNVPROC glad_debug_glMultiTexCoord3hvNV;
#define glMultiTexCoord3hvNV glad_debug_glMultiTexCoord3hvNV
typedef void (APIENTRYP PFNGLMULTITEXCOORD4HNVPROC)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
GLAPI PFNGLMULTITEXCOORD4HNVPROC glad_glMultiTexCoord4hNV;
GLAPI PFNGLMULTITEXCOORD4HNVPROC glad_debug_glMultiTexCoord4hNV;
#define glMultiTexCoord4hNV glad_debug_glMultiTexCoord4hNV
typedef void (APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC)(GLenum target, const GLhalfNV* v);
GLAPI PFNGLMULTITEXCOORD4HVNVPROC glad_glMultiTexCoord4hvNV;
GLAPI PFNGLMULTITEXCOORD4HVNVPROC glad_debug_glMultiTexCoord4hvNV;
#define glMultiTexCoord4hvNV glad_debug_glMultiTexCoord4hvNV
typedef void (APIENTRYP PFNGLFOGCOORDHNVPROC)(GLhalfNV fog);
GLAPI PFNGLFOGCOORDHNVPROC glad_glFogCoordhNV;
GLAPI PFNGLFOGCOORDHNVPROC glad_debug_glFogCoordhNV;
#define glFogCoordhNV glad_debug_glFogCoordhNV
typedef void (APIENTRYP PFNGLFOGCOORDHVNVPROC)(const GLhalfNV* fog);
GLAPI PFNGLFOGCOORDHVNVPROC glad_glFogCoordhvNV;
GLAPI PFNGLFOGCOORDHVNVPROC glad_debug_glFogCoordhvNV;
#define glFogCoordhvNV glad_debug_glFogCoordhvNV
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HNVPROC)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
GLAPI PFNGLSECONDARYCOLOR3HNVPROC glad_glSecondaryColor3hNV;
GLAPI PFNGLSECONDARYCOLOR3HNVPROC glad_debug_glSecondaryColor3hNV;
#define glSecondaryColor3hNV glad_debug_glSecondaryColor3hNV
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HVNVPROC)(const GLhalfNV* v);
GLAPI PFNGLSECONDARYCOLOR3HVNVPROC glad_glSecondaryColor3hvNV;
GLAPI PFNGLSECONDARYCOLOR3HVNVPROC glad_debug_glSecondaryColor3hvNV;
#define glSecondaryColor3hvNV glad_debug_glSecondaryColor3hvNV
typedef void (APIENTRYP PFNGLVERTEXWEIGHTHNVPROC)(GLhalfNV weight);
GLAPI PFNGLVERTEXWEIGHTHNVPROC glad_glVertexWeighthNV;
GLAPI PFNGLVERTEXWEIGHTHNVPROC glad_debug_glVertexWeighthNV;
#define glVertexWeighthNV glad_debug_glVertexWeighthNV
typedef void (APIENTRYP PFNGLVERTEXWEIGHTHVNVPROC)(const GLhalfNV* weight);
GLAPI PFNGLVERTEXWEIGHTHVNVPROC glad_glVertexWeighthvNV;
GLAPI PFNGLVERTEXWEIGHTHVNVPROC glad_debug_glVertexWeighthvNV;
#define glVertexWeighthvNV glad_debug_glVertexWeighthvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB1HNVPROC)(GLuint index, GLhalfNV x);
GLAPI PFNGLVERTEXATTRIB1HNVPROC glad_glVertexAttrib1hNV;
GLAPI PFNGLVERTEXATTRIB1HNVPROC glad_debug_glVertexAttrib1hNV;
#define glVertexAttrib1hNV glad_debug_glVertexAttrib1hNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB1HVNVPROC)(GLuint index, const GLhalfNV* v);
GLAPI PFNGLVERTEXATTRIB1HVNVPROC glad_glVertexAttrib1hvNV;
GLAPI PFNGLVERTEXATTRIB1HVNVPROC glad_debug_glVertexAttrib1hvNV;
#define glVertexAttrib1hvNV glad_debug_glVertexAttrib1hvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB2HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y);
GLAPI PFNGLVERTEXATTRIB2HNVPROC glad_glVertexAttrib2hNV;
GLAPI PFNGLVERTEXATTRIB2HNVPROC glad_debug_glVertexAttrib2hNV;
#define glVertexAttrib2hNV glad_debug_glVertexAttrib2hNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB2HVNVPROC)(GLuint index, const GLhalfNV* v);
GLAPI PFNGLVERTEXATTRIB2HVNVPROC glad_glVertexAttrib2hvNV;
GLAPI PFNGLVERTEXATTRIB2HVNVPROC glad_debug_glVertexAttrib2hvNV;
#define glVertexAttrib2hvNV glad_debug_glVertexAttrib2hvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB3HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
GLAPI PFNGLVERTEXATTRIB3HNVPROC glad_glVertexAttrib3hNV;
GLAPI PFNGLVERTEXATTRIB3HNVPROC glad_debug_glVertexAttrib3hNV;
#define glVertexAttrib3hNV glad_debug_glVertexAttrib3hNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB3HVNVPROC)(GLuint index, const GLhalfNV* v);
GLAPI PFNGLVERTEXATTRIB3HVNVPROC glad_glVertexAttrib3hvNV;
GLAPI PFNGLVERTEXATTRIB3HVNVPROC glad_debug_glVertexAttrib3hvNV;
#define glVertexAttrib3hvNV glad_debug_glVertexAttrib3hvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4HNVPROC)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
GLAPI PFNGLVERTEXATTRIB4HNVPROC glad_glVertexAttrib4hNV;
GLAPI PFNGLVERTEXATTRIB4HNVPROC glad_debug_glVertexAttrib4hNV;
#define glVertexAttrib4hNV glad_debug_glVertexAttrib4hNV
typedef void (APIENTRYP PFNGLVERTEXATTRIB4HVNVPROC)(GLuint index, const GLhalfNV* v);
GLAPI PFNGLVERTEXATTRIB4HVNVPROC glad_glVertexAttrib4hvNV;
GLAPI PFNGLVERTEXATTRIB4HVNVPROC glad_debug_glVertexAttrib4hvNV;
#define glVertexAttrib4hvNV glad_debug_glVertexAttrib4hvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS1HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV* v);
GLAPI PFNGLVERTEXATTRIBS1HVNVPROC glad_glVertexAttribs1hvNV;
GLAPI PFNGLVERTEXATTRIBS1HVNVPROC glad_debug_glVertexAttribs1hvNV;
#define glVertexAttribs1hvNV glad_debug_glVertexAttribs1hvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS2HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV* v);
GLAPI PFNGLVERTEXATTRIBS2HVNVPROC glad_glVertexAttribs2hvNV;
GLAPI PFNGLVERTEXATTRIBS2HVNVPROC glad_debug_glVertexAttribs2hvNV;
#define glVertexAttribs2hvNV glad_debug_glVertexAttribs2hvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS3HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV* v);
GLAPI PFNGLVERTEXATTRIBS3HVNVPROC glad_glVertexAttribs3hvNV;
GLAPI PFNGLVERTEXATTRIBS3HVNVPROC glad_debug_glVertexAttribs3hvNV;
#define glVertexAttribs3hvNV glad_debug_glVertexAttribs3hvNV
typedef void (APIENTRYP PFNGLVERTEXATTRIBS4HVNVPROC)(GLuint index, GLsizei n, const GLhalfNV* v);
GLAPI PFNGLVERTEXATTRIBS4HVNVPROC glad_glVertexAttribs4hvNV;
GLAPI PFNGLVERTEXATTRIBS4HVNVPROC glad_debug_glVertexAttribs4hvNV;
#define glVertexAttribs4hvNV glad_debug_glVertexAttribs4hvNV
#endif
#ifndef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 1
GLAPI int GLAD_GL_ARB_ES3_2_compatibility;
typedef void (APIENTRYP PFNGLPRIMITIVEBOUNDINGBOXARBPROC)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
GLAPI PFNGLPRIMITIVEBOUNDINGBOXARBPROC glad_glPrimitiveBoundingBoxARB;
GLAPI PFNGLPRIMITIVEBOUNDINGBOXARBPROC glad_debug_glPrimitiveBoundingBoxARB;
#define glPrimitiveBoundingBoxARB glad_debug_glPrimitiveBoundingBoxARB
#endif
#ifndef GL_ATI_texture_mirror_once
#define GL_ATI_texture_mirror_once 1
GLAPI int GLAD_GL_ATI_texture_mirror_once;
#endif
#ifndef GL_IBM_rasterpos_clip
#define GL_IBM_rasterpos_clip 1
GLAPI int GLAD_GL_IBM_rasterpos_clip;
#endif
#ifndef GL_SGIX_shadow
#define GL_SGIX_shadow 1
GLAPI int GLAD_GL_SGIX_shadow;
#endif
#ifndef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 1
GLAPI int GLAD_GL_EXT_polygon_offset_clamp;
typedef void (APIENTRYP PFNGLPOLYGONOFFSETCLAMPEXTPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
GLAPI PFNGLPOLYGONOFFSETCLAMPEXTPROC glad_glPolygonOffsetClampEXT;
GLAPI PFNGLPOLYGONOFFSETCLAMPEXTPROC glad_debug_glPolygonOffsetClampEXT;
#define glPolygonOffsetClampEXT glad_debug_glPolygonOffsetClampEXT
#endif
#ifndef GL_NV_deep_texture3D
#define GL_NV_deep_texture3D 1
GLAPI int GLAD_GL_NV_deep_texture3D;
#endif
#ifndef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 1
GLAPI int GLAD_GL_ARB_shader_draw_parameters;
#endif
#ifndef GL_SGIX_calligraphic_fragment
#define GL_SGIX_calligraphic_fragment 1
GLAPI int GLAD_GL_SGIX_calligraphic_fragment;
#endif
#ifndef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 1
GLAPI int GLAD_GL_ARB_shader_bit_encoding;
#endif
#ifndef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array 1
GLAPI int GLAD_GL_EXT_compiled_vertex_array;
typedef void (APIENTRYP PFNGLLOCKARRAYSEXTPROC)(GLint first, GLsizei count);
GLAPI PFNGLLOCKARRAYSEXTPROC glad_glLockArraysEXT;
GLAPI PFNGLLOCKARRAYSEXTPROC glad_debug_glLockArraysEXT;
#define glLockArraysEXT glad_debug_glLockArraysEXT
typedef void (APIENTRYP PFNGLUNLOCKARRAYSEXTPROC)();
GLAPI PFNGLUNLOCKARRAYSEXTPROC glad_glUnlockArraysEXT;
GLAPI PFNGLUNLOCKARRAYSEXTPROC glad_debug_glUnlockArraysEXT;
#define glUnlockArraysEXT glad_debug_glUnlockArraysEXT
#endif
#ifndef GL_NV_depth_buffer_float
#define GL_NV_depth_buffer_float 1
GLAPI int GLAD_GL_NV_depth_buffer_float;
typedef void (APIENTRYP PFNGLDEPTHRANGEDNVPROC)(GLdouble zNear, GLdouble zFar);
GLAPI PFNGLDEPTHRANGEDNVPROC glad_glDepthRangedNV;
GLAPI PFNGLDEPTHRANGEDNVPROC glad_debug_glDepthRangedNV;
#define glDepthRangedNV glad_debug_glDepthRangedNV
typedef void (APIENTRYP PFNGLCLEARDEPTHDNVPROC)(GLdouble depth);
GLAPI PFNGLCLEARDEPTHDNVPROC glad_glClearDepthdNV;
GLAPI PFNGLCLEARDEPTHDNVPROC glad_debug_glClearDepthdNV;
#define glClearDepthdNV glad_debug_glClearDepthdNV
typedef void (APIENTRYP PFNGLDEPTHBOUNDSDNVPROC)(GLdouble zmin, GLdouble zmax);
GLAPI PFNGLDEPTHBOUNDSDNVPROC glad_glDepthBoundsdNV;
GLAPI PFNGLDEPTHBOUNDSDNVPROC glad_debug_glDepthBoundsdNV;
#define glDepthBoundsdNV glad_debug_glDepthBoundsdNV
#endif
#ifndef GL_NV_occlusion_query
#define GL_NV_occlusion_query 1
GLAPI int GLAD_GL_NV_occlusion_query;
typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC)(GLsizei n, GLuint* ids);
GLAPI PFNGLGENOCCLUSIONQUERIESNVPROC glad_glGenOcclusionQueriesNV;
GLAPI PFNGLGENOCCLUSIONQUERIESNVPROC glad_debug_glGenOcclusionQueriesNV;
#define glGenOcclusionQueriesNV glad_debug_glGenOcclusionQueriesNV
typedef void (APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC)(GLsizei n, const GLuint* ids);
GLAPI PFNGLDELETEOCCLUSIONQUERIESNVPROC glad_glDeleteOcclusionQueriesNV;
GLAPI PFNGLDELETEOCCLUSIONQUERIESNVPROC glad_debug_glDeleteOcclusionQueriesNV;
#define glDeleteOcclusionQueriesNV glad_debug_glDeleteOcclusionQueriesNV
typedef GLboolean (APIENTRYP PFNGLISOCCLUSIONQUERYNVPROC)(GLuint id);
GLAPI PFNGLISOCCLUSIONQUERYNVPROC glad_glIsOcclusionQueryNV;
GLAPI PFNGLISOCCLUSIONQUERYNVPROC glad_debug_glIsOcclusionQueryNV;
#define glIsOcclusionQueryNV glad_debug_glIsOcclusionQueryNV
typedef void (APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC)(GLuint id);
GLAPI PFNGLBEGINOCCLUSIONQUERYNVPROC glad_glBeginOcclusionQueryNV;
GLAPI PFNGLBEGINOCCLUSIONQUERYNVPROC glad_debug_glBeginOcclusionQueryNV;
#define glBeginOcclusionQueryNV glad_debug_glBeginOcclusionQueryNV
typedef void (APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC)();
GLAPI PFNGLENDOCCLUSIONQUERYNVPROC glad_glEndOcclusionQueryNV;
GLAPI PFNGLENDOCCLUSIONQUERYNVPROC glad_debug_glEndOcclusionQueryNV;
#define glEndOcclusionQueryNV glad_debug_glEndOcclusionQueryNV
typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC)(GLuint id, GLenum pname, GLint* params);
GLAPI PFNGLGETOCCLUSIONQUERYIVNVPROC glad_glGetOcclusionQueryivNV;
GLAPI PFNGLGETOCCLUSIONQUERYIVNVPROC glad_debug_glGetOcclusionQueryivNV;
#define glGetOcclusionQueryivNV glad_debug_glGetOcclusionQueryivNV
typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC)(GLuint id, GLenum pname, GLuint* params);
GLAPI PFNGLGETOCCLUSIONQUERYUIVNVPROC glad_glGetOcclusionQueryuivNV;
GLAPI PFNGLGETOCCLUSIONQUERYUIVNVPROC glad_debug_glGetOcclusionQueryuivNV;
#define glGetOcclusionQueryuivNV glad_debug_glGetOcclusionQueryuivNV
#endif
#ifndef GL_APPLE_flush_buffer_range
#define GL_APPLE_flush_buffer_range 1
GLAPI int GLAD_GL_APPLE_flush_buffer_range;
typedef void (APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLBUFFERPARAMETERIAPPLEPROC glad_glBufferParameteriAPPLE;
GLAPI PFNGLBUFFERPARAMETERIAPPLEPROC glad_debug_glBufferParameteriAPPLE;
#define glBufferParameteriAPPLE glad_debug_glBufferParameteriAPPLE
typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)(GLenum target, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glad_glFlushMappedBufferRangeAPPLE;
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glad_debug_glFlushMappedBufferRangeAPPLE;
#define glFlushMappedBufferRangeAPPLE glad_debug_glFlushMappedBufferRangeAPPLE
#endif
#ifndef GL_ARB_imaging
#define GL_ARB_imaging 1
GLAPI int GLAD_GL_ARB_imaging;
typedef void (APIENTRYP PFNGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table);
GLAPI PFNGLCOLORTABLEPROC glad_glColorTable;
GLAPI PFNGLCOLORTABLEPROC glad_debug_glColorTable;
#define glColorTable glad_debug_glColorTable
typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv;
GLAPI PFNGLCOLORTABLEPARAMETERFVPROC glad_debug_glColorTableParameterfv;
#define glColorTableParameterfv glad_debug_glColorTableParameterfv
typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv;
GLAPI PFNGLCOLORTABLEPARAMETERIVPROC glad_debug_glColorTableParameteriv;
#define glColorTableParameteriv glad_debug_glColorTableParameteriv
typedef void (APIENTRYP PFNGLCOPYCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable;
GLAPI PFNGLCOPYCOLORTABLEPROC glad_debug_glCopyColorTable;
#define glCopyColorTable glad_debug_glCopyColorTable
typedef void (APIENTRYP PFNGLGETCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, void* table);
GLAPI PFNGLGETCOLORTABLEPROC glad_glGetColorTable;
GLAPI PFNGLGETCOLORTABLEPROC glad_debug_glGetColorTable;
#define glGetColorTable glad_debug_glGetColorTable
typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETCOLORTABLEPARAMETERFVPROC glad_glGetColorTableParameterfv;
GLAPI PFNGLGETCOLORTABLEPARAMETERFVPROC glad_debug_glGetColorTableParameterfv;
#define glGetColorTableParameterfv glad_debug_glGetColorTableParameterfv
typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETCOLORTABLEPARAMETERIVPROC glad_glGetColorTableParameteriv;
GLAPI PFNGLGETCOLORTABLEPARAMETERIVPROC glad_debug_glGetColorTableParameteriv;
#define glGetColorTableParameteriv glad_debug_glGetColorTableParameteriv
typedef void (APIENTRYP PFNGLCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCOLORSUBTABLEPROC glad_glColorSubTable;
GLAPI PFNGLCOLORSUBTABLEPROC glad_debug_glColorSubTable;
#define glColorSubTable glad_debug_glColorSubTable
typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable;
GLAPI PFNGLCOPYCOLORSUBTABLEPROC glad_debug_glCopyColorSubTable;
#define glCopyColorSubTable glad_debug_glCopyColorSubTable
typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image);
GLAPI PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D;
GLAPI PFNGLCONVOLUTIONFILTER1DPROC glad_debug_glConvolutionFilter1D;
#define glConvolutionFilter1D glad_debug_glConvolutionFilter1D
typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image);
GLAPI PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D;
GLAPI PFNGLCONVOLUTIONFILTER2DPROC glad_debug_glConvolutionFilter2D;
#define glConvolutionFilter2D glad_debug_glConvolutionFilter2D
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat params);
GLAPI PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf;
GLAPI PFNGLCONVOLUTIONPARAMETERFPROC glad_debug_glConvolutionParameterf;
#define glConvolutionParameterf glad_debug_glConvolutionParameterf
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv;
GLAPI PFNGLCONVOLUTIONPARAMETERFVPROC glad_debug_glConvolutionParameterfv;
#define glConvolutionParameterfv glad_debug_glConvolutionParameterfv
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC)(GLenum target, GLenum pname, GLint params);
GLAPI PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri;
GLAPI PFNGLCONVOLUTIONPARAMETERIPROC glad_debug_glConvolutionParameteri;
#define glConvolutionParameteri glad_debug_glConvolutionParameteri
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv;
GLAPI PFNGLCONVOLUTIONPARAMETERIVPROC glad_debug_glConvolutionParameteriv;
#define glConvolutionParameteriv glad_debug_glConvolutionParameteriv
typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D;
GLAPI PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_debug_glCopyConvolutionFilter1D;
#define glCopyConvolutionFilter1D glad_debug_glCopyConvolutionFilter1D
typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D;
GLAPI PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_debug_glCopyConvolutionFilter2D;
#define glCopyConvolutionFilter2D glad_debug_glCopyConvolutionFilter2D
typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, void* image);
GLAPI PFNGLGETCONVOLUTIONFILTERPROC glad_glGetConvolutionFilter;
GLAPI PFNGLGETCONVOLUTIONFILTERPROC glad_debug_glGetConvolutionFilter;
#define glGetConvolutionFilter glad_debug_glGetConvolutionFilter
typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETCONVOLUTIONPARAMETERFVPROC glad_glGetConvolutionParameterfv;
GLAPI PFNGLGETCONVOLUTIONPARAMETERFVPROC glad_debug_glGetConvolutionParameterfv;
#define glGetConvolutionParameterfv glad_debug_glGetConvolutionParameterfv
typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETCONVOLUTIONPARAMETERIVPROC glad_glGetConvolutionParameteriv;
GLAPI PFNGLGETCONVOLUTIONPARAMETERIVPROC glad_debug_glGetConvolutionParameteriv;
#define glGetConvolutionParameteriv glad_debug_glGetConvolutionParameteriv
typedef void (APIENTRYP PFNGLGETSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span);
GLAPI PFNGLGETSEPARABLEFILTERPROC glad_glGetSeparableFilter;
GLAPI PFNGLGETSEPARABLEFILTERPROC glad_debug_glGetSeparableFilter;
#define glGetSeparableFilter glad_debug_glGetSeparableFilter
typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column);
GLAPI PFNGLSEPARABLEFILTER2DPROC glad_glSeparableFilter2D;
GLAPI PFNGLSEPARABLEFILTER2DPROC glad_debug_glSeparableFilter2D;
#define glSeparableFilter2D glad_debug_glSeparableFilter2D
typedef void (APIENTRYP PFNGLGETHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
GLAPI PFNGLGETHISTOGRAMPROC glad_glGetHistogram;
GLAPI PFNGLGETHISTOGRAMPROC glad_debug_glGetHistogram;
#define glGetHistogram glad_debug_glGetHistogram
typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETHISTOGRAMPARAMETERFVPROC glad_glGetHistogramParameterfv;
GLAPI PFNGLGETHISTOGRAMPARAMETERFVPROC glad_debug_glGetHistogramParameterfv;
#define glGetHistogramParameterfv glad_debug_glGetHistogramParameterfv
typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETHISTOGRAMPARAMETERIVPROC glad_glGetHistogramParameteriv;
GLAPI PFNGLGETHISTOGRAMPARAMETERIVPROC glad_debug_glGetHistogramParameteriv;
#define glGetHistogramParameteriv glad_debug_glGetHistogramParameteriv
typedef void (APIENTRYP PFNGLGETMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values);
GLAPI PFNGLGETMINMAXPROC glad_glGetMinmax;
GLAPI PFNGLGETMINMAXPROC glad_debug_glGetMinmax;
#define glGetMinmax glad_debug_glGetMinmax
typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETMINMAXPARAMETERFVPROC glad_glGetMinmaxParameterfv;
GLAPI PFNGLGETMINMAXPARAMETERFVPROC glad_debug_glGetMinmaxParameterfv;
#define glGetMinmaxParameterfv glad_debug_glGetMinmaxParameterfv
typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETMINMAXPARAMETERIVPROC glad_glGetMinmaxParameteriv;
GLAPI PFNGLGETMINMAXPARAMETERIVPROC glad_debug_glGetMinmaxParameteriv;
#define glGetMinmaxParameteriv glad_debug_glGetMinmaxParameteriv
typedef void (APIENTRYP PFNGLHISTOGRAMPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
GLAPI PFNGLHISTOGRAMPROC glad_glHistogram;
GLAPI PFNGLHISTOGRAMPROC glad_debug_glHistogram;
#define glHistogram glad_debug_glHistogram
typedef void (APIENTRYP PFNGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
GLAPI PFNGLMINMAXPROC glad_glMinmax;
GLAPI PFNGLMINMAXPROC glad_debug_glMinmax;
#define glMinmax glad_debug_glMinmax
typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC)(GLenum target);
GLAPI PFNGLRESETHISTOGRAMPROC glad_glResetHistogram;
GLAPI PFNGLRESETHISTOGRAMPROC glad_debug_glResetHistogram;
#define glResetHistogram glad_debug_glResetHistogram
typedef void (APIENTRYP PFNGLRESETMINMAXPROC)(GLenum target);
GLAPI PFNGLRESETMINMAXPROC glad_glResetMinmax;
GLAPI PFNGLRESETMINMAXPROC glad_debug_glResetMinmax;
#define glResetMinmax glad_debug_glResetMinmax
#endif
#ifndef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float 1
GLAPI int GLAD_GL_NV_shader_atomic_float;
#endif
#ifndef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 1
GLAPI int GLAD_GL_ARB_draw_buffers_blend;
typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC)(GLuint buf, GLenum mode);
GLAPI PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB;
GLAPI PFNGLBLENDEQUATIONIARBPROC glad_debug_glBlendEquationiARB;
#define glBlendEquationiARB glad_debug_glBlendEquationiARB
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLAPI PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB;
GLAPI PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_debug_glBlendEquationSeparateiARB;
#define glBlendEquationSeparateiARB glad_debug_glBlendEquationSeparateiARB
typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC)(GLuint buf, GLenum src, GLenum dst);
GLAPI PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB;
GLAPI PFNGLBLENDFUNCIARBPROC glad_debug_glBlendFunciARB;
#define glBlendFunciARB glad_debug_glBlendFunciARB
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB;
GLAPI PFNGLBLENDFUNCSEPARATEIARBPROC glad_debug_glBlendFuncSeparateiARB;
#define glBlendFuncSeparateiARB glad_debug_glBlendFuncSeparateiARB
#endif
#ifndef GL_AMD_gcn_shader
#define GL_AMD_gcn_shader 1
GLAPI int GLAD_GL_AMD_gcn_shader;
#endif
#ifndef GL_AMD_blend_minmax_factor
#define GL_AMD_blend_minmax_factor 1
GLAPI int GLAD_GL_AMD_blend_minmax_factor;
#endif
#ifndef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 1
GLAPI int GLAD_GL_EXT_texture_sRGB_decode;
#endif
#ifndef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 1
GLAPI int GLAD_GL_ARB_shading_language_420pack;
#endif
#ifndef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 1
GLAPI int GLAD_GL_ARB_shader_viewport_layer_array;
#endif
#ifndef GL_ATI_meminfo
#define GL_ATI_meminfo 1
GLAPI int GLAD_GL_ATI_meminfo;
#endif
#ifndef GL_EXT_abgr
#define GL_EXT_abgr 1
GLAPI int GLAD_GL_EXT_abgr;
#endif
#ifndef GL_AMD_pinned_memory
#define GL_AMD_pinned_memory 1
GLAPI int GLAD_GL_AMD_pinned_memory;
#endif
#ifndef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm 1
GLAPI int GLAD_GL_EXT_texture_snorm;
#endif
#ifndef GL_SGIX_texture_coordinate_clamp
#define GL_SGIX_texture_coordinate_clamp 1
GLAPI int GLAD_GL_SGIX_texture_coordinate_clamp;
#endif
#ifndef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 1
GLAPI int GLAD_GL_ARB_clear_buffer_object;
typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData;
GLAPI PFNGLCLEARBUFFERDATAPROC glad_debug_glClearBufferData;
#define glClearBufferData glad_debug_glClearBufferData
typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
GLAPI PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData;
GLAPI PFNGLCLEARBUFFERSUBDATAPROC glad_debug_glClearBufferSubData;
#define glClearBufferSubData glad_debug_glClearBufferSubData
#endif
#ifndef GL_ARB_multisample
#define GL_ARB_multisample 1
GLAPI int GLAD_GL_ARB_multisample;
typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);
GLAPI PFNGLSAMPLECOVERAGEARBPROC glad_glSampleCoverageARB;
GLAPI PFNGLSAMPLECOVERAGEARBPROC glad_debug_glSampleCoverageARB;
#define glSampleCoverageARB glad_debug_glSampleCoverageARB
#endif
#ifndef GL_EXT_debug_label
#define GL_EXT_debug_label 1
GLAPI int GLAD_GL_EXT_debug_label;
typedef void (APIENTRYP PFNGLLABELOBJECTEXTPROC)(GLenum type, GLuint object, GLsizei length, const GLchar* label);
GLAPI PFNGLLABELOBJECTEXTPROC glad_glLabelObjectEXT;
GLAPI PFNGLLABELOBJECTEXTPROC glad_debug_glLabelObjectEXT;
#define glLabelObjectEXT glad_debug_glLabelObjectEXT
typedef void (APIENTRYP PFNGLGETOBJECTLABELEXTPROC)(GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar* label);
GLAPI PFNGLGETOBJECTLABELEXTPROC glad_glGetObjectLabelEXT;
GLAPI PFNGLGETOBJECTLABELEXTPROC glad_debug_glGetObjectLabelEXT;
#define glGetObjectLabelEXT glad_debug_glGetObjectLabelEXT
#endif
#ifndef GL_ARB_sample_shading
#define GL_ARB_sample_shading 1
GLAPI int GLAD_GL_ARB_sample_shading;
typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC)(GLfloat value);
GLAPI PFNGLMINSAMPLESHADINGARBPROC glad_glMinSampleShadingARB;
GLAPI PFNGLMINSAMPLESHADINGARBPROC glad_debug_glMinSampleShadingARB;
#define glMinSampleShadingARB glad_debug_glMinSampleShadingARB
#endif
#ifndef GL_NV_internalformat_sample_query
#define GL_NV_internalformat_sample_query 1
GLAPI int GLAD_GL_NV_internalformat_sample_query;
typedef void (APIENTRYP PFNGLGETINTERNALFORMATSAMPLEIVNVPROC)(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params);
GLAPI PFNGLGETINTERNALFORMATSAMPLEIVNVPROC glad_glGetInternalformatSampleivNV;
GLAPI PFNGLGETINTERNALFORMATSAMPLEIVNVPROC glad_debug_glGetInternalformatSampleivNV;
#define glGetInternalformatSampleivNV glad_debug_glGetInternalformatSampleivNV
#endif
#ifndef GL_INTEL_map_texture
#define GL_INTEL_map_texture 1
GLAPI int GLAD_GL_INTEL_map_texture;
typedef void (APIENTRYP PFNGLSYNCTEXTUREINTELPROC)(GLuint texture);
GLAPI PFNGLSYNCTEXTUREINTELPROC glad_glSyncTextureINTEL;
GLAPI PFNGLSYNCTEXTUREINTELPROC glad_debug_glSyncTextureINTEL;
#define glSyncTextureINTEL glad_debug_glSyncTextureINTEL
typedef void (APIENTRYP PFNGLUNMAPTEXTURE2DINTELPROC)(GLuint texture, GLint level);
GLAPI PFNGLUNMAPTEXTURE2DINTELPROC glad_glUnmapTexture2DINTEL;
GLAPI PFNGLUNMAPTEXTURE2DINTELPROC glad_debug_glUnmapTexture2DINTEL;
#define glUnmapTexture2DINTEL glad_debug_glUnmapTexture2DINTEL
typedef void* (APIENTRYP PFNGLMAPTEXTURE2DINTELPROC)(GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum* layout);
GLAPI PFNGLMAPTEXTURE2DINTELPROC glad_glMapTexture2DINTEL;
GLAPI PFNGLMAPTEXTURE2DINTELPROC glad_debug_glMapTexture2DINTEL;
#define glMapTexture2DINTEL glad_debug_glMapTexture2DINTEL
#endif
#ifndef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar 1
GLAPI int GLAD_GL_ARB_texture_env_crossbar;
#endif
#ifndef GL_EXT_422_pixels
#define GL_EXT_422_pixels 1
GLAPI int GLAD_GL_EXT_422_pixels;
#endif
#ifndef GL_NV_conservative_raster_pre_snap_triangles
#define GL_NV_conservative_raster_pre_snap_triangles 1
GLAPI int GLAD_GL_NV_conservative_raster_pre_snap_triangles;
typedef void (APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERINVPROC)(GLenum pname, GLint param);
GLAPI PFNGLCONSERVATIVERASTERPARAMETERINVPROC glad_glConservativeRasterParameteriNV;
GLAPI PFNGLCONSERVATIVERASTERPARAMETERINVPROC glad_debug_glConservativeRasterParameteriNV;
#define glConservativeRasterParameteriNV glad_debug_glConservativeRasterParameteriNV
#endif
#ifndef GL_ARB_compute_shader
#define GL_ARB_compute_shader 1
GLAPI int GLAD_GL_ARB_compute_shader;
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GLAPI PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute;
GLAPI PFNGLDISPATCHCOMPUTEPROC glad_debug_glDispatchCompute;
#define glDispatchCompute glad_debug_glDispatchCompute
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
GLAPI PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect;
GLAPI PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_debug_glDispatchComputeIndirect;
#define glDispatchComputeIndirect glad_debug_glDispatchComputeIndirect
#endif
#ifndef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op 1
GLAPI int GLAD_GL_EXT_blend_logic_op;
#endif
#ifndef GL_IBM_cull_vertex
#define GL_IBM_cull_vertex 1
GLAPI int GLAD_GL_IBM_cull_vertex;
#endif
#ifndef GL_IBM_vertex_array_lists
#define GL_IBM_vertex_array_lists 1
GLAPI int GLAD_GL_IBM_vertex_array_lists;
typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
GLAPI PFNGLCOLORPOINTERLISTIBMPROC glad_glColorPointerListIBM;
GLAPI PFNGLCOLORPOINTERLISTIBMPROC glad_debug_glColorPointerListIBM;
#define glColorPointerListIBM glad_debug_glColorPointerListIBM
typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
GLAPI PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glad_glSecondaryColorPointerListIBM;
GLAPI PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glad_debug_glSecondaryColorPointerListIBM;
#define glSecondaryColorPointerListIBM glad_debug_glSecondaryColorPointerListIBM
typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC)(GLint stride, const GLboolean** pointer, GLint ptrstride);
GLAPI PFNGLEDGEFLAGPOINTERLISTIBMPROC glad_glEdgeFlagPointerListIBM;
GLAPI PFNGLEDGEFLAGPOINTERLISTIBMPROC glad_debug_glEdgeFlagPointerListIBM;
#define glEdgeFlagPointerListIBM glad_debug_glEdgeFlagPointerListIBM
typedef void (APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC)(GLenum type, GLint stride, const void** pointer, GLint ptrstride);
GLAPI PFNGLFOGCOORDPOINTERLISTIBMPROC glad_glFogCoordPointerListIBM;
GLAPI PFNGLFOGCOORDPOINTERLISTIBMPROC glad_debug_glFogCoordPointerListIBM;
#define glFogCoordPointerListIBM glad_debug_glFogCoordPointerListIBM
typedef void (APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC)(GLenum type, GLint stride, const void** pointer, GLint ptrstride);
GLAPI PFNGLINDEXPOINTERLISTIBMPROC glad_glIndexPointerListIBM;
GLAPI PFNGLINDEXPOINTERLISTIBMPROC glad_debug_glIndexPointerListIBM;
#define glIndexPointerListIBM glad_debug_glIndexPointerListIBM
typedef void (APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC)(GLenum type, GLint stride, const void** pointer, GLint ptrstride);
GLAPI PFNGLNORMALPOINTERLISTIBMPROC glad_glNormalPointerListIBM;
GLAPI PFNGLNORMALPOINTERLISTIBMPROC glad_debug_glNormalPointerListIBM;
#define glNormalPointerListIBM glad_debug_glNormalPointerListIBM
typedef void (APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
GLAPI PFNGLTEXCOORDPOINTERLISTIBMPROC glad_glTexCoordPointerListIBM;
GLAPI PFNGLTEXCOORDPOINTERLISTIBMPROC glad_debug_glTexCoordPointerListIBM;
#define glTexCoordPointerListIBM glad_debug_glTexCoordPointerListIBM
typedef void (APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride);
GLAPI PFNGLVERTEXPOINTERLISTIBMPROC glad_glVertexPointerListIBM;
GLAPI PFNGLVERTEXPOINTERLISTIBMPROC glad_debug_glVertexPointerListIBM;
#define glVertexPointerListIBM glad_debug_glVertexPointerListIBM
#endif
#ifndef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float 1
GLAPI int GLAD_GL_ARB_color_buffer_float;
typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
GLAPI PFNGLCLAMPCOLORARBPROC glad_glClampColorARB;
GLAPI PFNGLCLAMPCOLORARBPROC glad_debug_glClampColorARB;
#define glClampColorARB glad_debug_glClampColorARB
#endif
#ifndef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 1
GLAPI int GLAD_GL_ARB_bindless_texture;
typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLEARBPROC)(GLuint texture);
GLAPI PFNGLGETTEXTUREHANDLEARBPROC glad_glGetTextureHandleARB;
GLAPI PFNGLGETTEXTUREHANDLEARBPROC glad_debug_glGetTextureHandleARB;
#define glGetTextureHandleARB glad_debug_glGetTextureHandleARB
typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEARBPROC)(GLuint texture, GLuint sampler);
GLAPI PFNGLGETTEXTURESAMPLERHANDLEARBPROC glad_glGetTextureSamplerHandleARB;
GLAPI PFNGLGETTEXTURESAMPLERHANDLEARBPROC glad_debug_glGetTextureSamplerHandleARB;
#define glGetTextureSamplerHandleARB glad_debug_glGetTextureSamplerHandleARB
typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
GLAPI PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glad_glMakeTextureHandleResidentARB;
GLAPI PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glad_debug_glMakeTextureHandleResidentARB;
#define glMakeTextureHandleResidentARB glad_debug_glMakeTextureHandleResidentARB
typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)(GLuint64 handle);
GLAPI PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glad_glMakeTextureHandleNonResidentARB;
GLAPI PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glad_debug_glMakeTextureHandleNonResidentARB;
#define glMakeTextureHandleNonResidentARB glad_debug_glMakeTextureHandleNonResidentARB
typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLEARBPROC)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
GLAPI PFNGLGETIMAGEHANDLEARBPROC glad_glGetImageHandleARB;
GLAPI PFNGLGETIMAGEHANDLEARBPROC glad_debug_glGetImageHandleARB;
#define glGetImageHandleARB glad_debug_glGetImageHandleARB
typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle, GLenum access);
GLAPI PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glad_glMakeImageHandleResidentARB;
GLAPI PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glad_debug_glMakeImageHandleResidentARB;
#define glMakeImageHandleResidentARB glad_debug_glMakeImageHandleResidentARB
typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)(GLuint64 handle);
GLAPI PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glad_glMakeImageHandleNonResidentARB;
GLAPI PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glad_debug_glMakeImageHandleNonResidentARB;
#define glMakeImageHandleNonResidentARB glad_debug_glMakeImageHandleNonResidentARB
typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64ARBPROC)(GLint location, GLuint64 value);
GLAPI PFNGLUNIFORMHANDLEUI64ARBPROC glad_glUniformHandleui64ARB;
GLAPI PFNGLUNIFORMHANDLEUI64ARBPROC glad_debug_glUniformHandleui64ARB;
#define glUniformHandleui64ARB glad_debug_glUniformHandleui64ARB
typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLUNIFORMHANDLEUI64VARBPROC glad_glUniformHandleui64vARB;
GLAPI PFNGLUNIFORMHANDLEUI64VARBPROC glad_debug_glUniformHandleui64vARB;
#define glUniformHandleui64vARB glad_debug_glUniformHandleui64vARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)(GLuint program, GLint location, GLuint64 value);
GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glad_glProgramUniformHandleui64ARB;
GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glad_debug_glProgramUniformHandleui64ARB;
#define glProgramUniformHandleui64ARB glad_debug_glProgramUniformHandleui64ARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* values);
GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glad_glProgramUniformHandleui64vARB;
GLAPI PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glad_debug_glProgramUniformHandleui64vARB;
#define glProgramUniformHandleui64vARB glad_debug_glProgramUniformHandleui64vARB
typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTARBPROC)(GLuint64 handle);
GLAPI PFNGLISTEXTUREHANDLERESIDENTARBPROC glad_glIsTextureHandleResidentARB;
GLAPI PFNGLISTEXTUREHANDLERESIDENTARBPROC glad_debug_glIsTextureHandleResidentARB;
#define glIsTextureHandleResidentARB glad_debug_glIsTextureHandleResidentARB
typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTARBPROC)(GLuint64 handle);
GLAPI PFNGLISIMAGEHANDLERESIDENTARBPROC glad_glIsImageHandleResidentARB;
GLAPI PFNGLISIMAGEHANDLERESIDENTARBPROC glad_debug_glIsImageHandleResidentARB;
#define glIsImageHandleResidentARB glad_debug_glIsImageHandleResidentARB
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64ARBPROC)(GLuint index, GLuint64EXT x);
GLAPI PFNGLVERTEXATTRIBL1UI64ARBPROC glad_glVertexAttribL1ui64ARB;
GLAPI PFNGLVERTEXATTRIBL1UI64ARBPROC glad_debug_glVertexAttribL1ui64ARB;
#define glVertexAttribL1ui64ARB glad_debug_glVertexAttribL1ui64ARB
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VARBPROC)(GLuint index, const GLuint64EXT* v);
GLAPI PFNGLVERTEXATTRIBL1UI64VARBPROC glad_glVertexAttribL1ui64vARB;
GLAPI PFNGLVERTEXATTRIBL1UI64VARBPROC glad_debug_glVertexAttribL1ui64vARB;
#define glVertexAttribL1ui64vARB glad_debug_glVertexAttribL1ui64vARB
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VARBPROC)(GLuint index, GLenum pname, GLuint64EXT* params);
GLAPI PFNGLGETVERTEXATTRIBLUI64VARBPROC glad_glGetVertexAttribLui64vARB;
GLAPI PFNGLGETVERTEXATTRIBLUI64VARBPROC glad_debug_glGetVertexAttribLui64vARB;
#define glGetVertexAttribLui64vARB glad_debug_glGetVertexAttribLui64vARB
#endif
#ifndef GL_ARB_window_pos
#define GL_ARB_window_pos 1
GLAPI int GLAD_GL_ARB_window_pos;
typedef void (APIENTRYP PFNGLWINDOWPOS2DARBPROC)(GLdouble x, GLdouble y);
GLAPI PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB;
GLAPI PFNGLWINDOWPOS2DARBPROC glad_debug_glWindowPos2dARB;
#define glWindowPos2dARB glad_debug_glWindowPos2dARB
typedef void (APIENTRYP PFNGLWINDOWPOS2DVARBPROC)(const GLdouble* v);
GLAPI PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB;
GLAPI PFNGLWINDOWPOS2DVARBPROC glad_debug_glWindowPos2dvARB;
#define glWindowPos2dvARB glad_debug_glWindowPos2dvARB
typedef void (APIENTRYP PFNGLWINDOWPOS2FARBPROC)(GLfloat x, GLfloat y);
GLAPI PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB;
GLAPI PFNGLWINDOWPOS2FARBPROC glad_debug_glWindowPos2fARB;
#define glWindowPos2fARB glad_debug_glWindowPos2fARB
typedef void (APIENTRYP PFNGLWINDOWPOS2FVARBPROC)(const GLfloat* v);
GLAPI PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB;
GLAPI PFNGLWINDOWPOS2FVARBPROC glad_debug_glWindowPos2fvARB;
#define glWindowPos2fvARB glad_debug_glWindowPos2fvARB
typedef void (APIENTRYP PFNGLWINDOWPOS2IARBPROC)(GLint x, GLint y);
GLAPI PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB;
GLAPI PFNGLWINDOWPOS2IARBPROC glad_debug_glWindowPos2iARB;
#define glWindowPos2iARB glad_debug_glWindowPos2iARB
typedef void (APIENTRYP PFNGLWINDOWPOS2IVARBPROC)(const GLint* v);
GLAPI PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB;
GLAPI PFNGLWINDOWPOS2IVARBPROC glad_debug_glWindowPos2ivARB;
#define glWindowPos2ivARB glad_debug_glWindowPos2ivARB
typedef void (APIENTRYP PFNGLWINDOWPOS2SARBPROC)(GLshort x, GLshort y);
GLAPI PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB;
GLAPI PFNGLWINDOWPOS2SARBPROC glad_debug_glWindowPos2sARB;
#define glWindowPos2sARB glad_debug_glWindowPos2sARB
typedef void (APIENTRYP PFNGLWINDOWPOS2SVARBPROC)(const GLshort* v);
GLAPI PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB;
GLAPI PFNGLWINDOWPOS2SVARBPROC glad_debug_glWindowPos2svARB;
#define glWindowPos2svARB glad_debug_glWindowPos2svARB
typedef void (APIENTRYP PFNGLWINDOWPOS3DARBPROC)(GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB;
GLAPI PFNGLWINDOWPOS3DARBPROC glad_debug_glWindowPos3dARB;
#define glWindowPos3dARB glad_debug_glWindowPos3dARB
typedef void (APIENTRYP PFNGLWINDOWPOS3DVARBPROC)(const GLdouble* v);
GLAPI PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB;
GLAPI PFNGLWINDOWPOS3DVARBPROC glad_debug_glWindowPos3dvARB;
#define glWindowPos3dvARB glad_debug_glWindowPos3dvARB
typedef void (APIENTRYP PFNGLWINDOWPOS3FARBPROC)(GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB;
GLAPI PFNGLWINDOWPOS3FARBPROC glad_debug_glWindowPos3fARB;
#define glWindowPos3fARB glad_debug_glWindowPos3fARB
typedef void (APIENTRYP PFNGLWINDOWPOS3FVARBPROC)(const GLfloat* v);
GLAPI PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB;
GLAPI PFNGLWINDOWPOS3FVARBPROC glad_debug_glWindowPos3fvARB;
#define glWindowPos3fvARB glad_debug_glWindowPos3fvARB
typedef void (APIENTRYP PFNGLWINDOWPOS3IARBPROC)(GLint x, GLint y, GLint z);
GLAPI PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB;
GLAPI PFNGLWINDOWPOS3IARBPROC glad_debug_glWindowPos3iARB;
#define glWindowPos3iARB glad_debug_glWindowPos3iARB
typedef void (APIENTRYP PFNGLWINDOWPOS3IVARBPROC)(const GLint* v);
GLAPI PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB;
GLAPI PFNGLWINDOWPOS3IVARBPROC glad_debug_glWindowPos3ivARB;
#define glWindowPos3ivARB glad_debug_glWindowPos3ivARB
typedef void (APIENTRYP PFNGLWINDOWPOS3SARBPROC)(GLshort x, GLshort y, GLshort z);
GLAPI PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB;
GLAPI PFNGLWINDOWPOS3SARBPROC glad_debug_glWindowPos3sARB;
#define glWindowPos3sARB glad_debug_glWindowPos3sARB
typedef void (APIENTRYP PFNGLWINDOWPOS3SVARBPROC)(const GLshort* v);
GLAPI PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB;
GLAPI PFNGLWINDOWPOS3SVARBPROC glad_debug_glWindowPos3svARB;
#define glWindowPos3svARB glad_debug_glWindowPos3svARB
#endif
#ifndef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 1
GLAPI int GLAD_GL_ARB_internalformat_query;
typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params);
GLAPI PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ;
GLAPI PFNGLGETINTERNALFORMATIVPROC glad_debug_glGetInternalformativ;
#define glGetInternalformativ glad_debug_glGetInternalformativ
#endif
#ifndef GL_ARB_shadow
#define GL_ARB_shadow 1
GLAPI int GLAD_GL_ARB_shadow;
#endif
#ifndef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 1
GLAPI int GLAD_GL_ARB_texture_mirrored_repeat;
#endif
#ifndef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store 1
GLAPI int GLAD_GL_EXT_shader_image_load_store;
typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC)(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
GLAPI PFNGLBINDIMAGETEXTUREEXTPROC glad_glBindImageTextureEXT;
GLAPI PFNGLBINDIMAGETEXTUREEXTPROC glad_debug_glBindImageTextureEXT;
#define glBindImageTextureEXT glad_debug_glBindImageTextureEXT
typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIEREXTPROC glad_glMemoryBarrierEXT;
GLAPI PFNGLMEMORYBARRIEREXTPROC glad_debug_glMemoryBarrierEXT;
#define glMemoryBarrierEXT glad_debug_glMemoryBarrierEXT
#endif
#ifndef GL_EXT_copy_texture
#define GL_EXT_copy_texture 1
GLAPI int GLAD_GL_EXT_copy_texture;
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI PFNGLCOPYTEXIMAGE1DEXTPROC glad_glCopyTexImage1DEXT;
GLAPI PFNGLCOPYTEXIMAGE1DEXTPROC glad_debug_glCopyTexImage1DEXT;
#define glCopyTexImage1DEXT glad_debug_glCopyTexImage1DEXT
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
GLAPI PFNGLCOPYTEXIMAGE2DEXTPROC glad_glCopyTexImage2DEXT;
GLAPI PFNGLCOPYTEXIMAGE2DEXTPROC glad_debug_glCopyTexImage2DEXT;
#define glCopyTexImage2DEXT glad_debug_glCopyTexImage2DEXT
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_glCopyTexSubImage1DEXT;
GLAPI PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_debug_glCopyTexSubImage1DEXT;
#define glCopyTexSubImage1DEXT glad_debug_glCopyTexSubImage1DEXT
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_glCopyTexSubImage2DEXT;
GLAPI PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_debug_glCopyTexSubImage2DEXT;
#define glCopyTexSubImage2DEXT glad_debug_glCopyTexSubImage2DEXT
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_glCopyTexSubImage3DEXT;
GLAPI PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_debug_glCopyTexSubImage3DEXT;
#define glCopyTexSubImage3DEXT glad_debug_glCopyTexSubImage3DEXT
#endif
#ifndef GL_NV_register_combiners2
#define GL_NV_register_combiners2 1
GLAPI int GLAD_GL_NV_register_combiners2;
typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname, const GLfloat* params);
GLAPI PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glad_glCombinerStageParameterfvNV;
GLAPI PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glad_debug_glCombinerStageParameterfvNV;
#define glCombinerStageParameterfvNV glad_debug_glCombinerStageParameterfvNV
typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)(GLenum stage, GLenum pname, GLfloat* params);
GLAPI PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glad_glGetCombinerStageParameterfvNV;
GLAPI PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glad_debug_glGetCombinerStageParameterfvNV;
#define glGetCombinerStageParameterfvNV glad_debug_glGetCombinerStageParameterfvNV
#endif
#ifndef GL_SGIX_ycrcb_subsample
#define GL_SGIX_ycrcb_subsample 1
GLAPI int GLAD_GL_SGIX_ycrcb_subsample;
#endif
#ifndef GL_SGIX_ir_instrument1
#define GL_SGIX_ir_instrument1 1
GLAPI int GLAD_GL_SGIX_ir_instrument1;
#endif
#ifndef GL_NV_draw_texture
#define GL_NV_draw_texture 1
GLAPI int GLAD_GL_NV_draw_texture;
typedef void (APIENTRYP PFNGLDRAWTEXTURENVPROC)(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
GLAPI PFNGLDRAWTEXTURENVPROC glad_glDrawTextureNV;
GLAPI PFNGLDRAWTEXTURENVPROC glad_debug_glDrawTextureNV;
#define glDrawTextureNV glad_debug_glDrawTextureNV
#endif
#ifndef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent 1
GLAPI int GLAD_GL_EXT_texture_shared_exponent;
#endif
#ifndef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 1
GLAPI int GLAD_GL_EXT_draw_instanced;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC)(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
GLAPI PFNGLDRAWARRAYSINSTANCEDEXTPROC glad_glDrawArraysInstancedEXT;
GLAPI PFNGLDRAWARRAYSINSTANCEDEXTPROC glad_debug_glDrawArraysInstancedEXT;
#define glDrawArraysInstancedEXT glad_debug_glDrawArraysInstancedEXT
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
GLAPI PFNGLDRAWELEMENTSINSTANCEDEXTPROC glad_glDrawElementsInstancedEXT;
GLAPI PFNGLDRAWELEMENTSINSTANCEDEXTPROC glad_debug_glDrawElementsInstancedEXT;
#define glDrawElementsInstancedEXT glad_debug_glDrawElementsInstancedEXT
#endif
#ifndef GL_NV_copy_depth_to_color
#define GL_NV_copy_depth_to_color 1
GLAPI int GLAD_GL_NV_copy_depth_to_color;
#endif
#ifndef GL_ARB_viewport_array
#define GL_ARB_viewport_array 1
GLAPI int GLAD_GL_ARB_viewport_array;
typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat* v);
GLAPI PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
GLAPI PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv;
#define glViewportArrayv glad_debug_glViewportArrayv
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
GLAPI PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
GLAPI PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf;
#define glViewportIndexedf glad_debug_glViewportIndexedf
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat* v);
GLAPI PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
GLAPI PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv;
#define glViewportIndexedfv glad_debug_glViewportIndexedfv
typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint* v);
GLAPI PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
GLAPI PFNGLSCISSORARRAYVPROC glad_debug_glScissorArrayv;
#define glScissorArrayv glad_debug_glScissorArrayv
typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
GLAPI PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
GLAPI PFNGLSCISSORINDEXEDPROC glad_debug_glScissorIndexed;
#define glScissorIndexed glad_debug_glScissorIndexed
typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint* v);
GLAPI PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
GLAPI PFNGLSCISSORINDEXEDVPROC glad_debug_glScissorIndexedv;
#define glScissorIndexedv glad_debug_glScissorIndexedv
typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble* v);
GLAPI PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
GLAPI PFNGLDEPTHRANGEARRAYVPROC glad_debug_glDepthRangeArrayv;
#define glDepthRangeArrayv glad_debug_glDepthRangeArrayv
typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
GLAPI PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
GLAPI PFNGLDEPTHRANGEINDEXEDPROC glad_debug_glDepthRangeIndexed;
#define glDepthRangeIndexed glad_debug_glDepthRangeIndexed
typedef void (APIENTRYP PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat* data);
GLAPI PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
GLAPI PFNGLGETFLOATI_VPROC glad_debug_glGetFloati_v;
#define glGetFloati_v glad_debug_glGetFloati_v
typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble* data);
GLAPI PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
GLAPI PFNGLGETDOUBLEI_VPROC glad_debug_glGetDoublei_v;
#define glGetDoublei_v glad_debug_glGetDoublei_v
#endif
#ifndef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 1
GLAPI int GLAD_GL_ARB_separate_shader_objects;
typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
GLAPI PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
GLAPI PFNGLUSEPROGRAMSTAGESPROC glad_debug_glUseProgramStages;
#define glUseProgramStages glad_debug_glUseProgramStages
typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
GLAPI PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
GLAPI PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram;
#define glActiveShaderProgram glad_debug_glActiveShaderProgram
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar** strings);
GLAPI PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
GLAPI PFNGLCREATESHADERPROGRAMVPROC glad_debug_glCreateShaderProgramv;
#define glCreateShaderProgramv glad_debug_glCreateShaderProgramv
typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
GLAPI PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline;
#define glBindProgramPipeline glad_debug_glBindProgramPipeline
typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint* pipelines);
GLAPI PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
GLAPI PFNGLDELETEPROGRAMPIPELINESPROC glad_debug_glDeleteProgramPipelines;
#define glDeleteProgramPipelines glad_debug_glDeleteProgramPipelines
typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint* pipelines);
GLAPI PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
GLAPI PFNGLGENPROGRAMPIPELINESPROC glad_debug_glGenProgramPipelines;
#define glGenProgramPipelines glad_debug_glGenProgramPipelines
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
GLAPI PFNGLISPROGRAMPIPELINEPROC glad_debug_glIsProgramPipeline;
#define glIsProgramPipeline glad_debug_glIsProgramPipeline
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint* params);
GLAPI PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
GLAPI PFNGLGETPROGRAMPIPELINEIVPROC glad_debug_glGetProgramPipelineiv;
#define glGetProgramPipelineiv glad_debug_glGetProgramPipelineiv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
GLAPI PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
GLAPI PFNGLPROGRAMUNIFORM1IPROC glad_debug_glProgramUniform1i;
#define glProgramUniform1i glad_debug_glProgramUniform1i
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
GLAPI PFNGLPROGRAMUNIFORM1IVPROC glad_debug_glProgramUniform1iv;
#define glProgramUniform1iv glad_debug_glProgramUniform1iv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
GLAPI PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
GLAPI PFNGLPROGRAMUNIFORM1FPROC glad_debug_glProgramUniform1f;
#define glProgramUniform1f glad_debug_glProgramUniform1f
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
GLAPI PFNGLPROGRAMUNIFORM1FVPROC glad_debug_glProgramUniform1fv;
#define glProgramUniform1fv glad_debug_glProgramUniform1fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
GLAPI PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
GLAPI PFNGLPROGRAMUNIFORM1DPROC glad_debug_glProgramUniform1d;
#define glProgramUniform1d glad_debug_glProgramUniform1d
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
GLAPI PFNGLPROGRAMUNIFORM1DVPROC glad_debug_glProgramUniform1dv;
#define glProgramUniform1dv glad_debug_glProgramUniform1dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
GLAPI PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
GLAPI PFNGLPROGRAMUNIFORM1UIPROC glad_debug_glProgramUniform1ui;
#define glProgramUniform1ui glad_debug_glProgramUniform1ui
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
GLAPI PFNGLPROGRAMUNIFORM1UIVPROC glad_debug_glProgramUniform1uiv;
#define glProgramUniform1uiv glad_debug_glProgramUniform1uiv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
GLAPI PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
GLAPI PFNGLPROGRAMUNIFORM2IPROC glad_debug_glProgramUniform2i;
#define glProgramUniform2i glad_debug_glProgramUniform2i
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
GLAPI PFNGLPROGRAMUNIFORM2IVPROC glad_debug_glProgramUniform2iv;
#define glProgramUniform2iv glad_debug_glProgramUniform2iv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLAPI PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
GLAPI PFNGLPROGRAMUNIFORM2FPROC glad_debug_glProgramUniform2f;
#define glProgramUniform2f glad_debug_glProgramUniform2f
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
GLAPI PFNGLPROGRAMUNIFORM2FVPROC glad_debug_glProgramUniform2fv;
#define glProgramUniform2fv glad_debug_glProgramUniform2fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
GLAPI PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
GLAPI PFNGLPROGRAMUNIFORM2DPROC glad_debug_glProgramUniform2d;
#define glProgramUniform2d glad_debug_glProgramUniform2d
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
GLAPI PFNGLPROGRAMUNIFORM2DVPROC glad_debug_glProgramUniform2dv;
#define glProgramUniform2dv glad_debug_glProgramUniform2dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
GLAPI PFNGLPROGRAMUNIFORM2UIPROC glad_debug_glProgramUniform2ui;
#define glProgramUniform2ui glad_debug_glProgramUniform2ui
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
GLAPI PFNGLPROGRAMUNIFORM2UIVPROC glad_debug_glProgramUniform2uiv;
#define glProgramUniform2uiv glad_debug_glProgramUniform2uiv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLAPI PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
GLAPI PFNGLPROGRAMUNIFORM3IPROC glad_debug_glProgramUniform3i;
#define glProgramUniform3i glad_debug_glProgramUniform3i
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
GLAPI PFNGLPROGRAMUNIFORM3IVPROC glad_debug_glProgramUniform3iv;
#define glProgramUniform3iv glad_debug_glProgramUniform3iv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLAPI PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
GLAPI PFNGLPROGRAMUNIFORM3FPROC glad_debug_glProgramUniform3f;
#define glProgramUniform3f glad_debug_glProgramUniform3f
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
GLAPI PFNGLPROGRAMUNIFORM3FVPROC glad_debug_glProgramUniform3fv;
#define glProgramUniform3fv glad_debug_glProgramUniform3fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
GLAPI PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
GLAPI PFNGLPROGRAMUNIFORM3DPROC glad_debug_glProgramUniform3d;
#define glProgramUniform3d glad_debug_glProgramUniform3d
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
GLAPI PFNGLPROGRAMUNIFORM3DVPROC glad_debug_glProgramUniform3dv;
#define glProgramUniform3dv glad_debug_glProgramUniform3dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
GLAPI PFNGLPROGRAMUNIFORM3UIPROC glad_debug_glProgramUniform3ui;
#define glProgramUniform3ui glad_debug_glProgramUniform3ui
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
GLAPI PFNGLPROGRAMUNIFORM3UIVPROC glad_debug_glProgramUniform3uiv;
#define glProgramUniform3uiv glad_debug_glProgramUniform3uiv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLAPI PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
GLAPI PFNGLPROGRAMUNIFORM4IPROC glad_debug_glProgramUniform4i;
#define glProgramUniform4i glad_debug_glProgramUniform4i
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint* value);
GLAPI PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
GLAPI PFNGLPROGRAMUNIFORM4IVPROC glad_debug_glProgramUniform4iv;
#define glProgramUniform4iv glad_debug_glProgramUniform4iv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLAPI PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
GLAPI PFNGLPROGRAMUNIFORM4FPROC glad_debug_glProgramUniform4f;
#define glProgramUniform4f glad_debug_glProgramUniform4f
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
GLAPI PFNGLPROGRAMUNIFORM4FVPROC glad_debug_glProgramUniform4fv;
#define glProgramUniform4fv glad_debug_glProgramUniform4fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
GLAPI PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
GLAPI PFNGLPROGRAMUNIFORM4DPROC glad_debug_glProgramUniform4d;
#define glProgramUniform4d glad_debug_glProgramUniform4d
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
GLAPI PFNGLPROGRAMUNIFORM4DVPROC glad_debug_glProgramUniform4dv;
#define glProgramUniform4dv glad_debug_glProgramUniform4dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
GLAPI PFNGLPROGRAMUNIFORM4UIPROC glad_debug_glProgramUniform4ui;
#define glProgramUniform4ui glad_debug_glProgramUniform4ui
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
GLAPI PFNGLPROGRAMUNIFORM4UIVPROC glad_debug_glProgramUniform4uiv;
#define glProgramUniform4uiv glad_debug_glProgramUniform4uiv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_debug_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv glad_debug_glProgramUniformMatrix2fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_debug_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv glad_debug_glProgramUniformMatrix3fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_debug_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv glad_debug_glProgramUniformMatrix4fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_debug_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv glad_debug_glProgramUniformMatrix2dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_debug_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv glad_debug_glProgramUniformMatrix3dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_debug_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv glad_debug_glProgramUniformMatrix4dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_debug_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv glad_debug_glProgramUniformMatrix2x3fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_debug_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv glad_debug_glProgramUniformMatrix3x2fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_debug_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv glad_debug_glProgramUniformMatrix2x4fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_debug_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv glad_debug_glProgramUniformMatrix4x2fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_debug_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv glad_debug_glProgramUniformMatrix3x4fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_debug_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv glad_debug_glProgramUniformMatrix4x3fv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_debug_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv glad_debug_glProgramUniformMatrix2x3dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_debug_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv glad_debug_glProgramUniformMatrix3x2dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_debug_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv glad_debug_glProgramUniformMatrix2x4dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_debug_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv glad_debug_glProgramUniformMatrix4x2dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_debug_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv glad_debug_glProgramUniformMatrix3x4dv
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_debug_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv glad_debug_glProgramUniformMatrix4x3dv
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
GLAPI PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
GLAPI PFNGLVALIDATEPROGRAMPIPELINEPROC glad_debug_glValidateProgramPipeline;
#define glValidateProgramPipeline glad_debug_glValidateProgramPipeline
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLAPI PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
GLAPI PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_debug_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog glad_debug_glGetProgramPipelineInfoLog
#endif
#ifndef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test 1
GLAPI int GLAD_GL_EXT_depth_bounds_test;
typedef void (APIENTRYP PFNGLDEPTHBOUNDSEXTPROC)(GLclampd zmin, GLclampd zmax);
GLAPI PFNGLDEPTHBOUNDSEXTPROC glad_glDepthBoundsEXT;
GLAPI PFNGLDEPTHBOUNDSEXTPROC glad_debug_glDepthBoundsEXT;
#define glDepthBoundsEXT glad_debug_glDepthBoundsEXT
#endif
#ifndef GL_HP_image_transform
#define GL_HP_image_transform 1
GLAPI int GLAD_GL_HP_image_transform;
typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC)(GLenum target, GLenum pname, GLint param);
GLAPI PFNGLIMAGETRANSFORMPARAMETERIHPPROC glad_glImageTransformParameteriHP;
GLAPI PFNGLIMAGETRANSFORMPARAMETERIHPPROC glad_debug_glImageTransformParameteriHP;
#define glImageTransformParameteriHP glad_debug_glImageTransformParameteriHP
typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC)(GLenum target, GLenum pname, GLfloat param);
GLAPI PFNGLIMAGETRANSFORMPARAMETERFHPPROC glad_glImageTransformParameterfHP;
GLAPI PFNGLIMAGETRANSFORMPARAMETERFHPPROC glad_debug_glImageTransformParameterfHP;
#define glImageTransformParameterfHP glad_debug_glImageTransformParameterfHP
typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glad_glImageTransformParameterivHP;
GLAPI PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glad_debug_glImageTransformParameterivHP;
#define glImageTransformParameterivHP glad_debug_glImageTransformParameterivHP
typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glad_glImageTransformParameterfvHP;
GLAPI PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glad_debug_glImageTransformParameterfvHP;
#define glImageTransformParameterfvHP glad_debug_glImageTransformParameterfvHP
typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glad_glGetImageTransformParameterivHP;
GLAPI PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glad_debug_glGetImageTransformParameterivHP;
#define glGetImageTransformParameterivHP glad_debug_glGetImageTransformParameterivHP
typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glad_glGetImageTransformParameterfvHP;
GLAPI PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glad_debug_glGetImageTransformParameterfvHP;
#define glGetImageTransformParameterfvHP glad_debug_glGetImageTransformParameterfvHP
#endif
#ifndef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add 1
GLAPI int GLAD_GL_ARB_texture_env_add;
#endif
#ifndef GL_NV_video_capture
#define GL_NV_video_capture 1
GLAPI int GLAD_GL_NV_video_capture;
typedef void (APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC)(GLuint video_capture_slot);
GLAPI PFNGLBEGINVIDEOCAPTURENVPROC glad_glBeginVideoCaptureNV;
GLAPI PFNGLBEGINVIDEOCAPTURENVPROC glad_debug_glBeginVideoCaptureNV;
#define glBeginVideoCaptureNV glad_debug_glBeginVideoCaptureNV
typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
GLAPI PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glad_glBindVideoCaptureStreamBufferNV;
GLAPI PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glad_debug_glBindVideoCaptureStreamBufferNV;
#define glBindVideoCaptureStreamBufferNV glad_debug_glBindVideoCaptureStreamBufferNV
typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
GLAPI PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glad_glBindVideoCaptureStreamTextureNV;
GLAPI PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glad_debug_glBindVideoCaptureStreamTextureNV;
#define glBindVideoCaptureStreamTextureNV glad_debug_glBindVideoCaptureStreamTextureNV
typedef void (APIENTRYP PFNGLENDVIDEOCAPTURENVPROC)(GLuint video_capture_slot);
GLAPI PFNGLENDVIDEOCAPTURENVPROC glad_glEndVideoCaptureNV;
GLAPI PFNGLENDVIDEOCAPTURENVPROC glad_debug_glEndVideoCaptureNV;
#define glEndVideoCaptureNV glad_debug_glEndVideoCaptureNV
typedef void (APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC)(GLuint video_capture_slot, GLenum pname, GLint* params);
GLAPI PFNGLGETVIDEOCAPTUREIVNVPROC glad_glGetVideoCaptureivNV;
GLAPI PFNGLGETVIDEOCAPTUREIVNVPROC glad_debug_glGetVideoCaptureivNV;
#define glGetVideoCaptureivNV glad_debug_glGetVideoCaptureivNV
typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params);
GLAPI PFNGLGETVIDEOCAPTURESTREAMIVNVPROC glad_glGetVideoCaptureStreamivNV;
GLAPI PFNGLGETVIDEOCAPTURESTREAMIVNVPROC glad_debug_glGetVideoCaptureStreamivNV;
#define glGetVideoCaptureStreamivNV glad_debug_glGetVideoCaptureStreamivNV
typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params);
GLAPI PFNGLGETVIDEOCAPTURESTREAMFVNVPROC glad_glGetVideoCaptureStreamfvNV;
GLAPI PFNGLGETVIDEOCAPTURESTREAMFVNVPROC glad_debug_glGetVideoCaptureStreamfvNV;
#define glGetVideoCaptureStreamfvNV glad_debug_glGetVideoCaptureStreamfvNV
typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params);
GLAPI PFNGLGETVIDEOCAPTURESTREAMDVNVPROC glad_glGetVideoCaptureStreamdvNV;
GLAPI PFNGLGETVIDEOCAPTURESTREAMDVNVPROC glad_debug_glGetVideoCaptureStreamdvNV;
#define glGetVideoCaptureStreamdvNV glad_debug_glGetVideoCaptureStreamdvNV
typedef GLenum (APIENTRYP PFNGLVIDEOCAPTURENVPROC)(GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT* capture_time);
GLAPI PFNGLVIDEOCAPTURENVPROC glad_glVideoCaptureNV;
GLAPI PFNGLVIDEOCAPTURENVPROC glad_debug_glVideoCaptureNV;
#define glVideoCaptureNV glad_debug_glVideoCaptureNV
typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params);
GLAPI PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC glad_glVideoCaptureStreamParameterivNV;
GLAPI PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC glad_debug_glVideoCaptureStreamParameterivNV;
#define glVideoCaptureStreamParameterivNV glad_debug_glVideoCaptureStreamParameterivNV
typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params);
GLAPI PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC glad_glVideoCaptureStreamParameterfvNV;
GLAPI PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC glad_debug_glVideoCaptureStreamParameterfvNV;
#define glVideoCaptureStreamParameterfvNV glad_debug_glVideoCaptureStreamParameterfvNV
typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params);
GLAPI PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC glad_glVideoCaptureStreamParameterdvNV;
GLAPI PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC glad_debug_glVideoCaptureStreamParameterdvNV;
#define glVideoCaptureStreamParameterdvNV glad_debug_glVideoCaptureStreamParameterdvNV
#endif
#ifndef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 1
GLAPI int GLAD_GL_ARB_sampler_objects;
#endif
#ifndef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette 1
GLAPI int GLAD_GL_ARB_matrix_palette;
typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC)(GLint index);
GLAPI PFNGLCURRENTPALETTEMATRIXARBPROC glad_glCurrentPaletteMatrixARB;
GLAPI PFNGLCURRENTPALETTEMATRIXARBPROC glad_debug_glCurrentPaletteMatrixARB;
#define glCurrentPaletteMatrixARB glad_debug_glCurrentPaletteMatrixARB
typedef void (APIENTRYP PFNGLMATRIXINDEXUBVARBPROC)(GLint size, const GLubyte* indices);
GLAPI PFNGLMATRIXINDEXUBVARBPROC glad_glMatrixIndexubvARB;
GLAPI PFNGLMATRIXINDEXUBVARBPROC glad_debug_glMatrixIndexubvARB;
#define glMatrixIndexubvARB glad_debug_glMatrixIndexubvARB
typedef void (APIENTRYP PFNGLMATRIXINDEXUSVARBPROC)(GLint size, const GLushort* indices);
GLAPI PFNGLMATRIXINDEXUSVARBPROC glad_glMatrixIndexusvARB;
GLAPI PFNGLMATRIXINDEXUSVARBPROC glad_debug_glMatrixIndexusvARB;
#define glMatrixIndexusvARB glad_debug_glMatrixIndexusvARB
typedef void (APIENTRYP PFNGLMATRIXINDEXUIVARBPROC)(GLint size, const GLuint* indices);
GLAPI PFNGLMATRIXINDEXUIVARBPROC glad_glMatrixIndexuivARB;
GLAPI PFNGLMATRIXINDEXUIVARBPROC glad_debug_glMatrixIndexuivARB;
#define glMatrixIndexuivARB glad_debug_glMatrixIndexuivARB
typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLMATRIXINDEXPOINTERARBPROC glad_glMatrixIndexPointerARB;
GLAPI PFNGLMATRIXINDEXPOINTERARBPROC glad_debug_glMatrixIndexPointerARB;
#define glMatrixIndexPointerARB glad_debug_glMatrixIndexPointerARB
#endif
#ifndef GL_SGIS_texture_color_mask
#define GL_SGIS_texture_color_mask 1
GLAPI int GLAD_GL_SGIS_texture_color_mask;
typedef void (APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI PFNGLTEXTURECOLORMASKSGISPROC glad_glTextureColorMaskSGIS;
GLAPI PFNGLTEXTURECOLORMASKSGISPROC glad_debug_glTextureColorMaskSGIS;
#define glTextureColorMaskSGIS glad_debug_glTextureColorMaskSGIS
#endif
#ifndef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels 1
GLAPI int GLAD_GL_EXT_packed_pixels;
#endif
#ifndef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame 1
GLAPI int GLAD_GL_EXT_coordinate_frame;
typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC)(GLbyte tx, GLbyte ty, GLbyte tz);
GLAPI PFNGLTANGENT3BEXTPROC glad_glTangent3bEXT;
GLAPI PFNGLTANGENT3BEXTPROC glad_debug_glTangent3bEXT;
#define glTangent3bEXT glad_debug_glTangent3bEXT
typedef void (APIENTRYP PFNGLTANGENT3BVEXTPROC)(const GLbyte* v);
GLAPI PFNGLTANGENT3BVEXTPROC glad_glTangent3bvEXT;
GLAPI PFNGLTANGENT3BVEXTPROC glad_debug_glTangent3bvEXT;
#define glTangent3bvEXT glad_debug_glTangent3bvEXT
typedef void (APIENTRYP PFNGLTANGENT3DEXTPROC)(GLdouble tx, GLdouble ty, GLdouble tz);
GLAPI PFNGLTANGENT3DEXTPROC glad_glTangent3dEXT;
GLAPI PFNGLTANGENT3DEXTPROC glad_debug_glTangent3dEXT;
#define glTangent3dEXT glad_debug_glTangent3dEXT
typedef void (APIENTRYP PFNGLTANGENT3DVEXTPROC)(const GLdouble* v);
GLAPI PFNGLTANGENT3DVEXTPROC glad_glTangent3dvEXT;
GLAPI PFNGLTANGENT3DVEXTPROC glad_debug_glTangent3dvEXT;
#define glTangent3dvEXT glad_debug_glTangent3dvEXT
typedef void (APIENTRYP PFNGLTANGENT3FEXTPROC)(GLfloat tx, GLfloat ty, GLfloat tz);
GLAPI PFNGLTANGENT3FEXTPROC glad_glTangent3fEXT;
GLAPI PFNGLTANGENT3FEXTPROC glad_debug_glTangent3fEXT;
#define glTangent3fEXT glad_debug_glTangent3fEXT
typedef void (APIENTRYP PFNGLTANGENT3FVEXTPROC)(const GLfloat* v);
GLAPI PFNGLTANGENT3FVEXTPROC glad_glTangent3fvEXT;
GLAPI PFNGLTANGENT3FVEXTPROC glad_debug_glTangent3fvEXT;
#define glTangent3fvEXT glad_debug_glTangent3fvEXT
typedef void (APIENTRYP PFNGLTANGENT3IEXTPROC)(GLint tx, GLint ty, GLint tz);
GLAPI PFNGLTANGENT3IEXTPROC glad_glTangent3iEXT;
GLAPI PFNGLTANGENT3IEXTPROC glad_debug_glTangent3iEXT;
#define glTangent3iEXT glad_debug_glTangent3iEXT
typedef void (APIENTRYP PFNGLTANGENT3IVEXTPROC)(const GLint* v);
GLAPI PFNGLTANGENT3IVEXTPROC glad_glTangent3ivEXT;
GLAPI PFNGLTANGENT3IVEXTPROC glad_debug_glTangent3ivEXT;
#define glTangent3ivEXT glad_debug_glTangent3ivEXT
typedef void (APIENTRYP PFNGLTANGENT3SEXTPROC)(GLshort tx, GLshort ty, GLshort tz);
GLAPI PFNGLTANGENT3SEXTPROC glad_glTangent3sEXT;
GLAPI PFNGLTANGENT3SEXTPROC glad_debug_glTangent3sEXT;
#define glTangent3sEXT glad_debug_glTangent3sEXT
typedef void (APIENTRYP PFNGLTANGENT3SVEXTPROC)(const GLshort* v);
GLAPI PFNGLTANGENT3SVEXTPROC glad_glTangent3svEXT;
GLAPI PFNGLTANGENT3SVEXTPROC glad_debug_glTangent3svEXT;
#define glTangent3svEXT glad_debug_glTangent3svEXT
typedef void (APIENTRYP PFNGLBINORMAL3BEXTPROC)(GLbyte bx, GLbyte by, GLbyte bz);
GLAPI PFNGLBINORMAL3BEXTPROC glad_glBinormal3bEXT;
GLAPI PFNGLBINORMAL3BEXTPROC glad_debug_glBinormal3bEXT;
#define glBinormal3bEXT glad_debug_glBinormal3bEXT
typedef void (APIENTRYP PFNGLBINORMAL3BVEXTPROC)(const GLbyte* v);
GLAPI PFNGLBINORMAL3BVEXTPROC glad_glBinormal3bvEXT;
GLAPI PFNGLBINORMAL3BVEXTPROC glad_debug_glBinormal3bvEXT;
#define glBinormal3bvEXT glad_debug_glBinormal3bvEXT
typedef void (APIENTRYP PFNGLBINORMAL3DEXTPROC)(GLdouble bx, GLdouble by, GLdouble bz);
GLAPI PFNGLBINORMAL3DEXTPROC glad_glBinormal3dEXT;
GLAPI PFNGLBINORMAL3DEXTPROC glad_debug_glBinormal3dEXT;
#define glBinormal3dEXT glad_debug_glBinormal3dEXT
typedef void (APIENTRYP PFNGLBINORMAL3DVEXTPROC)(const GLdouble* v);
GLAPI PFNGLBINORMAL3DVEXTPROC glad_glBinormal3dvEXT;
GLAPI PFNGLBINORMAL3DVEXTPROC glad_debug_glBinormal3dvEXT;
#define glBinormal3dvEXT glad_debug_glBinormal3dvEXT
typedef void (APIENTRYP PFNGLBINORMAL3FEXTPROC)(GLfloat bx, GLfloat by, GLfloat bz);
GLAPI PFNGLBINORMAL3FEXTPROC glad_glBinormal3fEXT;
GLAPI PFNGLBINORMAL3FEXTPROC glad_debug_glBinormal3fEXT;
#define glBinormal3fEXT glad_debug_glBinormal3fEXT
typedef void (APIENTRYP PFNGLBINORMAL3FVEXTPROC)(const GLfloat* v);
GLAPI PFNGLBINORMAL3FVEXTPROC glad_glBinormal3fvEXT;
GLAPI PFNGLBINORMAL3FVEXTPROC glad_debug_glBinormal3fvEXT;
#define glBinormal3fvEXT glad_debug_glBinormal3fvEXT
typedef void (APIENTRYP PFNGLBINORMAL3IEXTPROC)(GLint bx, GLint by, GLint bz);
GLAPI PFNGLBINORMAL3IEXTPROC glad_glBinormal3iEXT;
GLAPI PFNGLBINORMAL3IEXTPROC glad_debug_glBinormal3iEXT;
#define glBinormal3iEXT glad_debug_glBinormal3iEXT
typedef void (APIENTRYP PFNGLBINORMAL3IVEXTPROC)(const GLint* v);
GLAPI PFNGLBINORMAL3IVEXTPROC glad_glBinormal3ivEXT;
GLAPI PFNGLBINORMAL3IVEXTPROC glad_debug_glBinormal3ivEXT;
#define glBinormal3ivEXT glad_debug_glBinormal3ivEXT
typedef void (APIENTRYP PFNGLBINORMAL3SEXTPROC)(GLshort bx, GLshort by, GLshort bz);
GLAPI PFNGLBINORMAL3SEXTPROC glad_glBinormal3sEXT;
GLAPI PFNGLBINORMAL3SEXTPROC glad_debug_glBinormal3sEXT;
#define glBinormal3sEXT glad_debug_glBinormal3sEXT
typedef void (APIENTRYP PFNGLBINORMAL3SVEXTPROC)(const GLshort* v);
GLAPI PFNGLBINORMAL3SVEXTPROC glad_glBinormal3svEXT;
GLAPI PFNGLBINORMAL3SVEXTPROC glad_debug_glBinormal3svEXT;
#define glBinormal3svEXT glad_debug_glBinormal3svEXT
typedef void (APIENTRYP PFNGLTANGENTPOINTEREXTPROC)(GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLTANGENTPOINTEREXTPROC glad_glTangentPointerEXT;
GLAPI PFNGLTANGENTPOINTEREXTPROC glad_debug_glTangentPointerEXT;
#define glTangentPointerEXT glad_debug_glTangentPointerEXT
typedef void (APIENTRYP PFNGLBINORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLBINORMALPOINTEREXTPROC glad_glBinormalPointerEXT;
GLAPI PFNGLBINORMALPOINTEREXTPROC glad_debug_glBinormalPointerEXT;
#define glBinormalPointerEXT glad_debug_glBinormalPointerEXT
#endif
#ifndef GL_ARB_texture_compression
#define GL_ARB_texture_compression 1
GLAPI int GLAD_GL_ARB_texture_compression;
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB;
GLAPI PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_debug_glCompressedTexImage3DARB;
#define glCompressedTexImage3DARB glad_debug_glCompressedTexImage3DARB
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB;
GLAPI PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_debug_glCompressedTexImage2DARB;
#define glCompressedTexImage2DARB glad_debug_glCompressedTexImage2DARB
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB;
GLAPI PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_debug_glCompressedTexImage1DARB;
#define glCompressedTexImage1DARB glad_debug_glCompressedTexImage1DARB
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB;
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_debug_glCompressedTexSubImage3DARB;
#define glCompressedTexSubImage3DARB glad_debug_glCompressedTexSubImage3DARB
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB;
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_debug_glCompressedTexSubImage2DARB;
#define glCompressedTexSubImage2DARB glad_debug_glCompressedTexSubImage2DARB
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB;
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_debug_glCompressedTexSubImage1DARB;
#define glCompressedTexSubImage1DARB glad_debug_glCompressedTexSubImage1DARB
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint level, void* img);
GLAPI PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glad_glGetCompressedTexImageARB;
GLAPI PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glad_debug_glGetCompressedTexImageARB;
#define glGetCompressedTexImageARB glad_debug_glGetCompressedTexImageARB
#endif
#ifndef GL_APPLE_aux_depth_stencil
#define GL_APPLE_aux_depth_stencil 1
GLAPI int GLAD_GL_APPLE_aux_depth_stencil;
#endif
#ifndef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 1
GLAPI int GLAD_GL_ARB_shader_subroutine;
typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar* name);
GLAPI PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
GLAPI PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_debug_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation glad_debug_glGetSubroutineUniformLocation
typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar* name);
GLAPI PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
GLAPI PFNGLGETSUBROUTINEINDEXPROC glad_debug_glGetSubroutineIndex;
#define glGetSubroutineIndex glad_debug_glGetSubroutineIndex
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_debug_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv glad_debug_glGetActiveSubroutineUniformiv
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name);
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_debug_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName glad_debug_glGetActiveSubroutineUniformName
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name);
GLAPI PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
GLAPI PFNGLGETACTIVESUBROUTINENAMEPROC glad_debug_glGetActiveSubroutineName;
#define glGetActiveSubroutineName glad_debug_glGetActiveSubroutineName
typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint* indices);
GLAPI PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
GLAPI PFNGLUNIFORMSUBROUTINESUIVPROC glad_debug_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv glad_debug_glUniformSubroutinesuiv
typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint* params);
GLAPI PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
GLAPI PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_debug_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv glad_debug_glGetUniformSubroutineuiv
typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
GLAPI PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
GLAPI PFNGLGETPROGRAMSTAGEIVPROC glad_debug_glGetProgramStageiv;
#define glGetProgramStageiv glad_debug_glGetProgramStageiv
#endif
#ifndef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB 1
GLAPI int GLAD_GL_EXT_framebuffer_sRGB;
#endif
#ifndef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 1
GLAPI int GLAD_GL_ARB_texture_storage_multisample;
typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample;
GLAPI PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_debug_glTexStorage2DMultisample;
#define glTexStorage2DMultisample glad_debug_glTexStorage2DMultisample
typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLAPI PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample;
GLAPI PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_debug_glTexStorage3DMultisample;
#define glTexStorage3DMultisample glad_debug_glTexStorage3DMultisample
#endif
#ifndef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 1
GLAPI int GLAD_GL_KHR_blend_equation_advanced_coherent;
#endif
#ifndef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit 1
GLAPI int GLAD_GL_EXT_vertex_attrib_64bit;
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DEXTPROC)(GLuint index, GLdouble x);
GLAPI PFNGLVERTEXATTRIBL1DEXTPROC glad_glVertexAttribL1dEXT;
GLAPI PFNGLVERTEXATTRIBL1DEXTPROC glad_debug_glVertexAttribL1dEXT;
#define glVertexAttribL1dEXT glad_debug_glVertexAttribL1dEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DEXTPROC)(GLuint index, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXATTRIBL2DEXTPROC glad_glVertexAttribL2dEXT;
GLAPI PFNGLVERTEXATTRIBL2DEXTPROC glad_debug_glVertexAttribL2dEXT;
#define glVertexAttribL2dEXT glad_debug_glVertexAttribL2dEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXATTRIBL3DEXTPROC glad_glVertexAttribL3dEXT;
GLAPI PFNGLVERTEXATTRIBL3DEXTPROC glad_debug_glVertexAttribL3dEXT;
#define glVertexAttribL3dEXT glad_debug_glVertexAttribL3dEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXATTRIBL4DEXTPROC glad_glVertexAttribL4dEXT;
GLAPI PFNGLVERTEXATTRIBL4DEXTPROC glad_debug_glVertexAttribL4dEXT;
#define glVertexAttribL4dEXT glad_debug_glVertexAttribL4dEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVEXTPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL1DVEXTPROC glad_glVertexAttribL1dvEXT;
GLAPI PFNGLVERTEXATTRIBL1DVEXTPROC glad_debug_glVertexAttribL1dvEXT;
#define glVertexAttribL1dvEXT glad_debug_glVertexAttribL1dvEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVEXTPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL2DVEXTPROC glad_glVertexAttribL2dvEXT;
GLAPI PFNGLVERTEXATTRIBL2DVEXTPROC glad_debug_glVertexAttribL2dvEXT;
#define glVertexAttribL2dvEXT glad_debug_glVertexAttribL2dvEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVEXTPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL3DVEXTPROC glad_glVertexAttribL3dvEXT;
GLAPI PFNGLVERTEXATTRIBL3DVEXTPROC glad_debug_glVertexAttribL3dvEXT;
#define glVertexAttribL3dvEXT glad_debug_glVertexAttribL3dvEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVEXTPROC)(GLuint index, const GLdouble* v);
GLAPI PFNGLVERTEXATTRIBL4DVEXTPROC glad_glVertexAttribL4dvEXT;
GLAPI PFNGLVERTEXATTRIBL4DVEXTPROC glad_debug_glVertexAttribL4dvEXT;
#define glVertexAttribL4dvEXT glad_debug_glVertexAttribL4dvEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_glVertexAttribLPointerEXT;
GLAPI PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_debug_glVertexAttribLPointerEXT;
#define glVertexAttribLPointerEXT glad_debug_glVertexAttribLPointerEXT
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVEXTPROC)(GLuint index, GLenum pname, GLdouble* params);
GLAPI PFNGLGETVERTEXATTRIBLDVEXTPROC glad_glGetVertexAttribLdvEXT;
GLAPI PFNGLGETVERTEXATTRIBLDVEXTPROC glad_debug_glGetVertexAttribLdvEXT;
#define glGetVertexAttribLdvEXT glad_debug_glGetVertexAttribLdvEXT
#endif
#ifndef GL_NV_shader_atomic_float64
#define GL_NV_shader_atomic_float64 1
GLAPI int GLAD_GL_NV_shader_atomic_float64;
#endif
#ifndef GL_ARB_depth_texture
#define GL_ARB_depth_texture 1
GLAPI int GLAD_GL_ARB_depth_texture;
#endif
#ifndef GL_NV_shader_buffer_store
#define GL_NV_shader_buffer_store 1
GLAPI int GLAD_GL_NV_shader_buffer_store;
#endif
#ifndef GL_OES_query_matrix
#define GL_OES_query_matrix 1
GLAPI int GLAD_GL_OES_query_matrix;
typedef GLbitfield (APIENTRYP PFNGLQUERYMATRIXXOESPROC)(GLfixed* mantissa, GLint* exponent);
GLAPI PFNGLQUERYMATRIXXOESPROC glad_glQueryMatrixxOES;
GLAPI PFNGLQUERYMATRIXXOESPROC glad_debug_glQueryMatrixxOES;
#define glQueryMatrixxOES glad_debug_glQueryMatrixxOES
#endif
#ifndef GL_MESA_window_pos
#define GL_MESA_window_pos 1
GLAPI int GLAD_GL_MESA_window_pos;
typedef void (APIENTRYP PFNGLWINDOWPOS2DMESAPROC)(GLdouble x, GLdouble y);
GLAPI PFNGLWINDOWPOS2DMESAPROC glad_glWindowPos2dMESA;
GLAPI PFNGLWINDOWPOS2DMESAPROC glad_debug_glWindowPos2dMESA;
#define glWindowPos2dMESA glad_debug_glWindowPos2dMESA
typedef void (APIENTRYP PFNGLWINDOWPOS2DVMESAPROC)(const GLdouble* v);
GLAPI PFNGLWINDOWPOS2DVMESAPROC glad_glWindowPos2dvMESA;
GLAPI PFNGLWINDOWPOS2DVMESAPROC glad_debug_glWindowPos2dvMESA;
#define glWindowPos2dvMESA glad_debug_glWindowPos2dvMESA
typedef void (APIENTRYP PFNGLWINDOWPOS2FMESAPROC)(GLfloat x, GLfloat y);
GLAPI PFNGLWINDOWPOS2FMESAPROC glad_glWindowPos2fMESA;
GLAPI PFNGLWINDOWPOS2FMESAPROC glad_debug_glWindowPos2fMESA;
#define glWindowPos2fMESA glad_debug_glWindowPos2fMESA
typedef void (APIENTRYP PFNGLWINDOWPOS2FVMESAPROC)(const GLfloat* v);
GLAPI PFNGLWINDOWPOS2FVMESAPROC glad_glWindowPos2fvMESA;
GLAPI PFNGLWINDOWPOS2FVMESAPROC glad_debug_glWindowPos2fvMESA;
#define glWindowPos2fvMESA glad_debug_glWindowPos2fvMESA
typedef void (APIENTRYP PFNGLWINDOWPOS2IMESAPROC)(GLint x, GLint y);
GLAPI PFNGLWINDOWPOS2IMESAPROC glad_glWindowPos2iMESA;
GLAPI PFNGLWINDOWPOS2IMESAPROC glad_debug_glWindowPos2iMESA;
#define glWindowPos2iMESA glad_debug_glWindowPos2iMESA
typedef void (APIENTRYP PFNGLWINDOWPOS2IVMESAPROC)(const GLint* v);
GLAPI PFNGLWINDOWPOS2IVMESAPROC glad_glWindowPos2ivMESA;
GLAPI PFNGLWINDOWPOS2IVMESAPROC glad_debug_glWindowPos2ivMESA;
#define glWindowPos2ivMESA glad_debug_glWindowPos2ivMESA
typedef void (APIENTRYP PFNGLWINDOWPOS2SMESAPROC)(GLshort x, GLshort y);
GLAPI PFNGLWINDOWPOS2SMESAPROC glad_glWindowPos2sMESA;
GLAPI PFNGLWINDOWPOS2SMESAPROC glad_debug_glWindowPos2sMESA;
#define glWindowPos2sMESA glad_debug_glWindowPos2sMESA
typedef void (APIENTRYP PFNGLWINDOWPOS2SVMESAPROC)(const GLshort* v);
GLAPI PFNGLWINDOWPOS2SVMESAPROC glad_glWindowPos2svMESA;
GLAPI PFNGLWINDOWPOS2SVMESAPROC glad_debug_glWindowPos2svMESA;
#define glWindowPos2svMESA glad_debug_glWindowPos2svMESA
typedef void (APIENTRYP PFNGLWINDOWPOS3DMESAPROC)(GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLWINDOWPOS3DMESAPROC glad_glWindowPos3dMESA;
GLAPI PFNGLWINDOWPOS3DMESAPROC glad_debug_glWindowPos3dMESA;
#define glWindowPos3dMESA glad_debug_glWindowPos3dMESA
typedef void (APIENTRYP PFNGLWINDOWPOS3DVMESAPROC)(const GLdouble* v);
GLAPI PFNGLWINDOWPOS3DVMESAPROC glad_glWindowPos3dvMESA;
GLAPI PFNGLWINDOWPOS3DVMESAPROC glad_debug_glWindowPos3dvMESA;
#define glWindowPos3dvMESA glad_debug_glWindowPos3dvMESA
typedef void (APIENTRYP PFNGLWINDOWPOS3FMESAPROC)(GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLWINDOWPOS3FMESAPROC glad_glWindowPos3fMESA;
GLAPI PFNGLWINDOWPOS3FMESAPROC glad_debug_glWindowPos3fMESA;
#define glWindowPos3fMESA glad_debug_glWindowPos3fMESA
typedef void (APIENTRYP PFNGLWINDOWPOS3FVMESAPROC)(const GLfloat* v);
GLAPI PFNGLWINDOWPOS3FVMESAPROC glad_glWindowPos3fvMESA;
GLAPI PFNGLWINDOWPOS3FVMESAPROC glad_debug_glWindowPos3fvMESA;
#define glWindowPos3fvMESA glad_debug_glWindowPos3fvMESA
typedef void (APIENTRYP PFNGLWINDOWPOS3IMESAPROC)(GLint x, GLint y, GLint z);
GLAPI PFNGLWINDOWPOS3IMESAPROC glad_glWindowPos3iMESA;
GLAPI PFNGLWINDOWPOS3IMESAPROC glad_debug_glWindowPos3iMESA;
#define glWindowPos3iMESA glad_debug_glWindowPos3iMESA
typedef void (APIENTRYP PFNGLWINDOWPOS3IVMESAPROC)(const GLint* v);
GLAPI PFNGLWINDOWPOS3IVMESAPROC glad_glWindowPos3ivMESA;
GLAPI PFNGLWINDOWPOS3IVMESAPROC glad_debug_glWindowPos3ivMESA;
#define glWindowPos3ivMESA glad_debug_glWindowPos3ivMESA
typedef void (APIENTRYP PFNGLWINDOWPOS3SMESAPROC)(GLshort x, GLshort y, GLshort z);
GLAPI PFNGLWINDOWPOS3SMESAPROC glad_glWindowPos3sMESA;
GLAPI PFNGLWINDOWPOS3SMESAPROC glad_debug_glWindowPos3sMESA;
#define glWindowPos3sMESA glad_debug_glWindowPos3sMESA
typedef void (APIENTRYP PFNGLWINDOWPOS3SVMESAPROC)(const GLshort* v);
GLAPI PFNGLWINDOWPOS3SVMESAPROC glad_glWindowPos3svMESA;
GLAPI PFNGLWINDOWPOS3SVMESAPROC glad_debug_glWindowPos3svMESA;
#define glWindowPos3svMESA glad_debug_glWindowPos3svMESA
typedef void (APIENTRYP PFNGLWINDOWPOS4DMESAPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLWINDOWPOS4DMESAPROC glad_glWindowPos4dMESA;
GLAPI PFNGLWINDOWPOS4DMESAPROC glad_debug_glWindowPos4dMESA;
#define glWindowPos4dMESA glad_debug_glWindowPos4dMESA
typedef void (APIENTRYP PFNGLWINDOWPOS4DVMESAPROC)(const GLdouble* v);
GLAPI PFNGLWINDOWPOS4DVMESAPROC glad_glWindowPos4dvMESA;
GLAPI PFNGLWINDOWPOS4DVMESAPROC glad_debug_glWindowPos4dvMESA;
#define glWindowPos4dvMESA glad_debug_glWindowPos4dvMESA
typedef void (APIENTRYP PFNGLWINDOWPOS4FMESAPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLWINDOWPOS4FMESAPROC glad_glWindowPos4fMESA;
GLAPI PFNGLWINDOWPOS4FMESAPROC glad_debug_glWindowPos4fMESA;
#define glWindowPos4fMESA glad_debug_glWindowPos4fMESA
typedef void (APIENTRYP PFNGLWINDOWPOS4FVMESAPROC)(const GLfloat* v);
GLAPI PFNGLWINDOWPOS4FVMESAPROC glad_glWindowPos4fvMESA;
GLAPI PFNGLWINDOWPOS4FVMESAPROC glad_debug_glWindowPos4fvMESA;
#define glWindowPos4fvMESA glad_debug_glWindowPos4fvMESA
typedef void (APIENTRYP PFNGLWINDOWPOS4IMESAPROC)(GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLWINDOWPOS4IMESAPROC glad_glWindowPos4iMESA;
GLAPI PFNGLWINDOWPOS4IMESAPROC glad_debug_glWindowPos4iMESA;
#define glWindowPos4iMESA glad_debug_glWindowPos4iMESA
typedef void (APIENTRYP PFNGLWINDOWPOS4IVMESAPROC)(const GLint* v);
GLAPI PFNGLWINDOWPOS4IVMESAPROC glad_glWindowPos4ivMESA;
GLAPI PFNGLWINDOWPOS4IVMESAPROC glad_debug_glWindowPos4ivMESA;
#define glWindowPos4ivMESA glad_debug_glWindowPos4ivMESA
typedef void (APIENTRYP PFNGLWINDOWPOS4SMESAPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLWINDOWPOS4SMESAPROC glad_glWindowPos4sMESA;
GLAPI PFNGLWINDOWPOS4SMESAPROC glad_debug_glWindowPos4sMESA;
#define glWindowPos4sMESA glad_debug_glWindowPos4sMESA
typedef void (APIENTRYP PFNGLWINDOWPOS4SVMESAPROC)(const GLshort* v);
GLAPI PFNGLWINDOWPOS4SVMESAPROC glad_glWindowPos4svMESA;
GLAPI PFNGLWINDOWPOS4SVMESAPROC glad_debug_glWindowPos4svMESA;
#define glWindowPos4svMESA glad_debug_glWindowPos4svMESA
#endif
#ifndef GL_NV_fill_rectangle
#define GL_NV_fill_rectangle 1
GLAPI int GLAD_GL_NV_fill_rectangle;
#endif
#ifndef GL_NV_shader_storage_buffer_object
#define GL_NV_shader_storage_buffer_object 1
GLAPI int GLAD_GL_NV_shader_storage_buffer_object;
#endif
#ifndef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 1
GLAPI int GLAD_GL_ARB_texture_query_lod;
#endif
#ifndef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 1
GLAPI int GLAD_GL_ARB_copy_buffer;
#endif
#ifndef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 1
GLAPI int GLAD_GL_ARB_shader_image_size;
#endif
#ifndef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters 1
GLAPI int GLAD_GL_NV_shader_atomic_counters;
#endif
#ifndef GL_APPLE_object_purgeable
#define GL_APPLE_object_purgeable 1
GLAPI int GLAD_GL_APPLE_object_purgeable;
typedef GLenum (APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC)(GLenum objectType, GLuint name, GLenum option);
GLAPI PFNGLOBJECTPURGEABLEAPPLEPROC glad_glObjectPurgeableAPPLE;
GLAPI PFNGLOBJECTPURGEABLEAPPLEPROC glad_debug_glObjectPurgeableAPPLE;
#define glObjectPurgeableAPPLE glad_debug_glObjectPurgeableAPPLE
typedef GLenum (APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC)(GLenum objectType, GLuint name, GLenum option);
GLAPI PFNGLOBJECTUNPURGEABLEAPPLEPROC glad_glObjectUnpurgeableAPPLE;
GLAPI PFNGLOBJECTUNPURGEABLEAPPLEPROC glad_debug_glObjectUnpurgeableAPPLE;
#define glObjectUnpurgeableAPPLE glad_debug_glObjectUnpurgeableAPPLE
typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC)(GLenum objectType, GLuint name, GLenum pname, GLint* params);
GLAPI PFNGLGETOBJECTPARAMETERIVAPPLEPROC glad_glGetObjectParameterivAPPLE;
GLAPI PFNGLGETOBJECTPARAMETERIVAPPLEPROC glad_debug_glGetObjectParameterivAPPLE;
#define glGetObjectParameterivAPPLE glad_debug_glGetObjectParameterivAPPLE
#endif
#ifndef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query 1
GLAPI int GLAD_GL_ARB_occlusion_query;
typedef void (APIENTRYP PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint* ids);
GLAPI PFNGLGENQUERIESARBPROC glad_glGenQueriesARB;
GLAPI PFNGLGENQUERIESARBPROC glad_debug_glGenQueriesARB;
#define glGenQueriesARB glad_debug_glGenQueriesARB
typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC)(GLsizei n, const GLuint* ids);
GLAPI PFNGLDELETEQUERIESARBPROC glad_glDeleteQueriesARB;
GLAPI PFNGLDELETEQUERIESARBPROC glad_debug_glDeleteQueriesARB;
#define glDeleteQueriesARB glad_debug_glDeleteQueriesARB
typedef GLboolean (APIENTRYP PFNGLISQUERYARBPROC)(GLuint id);
GLAPI PFNGLISQUERYARBPROC glad_glIsQueryARB;
GLAPI PFNGLISQUERYARBPROC glad_debug_glIsQueryARB;
#define glIsQueryARB glad_debug_glIsQueryARB
typedef void (APIENTRYP PFNGLBEGINQUERYARBPROC)(GLenum target, GLuint id);
GLAPI PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB;
GLAPI PFNGLBEGINQUERYARBPROC glad_debug_glBeginQueryARB;
#define glBeginQueryARB glad_debug_glBeginQueryARB
typedef void (APIENTRYP PFNGLENDQUERYARBPROC)(GLenum target);
GLAPI PFNGLENDQUERYARBPROC glad_glEndQueryARB;
GLAPI PFNGLENDQUERYARBPROC glad_debug_glEndQueryARB;
#define glEndQueryARB glad_debug_glEndQueryARB
typedef void (APIENTRYP PFNGLGETQUERYIVARBPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETQUERYIVARBPROC glad_glGetQueryivARB;
GLAPI PFNGLGETQUERYIVARBPROC glad_debug_glGetQueryivARB;
#define glGetQueryivARB glad_debug_glGetQueryivARB
typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC)(GLuint id, GLenum pname, GLint* params);
GLAPI PFNGLGETQUERYOBJECTIVARBPROC glad_glGetQueryObjectivARB;
GLAPI PFNGLGETQUERYOBJECTIVARBPROC glad_debug_glGetQueryObjectivARB;
#define glGetQueryObjectivARB glad_debug_glGetQueryObjectivARB
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC)(GLuint id, GLenum pname, GLuint* params);
GLAPI PFNGLGETQUERYOBJECTUIVARBPROC glad_glGetQueryObjectuivARB;
GLAPI PFNGLGETQUERYOBJECTUIVARBPROC glad_debug_glGetQueryObjectuivARB;
#define glGetQueryObjectuivARB glad_debug_glGetQueryObjectuivARB
#endif
#ifndef GL_INGR_color_clamp
#define GL_INGR_color_clamp 1
GLAPI int GLAD_GL_INGR_color_clamp;
#endif
#ifndef GL_SGI_color_table
#define GL_SGI_color_table 1
GLAPI int GLAD_GL_SGI_color_table;
typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table);
GLAPI PFNGLCOLORTABLESGIPROC glad_glColorTableSGI;
GLAPI PFNGLCOLORTABLESGIPROC glad_debug_glColorTableSGI;
#define glColorTableSGI glad_debug_glColorTableSGI
typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC)(GLenum target, GLenum pname, const GLfloat* params);
GLAPI PFNGLCOLORTABLEPARAMETERFVSGIPROC glad_glColorTableParameterfvSGI;
GLAPI PFNGLCOLORTABLEPARAMETERFVSGIPROC glad_debug_glColorTableParameterfvSGI;
#define glColorTableParameterfvSGI glad_debug_glColorTableParameterfvSGI
typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC)(GLenum target, GLenum pname, const GLint* params);
GLAPI PFNGLCOLORTABLEPARAMETERIVSGIPROC glad_glColorTableParameterivSGI;
GLAPI PFNGLCOLORTABLEPARAMETERIVSGIPROC glad_debug_glColorTableParameterivSGI;
#define glColorTableParameterivSGI glad_debug_glColorTableParameterivSGI
typedef void (APIENTRYP PFNGLCOPYCOLORTABLESGIPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
GLAPI PFNGLCOPYCOLORTABLESGIPROC glad_glCopyColorTableSGI;
GLAPI PFNGLCOPYCOLORTABLESGIPROC glad_debug_glCopyColorTableSGI;
#define glCopyColorTableSGI glad_debug_glCopyColorTableSGI
typedef void (APIENTRYP PFNGLGETCOLORTABLESGIPROC)(GLenum target, GLenum format, GLenum type, void* table);
GLAPI PFNGLGETCOLORTABLESGIPROC glad_glGetColorTableSGI;
GLAPI PFNGLGETCOLORTABLESGIPROC glad_debug_glGetColorTableSGI;
#define glGetColorTableSGI glad_debug_glGetColorTableSGI
typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)(GLenum target, GLenum pname, GLfloat* params);
GLAPI PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glad_glGetColorTableParameterfvSGI;
GLAPI PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glad_debug_glGetColorTableParameterfvSGI;
#define glGetColorTableParameterfvSGI glad_debug_glGetColorTableParameterfvSGI
typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glad_glGetColorTableParameterivSGI;
GLAPI PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glad_debug_glGetColorTableParameterivSGI;
#define glGetColorTableParameterivSGI glad_debug_glGetColorTableParameterivSGI
#endif
#ifndef GL_NV_gpu_program5_mem_extended
#define GL_NV_gpu_program5_mem_extended 1
GLAPI int GLAD_GL_NV_gpu_program5_mem_extended;
#endif
#ifndef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 1
GLAPI int GLAD_GL_ARB_texture_cube_map_array;
#endif
#ifndef GL_SGIX_scalebias_hint
#define GL_SGIX_scalebias_hint 1
GLAPI int GLAD_GL_SGIX_scalebias_hint;
#endif
#ifndef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4 1
GLAPI int GLAD_GL_EXT_gpu_shader4;
typedef void (APIENTRYP PFNGLGETUNIFORMUIVEXTPROC)(GLuint program, GLint location, GLuint* params);
GLAPI PFNGLGETUNIFORMUIVEXTPROC glad_glGetUniformuivEXT;
GLAPI PFNGLGETUNIFORMUIVEXTPROC glad_debug_glGetUniformuivEXT;
#define glGetUniformuivEXT glad_debug_glGetUniformuivEXT
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC)(GLuint program, GLuint color, const GLchar* name);
GLAPI PFNGLBINDFRAGDATALOCATIONEXTPROC glad_glBindFragDataLocationEXT;
GLAPI PFNGLBINDFRAGDATALOCATIONEXTPROC glad_debug_glBindFragDataLocationEXT;
#define glBindFragDataLocationEXT glad_debug_glBindFragDataLocationEXT
typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONEXTPROC)(GLuint program, const GLchar* name);
GLAPI PFNGLGETFRAGDATALOCATIONEXTPROC glad_glGetFragDataLocationEXT;
GLAPI PFNGLGETFRAGDATALOCATIONEXTPROC glad_debug_glGetFragDataLocationEXT;
#define glGetFragDataLocationEXT glad_debug_glGetFragDataLocationEXT
typedef void (APIENTRYP PFNGLUNIFORM1UIEXTPROC)(GLint location, GLuint v0);
GLAPI PFNGLUNIFORM1UIEXTPROC glad_glUniform1uiEXT;
GLAPI PFNGLUNIFORM1UIEXTPROC glad_debug_glUniform1uiEXT;
#define glUniform1uiEXT glad_debug_glUniform1uiEXT
typedef void (APIENTRYP PFNGLUNIFORM2UIEXTPROC)(GLint location, GLuint v0, GLuint v1);
GLAPI PFNGLUNIFORM2UIEXTPROC glad_glUniform2uiEXT;
GLAPI PFNGLUNIFORM2UIEXTPROC glad_debug_glUniform2uiEXT;
#define glUniform2uiEXT glad_debug_glUniform2uiEXT
typedef void (APIENTRYP PFNGLUNIFORM3UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
GLAPI PFNGLUNIFORM3UIEXTPROC glad_glUniform3uiEXT;
GLAPI PFNGLUNIFORM3UIEXTPROC glad_debug_glUniform3uiEXT;
#define glUniform3uiEXT glad_debug_glUniform3uiEXT
typedef void (APIENTRYP PFNGLUNIFORM4UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLAPI PFNGLUNIFORM4UIEXTPROC glad_glUniform4uiEXT;
GLAPI PFNGLUNIFORM4UIEXTPROC glad_debug_glUniform4uiEXT;
#define glUniform4uiEXT glad_debug_glUniform4uiEXT
typedef void (APIENTRYP PFNGLUNIFORM1UIVEXTPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM1UIVEXTPROC glad_glUniform1uivEXT;
GLAPI PFNGLUNIFORM1UIVEXTPROC glad_debug_glUniform1uivEXT;
#define glUniform1uivEXT glad_debug_glUniform1uivEXT
typedef void (APIENTRYP PFNGLUNIFORM2UIVEXTPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM2UIVEXTPROC glad_glUniform2uivEXT;
GLAPI PFNGLUNIFORM2UIVEXTPROC glad_debug_glUniform2uivEXT;
#define glUniform2uivEXT glad_debug_glUniform2uivEXT
typedef void (APIENTRYP PFNGLUNIFORM3UIVEXTPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM3UIVEXTPROC glad_glUniform3uivEXT;
GLAPI PFNGLUNIFORM3UIVEXTPROC glad_debug_glUniform3uivEXT;
#define glUniform3uivEXT glad_debug_glUniform3uivEXT
typedef void (APIENTRYP PFNGLUNIFORM4UIVEXTPROC)(GLint location, GLsizei count, const GLuint* value);
GLAPI PFNGLUNIFORM4UIVEXTPROC glad_glUniform4uivEXT;
GLAPI PFNGLUNIFORM4UIVEXTPROC glad_debug_glUniform4uivEXT;
#define glUniform4uivEXT glad_debug_glUniform4uivEXT
#endif
#ifndef GL_NV_geometry_program4
#define GL_NV_geometry_program4 1
GLAPI int GLAD_GL_NV_geometry_program4;
typedef void (APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC)(GLenum target, GLint limit);
GLAPI PFNGLPROGRAMVERTEXLIMITNVPROC glad_glProgramVertexLimitNV;
GLAPI PFNGLPROGRAMVERTEXLIMITNVPROC glad_debug_glProgramVertexLimitNV;
#define glProgramVertexLimitNV glad_debug_glProgramVertexLimitNV
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTUREEXTPROC glad_glFramebufferTextureEXT;
GLAPI PFNGLFRAMEBUFFERTEXTUREEXTPROC glad_debug_glFramebufferTextureEXT;
#define glFramebufferTextureEXT glad_debug_glFramebufferTextureEXT
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
GLAPI PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glad_glFramebufferTextureFaceEXT;
GLAPI PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glad_debug_glFramebufferTextureFaceEXT;
#define glFramebufferTextureFaceEXT glad_debug_glFramebufferTextureFaceEXT
#endif
#ifndef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled 1
GLAPI int GLAD_GL_EXT_framebuffer_multisample_blit_scaled;
#endif
#ifndef GL_AMD_debug_output
#define GL_AMD_debug_output 1
GLAPI int GLAD_GL_AMD_debug_output;
typedef void (APIENTRYP PFNGLDEBUGMESSAGEENABLEAMDPROC)(GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
GLAPI PFNGLDEBUGMESSAGEENABLEAMDPROC glad_glDebugMessageEnableAMD;
GLAPI PFNGLDEBUGMESSAGEENABLEAMDPROC glad_debug_glDebugMessageEnableAMD;
#define glDebugMessageEnableAMD glad_debug_glDebugMessageEnableAMD
typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTAMDPROC)(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf);
GLAPI PFNGLDEBUGMESSAGEINSERTAMDPROC glad_glDebugMessageInsertAMD;
GLAPI PFNGLDEBUGMESSAGEINSERTAMDPROC glad_debug_glDebugMessageInsertAMD;
#define glDebugMessageInsertAMD glad_debug_glDebugMessageInsertAMD
typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKAMDPROC)(GLDEBUGPROCAMD callback, void* userParam);
GLAPI PFNGLDEBUGMESSAGECALLBACKAMDPROC glad_glDebugMessageCallbackAMD;
GLAPI PFNGLDEBUGMESSAGECALLBACKAMDPROC glad_debug_glDebugMessageCallbackAMD;
#define glDebugMessageCallbackAMD glad_debug_glDebugMessageCallbackAMD
typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGAMDPROC)(GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message);
GLAPI PFNGLGETDEBUGMESSAGELOGAMDPROC glad_glGetDebugMessageLogAMD;
GLAPI PFNGLGETDEBUGMESSAGELOGAMDPROC glad_debug_glGetDebugMessageLogAMD;
#define glGetDebugMessageLogAMD glad_debug_glGetDebugMessageLogAMD
#endif
#ifndef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 1
GLAPI int GLAD_GL_ARB_texture_border_clamp;
#endif
#ifndef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 1
GLAPI int GLAD_GL_ARB_fragment_coord_conventions;
#endif
#ifndef GL_ARB_multitexture
#define GL_ARB_multitexture 1
GLAPI int GLAD_GL_ARB_multitexture;
typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
GLAPI PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB;
GLAPI PFNGLACTIVETEXTUREARBPROC glad_debug_glActiveTextureARB;
#define glActiveTextureARB glad_debug_glActiveTextureARB
typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
GLAPI PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB;
GLAPI PFNGLCLIENTACTIVETEXTUREARBPROC glad_debug_glClientActiveTextureARB;
#define glClientActiveTextureARB glad_debug_glClientActiveTextureARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
GLAPI PFNGLMULTITEXCOORD1DARBPROC glad_glMultiTexCoord1dARB;
GLAPI PFNGLMULTITEXCOORD1DARBPROC glad_debug_glMultiTexCoord1dARB;
#define glMultiTexCoord1dARB glad_debug_glMultiTexCoord1dARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target, const GLdouble* v);
GLAPI PFNGLMULTITEXCOORD1DVARBPROC glad_glMultiTexCoord1dvARB;
GLAPI PFNGLMULTITEXCOORD1DVARBPROC glad_debug_glMultiTexCoord1dvARB;
#define glMultiTexCoord1dvARB glad_debug_glMultiTexCoord1dvARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
GLAPI PFNGLMULTITEXCOORD1FARBPROC glad_glMultiTexCoord1fARB;
GLAPI PFNGLMULTITEXCOORD1FARBPROC glad_debug_glMultiTexCoord1fARB;
#define glMultiTexCoord1fARB glad_debug_glMultiTexCoord1fARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target, const GLfloat* v);
GLAPI PFNGLMULTITEXCOORD1FVARBPROC glad_glMultiTexCoord1fvARB;
GLAPI PFNGLMULTITEXCOORD1FVARBPROC glad_debug_glMultiTexCoord1fvARB;
#define glMultiTexCoord1fvARB glad_debug_glMultiTexCoord1fvARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
GLAPI PFNGLMULTITEXCOORD1IARBPROC glad_glMultiTexCoord1iARB;
GLAPI PFNGLMULTITEXCOORD1IARBPROC glad_debug_glMultiTexCoord1iARB;
#define glMultiTexCoord1iARB glad_debug_glMultiTexCoord1iARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target, const GLint* v);
GLAPI PFNGLMULTITEXCOORD1IVARBPROC glad_glMultiTexCoord1ivARB;
GLAPI PFNGLMULTITEXCOORD1IVARBPROC glad_debug_glMultiTexCoord1ivARB;
#define glMultiTexCoord1ivARB glad_debug_glMultiTexCoord1ivARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
GLAPI PFNGLMULTITEXCOORD1SARBPROC glad_glMultiTexCoord1sARB;
GLAPI PFNGLMULTITEXCOORD1SARBPROC glad_debug_glMultiTexCoord1sARB;
#define glMultiTexCoord1sARB glad_debug_glMultiTexCoord1sARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target, const GLshort* v);
GLAPI PFNGLMULTITEXCOORD1SVARBPROC glad_glMultiTexCoord1svARB;
GLAPI PFNGLMULTITEXCOORD1SVARBPROC glad_debug_glMultiTexCoord1svARB;
#define glMultiTexCoord1svARB glad_debug_glMultiTexCoord1svARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
GLAPI PFNGLMULTITEXCOORD2DARBPROC glad_glMultiTexCoord2dARB;
GLAPI PFNGLMULTITEXCOORD2DARBPROC glad_debug_glMultiTexCoord2dARB;
#define glMultiTexCoord2dARB glad_debug_glMultiTexCoord2dARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target, const GLdouble* v);
GLAPI PFNGLMULTITEXCOORD2DVARBPROC glad_glMultiTexCoord2dvARB;
GLAPI PFNGLMULTITEXCOORD2DVARBPROC glad_debug_glMultiTexCoord2dvARB;
#define glMultiTexCoord2dvARB glad_debug_glMultiTexCoord2dvARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
GLAPI PFNGLMULTITEXCOORD2FARBPROC glad_glMultiTexCoord2fARB;
GLAPI PFNGLMULTITEXCOORD2FARBPROC glad_debug_glMultiTexCoord2fARB;
#define glMultiTexCoord2fARB glad_debug_glMultiTexCoord2fARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target, const GLfloat* v);
GLAPI PFNGLMULTITEXCOORD2FVARBPROC glad_glMultiTexCoord2fvARB;
GLAPI PFNGLMULTITEXCOORD2FVARBPROC glad_debug_glMultiTexCoord2fvARB;
#define glMultiTexCoord2fvARB glad_debug_glMultiTexCoord2fvARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
GLAPI PFNGLMULTITEXCOORD2IARBPROC glad_glMultiTexCoord2iARB;
GLAPI PFNGLMULTITEXCOORD2IARBPROC glad_debug_glMultiTexCoord2iARB;
#define glMultiTexCoord2iARB glad_debug_glMultiTexCoord2iARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target, const GLint* v);
GLAPI PFNGLMULTITEXCOORD2IVARBPROC glad_glMultiTexCoord2ivARB;
GLAPI PFNGLMULTITEXCOORD2IVARBPROC glad_debug_glMultiTexCoord2ivARB;
#define glMultiTexCoord2ivARB glad_debug_glMultiTexCoord2ivARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
GLAPI PFNGLMULTITEXCOORD2SARBPROC glad_glMultiTexCoord2sARB;
GLAPI PFNGLMULTITEXCOORD2SARBPROC glad_debug_glMultiTexCoord2sARB;
#define glMultiTexCoord2sARB glad_debug_glMultiTexCoord2sARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target, const GLshort* v);
GLAPI PFNGLMULTITEXCOORD2SVARBPROC glad_glMultiTexCoord2svARB;
GLAPI PFNGLMULTITEXCOORD2SVARBPROC glad_debug_glMultiTexCoord2svARB;
#define glMultiTexCoord2svARB glad_debug_glMultiTexCoord2svARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
GLAPI PFNGLMULTITEXCOORD3DARBPROC glad_glMultiTexCoord3dARB;
GLAPI PFNGLMULTITEXCOORD3DARBPROC glad_debug_glMultiTexCoord3dARB;
#define glMultiTexCoord3dARB glad_debug_glMultiTexCoord3dARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target, const GLdouble* v);
GLAPI PFNGLMULTITEXCOORD3DVARBPROC glad_glMultiTexCoord3dvARB;
GLAPI PFNGLMULTITEXCOORD3DVARBPROC glad_debug_glMultiTexCoord3dvARB;
#define glMultiTexCoord3dvARB glad_debug_glMultiTexCoord3dvARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
GLAPI PFNGLMULTITEXCOORD3FARBPROC glad_glMultiTexCoord3fARB;
GLAPI PFNGLMULTITEXCOORD3FARBPROC glad_debug_glMultiTexCoord3fARB;
#define glMultiTexCoord3fARB glad_debug_glMultiTexCoord3fARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target, const GLfloat* v);
GLAPI PFNGLMULTITEXCOORD3FVARBPROC glad_glMultiTexCoord3fvARB;
GLAPI PFNGLMULTITEXCOORD3FVARBPROC glad_debug_glMultiTexCoord3fvARB;
#define glMultiTexCoord3fvARB glad_debug_glMultiTexCoord3fvARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
GLAPI PFNGLMULTITEXCOORD3IARBPROC glad_glMultiTexCoord3iARB;
GLAPI PFNGLMULTITEXCOORD3IARBPROC glad_debug_glMultiTexCoord3iARB;
#define glMultiTexCoord3iARB glad_debug_glMultiTexCoord3iARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target, const GLint* v);
GLAPI PFNGLMULTITEXCOORD3IVARBPROC glad_glMultiTexCoord3ivARB;
GLAPI PFNGLMULTITEXCOORD3IVARBPROC glad_debug_glMultiTexCoord3ivARB;
#define glMultiTexCoord3ivARB glad_debug_glMultiTexCoord3ivARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
GLAPI PFNGLMULTITEXCOORD3SARBPROC glad_glMultiTexCoord3sARB;
GLAPI PFNGLMULTITEXCOORD3SARBPROC glad_debug_glMultiTexCoord3sARB;
#define glMultiTexCoord3sARB glad_debug_glMultiTexCoord3sARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target, const GLshort* v);
GLAPI PFNGLMULTITEXCOORD3SVARBPROC glad_glMultiTexCoord3svARB;
GLAPI PFNGLMULTITEXCOORD3SVARBPROC glad_debug_glMultiTexCoord3svARB;
#define glMultiTexCoord3svARB glad_debug_glMultiTexCoord3svARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
GLAPI PFNGLMULTITEXCOORD4DARBPROC glad_glMultiTexCoord4dARB;
GLAPI PFNGLMULTITEXCOORD4DARBPROC glad_debug_glMultiTexCoord4dARB;
#define glMultiTexCoord4dARB glad_debug_glMultiTexCoord4dARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target, const GLdouble* v);
GLAPI PFNGLMULTITEXCOORD4DVARBPROC glad_glMultiTexCoord4dvARB;
GLAPI PFNGLMULTITEXCOORD4DVARBPROC glad_debug_glMultiTexCoord4dvARB;
#define glMultiTexCoord4dvARB glad_debug_glMultiTexCoord4dvARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
GLAPI PFNGLMULTITEXCOORD4FARBPROC glad_glMultiTexCoord4fARB;
GLAPI PFNGLMULTITEXCOORD4FARBPROC glad_debug_glMultiTexCoord4fARB;
#define glMultiTexCoord4fARB glad_debug_glMultiTexCoord4fARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target, const GLfloat* v);
GLAPI PFNGLMULTITEXCOORD4FVARBPROC glad_glMultiTexCoord4fvARB;
GLAPI PFNGLMULTITEXCOORD4FVARBPROC glad_debug_glMultiTexCoord4fvARB;
#define glMultiTexCoord4fvARB glad_debug_glMultiTexCoord4fvARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
GLAPI PFNGLMULTITEXCOORD4IARBPROC glad_glMultiTexCoord4iARB;
GLAPI PFNGLMULTITEXCOORD4IARBPROC glad_debug_glMultiTexCoord4iARB;
#define glMultiTexCoord4iARB glad_debug_glMultiTexCoord4iARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target, const GLint* v);
GLAPI PFNGLMULTITEXCOORD4IVARBPROC glad_glMultiTexCoord4ivARB;
GLAPI PFNGLMULTITEXCOORD4IVARBPROC glad_debug_glMultiTexCoord4ivARB;
#define glMultiTexCoord4ivARB glad_debug_glMultiTexCoord4ivARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
GLAPI PFNGLMULTITEXCOORD4SARBPROC glad_glMultiTexCoord4sARB;
GLAPI PFNGLMULTITEXCOORD4SARBPROC glad_debug_glMultiTexCoord4sARB;
#define glMultiTexCoord4sARB glad_debug_glMultiTexCoord4sARB
typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target, const GLshort* v);
GLAPI PFNGLMULTITEXCOORD4SVARBPROC glad_glMultiTexCoord4svARB;
GLAPI PFNGLMULTITEXCOORD4SVARBPROC glad_debug_glMultiTexCoord4svARB;
#define glMultiTexCoord4svARB glad_debug_glMultiTexCoord4svARB
#endif
#ifndef GL_SGIX_polynomial_ffd
#define GL_SGIX_polynomial_ffd 1
GLAPI int GLAD_GL_SGIX_polynomial_ffd;
typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble* points);
GLAPI PFNGLDEFORMATIONMAP3DSGIXPROC glad_glDeformationMap3dSGIX;
GLAPI PFNGLDEFORMATIONMAP3DSGIXPROC glad_debug_glDeformationMap3dSGIX;
#define glDeformationMap3dSGIX glad_debug_glDeformationMap3dSGIX
typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat* points);
GLAPI PFNGLDEFORMATIONMAP3FSGIXPROC glad_glDeformationMap3fSGIX;
GLAPI PFNGLDEFORMATIONMAP3FSGIXPROC glad_debug_glDeformationMap3fSGIX;
#define glDeformationMap3fSGIX glad_debug_glDeformationMap3fSGIX
typedef void (APIENTRYP PFNGLDEFORMSGIXPROC)(GLbitfield mask);
GLAPI PFNGLDEFORMSGIXPROC glad_glDeformSGIX;
GLAPI PFNGLDEFORMSGIXPROC glad_debug_glDeformSGIX;
#define glDeformSGIX glad_debug_glDeformSGIX
typedef void (APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)(GLbitfield mask);
GLAPI PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glad_glLoadIdentityDeformationMapSGIX;
GLAPI PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glad_debug_glLoadIdentityDeformationMapSGIX;
#define glLoadIdentityDeformationMapSGIX glad_debug_glLoadIdentityDeformationMapSGIX
#endif
#ifndef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex 1
GLAPI int GLAD_GL_EXT_provoking_vertex;
typedef void (APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC)(GLenum mode);
GLAPI PFNGLPROVOKINGVERTEXEXTPROC glad_glProvokingVertexEXT;
GLAPI PFNGLPROVOKINGVERTEXEXTPROC glad_debug_glProvokingVertexEXT;
#define glProvokingVertexEXT glad_debug_glProvokingVertexEXT
#endif
#ifndef GL_ARB_point_parameters
#define GL_ARB_point_parameters 1
GLAPI int GLAD_GL_ARB_point_parameters;
typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLPOINTPARAMETERFARBPROC glad_glPointParameterfARB;
GLAPI PFNGLPOINTPARAMETERFARBPROC glad_debug_glPointParameterfARB;
#define glPointParameterfARB glad_debug_glPointParameterfARB
typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLPOINTPARAMETERFVARBPROC glad_glPointParameterfvARB;
GLAPI PFNGLPOINTPARAMETERFVARBPROC glad_debug_glPointParameterfvARB;
#define glPointParameterfvARB glad_debug_glPointParameterfvARB
#endif
#ifndef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 1
GLAPI int GLAD_GL_ARB_shader_image_load_store;
typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
GLAPI PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture;
GLAPI PFNGLBINDIMAGETEXTUREPROC glad_debug_glBindImageTexture;
#define glBindImageTexture glad_debug_glBindImageTexture
typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
GLAPI PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier;
GLAPI PFNGLMEMORYBARRIERPROC glad_debug_glMemoryBarrier;
#define glMemoryBarrier glad_debug_glMemoryBarrier
#endif
#ifndef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 1
GLAPI int GLAD_GL_ARB_conditional_render_inverted;
#endif
#ifndef GL_HP_occlusion_test
#define GL_HP_occlusion_test 1
GLAPI int GLAD_GL_HP_occlusion_test;
#endif
#ifndef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 1
GLAPI int GLAD_GL_ARB_ES3_compatibility;
#endif
#ifndef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 1
GLAPI int GLAD_GL_ARB_texture_barrier;
typedef void (APIENTRYP PFNGLTEXTUREBARRIERPROC)();
GLAPI PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier;
GLAPI PFNGLTEXTUREBARRIERPROC glad_debug_glTextureBarrier;
#define glTextureBarrier glad_debug_glTextureBarrier
#endif
#ifndef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 1
GLAPI int GLAD_GL_ARB_texture_buffer_object_rgb32;
#endif
#ifndef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect 1
GLAPI int GLAD_GL_NV_bindless_multi_draw_indirect;
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC)(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC glad_glMultiDrawArraysIndirectBindlessNV;
GLAPI PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC glad_debug_glMultiDrawArraysIndirectBindlessNV;
#define glMultiDrawArraysIndirectBindlessNV glad_debug_glMultiDrawArraysIndirectBindlessNV
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC)(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC glad_glMultiDrawElementsIndirectBindlessNV;
GLAPI PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC glad_debug_glMultiDrawElementsIndirectBindlessNV;
#define glMultiDrawElementsIndirectBindlessNV glad_debug_glMultiDrawElementsIndirectBindlessNV
#endif
#ifndef GL_SGIX_texture_multi_buffer
#define GL_SGIX_texture_multi_buffer 1
GLAPI int GLAD_GL_SGIX_texture_multi_buffer;
#endif
#ifndef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback 1
GLAPI int GLAD_GL_EXT_transform_feedback;
typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)(GLenum primitiveMode);
GLAPI PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_glBeginTransformFeedbackEXT;
GLAPI PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_debug_glBeginTransformFeedbackEXT;
#define glBeginTransformFeedbackEXT glad_debug_glBeginTransformFeedbackEXT
typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC)();
GLAPI PFNGLENDTRANSFORMFEEDBACKEXTPROC glad_glEndTransformFeedbackEXT;
GLAPI PFNGLENDTRANSFORMFEEDBACKEXTPROC glad_debug_glEndTransformFeedbackEXT;
#define glEndTransformFeedbackEXT glad_debug_glEndTransformFeedbackEXT
typedef void (APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLAPI PFNGLBINDBUFFERRANGEEXTPROC glad_glBindBufferRangeEXT;
GLAPI PFNGLBINDBUFFERRANGEEXTPROC glad_debug_glBindBufferRangeEXT;
#define glBindBufferRangeEXT glad_debug_glBindBufferRangeEXT
typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
GLAPI PFNGLBINDBUFFEROFFSETEXTPROC glad_glBindBufferOffsetEXT;
GLAPI PFNGLBINDBUFFEROFFSETEXTPROC glad_debug_glBindBufferOffsetEXT;
#define glBindBufferOffsetEXT glad_debug_glBindBufferOffsetEXT
typedef void (APIENTRYP PFNGLBINDBUFFERBASEEXTPROC)(GLenum target, GLuint index, GLuint buffer);
GLAPI PFNGLBINDBUFFERBASEEXTPROC glad_glBindBufferBaseEXT;
GLAPI PFNGLBINDBUFFERBASEEXTPROC glad_debug_glBindBufferBaseEXT;
#define glBindBufferBaseEXT glad_debug_glBindBufferBaseEXT
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)(GLuint program, GLsizei count, const GLchar** varyings, GLenum bufferMode);
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glad_glTransformFeedbackVaryingsEXT;
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glad_debug_glTransformFeedbackVaryingsEXT;
#define glTransformFeedbackVaryingsEXT glad_debug_glTransformFeedbackVaryingsEXT
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glad_glGetTransformFeedbackVaryingEXT;
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glad_debug_glGetTransformFeedbackVaryingEXT;
#define glGetTransformFeedbackVaryingEXT glad_debug_glGetTransformFeedbackVaryingEXT
#endif
#ifndef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 1
GLAPI int GLAD_GL_KHR_texture_compression_astc_ldr;
#endif
#ifndef GL_3DFX_multisample
#define GL_3DFX_multisample 1
GLAPI int GLAD_GL_3DFX_multisample;
#endif
#ifndef GL_INTEL_fragment_shader_ordering
#define GL_INTEL_fragment_shader_ordering 1
GLAPI int GLAD_GL_INTEL_fragment_shader_ordering;
#endif
#ifndef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3 1
GLAPI int GLAD_GL_ARB_texture_env_dot3;
#endif
#ifndef GL_NV_gpu_program4
#define GL_NV_gpu_program4 1
GLAPI int GLAD_GL_NV_gpu_program4;
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLPROGRAMLOCALPARAMETERI4INVPROC glad_glProgramLocalParameterI4iNV;
GLAPI PFNGLPROGRAMLOCALPARAMETERI4INVPROC glad_debug_glProgramLocalParameterI4iNV;
#define glProgramLocalParameterI4iNV glad_debug_glProgramLocalParameterI4iNV
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)(GLenum target, GLuint index, const GLint* params);
GLAPI PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glad_glProgramLocalParameterI4ivNV;
GLAPI PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glad_debug_glProgramLocalParameterI4ivNV;
#define glProgramLocalParameterI4ivNV glad_debug_glProgramLocalParameterI4ivNV
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLint* params);
GLAPI PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glad_glProgramLocalParametersI4ivNV;
GLAPI PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glad_debug_glProgramLocalParametersI4ivNV;
#define glProgramLocalParametersI4ivNV glad_debug_glProgramLocalParametersI4ivNV
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glad_glProgramLocalParameterI4uiNV;
GLAPI PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glad_debug_glProgramLocalParameterI4uiNV;
#define glProgramLocalParameterI4uiNV glad_debug_glProgramLocalParameterI4uiNV
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)(GLenum target, GLuint index, const GLuint* params);
GLAPI PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glad_glProgramLocalParameterI4uivNV;
GLAPI PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glad_debug_glProgramLocalParameterI4uivNV;
#define glProgramLocalParameterI4uivNV glad_debug_glProgramLocalParameterI4uivNV
typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLuint* params);
GLAPI PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glad_glProgramLocalParametersI4uivNV;
GLAPI PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glad_debug_glProgramLocalParametersI4uivNV;
#define glProgramLocalParametersI4uivNV glad_debug_glProgramLocalParametersI4uivNV
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLPROGRAMENVPARAMETERI4INVPROC glad_glProgramEnvParameterI4iNV;
GLAPI PFNGLPROGRAMENVPARAMETERI4INVPROC glad_debug_glProgramEnvParameterI4iNV;
#define glProgramEnvParameterI4iNV glad_debug_glProgramEnvParameterI4iNV
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC)(GLenum target, GLuint index, const GLint* params);
GLAPI PFNGLPROGRAMENVPARAMETERI4IVNVPROC glad_glProgramEnvParameterI4ivNV;
GLAPI PFNGLPROGRAMENVPARAMETERI4IVNVPROC glad_debug_glProgramEnvParameterI4ivNV;
#define glProgramEnvParameterI4ivNV glad_debug_glProgramEnvParameterI4ivNV
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLint* params);
GLAPI PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glad_glProgramEnvParametersI4ivNV;
GLAPI PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glad_debug_glProgramEnvParametersI4ivNV;
#define glProgramEnvParametersI4ivNV glad_debug_glProgramEnvParametersI4ivNV
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI PFNGLPROGRAMENVPARAMETERI4UINVPROC glad_glProgramEnvParameterI4uiNV;
GLAPI PFNGLPROGRAMENVPARAMETERI4UINVPROC glad_debug_glProgramEnvParameterI4uiNV;
#define glProgramEnvParameterI4uiNV glad_debug_glProgramEnvParameterI4uiNV
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)(GLenum target, GLuint index, const GLuint* params);
GLAPI PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glad_glProgramEnvParameterI4uivNV;
GLAPI PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glad_debug_glProgramEnvParameterI4uivNV;
#define glProgramEnvParameterI4uivNV glad_debug_glProgramEnvParameterI4uivNV
typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLuint* params);
GLAPI PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glad_glProgramEnvParametersI4uivNV;
GLAPI PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glad_debug_glProgramEnvParametersI4uivNV;
#define glProgramEnvParametersI4uivNV glad_debug_glProgramEnvParametersI4uivNV
typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)(GLenum target, GLuint index, GLint* params);
GLAPI PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC glad_glGetProgramLocalParameterIivNV;
GLAPI PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC glad_debug_glGetProgramLocalParameterIivNV;
#define glGetProgramLocalParameterIivNV glad_debug_glGetProgramLocalParameterIivNV
typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)(GLenum target, GLuint index, GLuint* params);
GLAPI PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC glad_glGetProgramLocalParameterIuivNV;
GLAPI PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC glad_debug_glGetProgramLocalParameterIuivNV;
#define glGetProgramLocalParameterIuivNV glad_debug_glGetProgramLocalParameterIuivNV
typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)(GLenum target, GLuint index, GLint* params);
GLAPI PFNGLGETPROGRAMENVPARAMETERIIVNVPROC glad_glGetProgramEnvParameterIivNV;
GLAPI PFNGLGETPROGRAMENVPARAMETERIIVNVPROC glad_debug_glGetProgramEnvParameterIivNV;
#define glGetProgramEnvParameterIivNV glad_debug_glGetProgramEnvParameterIivNV
typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)(GLenum target, GLuint index, GLuint* params);
GLAPI PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC glad_glGetProgramEnvParameterIuivNV;
GLAPI PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC glad_debug_glGetProgramEnvParameterIuivNV;
#define glGetProgramEnvParameterIuivNV glad_debug_glGetProgramEnvParameterIuivNV
#endif
#ifndef GL_NV_gpu_program5
#define GL_NV_gpu_program5 1
GLAPI int GLAD_GL_NV_gpu_program5;
typedef void (APIENTRYP PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)(GLenum target, GLsizei count, const GLuint* params);
GLAPI PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC glad_glProgramSubroutineParametersuivNV;
GLAPI PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC glad_debug_glProgramSubroutineParametersuivNV;
#define glProgramSubroutineParametersuivNV glad_debug_glProgramSubroutineParametersuivNV
typedef void (APIENTRYP PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)(GLenum target, GLuint index, GLuint* param);
GLAPI PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC glad_glGetProgramSubroutineParameteruivNV;
GLAPI PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC glad_debug_glGetProgramSubroutineParameteruivNV;
#define glGetProgramSubroutineParameteruivNV glad_debug_glGetProgramSubroutineParameteruivNV
#endif
#ifndef GL_NV_float_buffer
#define GL_NV_float_buffer 1
GLAPI int GLAD_GL_NV_float_buffer;
#endif
#ifndef GL_SGIS_texture_edge_clamp
#define GL_SGIS_texture_edge_clamp 1
GLAPI int GLAD_GL_SGIS_texture_edge_clamp;
#endif
#ifndef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 1
GLAPI int GLAD_GL_ARB_framebuffer_sRGB;
#endif
#ifndef GL_SUN_slice_accum
#define GL_SUN_slice_accum 1
GLAPI int GLAD_GL_SUN_slice_accum;
#endif
#ifndef GL_EXT_index_texture
#define GL_EXT_index_texture 1
GLAPI int GLAD_GL_EXT_index_texture;
#endif
#ifndef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted 1
GLAPI int GLAD_GL_EXT_shader_image_load_formatted;
#endif
#ifndef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 1
GLAPI int GLAD_GL_ARB_geometry_shader4;
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
GLAPI PFNGLPROGRAMPARAMETERIARBPROC glad_glProgramParameteriARB;
GLAPI PFNGLPROGRAMPARAMETERIARBPROC glad_debug_glProgramParameteriARB;
#define glProgramParameteriARB glad_debug_glProgramParameteriARB
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTUREARBPROC glad_glFramebufferTextureARB;
GLAPI PFNGLFRAMEBUFFERTEXTUREARBPROC glad_debug_glFramebufferTextureARB;
#define glFramebufferTextureARB glad_debug_glFramebufferTextureARB
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLAPI PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glad_glFramebufferTextureLayerARB;
GLAPI PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glad_debug_glFramebufferTextureLayerARB;
#define glFramebufferTextureLayerARB glad_debug_glFramebufferTextureLayerARB
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
GLAPI PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glad_glFramebufferTextureFaceARB;
GLAPI PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glad_debug_glFramebufferTextureFaceARB;
#define glFramebufferTextureFaceARB glad_debug_glFramebufferTextureFaceARB
#endif
#ifndef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color 1
GLAPI int GLAD_GL_EXT_separate_specular_color;
#endif
#ifndef GL_AMD_depth_clamp_separate
#define GL_AMD_depth_clamp_separate 1
GLAPI int GLAD_GL_AMD_depth_clamp_separate;
#endif
#ifndef GL_NV_conservative_raster
#define GL_NV_conservative_raster 1
GLAPI int GLAD_GL_NV_conservative_raster;
typedef void (APIENTRYP PFNGLSUBPIXELPRECISIONBIASNVPROC)(GLuint xbits, GLuint ybits);
GLAPI PFNGLSUBPIXELPRECISIONBIASNVPROC glad_glSubpixelPrecisionBiasNV;
GLAPI PFNGLSUBPIXELPRECISIONBIASNVPROC glad_debug_glSubpixelPrecisionBiasNV;
#define glSubpixelPrecisionBiasNV glad_debug_glSubpixelPrecisionBiasNV
#endif
#ifndef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 1
GLAPI int GLAD_GL_ARB_sparse_texture2;
#endif
#ifndef GL_SGIX_sprite
#define GL_SGIX_sprite 1
GLAPI int GLAD_GL_SGIX_sprite;
typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLSPRITEPARAMETERFSGIXPROC glad_glSpriteParameterfSGIX;
GLAPI PFNGLSPRITEPARAMETERFSGIXPROC glad_debug_glSpriteParameterfSGIX;
#define glSpriteParameterfSGIX glad_debug_glSpriteParameterfSGIX
typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLSPRITEPARAMETERFVSGIXPROC glad_glSpriteParameterfvSGIX;
GLAPI PFNGLSPRITEPARAMETERFVSGIXPROC glad_debug_glSpriteParameterfvSGIX;
#define glSpriteParameterfvSGIX glad_debug_glSpriteParameterfvSGIX
typedef void (APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC)(GLenum pname, GLint param);
GLAPI PFNGLSPRITEPARAMETERISGIXPROC glad_glSpriteParameteriSGIX;
GLAPI PFNGLSPRITEPARAMETERISGIXPROC glad_debug_glSpriteParameteriSGIX;
#define glSpriteParameteriSGIX glad_debug_glSpriteParameteriSGIX
typedef void (APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC)(GLenum pname, const GLint* params);
GLAPI PFNGLSPRITEPARAMETERIVSGIXPROC glad_glSpriteParameterivSGIX;
GLAPI PFNGLSPRITEPARAMETERIVSGIXPROC glad_debug_glSpriteParameterivSGIX;
#define glSpriteParameterivSGIX glad_debug_glSpriteParameterivSGIX
#endif
#ifndef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 1
GLAPI int GLAD_GL_ARB_get_program_binary;
typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
GLAPI PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
GLAPI PFNGLGETPROGRAMBINARYPROC glad_debug_glGetProgramBinary;
#define glGetProgramBinary glad_debug_glGetProgramBinary
typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
GLAPI PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
GLAPI PFNGLPROGRAMBINARYPROC glad_debug_glProgramBinary;
#define glProgramBinary glad_debug_glProgramBinary
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
GLAPI PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
GLAPI PFNGLPROGRAMPARAMETERIPROC glad_debug_glProgramParameteri;
#define glProgramParameteri glad_debug_glProgramParameteri
#endif
#ifndef GL_AMD_occlusion_query_event
#define GL_AMD_occlusion_query_event 1
GLAPI int GLAD_GL_AMD_occlusion_query_event;
typedef void (APIENTRYP PFNGLQUERYOBJECTPARAMETERUIAMDPROC)(GLenum target, GLuint id, GLenum pname, GLuint param);
GLAPI PFNGLQUERYOBJECTPARAMETERUIAMDPROC glad_glQueryObjectParameteruiAMD;
GLAPI PFNGLQUERYOBJECTPARAMETERUIAMDPROC glad_debug_glQueryObjectParameteruiAMD;
#define glQueryObjectParameteruiAMD glad_debug_glQueryObjectParameteruiAMD
#endif
#ifndef GL_SGIS_multisample
#define GL_SGIS_multisample 1
GLAPI int GLAD_GL_SGIS_multisample;
typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC)(GLclampf value, GLboolean invert);
GLAPI PFNGLSAMPLEMASKSGISPROC glad_glSampleMaskSGIS;
GLAPI PFNGLSAMPLEMASKSGISPROC glad_debug_glSampleMaskSGIS;
#define glSampleMaskSGIS glad_debug_glSampleMaskSGIS
typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC)(GLenum pattern);
GLAPI PFNGLSAMPLEPATTERNSGISPROC glad_glSamplePatternSGIS;
GLAPI PFNGLSAMPLEPATTERNSGISPROC glad_debug_glSamplePatternSGIS;
#define glSamplePatternSGIS glad_debug_glSamplePatternSGIS
#endif
#ifndef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object 1
GLAPI int GLAD_GL_EXT_framebuffer_object;
typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
GLAPI PFNGLISRENDERBUFFEREXTPROC glad_glIsRenderbufferEXT;
GLAPI PFNGLISRENDERBUFFEREXTPROC glad_debug_glIsRenderbufferEXT;
#define glIsRenderbufferEXT glad_debug_glIsRenderbufferEXT
typedef void (APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
GLAPI PFNGLBINDRENDERBUFFEREXTPROC glad_glBindRenderbufferEXT;
GLAPI PFNGLBINDRENDERBUFFEREXTPROC glad_debug_glBindRenderbufferEXT;
#define glBindRenderbufferEXT glad_debug_glBindRenderbufferEXT
typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n, const GLuint* renderbuffers);
GLAPI PFNGLDELETERENDERBUFFERSEXTPROC glad_glDeleteRenderbuffersEXT;
GLAPI PFNGLDELETERENDERBUFFERSEXTPROC glad_debug_glDeleteRenderbuffersEXT;
#define glDeleteRenderbuffersEXT glad_debug_glDeleteRenderbuffersEXT
typedef void (APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint* renderbuffers);
GLAPI PFNGLGENRENDERBUFFERSEXTPROC glad_glGenRenderbuffersEXT;
GLAPI PFNGLGENRENDERBUFFERSEXTPROC glad_debug_glGenRenderbuffersEXT;
#define glGenRenderbuffersEXT glad_debug_glGenRenderbuffersEXT
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEEXTPROC glad_glRenderbufferStorageEXT;
GLAPI PFNGLRENDERBUFFERSTORAGEEXTPROC glad_debug_glRenderbufferStorageEXT;
#define glRenderbufferStorageEXT glad_debug_glRenderbufferStorageEXT
typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint* params);
GLAPI PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glad_glGetRenderbufferParameterivEXT;
GLAPI PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glad_debug_glGetRenderbufferParameterivEXT;
#define glGetRenderbufferParameterivEXT glad_debug_glGetRenderbufferParameterivEXT
typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
GLAPI PFNGLISFRAMEBUFFEREXTPROC glad_glIsFramebufferEXT;
GLAPI PFNGLISFRAMEBUFFEREXTPROC glad_debug_glIsFramebufferEXT;
#define glIsFramebufferEXT glad_debug_glIsFramebufferEXT
typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
GLAPI PFNGLBINDFRAMEBUFFEREXTPROC glad_glBindFramebufferEXT;
GLAPI PFNGLBINDFRAMEBUFFEREXTPROC glad_debug_glBindFramebufferEXT;
#define glBindFramebufferEXT glad_debug_glBindFramebufferEXT
typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n, const GLuint* framebuffers);
GLAPI PFNGLDELETEFRAMEBUFFERSEXTPROC glad_glDeleteFramebuffersEXT;
GLAPI PFNGLDELETEFRAMEBUFFERSEXTPROC glad_debug_glDeleteFramebuffersEXT;
#define glDeleteFramebuffersEXT glad_debug_glDeleteFramebuffersEXT
typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint* framebuffers);
GLAPI PFNGLGENFRAMEBUFFERSEXTPROC glad_glGenFramebuffersEXT;
GLAPI PFNGLGENFRAMEBUFFERSEXTPROC glad_debug_glGenFramebuffersEXT;
#define glGenFramebuffersEXT glad_debug_glGenFramebuffersEXT
typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
GLAPI PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_glCheckFramebufferStatusEXT;
GLAPI PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckFramebufferStatusEXT;
#define glCheckFramebufferStatusEXT glad_debug_glCheckFramebufferStatusEXT
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glad_glFramebufferTexture1DEXT;
GLAPI PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glad_debug_glFramebufferTexture1DEXT;
#define glFramebufferTexture1DEXT glad_debug_glFramebufferTexture1DEXT
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glad_glFramebufferTexture2DEXT;
GLAPI PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glad_debug_glFramebufferTexture2DEXT;
#define glFramebufferTexture2DEXT glad_debug_glFramebufferTexture2DEXT
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLAPI PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glad_glFramebufferTexture3DEXT;
GLAPI PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glad_debug_glFramebufferTexture3DEXT;
#define glFramebufferTexture3DEXT glad_debug_glFramebufferTexture3DEXT
typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glad_glFramebufferRenderbufferEXT;
GLAPI PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glad_debug_glFramebufferRenderbufferEXT;
#define glFramebufferRenderbufferEXT glad_debug_glFramebufferRenderbufferEXT
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_glGetFramebufferAttachmentParameterivEXT;
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_debug_glGetFramebufferAttachmentParameterivEXT;
#define glGetFramebufferAttachmentParameterivEXT glad_debug_glGetFramebufferAttachmentParameterivEXT
typedef void (APIENTRYP PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
GLAPI PFNGLGENERATEMIPMAPEXTPROC glad_glGenerateMipmapEXT;
GLAPI PFNGLGENERATEMIPMAPEXTPROC glad_debug_glGenerateMipmapEXT;
#define glGenerateMipmapEXT glad_debug_glGenerateMipmapEXT
#endif
#ifndef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation 1
GLAPI int GLAD_GL_ARB_robustness_isolation;
#endif
#ifndef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 1
GLAPI int GLAD_GL_ARB_vertex_array_bgra;
#endif
#ifndef GL_APPLE_vertex_array_range
#define GL_APPLE_vertex_array_range 1
GLAPI int GLAD_GL_APPLE_vertex_array_range;
typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, void* pointer);
GLAPI PFNGLVERTEXARRAYRANGEAPPLEPROC glad_glVertexArrayRangeAPPLE;
GLAPI PFNGLVERTEXARRAYRANGEAPPLEPROC glad_debug_glVertexArrayRangeAPPLE;
#define glVertexArrayRangeAPPLE glad_debug_glVertexArrayRangeAPPLE
typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)(GLsizei length, void* pointer);
GLAPI PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glad_glFlushVertexArrayRangeAPPLE;
GLAPI PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glad_debug_glFlushVertexArrayRangeAPPLE;
#define glFlushVertexArrayRangeAPPLE glad_debug_glFlushVertexArrayRangeAPPLE
typedef void (APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)(GLenum pname, GLint param);
GLAPI PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glad_glVertexArrayParameteriAPPLE;
GLAPI PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glad_debug_glVertexArrayParameteriAPPLE;
#define glVertexArrayParameteriAPPLE glad_debug_glVertexArrayParameteriAPPLE
#endif
#ifndef GL_AMD_query_buffer_object
#define GL_AMD_query_buffer_object 1
GLAPI int GLAD_GL_AMD_query_buffer_object;
#endif
#ifndef GL_NV_register_combiners
#define GL_NV_register_combiners 1
GLAPI int GLAD_GL_NV_register_combiners;
typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC)(GLenum pname, const GLfloat* params);
GLAPI PFNGLCOMBINERPARAMETERFVNVPROC glad_glCombinerParameterfvNV;
GLAPI PFNGLCOMBINERPARAMETERFVNVPROC glad_debug_glCombinerParameterfvNV;
#define glCombinerParameterfvNV glad_debug_glCombinerParameterfvNV
typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLCOMBINERPARAMETERFNVPROC glad_glCombinerParameterfNV;
GLAPI PFNGLCOMBINERPARAMETERFNVPROC glad_debug_glCombinerParameterfNV;
#define glCombinerParameterfNV glad_debug_glCombinerParameterfNV
typedef void (APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC)(GLenum pname, const GLint* params);
GLAPI PFNGLCOMBINERPARAMETERIVNVPROC glad_glCombinerParameterivNV;
GLAPI PFNGLCOMBINERPARAMETERIVNVPROC glad_debug_glCombinerParameterivNV;
#define glCombinerParameterivNV glad_debug_glCombinerParameterivNV
typedef void (APIENTRYP PFNGLCOMBINERPARAMETERINVPROC)(GLenum pname, GLint param);
GLAPI PFNGLCOMBINERPARAMETERINVPROC glad_glCombinerParameteriNV;
GLAPI PFNGLCOMBINERPARAMETERINVPROC glad_debug_glCombinerParameteriNV;
#define glCombinerParameteriNV glad_debug_glCombinerParameteriNV
typedef void (APIENTRYP PFNGLCOMBINERINPUTNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
GLAPI PFNGLCOMBINERINPUTNVPROC glad_glCombinerInputNV;
GLAPI PFNGLCOMBINERINPUTNVPROC glad_debug_glCombinerInputNV;
#define glCombinerInputNV glad_debug_glCombinerInputNV
typedef void (APIENTRYP PFNGLCOMBINEROUTPUTNVPROC)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
GLAPI PFNGLCOMBINEROUTPUTNVPROC glad_glCombinerOutputNV;
GLAPI PFNGLCOMBINEROUTPUTNVPROC glad_debug_glCombinerOutputNV;
#define glCombinerOutputNV glad_debug_glCombinerOutputNV
typedef void (APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC)(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
GLAPI PFNGLFINALCOMBINERINPUTNVPROC glad_glFinalCombinerInputNV;
GLAPI PFNGLFINALCOMBINERINPUTNVPROC glad_debug_glFinalCombinerInputNV;
#define glFinalCombinerInputNV glad_debug_glFinalCombinerInputNV
typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params);
GLAPI PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glad_glGetCombinerInputParameterfvNV;
GLAPI PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glad_debug_glGetCombinerInputParameterfvNV;
#define glGetCombinerInputParameterfvNV glad_debug_glGetCombinerInputParameterfvNV
typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params);
GLAPI PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glad_glGetCombinerInputParameterivNV;
GLAPI PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glad_debug_glGetCombinerInputParameterivNV;
#define glGetCombinerInputParameterivNV glad_debug_glGetCombinerInputParameterivNV
typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)(GLenum stage, GLenum portion, GLenum pname, GLfloat* params);
GLAPI PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glad_glGetCombinerOutputParameterfvNV;
GLAPI PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glad_debug_glGetCombinerOutputParameterfvNV;
#define glGetCombinerOutputParameterfvNV glad_debug_glGetCombinerOutputParameterfvNV
typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)(GLenum stage, GLenum portion, GLenum pname, GLint* params);
GLAPI PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glad_glGetCombinerOutputParameterivNV;
GLAPI PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glad_debug_glGetCombinerOutputParameterivNV;
#define glGetCombinerOutputParameterivNV glad_debug_glGetCombinerOutputParameterivNV
typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)(GLenum variable, GLenum pname, GLfloat* params);
GLAPI PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glad_glGetFinalCombinerInputParameterfvNV;
GLAPI PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glad_debug_glGetFinalCombinerInputParameterfvNV;
#define glGetFinalCombinerInputParameterfvNV glad_debug_glGetFinalCombinerInputParameterfvNV
typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)(GLenum variable, GLenum pname, GLint* params);
GLAPI PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glad_glGetFinalCombinerInputParameterivNV;
GLAPI PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glad_debug_glGetFinalCombinerInputParameterivNV;
#define glGetFinalCombinerInputParameterivNV glad_debug_glGetFinalCombinerInputParameterivNV
#endif
#ifndef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers 1
GLAPI int GLAD_GL_ARB_draw_buffers;
typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC)(GLsizei n, const GLenum* bufs);
GLAPI PFNGLDRAWBUFFERSARBPROC glad_glDrawBuffersARB;
GLAPI PFNGLDRAWBUFFERSARBPROC glad_debug_glDrawBuffersARB;
#define glDrawBuffersARB glad_debug_glDrawBuffersARB
#endif
#ifndef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3 1
GLAPI int GLAD_GL_EXT_texture_env_dot3;
#endif
#ifndef GL_ARB_debug_output
#define GL_ARB_debug_output 1
GLAPI int GLAD_GL_ARB_debug_output;
typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
GLAPI PFNGLDEBUGMESSAGECONTROLARBPROC glad_glDebugMessageControlARB;
GLAPI PFNGLDEBUGMESSAGECONTROLARBPROC glad_debug_glDebugMessageControlARB;
#define glDebugMessageControlARB glad_debug_glDebugMessageControlARB
typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
GLAPI PFNGLDEBUGMESSAGEINSERTARBPROC glad_glDebugMessageInsertARB;
GLAPI PFNGLDEBUGMESSAGEINSERTARBPROC glad_debug_glDebugMessageInsertARB;
#define glDebugMessageInsertARB glad_debug_glDebugMessageInsertARB
typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC)(GLDEBUGPROCARB callback, const void* userParam);
GLAPI PFNGLDEBUGMESSAGECALLBACKARBPROC glad_glDebugMessageCallbackARB;
GLAPI PFNGLDEBUGMESSAGECALLBACKARBPROC glad_debug_glDebugMessageCallbackARB;
#define glDebugMessageCallbackARB glad_debug_glDebugMessageCallbackARB
typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
GLAPI PFNGLGETDEBUGMESSAGELOGARBPROC glad_glGetDebugMessageLogARB;
GLAPI PFNGLGETDEBUGMESSAGELOGARBPROC glad_debug_glGetDebugMessageLogARB;
#define glGetDebugMessageLogARB glad_debug_glGetDebugMessageLogARB
#endif
#ifndef GL_SGI_color_matrix
#define GL_SGI_color_matrix 1
GLAPI int GLAD_GL_SGI_color_matrix;
#endif
#ifndef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex 1
GLAPI int GLAD_GL_EXT_cull_vertex;
typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC)(GLenum pname, GLdouble* params);
GLAPI PFNGLCULLPARAMETERDVEXTPROC glad_glCullParameterdvEXT;
GLAPI PFNGLCULLPARAMETERDVEXTPROC glad_debug_glCullParameterdvEXT;
#define glCullParameterdvEXT glad_debug_glCullParameterdvEXT
typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC)(GLenum pname, GLfloat* params);
GLAPI PFNGLCULLPARAMETERFVEXTPROC glad_glCullParameterfvEXT;
GLAPI PFNGLCULLPARAMETERFVEXTPROC glad_debug_glCullParameterfvEXT;
#define glCullParameterfvEXT glad_debug_glCullParameterfvEXT
#endif
#ifndef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB 1
GLAPI int GLAD_GL_EXT_texture_sRGB;
#endif
#ifndef GL_APPLE_row_bytes
#define GL_APPLE_row_bytes 1
GLAPI int GLAD_GL_APPLE_row_bytes;
#endif
#ifndef GL_NV_texgen_reflection
#define GL_NV_texgen_reflection 1
GLAPI int GLAD_GL_NV_texgen_reflection;
#endif
#ifndef GL_IBM_multimode_draw_arrays
#define GL_IBM_multimode_draw_arrays 1
GLAPI int GLAD_GL_IBM_multimode_draw_arrays;
typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC)(const GLenum* mode, const GLint* first, const GLsizei* count, GLsizei primcount, GLint modestride);
GLAPI PFNGLMULTIMODEDRAWARRAYSIBMPROC glad_glMultiModeDrawArraysIBM;
GLAPI PFNGLMULTIMODEDRAWARRAYSIBMPROC glad_debug_glMultiModeDrawArraysIBM;
#define glMultiModeDrawArraysIBM glad_debug_glMultiModeDrawArraysIBM
typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC)(const GLenum* mode, const GLsizei* count, GLenum type, const void** indices, GLsizei primcount, GLint modestride);
GLAPI PFNGLMULTIMODEDRAWELEMENTSIBMPROC glad_glMultiModeDrawElementsIBM;
GLAPI PFNGLMULTIMODEDRAWELEMENTSIBMPROC glad_debug_glMultiModeDrawElementsIBM;
#define glMultiModeDrawElementsIBM glad_debug_glMultiModeDrawElementsIBM
#endif
#ifndef GL_APPLE_vertex_array_object
#define GL_APPLE_vertex_array_object 1
GLAPI int GLAD_GL_APPLE_vertex_array_object;
typedef void (APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC)(GLuint array);
GLAPI PFNGLBINDVERTEXARRAYAPPLEPROC glad_glBindVertexArrayAPPLE;
GLAPI PFNGLBINDVERTEXARRAYAPPLEPROC glad_debug_glBindVertexArrayAPPLE;
#define glBindVertexArrayAPPLE glad_debug_glBindVertexArrayAPPLE
typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC)(GLsizei n, const GLuint* arrays);
GLAPI PFNGLDELETEVERTEXARRAYSAPPLEPROC glad_glDeleteVertexArraysAPPLE;
GLAPI PFNGLDELETEVERTEXARRAYSAPPLEPROC glad_debug_glDeleteVertexArraysAPPLE;
#define glDeleteVertexArraysAPPLE glad_debug_glDeleteVertexArraysAPPLE
typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, GLuint* arrays);
GLAPI PFNGLGENVERTEXARRAYSAPPLEPROC glad_glGenVertexArraysAPPLE;
GLAPI PFNGLGENVERTEXARRAYSAPPLEPROC glad_debug_glGenVertexArraysAPPLE;
#define glGenVertexArraysAPPLE glad_debug_glGenVertexArraysAPPLE
typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC)(GLuint array);
GLAPI PFNGLISVERTEXARRAYAPPLEPROC glad_glIsVertexArrayAPPLE;
GLAPI PFNGLISVERTEXARRAYAPPLEPROC glad_debug_glIsVertexArrayAPPLE;
#define glIsVertexArrayAPPLE glad_debug_glIsVertexArrayAPPLE
#endif
#ifndef GL_3DFX_texture_compression_FXT1
#define GL_3DFX_texture_compression_FXT1 1
GLAPI int GLAD_GL_3DFX_texture_compression_FXT1;
#endif
#ifndef GL_NV_fragment_shader_interlock
#define GL_NV_fragment_shader_interlock 1
GLAPI int GLAD_GL_NV_fragment_shader_interlock;
#endif
#ifndef GL_AMD_conservative_depth
#define GL_AMD_conservative_depth 1
GLAPI int GLAD_GL_AMD_conservative_depth;
#endif
#ifndef GL_ARB_texture_float
#define GL_ARB_texture_float 1
GLAPI int GLAD_GL_ARB_texture_float;
#endif
#ifndef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 1
GLAPI int GLAD_GL_ARB_compressed_texture_pixel_storage;
#endif
#ifndef GL_SGIS_detail_texture
#define GL_SGIS_detail_texture 1
GLAPI int GLAD_GL_SGIS_detail_texture;
typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC)(GLenum target, GLsizei n, const GLfloat* points);
GLAPI PFNGLDETAILTEXFUNCSGISPROC glad_glDetailTexFuncSGIS;
GLAPI PFNGLDETAILTEXFUNCSGISPROC glad_debug_glDetailTexFuncSGIS;
#define glDetailTexFuncSGIS glad_debug_glDetailTexFuncSGIS
typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC)(GLenum target, GLfloat* points);
GLAPI PFNGLGETDETAILTEXFUNCSGISPROC glad_glGetDetailTexFuncSGIS;
GLAPI PFNGLGETDETAILTEXFUNCSGISPROC glad_debug_glGetDetailTexFuncSGIS;
#define glGetDetailTexFuncSGIS glad_debug_glGetDetailTexFuncSGIS
#endif
#ifndef GL_NV_geometry_shader_passthrough
#define GL_NV_geometry_shader_passthrough 1
GLAPI int GLAD_GL_NV_geometry_shader_passthrough;
#endif
#ifndef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 1
GLAPI int GLAD_GL_ARB_draw_instanced;
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
GLAPI PFNGLDRAWARRAYSINSTANCEDARBPROC glad_glDrawArraysInstancedARB;
GLAPI PFNGLDRAWARRAYSINSTANCEDARBPROC glad_debug_glDrawArraysInstancedARB;
#define glDrawArraysInstancedARB glad_debug_glDrawArraysInstancedARB
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);
GLAPI PFNGLDRAWELEMENTSINSTANCEDARBPROC glad_glDrawElementsInstancedARB;
GLAPI PFNGLDRAWELEMENTSINSTANCEDARBPROC glad_debug_glDrawElementsInstancedARB;
#define glDrawElementsInstancedARB glad_debug_glDrawElementsInstancedARB
#endif
#ifndef GL_OES_read_format
#define GL_OES_read_format 1
GLAPI int GLAD_GL_OES_read_format;
#endif
#ifndef GL_ATI_texture_float
#define GL_ATI_texture_float 1
GLAPI int GLAD_GL_ATI_texture_float;
#endif
#ifndef GL_ARB_texture_gather
#define GL_ARB_texture_gather 1
GLAPI int GLAD_GL_ARB_texture_gather;
#endif
#ifndef GL_AMD_vertex_shader_layer
#define GL_AMD_vertex_shader_layer 1
GLAPI int GLAD_GL_AMD_vertex_shader_layer;
#endif
#ifndef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 1
GLAPI int GLAD_GL_ARB_shading_language_include;
typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC)(GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar* string);
GLAPI PFNGLNAMEDSTRINGARBPROC glad_glNamedStringARB;
GLAPI PFNGLNAMEDSTRINGARBPROC glad_debug_glNamedStringARB;
#define glNamedStringARB glad_debug_glNamedStringARB
typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC)(GLint namelen, const GLchar* name);
GLAPI PFNGLDELETENAMEDSTRINGARBPROC glad_glDeleteNamedStringARB;
GLAPI PFNGLDELETENAMEDSTRINGARBPROC glad_debug_glDeleteNamedStringARB;
#define glDeleteNamedStringARB glad_debug_glDeleteNamedStringARB
typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC)(GLuint shader, GLsizei count, const GLchar** path, const GLint* length);
GLAPI PFNGLCOMPILESHADERINCLUDEARBPROC glad_glCompileShaderIncludeARB;
GLAPI PFNGLCOMPILESHADERINCLUDEARBPROC glad_debug_glCompileShaderIncludeARB;
#define glCompileShaderIncludeARB glad_debug_glCompileShaderIncludeARB
typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC)(GLint namelen, const GLchar* name);
GLAPI PFNGLISNAMEDSTRINGARBPROC glad_glIsNamedStringARB;
GLAPI PFNGLISNAMEDSTRINGARBPROC glad_debug_glIsNamedStringARB;
#define glIsNamedStringARB glad_debug_glIsNamedStringARB
typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC)(GLint namelen, const GLchar* name, GLsizei bufSize, GLint* stringlen, GLchar* string);
GLAPI PFNGLGETNAMEDSTRINGARBPROC glad_glGetNamedStringARB;
GLAPI PFNGLGETNAMEDSTRINGARBPROC glad_debug_glGetNamedStringARB;
#define glGetNamedStringARB glad_debug_glGetNamedStringARB
typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC)(GLint namelen, const GLchar* name, GLenum pname, GLint* params);
GLAPI PFNGLGETNAMEDSTRINGIVARBPROC glad_glGetNamedStringivARB;
GLAPI PFNGLGETNAMEDSTRINGIVARBPROC glad_debug_glGetNamedStringivARB;
#define glGetNamedStringivARB glad_debug_glGetNamedStringivARB
#endif
#ifndef GL_APPLE_client_storage
#define GL_APPLE_client_storage 1
GLAPI int GLAD_GL_APPLE_client_storage;
#endif
#ifndef GL_WIN_phong_shading
#define GL_WIN_phong_shading 1
GLAPI int GLAD_GL_WIN_phong_shading;
#endif
#ifndef GL_INGR_blend_func_separate
#define GL_INGR_blend_func_separate 1
GLAPI int GLAD_GL_INGR_blend_func_separate;
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLAPI PFNGLBLENDFUNCSEPARATEINGRPROC glad_glBlendFuncSeparateINGR;
GLAPI PFNGLBLENDFUNCSEPARATEINGRPROC glad_debug_glBlendFuncSeparateINGR;
#define glBlendFuncSeparateINGR glad_debug_glBlendFuncSeparateINGR
#endif
#ifndef GL_NV_path_rendering
#define GL_NV_path_rendering 1
GLAPI int GLAD_GL_NV_path_rendering;
typedef GLuint (APIENTRYP PFNGLGENPATHSNVPROC)(GLsizei range);
GLAPI PFNGLGENPATHSNVPROC glad_glGenPathsNV;
GLAPI PFNGLGENPATHSNVPROC glad_debug_glGenPathsNV;
#define glGenPathsNV glad_debug_glGenPathsNV
typedef void (APIENTRYP PFNGLDELETEPATHSNVPROC)(GLuint path, GLsizei range);
GLAPI PFNGLDELETEPATHSNVPROC glad_glDeletePathsNV;
GLAPI PFNGLDELETEPATHSNVPROC glad_debug_glDeletePathsNV;
#define glDeletePathsNV glad_debug_glDeletePathsNV
typedef GLboolean (APIENTRYP PFNGLISPATHNVPROC)(GLuint path);
GLAPI PFNGLISPATHNVPROC glad_glIsPathNV;
GLAPI PFNGLISPATHNVPROC glad_debug_glIsPathNV;
#define glIsPathNV glad_debug_glIsPathNV
typedef void (APIENTRYP PFNGLPATHCOMMANDSNVPROC)(GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords);
GLAPI PFNGLPATHCOMMANDSNVPROC glad_glPathCommandsNV;
GLAPI PFNGLPATHCOMMANDSNVPROC glad_debug_glPathCommandsNV;
#define glPathCommandsNV glad_debug_glPathCommandsNV
typedef void (APIENTRYP PFNGLPATHCOORDSNVPROC)(GLuint path, GLsizei numCoords, GLenum coordType, const void* coords);
GLAPI PFNGLPATHCOORDSNVPROC glad_glPathCoordsNV;
GLAPI PFNGLPATHCOORDSNVPROC glad_debug_glPathCoordsNV;
#define glPathCoordsNV glad_debug_glPathCoordsNV
typedef void (APIENTRYP PFNGLPATHSUBCOMMANDSNVPROC)(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords);
GLAPI PFNGLPATHSUBCOMMANDSNVPROC glad_glPathSubCommandsNV;
GLAPI PFNGLPATHSUBCOMMANDSNVPROC glad_debug_glPathSubCommandsNV;
#define glPathSubCommandsNV glad_debug_glPathSubCommandsNV
typedef void (APIENTRYP PFNGLPATHSUBCOORDSNVPROC)(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void* coords);
GLAPI PFNGLPATHSUBCOORDSNVPROC glad_glPathSubCoordsNV;
GLAPI PFNGLPATHSUBCOORDSNVPROC glad_debug_glPathSubCoordsNV;
#define glPathSubCoordsNV glad_debug_glPathSubCoordsNV
typedef void (APIENTRYP PFNGLPATHSTRINGNVPROC)(GLuint path, GLenum format, GLsizei length, const void* pathString);
GLAPI PFNGLPATHSTRINGNVPROC glad_glPathStringNV;
GLAPI PFNGLPATHSTRINGNVPROC glad_debug_glPathStringNV;
#define glPathStringNV glad_debug_glPathStringNV
typedef void (APIENTRYP PFNGLPATHGLYPHSNVPROC)(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void* charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLAPI PFNGLPATHGLYPHSNVPROC glad_glPathGlyphsNV;
GLAPI PFNGLPATHGLYPHSNVPROC glad_debug_glPathGlyphsNV;
#define glPathGlyphsNV glad_debug_glPathGlyphsNV
typedef void (APIENTRYP PFNGLPATHGLYPHRANGENVPROC)(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLAPI PFNGLPATHGLYPHRANGENVPROC glad_glPathGlyphRangeNV;
GLAPI PFNGLPATHGLYPHRANGENVPROC glad_debug_glPathGlyphRangeNV;
#define glPathGlyphRangeNV glad_debug_glPathGlyphRangeNV
typedef void (APIENTRYP PFNGLWEIGHTPATHSNVPROC)(GLuint resultPath, GLsizei numPaths, const GLuint* paths, const GLfloat* weights);
GLAPI PFNGLWEIGHTPATHSNVPROC glad_glWeightPathsNV;
GLAPI PFNGLWEIGHTPATHSNVPROC glad_debug_glWeightPathsNV;
#define glWeightPathsNV glad_debug_glWeightPathsNV
typedef void (APIENTRYP PFNGLCOPYPATHNVPROC)(GLuint resultPath, GLuint srcPath);
GLAPI PFNGLCOPYPATHNVPROC glad_glCopyPathNV;
GLAPI PFNGLCOPYPATHNVPROC glad_debug_glCopyPathNV;
#define glCopyPathNV glad_debug_glCopyPathNV
typedef void (APIENTRYP PFNGLINTERPOLATEPATHSNVPROC)(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
GLAPI PFNGLINTERPOLATEPATHSNVPROC glad_glInterpolatePathsNV;
GLAPI PFNGLINTERPOLATEPATHSNVPROC glad_debug_glInterpolatePathsNV;
#define glInterpolatePathsNV glad_debug_glInterpolatePathsNV
typedef void (APIENTRYP PFNGLTRANSFORMPATHNVPROC)(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues);
GLAPI PFNGLTRANSFORMPATHNVPROC glad_glTransformPathNV;
GLAPI PFNGLTRANSFORMPATHNVPROC glad_debug_glTransformPathNV;
#define glTransformPathNV glad_debug_glTransformPathNV
typedef void (APIENTRYP PFNGLPATHPARAMETERIVNVPROC)(GLuint path, GLenum pname, const GLint* value);
GLAPI PFNGLPATHPARAMETERIVNVPROC glad_glPathParameterivNV;
GLAPI PFNGLPATHPARAMETERIVNVPROC glad_debug_glPathParameterivNV;
#define glPathParameterivNV glad_debug_glPathParameterivNV
typedef void (APIENTRYP PFNGLPATHPARAMETERINVPROC)(GLuint path, GLenum pname, GLint value);
GLAPI PFNGLPATHPARAMETERINVPROC glad_glPathParameteriNV;
GLAPI PFNGLPATHPARAMETERINVPROC glad_debug_glPathParameteriNV;
#define glPathParameteriNV glad_debug_glPathParameteriNV
typedef void (APIENTRYP PFNGLPATHPARAMETERFVNVPROC)(GLuint path, GLenum pname, const GLfloat* value);
GLAPI PFNGLPATHPARAMETERFVNVPROC glad_glPathParameterfvNV;
GLAPI PFNGLPATHPARAMETERFVNVPROC glad_debug_glPathParameterfvNV;
#define glPathParameterfvNV glad_debug_glPathParameterfvNV
typedef void (APIENTRYP PFNGLPATHPARAMETERFNVPROC)(GLuint path, GLenum pname, GLfloat value);
GLAPI PFNGLPATHPARAMETERFNVPROC glad_glPathParameterfNV;
GLAPI PFNGLPATHPARAMETERFNVPROC glad_debug_glPathParameterfNV;
#define glPathParameterfNV glad_debug_glPathParameterfNV
typedef void (APIENTRYP PFNGLPATHDASHARRAYNVPROC)(GLuint path, GLsizei dashCount, const GLfloat* dashArray);
GLAPI PFNGLPATHDASHARRAYNVPROC glad_glPathDashArrayNV;
GLAPI PFNGLPATHDASHARRAYNVPROC glad_debug_glPathDashArrayNV;
#define glPathDashArrayNV glad_debug_glPathDashArrayNV
typedef void (APIENTRYP PFNGLPATHSTENCILFUNCNVPROC)(GLenum func, GLint ref, GLuint mask);
GLAPI PFNGLPATHSTENCILFUNCNVPROC glad_glPathStencilFuncNV;
GLAPI PFNGLPATHSTENCILFUNCNVPROC glad_debug_glPathStencilFuncNV;
#define glPathStencilFuncNV glad_debug_glPathStencilFuncNV
typedef void (APIENTRYP PFNGLPATHSTENCILDEPTHOFFSETNVPROC)(GLfloat factor, GLfloat units);
GLAPI PFNGLPATHSTENCILDEPTHOFFSETNVPROC glad_glPathStencilDepthOffsetNV;
GLAPI PFNGLPATHSTENCILDEPTHOFFSETNVPROC glad_debug_glPathStencilDepthOffsetNV;
#define glPathStencilDepthOffsetNV glad_debug_glPathStencilDepthOffsetNV
typedef void (APIENTRYP PFNGLSTENCILFILLPATHNVPROC)(GLuint path, GLenum fillMode, GLuint mask);
GLAPI PFNGLSTENCILFILLPATHNVPROC glad_glStencilFillPathNV;
GLAPI PFNGLSTENCILFILLPATHNVPROC glad_debug_glStencilFillPathNV;
#define glStencilFillPathNV glad_debug_glStencilFillPathNV
typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHNVPROC)(GLuint path, GLint reference, GLuint mask);
GLAPI PFNGLSTENCILSTROKEPATHNVPROC glad_glStencilStrokePathNV;
GLAPI PFNGLSTENCILSTROKEPATHNVPROC glad_debug_glStencilStrokePathNV;
#define glStencilStrokePathNV glad_debug_glStencilStrokePathNV
typedef void (APIENTRYP PFNGLSTENCILFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat* transformValues);
GLAPI PFNGLSTENCILFILLPATHINSTANCEDNVPROC glad_glStencilFillPathInstancedNV;
GLAPI PFNGLSTENCILFILLPATHINSTANCEDNVPROC glad_debug_glStencilFillPathInstancedNV;
#define glStencilFillPathInstancedNV glad_debug_glStencilFillPathInstancedNV
typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat* transformValues);
GLAPI PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glad_glStencilStrokePathInstancedNV;
GLAPI PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glad_debug_glStencilStrokePathInstancedNV;
#define glStencilStrokePathInstancedNV glad_debug_glStencilStrokePathInstancedNV
typedef void (APIENTRYP PFNGLPATHCOVERDEPTHFUNCNVPROC)(GLenum func);
GLAPI PFNGLPATHCOVERDEPTHFUNCNVPROC glad_glPathCoverDepthFuncNV;
GLAPI PFNGLPATHCOVERDEPTHFUNCNVPROC glad_debug_glPathCoverDepthFuncNV;
#define glPathCoverDepthFuncNV glad_debug_glPathCoverDepthFuncNV
typedef void (APIENTRYP PFNGLCOVERFILLPATHNVPROC)(GLuint path, GLenum coverMode);
GLAPI PFNGLCOVERFILLPATHNVPROC glad_glCoverFillPathNV;
GLAPI PFNGLCOVERFILLPATHNVPROC glad_debug_glCoverFillPathNV;
#define glCoverFillPathNV glad_debug_glCoverFillPathNV
typedef void (APIENTRYP PFNGLCOVERSTROKEPATHNVPROC)(GLuint path, GLenum coverMode);
GLAPI PFNGLCOVERSTROKEPATHNVPROC glad_glCoverStrokePathNV;
GLAPI PFNGLCOVERSTROKEPATHNVPROC glad_debug_glCoverStrokePathNV;
#define glCoverStrokePathNV glad_debug_glCoverStrokePathNV
typedef void (APIENTRYP PFNGLCOVERFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues);
GLAPI PFNGLCOVERFILLPATHINSTANCEDNVPROC glad_glCoverFillPathInstancedNV;
GLAPI PFNGLCOVERFILLPATHINSTANCEDNVPROC glad_debug_glCoverFillPathInstancedNV;
#define glCoverFillPathInstancedNV glad_debug_glCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues);
GLAPI PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glad_glCoverStrokePathInstancedNV;
GLAPI PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glad_debug_glCoverStrokePathInstancedNV;
#define glCoverStrokePathInstancedNV glad_debug_glCoverStrokePathInstancedNV
typedef void (APIENTRYP PFNGLGETPATHPARAMETERIVNVPROC)(GLuint path, GLenum pname, GLint* value);
GLAPI PFNGLGETPATHPARAMETERIVNVPROC glad_glGetPathParameterivNV;
GLAPI PFNGLGETPATHPARAMETERIVNVPROC glad_debug_glGetPathParameterivNV;
#define glGetPathParameterivNV glad_debug_glGetPathParameterivNV
typedef void (APIENTRYP PFNGLGETPATHPARAMETERFVNVPROC)(GLuint path, GLenum pname, GLfloat* value);
GLAPI PFNGLGETPATHPARAMETERFVNVPROC glad_glGetPathParameterfvNV;
GLAPI PFNGLGETPATHPARAMETERFVNVPROC glad_debug_glGetPathParameterfvNV;
#define glGetPathParameterfvNV glad_debug_glGetPathParameterfvNV
typedef void (APIENTRYP PFNGLGETPATHCOMMANDSNVPROC)(GLuint path, GLubyte* commands);
GLAPI PFNGLGETPATHCOMMANDSNVPROC glad_glGetPathCommandsNV;
GLAPI PFNGLGETPATHCOMMANDSNVPROC glad_debug_glGetPathCommandsNV;
#define glGetPathCommandsNV glad_debug_glGetPathCommandsNV
typedef void (APIENTRYP PFNGLGETPATHCOORDSNVPROC)(GLuint path, GLfloat* coords);
GLAPI PFNGLGETPATHCOORDSNVPROC glad_glGetPathCoordsNV;
GLAPI PFNGLGETPATHCOORDSNVPROC glad_debug_glGetPathCoordsNV;
#define glGetPathCoordsNV glad_debug_glGetPathCoordsNV
typedef void (APIENTRYP PFNGLGETPATHDASHARRAYNVPROC)(GLuint path, GLfloat* dashArray);
GLAPI PFNGLGETPATHDASHARRAYNVPROC glad_glGetPathDashArrayNV;
GLAPI PFNGLGETPATHDASHARRAYNVPROC glad_debug_glGetPathDashArrayNV;
#define glGetPathDashArrayNV glad_debug_glGetPathDashArrayNV
typedef void (APIENTRYP PFNGLGETPATHMETRICSNVPROC)(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLsizei stride, GLfloat* metrics);
GLAPI PFNGLGETPATHMETRICSNVPROC glad_glGetPathMetricsNV;
GLAPI PFNGLGETPATHMETRICSNVPROC glad_debug_glGetPathMetricsNV;
#define glGetPathMetricsNV glad_debug_glGetPathMetricsNV
typedef void (APIENTRYP PFNGLGETPATHMETRICRANGENVPROC)(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics);
GLAPI PFNGLGETPATHMETRICRANGENVPROC glad_glGetPathMetricRangeNV;
GLAPI PFNGLGETPATHMETRICRANGENVPROC glad_debug_glGetPathMetricRangeNV;
#define glGetPathMetricRangeNV glad_debug_glGetPathMetricRangeNV
typedef void (APIENTRYP PFNGLGETPATHSPACINGNVPROC)(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat* returnedSpacing);
GLAPI PFNGLGETPATHSPACINGNVPROC glad_glGetPathSpacingNV;
GLAPI PFNGLGETPATHSPACINGNVPROC glad_debug_glGetPathSpacingNV;
#define glGetPathSpacingNV glad_debug_glGetPathSpacingNV
typedef GLboolean (APIENTRYP PFNGLISPOINTINFILLPATHNVPROC)(GLuint path, GLuint mask, GLfloat x, GLfloat y);
GLAPI PFNGLISPOINTINFILLPATHNVPROC glad_glIsPointInFillPathNV;
GLAPI PFNGLISPOINTINFILLPATHNVPROC glad_debug_glIsPointInFillPathNV;
#define glIsPointInFillPathNV glad_debug_glIsPointInFillPathNV
typedef GLboolean (APIENTRYP PFNGLISPOINTINSTROKEPATHNVPROC)(GLuint path, GLfloat x, GLfloat y);
GLAPI PFNGLISPOINTINSTROKEPATHNVPROC glad_glIsPointInStrokePathNV;
GLAPI PFNGLISPOINTINSTROKEPATHNVPROC glad_debug_glIsPointInStrokePathNV;
#define glIsPointInStrokePathNV glad_debug_glIsPointInStrokePathNV
typedef GLfloat (APIENTRYP PFNGLGETPATHLENGTHNVPROC)(GLuint path, GLsizei startSegment, GLsizei numSegments);
GLAPI PFNGLGETPATHLENGTHNVPROC glad_glGetPathLengthNV;
GLAPI PFNGLGETPATHLENGTHNVPROC glad_debug_glGetPathLengthNV;
#define glGetPathLengthNV glad_debug_glGetPathLengthNV
typedef GLboolean (APIENTRYP PFNGLPOINTALONGPATHNVPROC)(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat* y, GLfloat* tangentX, GLfloat* tangentY);
GLAPI PFNGLPOINTALONGPATHNVPROC glad_glPointAlongPathNV;
GLAPI PFNGLPOINTALONGPATHNVPROC glad_debug_glPointAlongPathNV;
#define glPointAlongPathNV glad_debug_glPointAlongPathNV
typedef void (APIENTRYP PFNGLMATRIXLOAD3X2FNVPROC)(GLenum matrixMode, const GLfloat* m);
GLAPI PFNGLMATRIXLOAD3X2FNVPROC glad_glMatrixLoad3x2fNV;
GLAPI PFNGLMATRIXLOAD3X2FNVPROC glad_debug_glMatrixLoad3x2fNV;
#define glMatrixLoad3x2fNV glad_debug_glMatrixLoad3x2fNV
typedef void (APIENTRYP PFNGLMATRIXLOAD3X3FNVPROC)(GLenum matrixMode, const GLfloat* m);
GLAPI PFNGLMATRIXLOAD3X3FNVPROC glad_glMatrixLoad3x3fNV;
GLAPI PFNGLMATRIXLOAD3X3FNVPROC glad_debug_glMatrixLoad3x3fNV;
#define glMatrixLoad3x3fNV glad_debug_glMatrixLoad3x3fNV
typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC)(GLenum matrixMode, const GLfloat* m);
GLAPI PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC glad_glMatrixLoadTranspose3x3fNV;
GLAPI PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC glad_debug_glMatrixLoadTranspose3x3fNV;
#define glMatrixLoadTranspose3x3fNV glad_debug_glMatrixLoadTranspose3x3fNV
typedef void (APIENTRYP PFNGLMATRIXMULT3X2FNVPROC)(GLenum matrixMode, const GLfloat* m);
GLAPI PFNGLMATRIXMULT3X2FNVPROC glad_glMatrixMult3x2fNV;
GLAPI PFNGLMATRIXMULT3X2FNVPROC glad_debug_glMatrixMult3x2fNV;
#define glMatrixMult3x2fNV glad_debug_glMatrixMult3x2fNV
typedef void (APIENTRYP PFNGLMATRIXMULT3X3FNVPROC)(GLenum matrixMode, const GLfloat* m);
GLAPI PFNGLMATRIXMULT3X3FNVPROC glad_glMatrixMult3x3fNV;
GLAPI PFNGLMATRIXMULT3X3FNVPROC glad_debug_glMatrixMult3x3fNV;
#define glMatrixMult3x3fNV glad_debug_glMatrixMult3x3fNV
typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC)(GLenum matrixMode, const GLfloat* m);
GLAPI PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC glad_glMatrixMultTranspose3x3fNV;
GLAPI PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC glad_debug_glMatrixMultTranspose3x3fNV;
#define glMatrixMultTranspose3x3fNV glad_debug_glMatrixMultTranspose3x3fNV
typedef void (APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHNVPROC)(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
GLAPI PFNGLSTENCILTHENCOVERFILLPATHNVPROC glad_glStencilThenCoverFillPathNV;
GLAPI PFNGLSTENCILTHENCOVERFILLPATHNVPROC glad_debug_glStencilThenCoverFillPathNV;
#define glStencilThenCoverFillPathNV glad_debug_glStencilThenCoverFillPathNV
typedef void (APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC)(GLuint path, GLint reference, GLuint mask, GLenum coverMode);
GLAPI PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC glad_glStencilThenCoverStrokePathNV;
GLAPI PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC glad_debug_glStencilThenCoverStrokePathNV;
#define glStencilThenCoverStrokePathNV glad_debug_glStencilThenCoverStrokePathNV
typedef void (APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues);
GLAPI PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC glad_glStencilThenCoverFillPathInstancedNV;
GLAPI PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC glad_debug_glStencilThenCoverFillPathInstancedNV;
#define glStencilThenCoverFillPathInstancedNV glad_debug_glStencilThenCoverFillPathInstancedNV
typedef void (APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues);
GLAPI PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC glad_glStencilThenCoverStrokePathInstancedNV;
GLAPI PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC glad_debug_glStencilThenCoverStrokePathInstancedNV;
#define glStencilThenCoverStrokePathInstancedNV glad_debug_glStencilThenCoverStrokePathInstancedNV
typedef GLenum (APIENTRYP PFNGLPATHGLYPHINDEXRANGENVPROC)(GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint* baseAndCount);
GLAPI PFNGLPATHGLYPHINDEXRANGENVPROC glad_glPathGlyphIndexRangeNV;
GLAPI PFNGLPATHGLYPHINDEXRANGENVPROC glad_debug_glPathGlyphIndexRangeNV;
#define glPathGlyphIndexRangeNV glad_debug_glPathGlyphIndexRangeNV
typedef GLenum (APIENTRYP PFNGLPATHGLYPHINDEXARRAYNVPROC)(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLAPI PFNGLPATHGLYPHINDEXARRAYNVPROC glad_glPathGlyphIndexArrayNV;
GLAPI PFNGLPATHGLYPHINDEXARRAYNVPROC glad_debug_glPathGlyphIndexArrayNV;
#define glPathGlyphIndexArrayNV glad_debug_glPathGlyphIndexArrayNV
typedef GLenum (APIENTRYP PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC)(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
GLAPI PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC glad_glPathMemoryGlyphIndexArrayNV;
GLAPI PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC glad_debug_glPathMemoryGlyphIndexArrayNV;
#define glPathMemoryGlyphIndexArrayNV glad_debug_glPathMemoryGlyphIndexArrayNV
typedef void (APIENTRYP PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC)(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs);
GLAPI PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC glad_glProgramPathFragmentInputGenNV;
GLAPI PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC glad_debug_glProgramPathFragmentInputGenNV;
#define glProgramPathFragmentInputGenNV glad_debug_glProgramPathFragmentInputGenNV
typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEFVNVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLfloat* params);
GLAPI PFNGLGETPROGRAMRESOURCEFVNVPROC glad_glGetProgramResourcefvNV;
GLAPI PFNGLGETPROGRAMRESOURCEFVNVPROC glad_debug_glGetProgramResourcefvNV;
#define glGetProgramResourcefvNV glad_debug_glGetProgramResourcefvNV
typedef void (APIENTRYP PFNGLPATHCOLORGENNVPROC)(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs);
GLAPI PFNGLPATHCOLORGENNVPROC glad_glPathColorGenNV;
GLAPI PFNGLPATHCOLORGENNVPROC glad_debug_glPathColorGenNV;
#define glPathColorGenNV glad_debug_glPathColorGenNV
typedef void (APIENTRYP PFNGLPATHTEXGENNVPROC)(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs);
GLAPI PFNGLPATHTEXGENNVPROC glad_glPathTexGenNV;
GLAPI PFNGLPATHTEXGENNVPROC glad_debug_glPathTexGenNV;
#define glPathTexGenNV glad_debug_glPathTexGenNV
typedef void (APIENTRYP PFNGLPATHFOGGENNVPROC)(GLenum genMode);
GLAPI PFNGLPATHFOGGENNVPROC glad_glPathFogGenNV;
GLAPI PFNGLPATHFOGGENNVPROC glad_debug_glPathFogGenNV;
#define glPathFogGenNV glad_debug_glPathFogGenNV
typedef void (APIENTRYP PFNGLGETPATHCOLORGENIVNVPROC)(GLenum color, GLenum pname, GLint* value);
GLAPI PFNGLGETPATHCOLORGENIVNVPROC glad_glGetPathColorGenivNV;
GLAPI PFNGLGETPATHCOLORGENIVNVPROC glad_debug_glGetPathColorGenivNV;
#define glGetPathColorGenivNV glad_debug_glGetPathColorGenivNV
typedef void (APIENTRYP PFNGLGETPATHCOLORGENFVNVPROC)(GLenum color, GLenum pname, GLfloat* value);
GLAPI PFNGLGETPATHCOLORGENFVNVPROC glad_glGetPathColorGenfvNV;
GLAPI PFNGLGETPATHCOLORGENFVNVPROC glad_debug_glGetPathColorGenfvNV;
#define glGetPathColorGenfvNV glad_debug_glGetPathColorGenfvNV
typedef void (APIENTRYP PFNGLGETPATHTEXGENIVNVPROC)(GLenum texCoordSet, GLenum pname, GLint* value);
GLAPI PFNGLGETPATHTEXGENIVNVPROC glad_glGetPathTexGenivNV;
GLAPI PFNGLGETPATHTEXGENIVNVPROC glad_debug_glGetPathTexGenivNV;
#define glGetPathTexGenivNV glad_debug_glGetPathTexGenivNV
typedef void (APIENTRYP PFNGLGETPATHTEXGENFVNVPROC)(GLenum texCoordSet, GLenum pname, GLfloat* value);
GLAPI PFNGLGETPATHTEXGENFVNVPROC glad_glGetPathTexGenfvNV;
GLAPI PFNGLGETPATHTEXGENFVNVPROC glad_debug_glGetPathTexGenfvNV;
#define glGetPathTexGenfvNV glad_debug_glGetPathTexGenfvNV
#endif
#ifndef GL_NV_conservative_raster_dilate
#define GL_NV_conservative_raster_dilate 1
GLAPI int GLAD_GL_NV_conservative_raster_dilate;
typedef void (APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERFNVPROC)(GLenum pname, GLfloat value);
GLAPI PFNGLCONSERVATIVERASTERPARAMETERFNVPROC glad_glConservativeRasterParameterfNV;
GLAPI PFNGLCONSERVATIVERASTERPARAMETERFNVPROC glad_debug_glConservativeRasterParameterfNV;
#define glConservativeRasterParameterfNV glad_debug_glConservativeRasterParameterfNV
#endif
#ifndef GL_ATI_vertex_streams
#define GL_ATI_vertex_streams 1
GLAPI int GLAD_GL_ATI_vertex_streams;
typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC)(GLenum stream, GLshort x);
GLAPI PFNGLVERTEXSTREAM1SATIPROC glad_glVertexStream1sATI;
GLAPI PFNGLVERTEXSTREAM1SATIPROC glad_debug_glVertexStream1sATI;
#define glVertexStream1sATI glad_debug_glVertexStream1sATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC)(GLenum stream, const GLshort* coords);
GLAPI PFNGLVERTEXSTREAM1SVATIPROC glad_glVertexStream1svATI;
GLAPI PFNGLVERTEXSTREAM1SVATIPROC glad_debug_glVertexStream1svATI;
#define glVertexStream1svATI glad_debug_glVertexStream1svATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM1IATIPROC)(GLenum stream, GLint x);
GLAPI PFNGLVERTEXSTREAM1IATIPROC glad_glVertexStream1iATI;
GLAPI PFNGLVERTEXSTREAM1IATIPROC glad_debug_glVertexStream1iATI;
#define glVertexStream1iATI glad_debug_glVertexStream1iATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC)(GLenum stream, const GLint* coords);
GLAPI PFNGLVERTEXSTREAM1IVATIPROC glad_glVertexStream1ivATI;
GLAPI PFNGLVERTEXSTREAM1IVATIPROC glad_debug_glVertexStream1ivATI;
#define glVertexStream1ivATI glad_debug_glVertexStream1ivATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM1FATIPROC)(GLenum stream, GLfloat x);
GLAPI PFNGLVERTEXSTREAM1FATIPROC glad_glVertexStream1fATI;
GLAPI PFNGLVERTEXSTREAM1FATIPROC glad_debug_glVertexStream1fATI;
#define glVertexStream1fATI glad_debug_glVertexStream1fATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC)(GLenum stream, const GLfloat* coords);
GLAPI PFNGLVERTEXSTREAM1FVATIPROC glad_glVertexStream1fvATI;
GLAPI PFNGLVERTEXSTREAM1FVATIPROC glad_debug_glVertexStream1fvATI;
#define glVertexStream1fvATI glad_debug_glVertexStream1fvATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM1DATIPROC)(GLenum stream, GLdouble x);
GLAPI PFNGLVERTEXSTREAM1DATIPROC glad_glVertexStream1dATI;
GLAPI PFNGLVERTEXSTREAM1DATIPROC glad_debug_glVertexStream1dATI;
#define glVertexStream1dATI glad_debug_glVertexStream1dATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC)(GLenum stream, const GLdouble* coords);
GLAPI PFNGLVERTEXSTREAM1DVATIPROC glad_glVertexStream1dvATI;
GLAPI PFNGLVERTEXSTREAM1DVATIPROC glad_debug_glVertexStream1dvATI;
#define glVertexStream1dvATI glad_debug_glVertexStream1dvATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM2SATIPROC)(GLenum stream, GLshort x, GLshort y);
GLAPI PFNGLVERTEXSTREAM2SATIPROC glad_glVertexStream2sATI;
GLAPI PFNGLVERTEXSTREAM2SATIPROC glad_debug_glVertexStream2sATI;
#define glVertexStream2sATI glad_debug_glVertexStream2sATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC)(GLenum stream, const GLshort* coords);
GLAPI PFNGLVERTEXSTREAM2SVATIPROC glad_glVertexStream2svATI;
GLAPI PFNGLVERTEXSTREAM2SVATIPROC glad_debug_glVertexStream2svATI;
#define glVertexStream2svATI glad_debug_glVertexStream2svATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM2IATIPROC)(GLenum stream, GLint x, GLint y);
GLAPI PFNGLVERTEXSTREAM2IATIPROC glad_glVertexStream2iATI;
GLAPI PFNGLVERTEXSTREAM2IATIPROC glad_debug_glVertexStream2iATI;
#define glVertexStream2iATI glad_debug_glVertexStream2iATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC)(GLenum stream, const GLint* coords);
GLAPI PFNGLVERTEXSTREAM2IVATIPROC glad_glVertexStream2ivATI;
GLAPI PFNGLVERTEXSTREAM2IVATIPROC glad_debug_glVertexStream2ivATI;
#define glVertexStream2ivATI glad_debug_glVertexStream2ivATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM2FATIPROC)(GLenum stream, GLfloat x, GLfloat y);
GLAPI PFNGLVERTEXSTREAM2FATIPROC glad_glVertexStream2fATI;
GLAPI PFNGLVERTEXSTREAM2FATIPROC glad_debug_glVertexStream2fATI;
#define glVertexStream2fATI glad_debug_glVertexStream2fATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC)(GLenum stream, const GLfloat* coords);
GLAPI PFNGLVERTEXSTREAM2FVATIPROC glad_glVertexStream2fvATI;
GLAPI PFNGLVERTEXSTREAM2FVATIPROC glad_debug_glVertexStream2fvATI;
#define glVertexStream2fvATI glad_debug_glVertexStream2fvATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM2DATIPROC)(GLenum stream, GLdouble x, GLdouble y);
GLAPI PFNGLVERTEXSTREAM2DATIPROC glad_glVertexStream2dATI;
GLAPI PFNGLVERTEXSTREAM2DATIPROC glad_debug_glVertexStream2dATI;
#define glVertexStream2dATI glad_debug_glVertexStream2dATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC)(GLenum stream, const GLdouble* coords);
GLAPI PFNGLVERTEXSTREAM2DVATIPROC glad_glVertexStream2dvATI;
GLAPI PFNGLVERTEXSTREAM2DVATIPROC glad_debug_glVertexStream2dvATI;
#define glVertexStream2dvATI glad_debug_glVertexStream2dvATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM3SATIPROC)(GLenum stream, GLshort x, GLshort y, GLshort z);
GLAPI PFNGLVERTEXSTREAM3SATIPROC glad_glVertexStream3sATI;
GLAPI PFNGLVERTEXSTREAM3SATIPROC glad_debug_glVertexStream3sATI;
#define glVertexStream3sATI glad_debug_glVertexStream3sATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC)(GLenum stream, const GLshort* coords);
GLAPI PFNGLVERTEXSTREAM3SVATIPROC glad_glVertexStream3svATI;
GLAPI PFNGLVERTEXSTREAM3SVATIPROC glad_debug_glVertexStream3svATI;
#define glVertexStream3svATI glad_debug_glVertexStream3svATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM3IATIPROC)(GLenum stream, GLint x, GLint y, GLint z);
GLAPI PFNGLVERTEXSTREAM3IATIPROC glad_glVertexStream3iATI;
GLAPI PFNGLVERTEXSTREAM3IATIPROC glad_debug_glVertexStream3iATI;
#define glVertexStream3iATI glad_debug_glVertexStream3iATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC)(GLenum stream, const GLint* coords);
GLAPI PFNGLVERTEXSTREAM3IVATIPROC glad_glVertexStream3ivATI;
GLAPI PFNGLVERTEXSTREAM3IVATIPROC glad_debug_glVertexStream3ivATI;
#define glVertexStream3ivATI glad_debug_glVertexStream3ivATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM3FATIPROC)(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLVERTEXSTREAM3FATIPROC glad_glVertexStream3fATI;
GLAPI PFNGLVERTEXSTREAM3FATIPROC glad_debug_glVertexStream3fATI;
#define glVertexStream3fATI glad_debug_glVertexStream3fATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC)(GLenum stream, const GLfloat* coords);
GLAPI PFNGLVERTEXSTREAM3FVATIPROC glad_glVertexStream3fvATI;
GLAPI PFNGLVERTEXSTREAM3FVATIPROC glad_debug_glVertexStream3fvATI;
#define glVertexStream3fvATI glad_debug_glVertexStream3fvATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM3DATIPROC)(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
GLAPI PFNGLVERTEXSTREAM3DATIPROC glad_glVertexStream3dATI;
GLAPI PFNGLVERTEXSTREAM3DATIPROC glad_debug_glVertexStream3dATI;
#define glVertexStream3dATI glad_debug_glVertexStream3dATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC)(GLenum stream, const GLdouble* coords);
GLAPI PFNGLVERTEXSTREAM3DVATIPROC glad_glVertexStream3dvATI;
GLAPI PFNGLVERTEXSTREAM3DVATIPROC glad_debug_glVertexStream3dvATI;
#define glVertexStream3dvATI glad_debug_glVertexStream3dvATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM4SATIPROC)(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
GLAPI PFNGLVERTEXSTREAM4SATIPROC glad_glVertexStream4sATI;
GLAPI PFNGLVERTEXSTREAM4SATIPROC glad_debug_glVertexStream4sATI;
#define glVertexStream4sATI glad_debug_glVertexStream4sATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC)(GLenum stream, const GLshort* coords);
GLAPI PFNGLVERTEXSTREAM4SVATIPROC glad_glVertexStream4svATI;
GLAPI PFNGLVERTEXSTREAM4SVATIPROC glad_debug_glVertexStream4svATI;
#define glVertexStream4svATI glad_debug_glVertexStream4svATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM4IATIPROC)(GLenum stream, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLVERTEXSTREAM4IATIPROC glad_glVertexStream4iATI;
GLAPI PFNGLVERTEXSTREAM4IATIPROC glad_debug_glVertexStream4iATI;
#define glVertexStream4iATI glad_debug_glVertexStream4iATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC)(GLenum stream, const GLint* coords);
GLAPI PFNGLVERTEXSTREAM4IVATIPROC glad_glVertexStream4ivATI;
GLAPI PFNGLVERTEXSTREAM4IVATIPROC glad_debug_glVertexStream4ivATI;
#define glVertexStream4ivATI glad_debug_glVertexStream4ivATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM4FATIPROC)(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLVERTEXSTREAM4FATIPROC glad_glVertexStream4fATI;
GLAPI PFNGLVERTEXSTREAM4FATIPROC glad_debug_glVertexStream4fATI;
#define glVertexStream4fATI glad_debug_glVertexStream4fATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC)(GLenum stream, const GLfloat* coords);
GLAPI PFNGLVERTEXSTREAM4FVATIPROC glad_glVertexStream4fvATI;
GLAPI PFNGLVERTEXSTREAM4FVATIPROC glad_debug_glVertexStream4fvATI;
#define glVertexStream4fvATI glad_debug_glVertexStream4fvATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM4DATIPROC)(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLAPI PFNGLVERTEXSTREAM4DATIPROC glad_glVertexStream4dATI;
GLAPI PFNGLVERTEXSTREAM4DATIPROC glad_debug_glVertexStream4dATI;
#define glVertexStream4dATI glad_debug_glVertexStream4dATI
typedef void (APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC)(GLenum stream, const GLdouble* coords);
GLAPI PFNGLVERTEXSTREAM4DVATIPROC glad_glVertexStream4dvATI;
GLAPI PFNGLVERTEXSTREAM4DVATIPROC glad_debug_glVertexStream4dvATI;
#define glVertexStream4dvATI glad_debug_glVertexStream4dvATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3BATIPROC)(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
GLAPI PFNGLNORMALSTREAM3BATIPROC glad_glNormalStream3bATI;
GLAPI PFNGLNORMALSTREAM3BATIPROC glad_debug_glNormalStream3bATI;
#define glNormalStream3bATI glad_debug_glNormalStream3bATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3BVATIPROC)(GLenum stream, const GLbyte* coords);
GLAPI PFNGLNORMALSTREAM3BVATIPROC glad_glNormalStream3bvATI;
GLAPI PFNGLNORMALSTREAM3BVATIPROC glad_debug_glNormalStream3bvATI;
#define glNormalStream3bvATI glad_debug_glNormalStream3bvATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3SATIPROC)(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
GLAPI PFNGLNORMALSTREAM3SATIPROC glad_glNormalStream3sATI;
GLAPI PFNGLNORMALSTREAM3SATIPROC glad_debug_glNormalStream3sATI;
#define glNormalStream3sATI glad_debug_glNormalStream3sATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3SVATIPROC)(GLenum stream, const GLshort* coords);
GLAPI PFNGLNORMALSTREAM3SVATIPROC glad_glNormalStream3svATI;
GLAPI PFNGLNORMALSTREAM3SVATIPROC glad_debug_glNormalStream3svATI;
#define glNormalStream3svATI glad_debug_glNormalStream3svATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3IATIPROC)(GLenum stream, GLint nx, GLint ny, GLint nz);
GLAPI PFNGLNORMALSTREAM3IATIPROC glad_glNormalStream3iATI;
GLAPI PFNGLNORMALSTREAM3IATIPROC glad_debug_glNormalStream3iATI;
#define glNormalStream3iATI glad_debug_glNormalStream3iATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3IVATIPROC)(GLenum stream, const GLint* coords);
GLAPI PFNGLNORMALSTREAM3IVATIPROC glad_glNormalStream3ivATI;
GLAPI PFNGLNORMALSTREAM3IVATIPROC glad_debug_glNormalStream3ivATI;
#define glNormalStream3ivATI glad_debug_glNormalStream3ivATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3FATIPROC)(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
GLAPI PFNGLNORMALSTREAM3FATIPROC glad_glNormalStream3fATI;
GLAPI PFNGLNORMALSTREAM3FATIPROC glad_debug_glNormalStream3fATI;
#define glNormalStream3fATI glad_debug_glNormalStream3fATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3FVATIPROC)(GLenum stream, const GLfloat* coords);
GLAPI PFNGLNORMALSTREAM3FVATIPROC glad_glNormalStream3fvATI;
GLAPI PFNGLNORMALSTREAM3FVATIPROC glad_debug_glNormalStream3fvATI;
#define glNormalStream3fvATI glad_debug_glNormalStream3fvATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3DATIPROC)(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
GLAPI PFNGLNORMALSTREAM3DATIPROC glad_glNormalStream3dATI;
GLAPI PFNGLNORMALSTREAM3DATIPROC glad_debug_glNormalStream3dATI;
#define glNormalStream3dATI glad_debug_glNormalStream3dATI
typedef void (APIENTRYP PFNGLNORMALSTREAM3DVATIPROC)(GLenum stream, const GLdouble* coords);
GLAPI PFNGLNORMALSTREAM3DVATIPROC glad_glNormalStream3dvATI;
GLAPI PFNGLNORMALSTREAM3DVATIPROC glad_debug_glNormalStream3dvATI;
#define glNormalStream3dvATI glad_debug_glNormalStream3dvATI
typedef void (APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)(GLenum stream);
GLAPI PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glad_glClientActiveVertexStreamATI;
GLAPI PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glad_debug_glClientActiveVertexStreamATI;
#define glClientActiveVertexStreamATI glad_debug_glClientActiveVertexStreamATI
typedef void (APIENTRYP PFNGLVERTEXBLENDENVIATIPROC)(GLenum pname, GLint param);
GLAPI PFNGLVERTEXBLENDENVIATIPROC glad_glVertexBlendEnviATI;
GLAPI PFNGLVERTEXBLENDENVIATIPROC glad_debug_glVertexBlendEnviATI;
#define glVertexBlendEnviATI glad_debug_glVertexBlendEnviATI
typedef void (APIENTRYP PFNGLVERTEXBLENDENVFATIPROC)(GLenum pname, GLfloat param);
GLAPI PFNGLVERTEXBLENDENVFATIPROC glad_glVertexBlendEnvfATI;
GLAPI PFNGLVERTEXBLENDENVFATIPROC glad_debug_glVertexBlendEnvfATI;
#define glVertexBlendEnvfATI glad_debug_glVertexBlendEnvfATI
#endif
#ifndef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 1
GLAPI int GLAD_GL_ARB_post_depth_coverage;
#endif
#ifndef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 1
GLAPI int GLAD_GL_ARB_texture_non_power_of_two;
#endif
#ifndef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422 1
GLAPI int GLAD_GL_APPLE_rgb_422;
#endif
#ifndef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias 1
GLAPI int GLAD_GL_EXT_texture_lod_bias;
#endif
#ifndef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 1
GLAPI int GLAD_GL_ARB_gpu_shader_int64;
typedef void (APIENTRYP PFNGLUNIFORM1I64ARBPROC)(GLint location, GLint64 x);
GLAPI PFNGLUNIFORM1I64ARBPROC glad_glUniform1i64ARB;
GLAPI PFNGLUNIFORM1I64ARBPROC glad_debug_glUniform1i64ARB;
#define glUniform1i64ARB glad_debug_glUniform1i64ARB
typedef void (APIENTRYP PFNGLUNIFORM2I64ARBPROC)(GLint location, GLint64 x, GLint64 y);
GLAPI PFNGLUNIFORM2I64ARBPROC glad_glUniform2i64ARB;
GLAPI PFNGLUNIFORM2I64ARBPROC glad_debug_glUniform2i64ARB;
#define glUniform2i64ARB glad_debug_glUniform2i64ARB
typedef void (APIENTRYP PFNGLUNIFORM3I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z);
GLAPI PFNGLUNIFORM3I64ARBPROC glad_glUniform3i64ARB;
GLAPI PFNGLUNIFORM3I64ARBPROC glad_debug_glUniform3i64ARB;
#define glUniform3i64ARB glad_debug_glUniform3i64ARB
typedef void (APIENTRYP PFNGLUNIFORM4I64ARBPROC)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
GLAPI PFNGLUNIFORM4I64ARBPROC glad_glUniform4i64ARB;
GLAPI PFNGLUNIFORM4I64ARBPROC glad_debug_glUniform4i64ARB;
#define glUniform4i64ARB glad_debug_glUniform4i64ARB
typedef void (APIENTRYP PFNGLUNIFORM1I64VARBPROC)(GLint location, GLsizei count, const GLint64* value);
GLAPI PFNGLUNIFORM1I64VARBPROC glad_glUniform1i64vARB;
GLAPI PFNGLUNIFORM1I64VARBPROC glad_debug_glUniform1i64vARB;
#define glUniform1i64vARB glad_debug_glUniform1i64vARB
typedef void (APIENTRYP PFNGLUNIFORM2I64VARBPROC)(GLint location, GLsizei count, const GLint64* value);
GLAPI PFNGLUNIFORM2I64VARBPROC glad_glUniform2i64vARB;
GLAPI PFNGLUNIFORM2I64VARBPROC glad_debug_glUniform2i64vARB;
#define glUniform2i64vARB glad_debug_glUniform2i64vARB
typedef void (APIENTRYP PFNGLUNIFORM3I64VARBPROC)(GLint location, GLsizei count, const GLint64* value);
GLAPI PFNGLUNIFORM3I64VARBPROC glad_glUniform3i64vARB;
GLAPI PFNGLUNIFORM3I64VARBPROC glad_debug_glUniform3i64vARB;
#define glUniform3i64vARB glad_debug_glUniform3i64vARB
typedef void (APIENTRYP PFNGLUNIFORM4I64VARBPROC)(GLint location, GLsizei count, const GLint64* value);
GLAPI PFNGLUNIFORM4I64VARBPROC glad_glUniform4i64vARB;
GLAPI PFNGLUNIFORM4I64VARBPROC glad_debug_glUniform4i64vARB;
#define glUniform4i64vARB glad_debug_glUniform4i64vARB
typedef void (APIENTRYP PFNGLUNIFORM1UI64ARBPROC)(GLint location, GLuint64 x);
GLAPI PFNGLUNIFORM1UI64ARBPROC glad_glUniform1ui64ARB;
GLAPI PFNGLUNIFORM1UI64ARBPROC glad_debug_glUniform1ui64ARB;
#define glUniform1ui64ARB glad_debug_glUniform1ui64ARB
typedef void (APIENTRYP PFNGLUNIFORM2UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y);
GLAPI PFNGLUNIFORM2UI64ARBPROC glad_glUniform2ui64ARB;
GLAPI PFNGLUNIFORM2UI64ARBPROC glad_debug_glUniform2ui64ARB;
#define glUniform2ui64ARB glad_debug_glUniform2ui64ARB
typedef void (APIENTRYP PFNGLUNIFORM3UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
GLAPI PFNGLUNIFORM3UI64ARBPROC glad_glUniform3ui64ARB;
GLAPI PFNGLUNIFORM3UI64ARBPROC glad_debug_glUniform3ui64ARB;
#define glUniform3ui64ARB glad_debug_glUniform3ui64ARB
typedef void (APIENTRYP PFNGLUNIFORM4UI64ARBPROC)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
GLAPI PFNGLUNIFORM4UI64ARBPROC glad_glUniform4ui64ARB;
GLAPI PFNGLUNIFORM4UI64ARBPROC glad_debug_glUniform4ui64ARB;
#define glUniform4ui64ARB glad_debug_glUniform4ui64ARB
typedef void (APIENTRYP PFNGLUNIFORM1UI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLUNIFORM1UI64VARBPROC glad_glUniform1ui64vARB;
GLAPI PFNGLUNIFORM1UI64VARBPROC glad_debug_glUniform1ui64vARB;
#define glUniform1ui64vARB glad_debug_glUniform1ui64vARB
typedef void (APIENTRYP PFNGLUNIFORM2UI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLUNIFORM2UI64VARBPROC glad_glUniform2ui64vARB;
GLAPI PFNGLUNIFORM2UI64VARBPROC glad_debug_glUniform2ui64vARB;
#define glUniform2ui64vARB glad_debug_glUniform2ui64vARB
typedef void (APIENTRYP PFNGLUNIFORM3UI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLUNIFORM3UI64VARBPROC glad_glUniform3ui64vARB;
GLAPI PFNGLUNIFORM3UI64VARBPROC glad_debug_glUniform3ui64vARB;
#define glUniform3ui64vARB glad_debug_glUniform3ui64vARB
typedef void (APIENTRYP PFNGLUNIFORM4UI64VARBPROC)(GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLUNIFORM4UI64VARBPROC glad_glUniform4ui64vARB;
GLAPI PFNGLUNIFORM4UI64VARBPROC glad_debug_glUniform4ui64vARB;
#define glUniform4ui64vARB glad_debug_glUniform4ui64vARB
typedef void (APIENTRYP PFNGLGETUNIFORMI64VARBPROC)(GLuint program, GLint location, GLint64* params);
GLAPI PFNGLGETUNIFORMI64VARBPROC glad_glGetUniformi64vARB;
GLAPI PFNGLGETUNIFORMI64VARBPROC glad_debug_glGetUniformi64vARB;
#define glGetUniformi64vARB glad_debug_glGetUniformi64vARB
typedef void (APIENTRYP PFNGLGETUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLuint64* params);
GLAPI PFNGLGETUNIFORMUI64VARBPROC glad_glGetUniformui64vARB;
GLAPI PFNGLGETUNIFORMUI64VARBPROC glad_debug_glGetUniformui64vARB;
#define glGetUniformui64vARB glad_debug_glGetUniformui64vARB
typedef void (APIENTRYP PFNGLGETNUNIFORMI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint64* params);
GLAPI PFNGLGETNUNIFORMI64VARBPROC glad_glGetnUniformi64vARB;
GLAPI PFNGLGETNUNIFORMI64VARBPROC glad_debug_glGetnUniformi64vARB;
#define glGetnUniformi64vARB glad_debug_glGetnUniformi64vARB
typedef void (APIENTRYP PFNGLGETNUNIFORMUI64VARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint64* params);
GLAPI PFNGLGETNUNIFORMUI64VARBPROC glad_glGetnUniformui64vARB;
GLAPI PFNGLGETNUNIFORMUI64VARBPROC glad_debug_glGetnUniformui64vARB;
#define glGetnUniformui64vARB glad_debug_glGetnUniformui64vARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64ARBPROC)(GLuint program, GLint location, GLint64 x);
GLAPI PFNGLPROGRAMUNIFORM1I64ARBPROC glad_glProgramUniform1i64ARB;
GLAPI PFNGLPROGRAMUNIFORM1I64ARBPROC glad_debug_glProgramUniform1i64ARB;
#define glProgramUniform1i64ARB glad_debug_glProgramUniform1i64ARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y);
GLAPI PFNGLPROGRAMUNIFORM2I64ARBPROC glad_glProgramUniform2i64ARB;
GLAPI PFNGLPROGRAMUNIFORM2I64ARBPROC glad_debug_glProgramUniform2i64ARB;
#define glProgramUniform2i64ARB glad_debug_glProgramUniform2i64ARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
GLAPI PFNGLPROGRAMUNIFORM3I64ARBPROC glad_glProgramUniform3i64ARB;
GLAPI PFNGLPROGRAMUNIFORM3I64ARBPROC glad_debug_glProgramUniform3i64ARB;
#define glProgramUniform3i64ARB glad_debug_glProgramUniform3i64ARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64ARBPROC)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
GLAPI PFNGLPROGRAMUNIFORM4I64ARBPROC glad_glProgramUniform4i64ARB;
GLAPI PFNGLPROGRAMUNIFORM4I64ARBPROC glad_debug_glProgramUniform4i64ARB;
#define glProgramUniform4i64ARB glad_debug_glProgramUniform4i64ARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64* value);
GLAPI PFNGLPROGRAMUNIFORM1I64VARBPROC glad_glProgramUniform1i64vARB;
GLAPI PFNGLPROGRAMUNIFORM1I64VARBPROC glad_debug_glProgramUniform1i64vARB;
#define glProgramUniform1i64vARB glad_debug_glProgramUniform1i64vARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64* value);
GLAPI PFNGLPROGRAMUNIFORM2I64VARBPROC glad_glProgramUniform2i64vARB;
GLAPI PFNGLPROGRAMUNIFORM2I64VARBPROC glad_debug_glProgramUniform2i64vARB;
#define glProgramUniform2i64vARB glad_debug_glProgramUniform2i64vARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64* value);
GLAPI PFNGLPROGRAMUNIFORM3I64VARBPROC glad_glProgramUniform3i64vARB;
GLAPI PFNGLPROGRAMUNIFORM3I64VARBPROC glad_debug_glProgramUniform3i64vARB;
#define glProgramUniform3i64vARB glad_debug_glProgramUniform3i64vARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLint64* value);
GLAPI PFNGLPROGRAMUNIFORM4I64VARBPROC glad_glProgramUniform4i64vARB;
GLAPI PFNGLPROGRAMUNIFORM4I64VARBPROC glad_debug_glProgramUniform4i64vARB;
#define glProgramUniform4i64vARB glad_debug_glProgramUniform4i64vARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64ARBPROC)(GLuint program, GLint location, GLuint64 x);
GLAPI PFNGLPROGRAMUNIFORM1UI64ARBPROC glad_glProgramUniform1ui64ARB;
GLAPI PFNGLPROGRAMUNIFORM1UI64ARBPROC glad_debug_glProgramUniform1ui64ARB;
#define glProgramUniform1ui64ARB glad_debug_glProgramUniform1ui64ARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y);
GLAPI PFNGLPROGRAMUNIFORM2UI64ARBPROC glad_glProgramUniform2ui64ARB;
GLAPI PFNGLPROGRAMUNIFORM2UI64ARBPROC glad_debug_glProgramUniform2ui64ARB;
#define glProgramUniform2ui64ARB glad_debug_glProgramUniform2ui64ARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
GLAPI PFNGLPROGRAMUNIFORM3UI64ARBPROC glad_glProgramUniform3ui64ARB;
GLAPI PFNGLPROGRAMUNIFORM3UI64ARBPROC glad_debug_glProgramUniform3ui64ARB;
#define glProgramUniform3ui64ARB glad_debug_glProgramUniform3ui64ARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64ARBPROC)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
GLAPI PFNGLPROGRAMUNIFORM4UI64ARBPROC glad_glProgramUniform4ui64ARB;
GLAPI PFNGLPROGRAMUNIFORM4UI64ARBPROC glad_debug_glProgramUniform4ui64ARB;
#define glProgramUniform4ui64ARB glad_debug_glProgramUniform4ui64ARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLPROGRAMUNIFORM1UI64VARBPROC glad_glProgramUniform1ui64vARB;
GLAPI PFNGLPROGRAMUNIFORM1UI64VARBPROC glad_debug_glProgramUniform1ui64vARB;
#define glProgramUniform1ui64vARB glad_debug_glProgramUniform1ui64vARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLPROGRAMUNIFORM2UI64VARBPROC glad_glProgramUniform2ui64vARB;
GLAPI PFNGLPROGRAMUNIFORM2UI64VARBPROC glad_debug_glProgramUniform2ui64vARB;
#define glProgramUniform2ui64vARB glad_debug_glProgramUniform2ui64vARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLPROGRAMUNIFORM3UI64VARBPROC glad_glProgramUniform3ui64vARB;
GLAPI PFNGLPROGRAMUNIFORM3UI64VARBPROC glad_debug_glProgramUniform3ui64vARB;
#define glProgramUniform3ui64vARB glad_debug_glProgramUniform3ui64vARB
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VARBPROC)(GLuint program, GLint location, GLsizei count, const GLuint64* value);
GLAPI PFNGLPROGRAMUNIFORM4UI64VARBPROC glad_glProgramUniform4ui64vARB;
GLAPI PFNGLPROGRAMUNIFORM4UI64VARBPROC glad_debug_glProgramUniform4ui64vARB;
#define glProgramUniform4ui64vARB glad_debug_glProgramUniform4ui64vARB
#endif
#ifndef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 1
GLAPI int GLAD_GL_ARB_seamless_cube_map;
#endif
#ifndef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 1
GLAPI int GLAD_GL_ARB_shader_group_vote;
#endif
#ifndef GL_NV_vdpau_interop
#define GL_NV_vdpau_interop 1
GLAPI int GLAD_GL_NV_vdpau_interop;
typedef void (APIENTRYP PFNGLVDPAUINITNVPROC)(const void* vdpDevice, const void* getProcAddress);
GLAPI PFNGLVDPAUINITNVPROC glad_glVDPAUInitNV;
GLAPI PFNGLVDPAUINITNVPROC glad_debug_glVDPAUInitNV;
#define glVDPAUInitNV glad_debug_glVDPAUInitNV
typedef void (APIENTRYP PFNGLVDPAUFININVPROC)();
GLAPI PFNGLVDPAUFININVPROC glad_glVDPAUFiniNV;
GLAPI PFNGLVDPAUFININVPROC glad_debug_glVDPAUFiniNV;
#define glVDPAUFiniNV glad_debug_glVDPAUFiniNV
typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames);
GLAPI PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glad_glVDPAURegisterVideoSurfaceNV;
GLAPI PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glad_debug_glVDPAURegisterVideoSurfaceNV;
#define glVDPAURegisterVideoSurfaceNV glad_debug_glVDPAURegisterVideoSurfaceNV
typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames);
GLAPI PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glad_glVDPAURegisterOutputSurfaceNV;
GLAPI PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glad_debug_glVDPAURegisterOutputSurfaceNV;
#define glVDPAURegisterOutputSurfaceNV glad_debug_glVDPAURegisterOutputSurfaceNV
typedef GLboolean (APIENTRYP PFNGLVDPAUISSURFACENVPROC)(GLvdpauSurfaceNV surface);
GLAPI PFNGLVDPAUISSURFACENVPROC glad_glVDPAUIsSurfaceNV;
GLAPI PFNGLVDPAUISSURFACENVPROC glad_debug_glVDPAUIsSurfaceNV;
#define glVDPAUIsSurfaceNV glad_debug_glVDPAUIsSurfaceNV
typedef void (APIENTRYP PFNGLVDPAUUNREGISTERSURFACENVPROC)(GLvdpauSurfaceNV surface);
GLAPI PFNGLVDPAUUNREGISTERSURFACENVPROC glad_glVDPAUUnregisterSurfaceNV;
GLAPI PFNGLVDPAUUNREGISTERSURFACENVPROC glad_debug_glVDPAUUnregisterSurfaceNV;
#define glVDPAUUnregisterSurfaceNV glad_debug_glVDPAUUnregisterSurfaceNV
typedef void (APIENTRYP PFNGLVDPAUGETSURFACEIVNVPROC)(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
GLAPI PFNGLVDPAUGETSURFACEIVNVPROC glad_glVDPAUGetSurfaceivNV;
GLAPI PFNGLVDPAUGETSURFACEIVNVPROC glad_debug_glVDPAUGetSurfaceivNV;
#define glVDPAUGetSurfaceivNV glad_debug_glVDPAUGetSurfaceivNV
typedef void (APIENTRYP PFNGLVDPAUSURFACEACCESSNVPROC)(GLvdpauSurfaceNV surface, GLenum access);
GLAPI PFNGLVDPAUSURFACEACCESSNVPROC glad_glVDPAUSurfaceAccessNV;
GLAPI PFNGLVDPAUSURFACEACCESSNVPROC glad_debug_glVDPAUSurfaceAccessNV;
#define glVDPAUSurfaceAccessNV glad_debug_glVDPAUSurfaceAccessNV
typedef void (APIENTRYP PFNGLVDPAUMAPSURFACESNVPROC)(GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces);
GLAPI PFNGLVDPAUMAPSURFACESNVPROC glad_glVDPAUMapSurfacesNV;
GLAPI PFNGLVDPAUMAPSURFACESNVPROC glad_debug_glVDPAUMapSurfacesNV;
#define glVDPAUMapSurfacesNV glad_debug_glVDPAUMapSurfacesNV
typedef void (APIENTRYP PFNGLVDPAUUNMAPSURFACESNVPROC)(GLsizei numSurface, const GLvdpauSurfaceNV* surfaces);
GLAPI PFNGLVDPAUUNMAPSURFACESNVPROC glad_glVDPAUUnmapSurfacesNV;
GLAPI PFNGLVDPAUUNMAPSURFACESNVPROC glad_debug_glVDPAUUnmapSurfacesNV;
#define glVDPAUUnmapSurfacesNV glad_debug_glVDPAUUnmapSurfacesNV
#endif
#ifndef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 1
GLAPI int GLAD_GL_ARB_occlusion_query2;
#endif
#ifndef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 1
GLAPI int GLAD_GL_ARB_internalformat_query2;
typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params);
GLAPI PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v;
GLAPI PFNGLGETINTERNALFORMATI64VPROC glad_debug_glGetInternalformati64v;
#define glGetInternalformati64v glad_debug_glGetInternalformati64v
#endif
#ifndef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic 1
GLAPI int GLAD_GL_EXT_texture_filter_anisotropic;
#endif
#ifndef GL_SUN_vertex
#define GL_SUN_vertex 1
GLAPI int GLAD_GL_SUN_vertex;
typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
GLAPI PFNGLCOLOR4UBVERTEX2FSUNPROC glad_glColor4ubVertex2fSUN;
GLAPI PFNGLCOLOR4UBVERTEX2FSUNPROC glad_debug_glColor4ubVertex2fSUN;
#define glColor4ubVertex2fSUN glad_debug_glColor4ubVertex2fSUN
typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC)(const GLubyte* c, const GLfloat* v);
GLAPI PFNGLCOLOR4UBVERTEX2FVSUNPROC glad_glColor4ubVertex2fvSUN;
GLAPI PFNGLCOLOR4UBVERTEX2FVSUNPROC glad_debug_glColor4ubVertex2fvSUN;
#define glColor4ubVertex2fvSUN glad_debug_glColor4ubVertex2fvSUN
typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FSUNPROC)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLCOLOR4UBVERTEX3FSUNPROC glad_glColor4ubVertex3fSUN;
GLAPI PFNGLCOLOR4UBVERTEX3FSUNPROC glad_debug_glColor4ubVertex3fSUN;
#define glColor4ubVertex3fSUN glad_debug_glColor4ubVertex3fSUN
typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC)(const GLubyte* c, const GLfloat* v);
GLAPI PFNGLCOLOR4UBVERTEX3FVSUNPROC glad_glColor4ubVertex3fvSUN;
GLAPI PFNGLCOLOR4UBVERTEX3FVSUNPROC glad_debug_glColor4ubVertex3fvSUN;
#define glColor4ubVertex3fvSUN glad_debug_glColor4ubVertex3fvSUN
typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FSUNPROC)(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLCOLOR3FVERTEX3FSUNPROC glad_glColor3fVertex3fSUN;
GLAPI PFNGLCOLOR3FVERTEX3FSUNPROC glad_debug_glColor3fVertex3fSUN;
#define glColor3fVertex3fSUN glad_debug_glColor3fVertex3fSUN
typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FVSUNPROC)(const GLfloat* c, const GLfloat* v);
GLAPI PFNGLCOLOR3FVERTEX3FVSUNPROC glad_glColor3fVertex3fvSUN;
GLAPI PFNGLCOLOR3FVERTEX3FVSUNPROC glad_debug_glColor3fVertex3fvSUN;
#define glColor3fVertex3fvSUN glad_debug_glColor3fVertex3fvSUN
typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FSUNPROC)(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLNORMAL3FVERTEX3FSUNPROC glad_glNormal3fVertex3fSUN;
GLAPI PFNGLNORMAL3FVERTEX3FSUNPROC glad_debug_glNormal3fVertex3fSUN;
#define glNormal3fVertex3fSUN glad_debug_glNormal3fVertex3fSUN
typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FVSUNPROC)(const GLfloat* n, const GLfloat* v);
GLAPI PFNGLNORMAL3FVERTEX3FVSUNPROC glad_glNormal3fVertex3fvSUN;
GLAPI PFNGLNORMAL3FVERTEX3FVSUNPROC glad_debug_glNormal3fVertex3fvSUN;
#define glNormal3fVertex3fvSUN glad_debug_glNormal3fVertex3fvSUN
typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_glColor4fNormal3fVertex3fSUN;
GLAPI PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_debug_glColor4fNormal3fVertex3fSUN;
#define glColor4fNormal3fVertex3fSUN glad_debug_glColor4fNormal3fVertex3fSUN
typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLfloat* c, const GLfloat* n, const GLfloat* v);
GLAPI PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_glColor4fNormal3fVertex3fvSUN;
GLAPI PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_debug_glColor4fNormal3fVertex3fvSUN;
#define glColor4fNormal3fVertex3fvSUN glad_debug_glColor4fNormal3fVertex3fvSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLTEXCOORD2FVERTEX3FSUNPROC glad_glTexCoord2fVertex3fSUN;
GLAPI PFNGLTEXCOORD2FVERTEX3FSUNPROC glad_debug_glTexCoord2fVertex3fSUN;
#define glTexCoord2fVertex3fSUN glad_debug_glTexCoord2fVertex3fSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FVSUNPROC)(const GLfloat* tc, const GLfloat* v);
GLAPI PFNGLTEXCOORD2FVERTEX3FVSUNPROC glad_glTexCoord2fVertex3fvSUN;
GLAPI PFNGLTEXCOORD2FVERTEX3FVSUNPROC glad_debug_glTexCoord2fVertex3fvSUN;
#define glTexCoord2fVertex3fvSUN glad_debug_glTexCoord2fVertex3fvSUN
typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FSUNPROC)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLTEXCOORD4FVERTEX4FSUNPROC glad_glTexCoord4fVertex4fSUN;
GLAPI PFNGLTEXCOORD4FVERTEX4FSUNPROC glad_debug_glTexCoord4fVertex4fSUN;
#define glTexCoord4fVertex4fSUN glad_debug_glTexCoord4fVertex4fSUN
typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FVSUNPROC)(const GLfloat* tc, const GLfloat* v);
GLAPI PFNGLTEXCOORD4FVERTEX4FVSUNPROC glad_glTexCoord4fVertex4fvSUN;
GLAPI PFNGLTEXCOORD4FVERTEX4FVSUNPROC glad_debug_glTexCoord4fVertex4fvSUN;
#define glTexCoord4fVertex4fvSUN glad_debug_glTexCoord4fVertex4fvSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glad_glTexCoord2fColor4ubVertex3fSUN;
GLAPI PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glad_debug_glTexCoord2fColor4ubVertex3fSUN;
#define glTexCoord2fColor4ubVertex3fSUN glad_debug_glTexCoord2fColor4ubVertex3fSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)(const GLfloat* tc, const GLubyte* c, const GLfloat* v);
GLAPI PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glad_glTexCoord2fColor4ubVertex3fvSUN;
GLAPI PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glad_debug_glTexCoord2fColor4ubVertex3fvSUN;
#define glTexCoord2fColor4ubVertex3fvSUN glad_debug_glTexCoord2fColor4ubVertex3fvSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glad_glTexCoord2fColor3fVertex3fSUN;
GLAPI PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glad_debug_glTexCoord2fColor3fVertex3fSUN;
#define glTexCoord2fColor3fVertex3fSUN glad_debug_glTexCoord2fColor3fVertex3fSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)(const GLfloat* tc, const GLfloat* c, const GLfloat* v);
GLAPI PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glad_glTexCoord2fColor3fVertex3fvSUN;
GLAPI PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glad_debug_glTexCoord2fColor3fVertex3fvSUN;
#define glTexCoord2fColor3fVertex3fvSUN glad_debug_glTexCoord2fColor3fVertex3fvSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glad_glTexCoord2fNormal3fVertex3fSUN;
GLAPI PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glad_debug_glTexCoord2fNormal3fVertex3fSUN;
#define glTexCoord2fNormal3fVertex3fSUN glad_debug_glTexCoord2fNormal3fVertex3fSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)(const GLfloat* tc, const GLfloat* n, const GLfloat* v);
GLAPI PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glad_glTexCoord2fNormal3fVertex3fvSUN;
GLAPI PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glad_debug_glTexCoord2fNormal3fVertex3fvSUN;
#define glTexCoord2fNormal3fVertex3fvSUN glad_debug_glTexCoord2fNormal3fVertex3fvSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_glTexCoord2fColor4fNormal3fVertex3fSUN;
GLAPI PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_debug_glTexCoord2fColor4fNormal3fVertex3fSUN;
#define glTexCoord2fColor4fNormal3fVertex3fSUN glad_debug_glTexCoord2fColor4fNormal3fVertex3fSUN
typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
GLAPI PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_glTexCoord2fColor4fNormal3fVertex3fvSUN;
GLAPI PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_debug_glTexCoord2fColor4fNormal3fVertex3fvSUN;
#define glTexCoord2fColor4fNormal3fVertex3fvSUN glad_debug_glTexCoord2fColor4fNormal3fVertex3fvSUN
typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLAPI PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glad_glTexCoord4fColor4fNormal3fVertex4fSUN;
GLAPI PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glad_debug_glTexCoord4fColor4fNormal3fVertex4fSUN;
#define glTexCoord4fColor4fNormal3fVertex4fSUN glad_debug_glTexCoord4fColor4fNormal3fVertex4fSUN
typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
GLAPI PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glad_glTexCoord4fColor4fNormal3fVertex4fvSUN;
GLAPI PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glad_debug_glTexCoord4fColor4fNormal3fVertex4fvSUN;
#define glTexCoord4fColor4fNormal3fVertex4fvSUN glad_debug_glTexCoord4fColor4fNormal3fVertex4fvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glad_glReplacementCodeuiVertex3fSUN;
GLAPI PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glad_debug_glReplacementCodeuiVertex3fSUN;
#define glReplacementCodeuiVertex3fSUN glad_debug_glReplacementCodeuiVertex3fSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* v);
GLAPI PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glad_glReplacementCodeuiVertex3fvSUN;
GLAPI PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiVertex3fvSUN;
#define glReplacementCodeuiVertex3fvSUN glad_debug_glReplacementCodeuiVertex3fvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glad_glReplacementCodeuiColor4ubVertex3fSUN;
GLAPI PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glad_debug_glReplacementCodeuiColor4ubVertex3fSUN;
#define glReplacementCodeuiColor4ubVertex3fSUN glad_debug_glReplacementCodeuiColor4ubVertex3fSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)(const GLuint* rc, const GLubyte* c, const GLfloat* v);
GLAPI PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glad_glReplacementCodeuiColor4ubVertex3fvSUN;
GLAPI PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiColor4ubVertex3fvSUN;
#define glReplacementCodeuiColor4ubVertex3fvSUN glad_debug_glReplacementCodeuiColor4ubVertex3fvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glad_glReplacementCodeuiColor3fVertex3fSUN;
GLAPI PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiColor3fVertex3fSUN;
#define glReplacementCodeuiColor3fVertex3fSUN glad_debug_glReplacementCodeuiColor3fVertex3fSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* c, const GLfloat* v);
GLAPI PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glad_glReplacementCodeuiColor3fVertex3fvSUN;
GLAPI PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiColor3fVertex3fvSUN;
#define glReplacementCodeuiColor3fVertex3fvSUN glad_debug_glReplacementCodeuiColor3fVertex3fvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glad_glReplacementCodeuiNormal3fVertex3fSUN;
GLAPI PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiNormal3fVertex3fSUN;
#define glReplacementCodeuiNormal3fVertex3fSUN glad_debug_glReplacementCodeuiNormal3fVertex3fSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* n, const GLfloat* v);
GLAPI PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glad_glReplacementCodeuiNormal3fVertex3fvSUN;
GLAPI PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiNormal3fVertex3fvSUN;
#define glReplacementCodeuiNormal3fVertex3fvSUN glad_debug_glReplacementCodeuiNormal3fVertex3fvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
GLAPI PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN glad_debug_glReplacementCodeuiColor4fNormal3fVertex3fSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
GLAPI PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
GLAPI PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN glad_debug_glReplacementCodeuiColor4fNormal3fVertex3fvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glad_glReplacementCodeuiTexCoord2fVertex3fSUN;
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiTexCoord2fVertex3fSUN;
#define glReplacementCodeuiTexCoord2fVertex3fSUN glad_debug_glReplacementCodeuiTexCoord2fVertex3fSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* tc, const GLfloat* v);
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glad_glReplacementCodeuiTexCoord2fVertex3fvSUN;
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiTexCoord2fVertex3fvSUN;
#define glReplacementCodeuiTexCoord2fVertex3fvSUN glad_debug_glReplacementCodeuiTexCoord2fVertex3fvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glad_debug_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* tc, const GLfloat* n, const GLfloat* v);
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glad_debug_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glad_debug_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)(const GLuint* rc, const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v);
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
GLAPI PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glad_debug_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
#endif
#ifndef GL_SGIX_igloo_interface
#define GL_SGIX_igloo_interface 1
GLAPI int GLAD_GL_SGIX_igloo_interface;
typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC)(GLenum pname, const void* params);
GLAPI PFNGLIGLOOINTERFACESGIXPROC glad_glIglooInterfaceSGIX;
GLAPI PFNGLIGLOOINTERFACESGIXPROC glad_debug_glIglooInterfaceSGIX;
#define glIglooInterfaceSGIX glad_debug_glIglooInterfaceSGIX
#endif
#ifndef GL_SGIS_texture_lod
#define GL_SGIS_texture_lod 1
GLAPI int GLAD_GL_SGIS_texture_lod;
#endif
#ifndef GL_NV_vertex_program3
#define GL_NV_vertex_program3 1
GLAPI int GLAD_GL_NV_vertex_program3;
#endif
#ifndef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 1
GLAPI int GLAD_GL_ARB_draw_indirect;
typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void* indirect);
GLAPI PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
GLAPI PFNGLDRAWARRAYSINDIRECTPROC glad_debug_glDrawArraysIndirect;
#define glDrawArraysIndirect glad_debug_glDrawArraysIndirect
typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void* indirect);
GLAPI PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
GLAPI PFNGLDRAWELEMENTSINDIRECTPROC glad_debug_glDrawElementsIndirect;
#define glDrawElementsIndirect glad_debug_glDrawElementsIndirect
#endif
#ifndef GL_NV_vertex_program4
#define GL_NV_vertex_program4 1
GLAPI int GLAD_GL_NV_vertex_program4;
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC)(GLuint index, GLint x);
GLAPI PFNGLVERTEXATTRIBI1IEXTPROC glad_glVertexAttribI1iEXT;
GLAPI PFNGLVERTEXATTRIBI1IEXTPROC glad_debug_glVertexAttribI1iEXT;
#define glVertexAttribI1iEXT glad_debug_glVertexAttribI1iEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IEXTPROC)(GLuint index, GLint x, GLint y);
GLAPI PFNGLVERTEXATTRIBI2IEXTPROC glad_glVertexAttribI2iEXT;
GLAPI PFNGLVERTEXATTRIBI2IEXTPROC glad_debug_glVertexAttribI2iEXT;
#define glVertexAttribI2iEXT glad_debug_glVertexAttribI2iEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IEXTPROC)(GLuint index, GLint x, GLint y, GLint z);
GLAPI PFNGLVERTEXATTRIBI3IEXTPROC glad_glVertexAttribI3iEXT;
GLAPI PFNGLVERTEXATTRIBI3IEXTPROC glad_debug_glVertexAttribI3iEXT;
#define glVertexAttribI3iEXT glad_debug_glVertexAttribI3iEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IEXTPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLAPI PFNGLVERTEXATTRIBI4IEXTPROC glad_glVertexAttribI4iEXT;
GLAPI PFNGLVERTEXATTRIBI4IEXTPROC glad_debug_glVertexAttribI4iEXT;
#define glVertexAttribI4iEXT glad_debug_glVertexAttribI4iEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIEXTPROC)(GLuint index, GLuint x);
GLAPI PFNGLVERTEXATTRIBI1UIEXTPROC glad_glVertexAttribI1uiEXT;
GLAPI PFNGLVERTEXATTRIBI1UIEXTPROC glad_debug_glVertexAttribI1uiEXT;
#define glVertexAttribI1uiEXT glad_debug_glVertexAttribI1uiEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIEXTPROC)(GLuint index, GLuint x, GLuint y);
GLAPI PFNGLVERTEXATTRIBI2UIEXTPROC glad_glVertexAttribI2uiEXT;
GLAPI PFNGLVERTEXATTRIBI2UIEXTPROC glad_debug_glVertexAttribI2uiEXT;
#define glVertexAttribI2uiEXT glad_debug_glVertexAttribI2uiEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
GLAPI PFNGLVERTEXATTRIBI3UIEXTPROC glad_glVertexAttribI3uiEXT;
GLAPI PFNGLVERTEXATTRIBI3UIEXTPROC glad_debug_glVertexAttribI3uiEXT;
#define glVertexAttribI3uiEXT glad_debug_glVertexAttribI3uiEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLAPI PFNGLVERTEXATTRIBI4UIEXTPROC glad_glVertexAttribI4uiEXT;
GLAPI PFNGLVERTEXATTRIBI4UIEXTPROC glad_debug_glVertexAttribI4uiEXT;
#define glVertexAttribI4uiEXT glad_debug_glVertexAttribI4uiEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVEXTPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI1IVEXTPROC glad_glVertexAttribI1ivEXT;
GLAPI PFNGLVERTEXATTRIBI1IVEXTPROC glad_debug_glVertexAttribI1ivEXT;
#define glVertexAttribI1ivEXT glad_debug_glVertexAttribI1ivEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVEXTPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI2IVEXTPROC glad_glVertexAttribI2ivEXT;
GLAPI PFNGLVERTEXATTRIBI2IVEXTPROC glad_debug_glVertexAttribI2ivEXT;
#define glVertexAttribI2ivEXT glad_debug_glVertexAttribI2ivEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVEXTPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI3IVEXTPROC glad_glVertexAttribI3ivEXT;
GLAPI PFNGLVERTEXATTRIBI3IVEXTPROC glad_debug_glVertexAttribI3ivEXT;
#define glVertexAttribI3ivEXT glad_debug_glVertexAttribI3ivEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVEXTPROC)(GLuint index, const GLint* v);
GLAPI PFNGLVERTEXATTRIBI4IVEXTPROC glad_glVertexAttribI4ivEXT;
GLAPI PFNGLVERTEXATTRIBI4IVEXTPROC glad_debug_glVertexAttribI4ivEXT;
#define glVertexAttribI4ivEXT glad_debug_glVertexAttribI4ivEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVEXTPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI1UIVEXTPROC glad_glVertexAttribI1uivEXT;
GLAPI PFNGLVERTEXATTRIBI1UIVEXTPROC glad_debug_glVertexAttribI1uivEXT;
#define glVertexAttribI1uivEXT glad_debug_glVertexAttribI1uivEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVEXTPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI2UIVEXTPROC glad_glVertexAttribI2uivEXT;
GLAPI PFNGLVERTEXATTRIBI2UIVEXTPROC glad_debug_glVertexAttribI2uivEXT;
#define glVertexAttribI2uivEXT glad_debug_glVertexAttribI2uivEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVEXTPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI3UIVEXTPROC glad_glVertexAttribI3uivEXT;
GLAPI PFNGLVERTEXATTRIBI3UIVEXTPROC glad_debug_glVertexAttribI3uivEXT;
#define glVertexAttribI3uivEXT glad_debug_glVertexAttribI3uivEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVEXTPROC)(GLuint index, const GLuint* v);
GLAPI PFNGLVERTEXATTRIBI4UIVEXTPROC glad_glVertexAttribI4uivEXT;
GLAPI PFNGLVERTEXATTRIBI4UIVEXTPROC glad_debug_glVertexAttribI4uivEXT;
#define glVertexAttribI4uivEXT glad_debug_glVertexAttribI4uivEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC)(GLuint index, const GLbyte* v);
GLAPI PFNGLVERTEXATTRIBI4BVEXTPROC glad_glVertexAttribI4bvEXT;
GLAPI PFNGLVERTEXATTRIBI4BVEXTPROC glad_debug_glVertexAttribI4bvEXT;
#define glVertexAttribI4bvEXT glad_debug_glVertexAttribI4bvEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVEXTPROC)(GLuint index, const GLshort* v);
GLAPI PFNGLVERTEXATTRIBI4SVEXTPROC glad_glVertexAttribI4svEXT;
GLAPI PFNGLVERTEXATTRIBI4SVEXTPROC glad_debug_glVertexAttribI4svEXT;
#define glVertexAttribI4svEXT glad_debug_glVertexAttribI4svEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC)(GLuint index, const GLubyte* v);
GLAPI PFNGLVERTEXATTRIBI4UBVEXTPROC glad_glVertexAttribI4ubvEXT;
GLAPI PFNGLVERTEXATTRIBI4UBVEXTPROC glad_debug_glVertexAttribI4ubvEXT;
#define glVertexAttribI4ubvEXT glad_debug_glVertexAttribI4ubvEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC)(GLuint index, const GLushort* v);
GLAPI PFNGLVERTEXATTRIBI4USVEXTPROC glad_glVertexAttribI4usvEXT;
GLAPI PFNGLVERTEXATTRIBI4USVEXTPROC glad_debug_glVertexAttribI4usvEXT;
#define glVertexAttribI4usvEXT glad_debug_glVertexAttribI4usvEXT
typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLVERTEXATTRIBIPOINTEREXTPROC glad_glVertexAttribIPointerEXT;
GLAPI PFNGLVERTEXATTRIBIPOINTEREXTPROC glad_debug_glVertexAttribIPointerEXT;
#define glVertexAttribIPointerEXT glad_debug_glVertexAttribIPointerEXT
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC)(GLuint index, GLenum pname, GLint* params);
GLAPI PFNGLGETVERTEXATTRIBIIVEXTPROC glad_glGetVertexAttribIivEXT;
GLAPI PFNGLGETVERTEXATTRIBIIVEXTPROC glad_debug_glGetVertexAttribIivEXT;
#define glGetVertexAttribIivEXT glad_debug_glGetVertexAttribIivEXT
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC)(GLuint index, GLenum pname, GLuint* params);
GLAPI PFNGLGETVERTEXATTRIBIUIVEXTPROC glad_glGetVertexAttribIuivEXT;
GLAPI PFNGLGETVERTEXATTRIBIUIVEXTPROC glad_debug_glGetVertexAttribIuivEXT;
#define glGetVertexAttribIuivEXT glad_debug_glGetVertexAttribIuivEXT
#endif
#ifndef GL_AMD_transform_feedback3_lines_triangles
#define GL_AMD_transform_feedback3_lines_triangles 1
GLAPI int GLAD_GL_AMD_transform_feedback3_lines_triangles;
#endif
#ifndef GL_SGIS_fog_function
#define GL_SGIS_fog_function 1
GLAPI int GLAD_GL_SGIS_fog_function;
typedef void (APIENTRYP PFNGLFOGFUNCSGISPROC)(GLsizei n, const GLfloat* points);
GLAPI PFNGLFOGFUNCSGISPROC glad_glFogFuncSGIS;
GLAPI PFNGLFOGFUNCSGISPROC glad_debug_glFogFuncSGIS;
#define glFogFuncSGIS glad_debug_glFogFuncSGIS
typedef void (APIENTRYP PFNGLGETFOGFUNCSGISPROC)(GLfloat* points);
GLAPI PFNGLGETFOGFUNCSGISPROC glad_glGetFogFuncSGIS;
GLAPI PFNGLGETFOGFUNCSGISPROC glad_debug_glGetFogFuncSGIS;
#define glGetFogFuncSGIS glad_debug_glGetFogFuncSGIS
#endif
#ifndef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object 1
GLAPI int GLAD_GL_EXT_x11_sync_object;
typedef GLsync (APIENTRYP PFNGLIMPORTSYNCEXTPROC)(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
GLAPI PFNGLIMPORTSYNCEXTPROC glad_glImportSyncEXT;
GLAPI PFNGLIMPORTSYNCEXTPROC glad_debug_glImportSyncEXT;
#define glImportSyncEXT glad_debug_glImportSyncEXT
#endif
#ifndef GL_ARB_sync
#define GL_ARB_sync 1
GLAPI int GLAD_GL_ARB_sync;
#endif
#ifndef GL_NV_sample_locations
#define GL_NV_sample_locations 1
GLAPI int GLAD_GL_NV_sample_locations;
typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)(GLenum target, GLuint start, GLsizei count, const GLfloat* v);
GLAPI PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glad_glFramebufferSampleLocationsfvNV;
GLAPI PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glad_debug_glFramebufferSampleLocationsfvNV;
#define glFramebufferSampleLocationsfvNV glad_debug_glFramebufferSampleLocationsfvNV
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
GLAPI PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glad_glNamedFramebufferSampleLocationsfvNV;
GLAPI PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glad_debug_glNamedFramebufferSampleLocationsfvNV;
#define glNamedFramebufferSampleLocationsfvNV glad_debug_glNamedFramebufferSampleLocationsfvNV
typedef void (APIENTRYP PFNGLRESOLVEDEPTHVALUESNVPROC)();
GLAPI PFNGLRESOLVEDEPTHVALUESNVPROC glad_glResolveDepthValuesNV;
GLAPI PFNGLRESOLVEDEPTHVALUESNVPROC glad_debug_glResolveDepthValuesNV;
#define glResolveDepthValuesNV glad_debug_glResolveDepthValuesNV
#endif
#ifndef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 1
GLAPI int GLAD_GL_ARB_compute_variable_group_size;
typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
GLAPI PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glad_glDispatchComputeGroupSizeARB;
GLAPI PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glad_debug_glDispatchComputeGroupSizeARB;
#define glDispatchComputeGroupSizeARB glad_debug_glDispatchComputeGroupSizeARB
#endif
#ifndef GL_OES_fixed_point
#define GL_OES_fixed_point 1
GLAPI int GLAD_GL_OES_fixed_point;
typedef void (APIENTRYP PFNGLALPHAFUNCXOESPROC)(GLenum func, GLfixed ref);
GLAPI PFNGLALPHAFUNCXOESPROC glad_glAlphaFuncxOES;
GLAPI PFNGLALPHAFUNCXOESPROC glad_debug_glAlphaFuncxOES;
#define glAlphaFuncxOES glad_debug_glAlphaFuncxOES
typedef void (APIENTRYP PFNGLCLEARCOLORXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
GLAPI PFNGLCLEARCOLORXOESPROC glad_glClearColorxOES;
GLAPI PFNGLCLEARCOLORXOESPROC glad_debug_glClearColorxOES;
#define glClearColorxOES glad_debug_glClearColorxOES
typedef void (APIENTRYP PFNGLCLEARDEPTHXOESPROC)(GLfixed depth);
GLAPI PFNGLCLEARDEPTHXOESPROC glad_glClearDepthxOES;
GLAPI PFNGLCLEARDEPTHXOESPROC glad_debug_glClearDepthxOES;
#define glClearDepthxOES glad_debug_glClearDepthxOES
typedef void (APIENTRYP PFNGLCLIPPLANEXOESPROC)(GLenum plane, const GLfixed* equation);
GLAPI PFNGLCLIPPLANEXOESPROC glad_glClipPlanexOES;
GLAPI PFNGLCLIPPLANEXOESPROC glad_debug_glClipPlanexOES;
#define glClipPlanexOES glad_debug_glClipPlanexOES
typedef void (APIENTRYP PFNGLCOLOR4XOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
GLAPI PFNGLCOLOR4XOESPROC glad_glColor4xOES;
GLAPI PFNGLCOLOR4XOESPROC glad_debug_glColor4xOES;
#define glColor4xOES glad_debug_glColor4xOES
typedef void (APIENTRYP PFNGLDEPTHRANGEXOESPROC)(GLfixed n, GLfixed f);
GLAPI PFNGLDEPTHRANGEXOESPROC glad_glDepthRangexOES;
GLAPI PFNGLDEPTHRANGEXOESPROC glad_debug_glDepthRangexOES;
#define glDepthRangexOES glad_debug_glDepthRangexOES
typedef void (APIENTRYP PFNGLFOGXOESPROC)(GLenum pname, GLfixed param);
GLAPI PFNGLFOGXOESPROC glad_glFogxOES;
GLAPI PFNGLFOGXOESPROC glad_debug_glFogxOES;
#define glFogxOES glad_debug_glFogxOES
typedef void (APIENTRYP PFNGLFOGXVOESPROC)(GLenum pname, const GLfixed* param);
GLAPI PFNGLFOGXVOESPROC glad_glFogxvOES;
GLAPI PFNGLFOGXVOESPROC glad_debug_glFogxvOES;
#define glFogxvOES glad_debug_glFogxvOES
typedef void (APIENTRYP PFNGLFRUSTUMXOESPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
GLAPI PFNGLFRUSTUMXOESPROC glad_glFrustumxOES;
GLAPI PFNGLFRUSTUMXOESPROC glad_debug_glFrustumxOES;
#define glFrustumxOES glad_debug_glFrustumxOES
typedef void (APIENTRYP PFNGLGETCLIPPLANEXOESPROC)(GLenum plane, GLfixed* equation);
GLAPI PFNGLGETCLIPPLANEXOESPROC glad_glGetClipPlanexOES;
GLAPI PFNGLGETCLIPPLANEXOESPROC glad_debug_glGetClipPlanexOES;
#define glGetClipPlanexOES glad_debug_glGetClipPlanexOES
typedef void (APIENTRYP PFNGLGETFIXEDVOESPROC)(GLenum pname, GLfixed* params);
GLAPI PFNGLGETFIXEDVOESPROC glad_glGetFixedvOES;
GLAPI PFNGLGETFIXEDVOESPROC glad_debug_glGetFixedvOES;
#define glGetFixedvOES glad_debug_glGetFixedvOES
typedef void (APIENTRYP PFNGLGETTEXENVXVOESPROC)(GLenum target, GLenum pname, GLfixed* params);
GLAPI PFNGLGETTEXENVXVOESPROC glad_glGetTexEnvxvOES;
GLAPI PFNGLGETTEXENVXVOESPROC glad_debug_glGetTexEnvxvOES;
#define glGetTexEnvxvOES glad_debug_glGetTexEnvxvOES
typedef void (APIENTRYP PFNGLGETTEXPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed* params);
GLAPI PFNGLGETTEXPARAMETERXVOESPROC glad_glGetTexParameterxvOES;
GLAPI PFNGLGETTEXPARAMETERXVOESPROC glad_debug_glGetTexParameterxvOES;
#define glGetTexParameterxvOES glad_debug_glGetTexParameterxvOES
typedef void (APIENTRYP PFNGLLIGHTMODELXOESPROC)(GLenum pname, GLfixed param);
GLAPI PFNGLLIGHTMODELXOESPROC glad_glLightModelxOES;
GLAPI PFNGLLIGHTMODELXOESPROC glad_debug_glLightModelxOES;
#define glLightModelxOES glad_debug_glLightModelxOES
typedef void (APIENTRYP PFNGLLIGHTMODELXVOESPROC)(GLenum pname, const GLfixed* param);
GLAPI PFNGLLIGHTMODELXVOESPROC glad_glLightModelxvOES;
GLAPI PFNGLLIGHTMODELXVOESPROC glad_debug_glLightModelxvOES;
#define glLightModelxvOES glad_debug_glLightModelxvOES
typedef void (APIENTRYP PFNGLLIGHTXOESPROC)(GLenum light, GLenum pname, GLfixed param);
GLAPI PFNGLLIGHTXOESPROC glad_glLightxOES;
GLAPI PFNGLLIGHTXOESPROC glad_debug_glLightxOES;
#define glLightxOES glad_debug_glLightxOES
typedef void (APIENTRYP PFNGLLIGHTXVOESPROC)(GLenum light, GLenum pname, const GLfixed* params);
GLAPI PFNGLLIGHTXVOESPROC glad_glLightxvOES;
GLAPI PFNGLLIGHTXVOESPROC glad_debug_glLightxvOES;
#define glLightxvOES glad_debug_glLightxvOES
typedef void (APIENTRYP PFNGLLINEWIDTHXOESPROC)(GLfixed width);
GLAPI PFNGLLINEWIDTHXOESPROC glad_glLineWidthxOES;
GLAPI PFNGLLINEWIDTHXOESPROC glad_debug_glLineWidthxOES;
#define glLineWidthxOES glad_debug_glLineWidthxOES
typedef void (APIENTRYP PFNGLLOADMATRIXXOESPROC)(const GLfixed* m);
GLAPI PFNGLLOADMATRIXXOESPROC glad_glLoadMatrixxOES;
GLAPI PFNGLLOADMATRIXXOESPROC glad_debug_glLoadMatrixxOES;
#define glLoadMatrixxOES glad_debug_glLoadMatrixxOES
typedef void (APIENTRYP PFNGLMATERIALXOESPROC)(GLenum face, GLenum pname, GLfixed param);
GLAPI PFNGLMATERIALXOESPROC glad_glMaterialxOES;
GLAPI PFNGLMATERIALXOESPROC glad_debug_glMaterialxOES;
#define glMaterialxOES glad_debug_glMaterialxOES
typedef void (APIENTRYP PFNGLMATERIALXVOESPROC)(GLenum face, GLenum pname, const GLfixed* param);
GLAPI PFNGLMATERIALXVOESPROC glad_glMaterialxvOES;
GLAPI PFNGLMATERIALXVOESPROC glad_debug_glMaterialxvOES;
#define glMaterialxvOES glad_debug_glMaterialxvOES
typedef void (APIENTRYP PFNGLMULTMATRIXXOESPROC)(const GLfixed* m);
GLAPI PFNGLMULTMATRIXXOESPROC glad_glMultMatrixxOES;
GLAPI PFNGLMULTMATRIXXOESPROC glad_debug_glMultMatrixxOES;
#define glMultMatrixxOES glad_debug_glMultMatrixxOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD4XOESPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
GLAPI PFNGLMULTITEXCOORD4XOESPROC glad_glMultiTexCoord4xOES;
GLAPI PFNGLMULTITEXCOORD4XOESPROC glad_debug_glMultiTexCoord4xOES;
#define glMultiTexCoord4xOES glad_debug_glMultiTexCoord4xOES
typedef void (APIENTRYP PFNGLNORMAL3XOESPROC)(GLfixed nx, GLfixed ny, GLfixed nz);
GLAPI PFNGLNORMAL3XOESPROC glad_glNormal3xOES;
GLAPI PFNGLNORMAL3XOESPROC glad_debug_glNormal3xOES;
#define glNormal3xOES glad_debug_glNormal3xOES
typedef void (APIENTRYP PFNGLORTHOXOESPROC)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
GLAPI PFNGLORTHOXOESPROC glad_glOrthoxOES;
GLAPI PFNGLORTHOXOESPROC glad_debug_glOrthoxOES;
#define glOrthoxOES glad_debug_glOrthoxOES
typedef void (APIENTRYP PFNGLPOINTPARAMETERXVOESPROC)(GLenum pname, const GLfixed* params);
GLAPI PFNGLPOINTPARAMETERXVOESPROC glad_glPointParameterxvOES;
GLAPI PFNGLPOINTPARAMETERXVOESPROC glad_debug_glPointParameterxvOES;
#define glPointParameterxvOES glad_debug_glPointParameterxvOES
typedef void (APIENTRYP PFNGLPOINTSIZEXOESPROC)(GLfixed size);
GLAPI PFNGLPOINTSIZEXOESPROC glad_glPointSizexOES;
GLAPI PFNGLPOINTSIZEXOESPROC glad_debug_glPointSizexOES;
#define glPointSizexOES glad_debug_glPointSizexOES
typedef void (APIENTRYP PFNGLPOLYGONOFFSETXOESPROC)(GLfixed factor, GLfixed units);
GLAPI PFNGLPOLYGONOFFSETXOESPROC glad_glPolygonOffsetxOES;
GLAPI PFNGLPOLYGONOFFSETXOESPROC glad_debug_glPolygonOffsetxOES;
#define glPolygonOffsetxOES glad_debug_glPolygonOffsetxOES
typedef void (APIENTRYP PFNGLROTATEXOESPROC)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
GLAPI PFNGLROTATEXOESPROC glad_glRotatexOES;
GLAPI PFNGLROTATEXOESPROC glad_debug_glRotatexOES;
#define glRotatexOES glad_debug_glRotatexOES
typedef void (APIENTRYP PFNGLSCALEXOESPROC)(GLfixed x, GLfixed y, GLfixed z);
GLAPI PFNGLSCALEXOESPROC glad_glScalexOES;
GLAPI PFNGLSCALEXOESPROC glad_debug_glScalexOES;
#define glScalexOES glad_debug_glScalexOES
typedef void (APIENTRYP PFNGLTEXENVXOESPROC)(GLenum target, GLenum pname, GLfixed param);
GLAPI PFNGLTEXENVXOESPROC glad_glTexEnvxOES;
GLAPI PFNGLTEXENVXOESPROC glad_debug_glTexEnvxOES;
#define glTexEnvxOES glad_debug_glTexEnvxOES
typedef void (APIENTRYP PFNGLTEXENVXVOESPROC)(GLenum target, GLenum pname, const GLfixed* params);
GLAPI PFNGLTEXENVXVOESPROC glad_glTexEnvxvOES;
GLAPI PFNGLTEXENVXVOESPROC glad_debug_glTexEnvxvOES;
#define glTexEnvxvOES glad_debug_glTexEnvxvOES
typedef void (APIENTRYP PFNGLTEXPARAMETERXOESPROC)(GLenum target, GLenum pname, GLfixed param);
GLAPI PFNGLTEXPARAMETERXOESPROC glad_glTexParameterxOES;
GLAPI PFNGLTEXPARAMETERXOESPROC glad_debug_glTexParameterxOES;
#define glTexParameterxOES glad_debug_glTexParameterxOES
typedef void (APIENTRYP PFNGLTEXPARAMETERXVOESPROC)(GLenum target, GLenum pname, const GLfixed* params);
GLAPI PFNGLTEXPARAMETERXVOESPROC glad_glTexParameterxvOES;
GLAPI PFNGLTEXPARAMETERXVOESPROC glad_debug_glTexParameterxvOES;
#define glTexParameterxvOES glad_debug_glTexParameterxvOES
typedef void (APIENTRYP PFNGLTRANSLATEXOESPROC)(GLfixed x, GLfixed y, GLfixed z);
GLAPI PFNGLTRANSLATEXOESPROC glad_glTranslatexOES;
GLAPI PFNGLTRANSLATEXOESPROC glad_debug_glTranslatexOES;
#define glTranslatexOES glad_debug_glTranslatexOES
typedef void (APIENTRYP PFNGLGETLIGHTXVOESPROC)(GLenum light, GLenum pname, GLfixed* params);
GLAPI PFNGLGETLIGHTXVOESPROC glad_glGetLightxvOES;
GLAPI PFNGLGETLIGHTXVOESPROC glad_debug_glGetLightxvOES;
#define glGetLightxvOES glad_debug_glGetLightxvOES
typedef void (APIENTRYP PFNGLGETMATERIALXVOESPROC)(GLenum face, GLenum pname, GLfixed* params);
GLAPI PFNGLGETMATERIALXVOESPROC glad_glGetMaterialxvOES;
GLAPI PFNGLGETMATERIALXVOESPROC glad_debug_glGetMaterialxvOES;
#define glGetMaterialxvOES glad_debug_glGetMaterialxvOES
typedef void (APIENTRYP PFNGLPOINTPARAMETERXOESPROC)(GLenum pname, GLfixed param);
GLAPI PFNGLPOINTPARAMETERXOESPROC glad_glPointParameterxOES;
GLAPI PFNGLPOINTPARAMETERXOESPROC glad_debug_glPointParameterxOES;
#define glPointParameterxOES glad_debug_glPointParameterxOES
typedef void (APIENTRYP PFNGLSAMPLECOVERAGEXOESPROC)(GLclampx value, GLboolean invert);
GLAPI PFNGLSAMPLECOVERAGEXOESPROC glad_glSampleCoveragexOES;
GLAPI PFNGLSAMPLECOVERAGEXOESPROC glad_debug_glSampleCoveragexOES;
#define glSampleCoveragexOES glad_debug_glSampleCoveragexOES
typedef void (APIENTRYP PFNGLACCUMXOESPROC)(GLenum op, GLfixed value);
GLAPI PFNGLACCUMXOESPROC glad_glAccumxOES;
GLAPI PFNGLACCUMXOESPROC glad_debug_glAccumxOES;
#define glAccumxOES glad_debug_glAccumxOES
typedef void (APIENTRYP PFNGLBITMAPXOESPROC)(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte* bitmap);
GLAPI PFNGLBITMAPXOESPROC glad_glBitmapxOES;
GLAPI PFNGLBITMAPXOESPROC glad_debug_glBitmapxOES;
#define glBitmapxOES glad_debug_glBitmapxOES
typedef void (APIENTRYP PFNGLBLENDCOLORXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
GLAPI PFNGLBLENDCOLORXOESPROC glad_glBlendColorxOES;
GLAPI PFNGLBLENDCOLORXOESPROC glad_debug_glBlendColorxOES;
#define glBlendColorxOES glad_debug_glBlendColorxOES
typedef void (APIENTRYP PFNGLCLEARACCUMXOESPROC)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
GLAPI PFNGLCLEARACCUMXOESPROC glad_glClearAccumxOES;
GLAPI PFNGLCLEARACCUMXOESPROC glad_debug_glClearAccumxOES;
#define glClearAccumxOES glad_debug_glClearAccumxOES
typedef void (APIENTRYP PFNGLCOLOR3XOESPROC)(GLfixed red, GLfixed green, GLfixed blue);
GLAPI PFNGLCOLOR3XOESPROC glad_glColor3xOES;
GLAPI PFNGLCOLOR3XOESPROC glad_debug_glColor3xOES;
#define glColor3xOES glad_debug_glColor3xOES
typedef void (APIENTRYP PFNGLCOLOR3XVOESPROC)(const GLfixed* components);
GLAPI PFNGLCOLOR3XVOESPROC glad_glColor3xvOES;
GLAPI PFNGLCOLOR3XVOESPROC glad_debug_glColor3xvOES;
#define glColor3xvOES glad_debug_glColor3xvOES
typedef void (APIENTRYP PFNGLCOLOR4XVOESPROC)(const GLfixed* components);
GLAPI PFNGLCOLOR4XVOESPROC glad_glColor4xvOES;
GLAPI PFNGLCOLOR4XVOESPROC glad_debug_glColor4xvOES;
#define glColor4xvOES glad_debug_glColor4xvOES
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERXOESPROC)(GLenum target, GLenum pname, GLfixed param);
GLAPI PFNGLCONVOLUTIONPARAMETERXOESPROC glad_glConvolutionParameterxOES;
GLAPI PFNGLCONVOLUTIONPARAMETERXOESPROC glad_debug_glConvolutionParameterxOES;
#define glConvolutionParameterxOES glad_debug_glConvolutionParameterxOES
typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERXVOESPROC)(GLenum target, GLenum pname, const GLfixed* params);
GLAPI PFNGLCONVOLUTIONPARAMETERXVOESPROC glad_glConvolutionParameterxvOES;
GLAPI PFNGLCONVOLUTIONPARAMETERXVOESPROC glad_debug_glConvolutionParameterxvOES;
#define glConvolutionParameterxvOES glad_debug_glConvolutionParameterxvOES
typedef void (APIENTRYP PFNGLEVALCOORD1XOESPROC)(GLfixed u);
GLAPI PFNGLEVALCOORD1XOESPROC glad_glEvalCoord1xOES;
GLAPI PFNGLEVALCOORD1XOESPROC glad_debug_glEvalCoord1xOES;
#define glEvalCoord1xOES glad_debug_glEvalCoord1xOES
typedef void (APIENTRYP PFNGLEVALCOORD1XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLEVALCOORD1XVOESPROC glad_glEvalCoord1xvOES;
GLAPI PFNGLEVALCOORD1XVOESPROC glad_debug_glEvalCoord1xvOES;
#define glEvalCoord1xvOES glad_debug_glEvalCoord1xvOES
typedef void (APIENTRYP PFNGLEVALCOORD2XOESPROC)(GLfixed u, GLfixed v);
GLAPI PFNGLEVALCOORD2XOESPROC glad_glEvalCoord2xOES;
GLAPI PFNGLEVALCOORD2XOESPROC glad_debug_glEvalCoord2xOES;
#define glEvalCoord2xOES glad_debug_glEvalCoord2xOES
typedef void (APIENTRYP PFNGLEVALCOORD2XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLEVALCOORD2XVOESPROC glad_glEvalCoord2xvOES;
GLAPI PFNGLEVALCOORD2XVOESPROC glad_debug_glEvalCoord2xvOES;
#define glEvalCoord2xvOES glad_debug_glEvalCoord2xvOES
typedef void (APIENTRYP PFNGLFEEDBACKBUFFERXOESPROC)(GLsizei n, GLenum type, const GLfixed* buffer);
GLAPI PFNGLFEEDBACKBUFFERXOESPROC glad_glFeedbackBufferxOES;
GLAPI PFNGLFEEDBACKBUFFERXOESPROC glad_debug_glFeedbackBufferxOES;
#define glFeedbackBufferxOES glad_debug_glFeedbackBufferxOES
typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed* params);
GLAPI PFNGLGETCONVOLUTIONPARAMETERXVOESPROC glad_glGetConvolutionParameterxvOES;
GLAPI PFNGLGETCONVOLUTIONPARAMETERXVOESPROC glad_debug_glGetConvolutionParameterxvOES;
#define glGetConvolutionParameterxvOES glad_debug_glGetConvolutionParameterxvOES
typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERXVOESPROC)(GLenum target, GLenum pname, GLfixed* params);
GLAPI PFNGLGETHISTOGRAMPARAMETERXVOESPROC glad_glGetHistogramParameterxvOES;
GLAPI PFNGLGETHISTOGRAMPARAMETERXVOESPROC glad_debug_glGetHistogramParameterxvOES;
#define glGetHistogramParameterxvOES glad_debug_glGetHistogramParameterxvOES
typedef void (APIENTRYP PFNGLGETLIGHTXOESPROC)(GLenum light, GLenum pname, GLfixed* params);
GLAPI PFNGLGETLIGHTXOESPROC glad_glGetLightxOES;
GLAPI PFNGLGETLIGHTXOESPROC glad_debug_glGetLightxOES;
#define glGetLightxOES glad_debug_glGetLightxOES
typedef void (APIENTRYP PFNGLGETMAPXVOESPROC)(GLenum target, GLenum query, GLfixed* v);
GLAPI PFNGLGETMAPXVOESPROC glad_glGetMapxvOES;
GLAPI PFNGLGETMAPXVOESPROC glad_debug_glGetMapxvOES;
#define glGetMapxvOES glad_debug_glGetMapxvOES
typedef void (APIENTRYP PFNGLGETMATERIALXOESPROC)(GLenum face, GLenum pname, GLfixed param);
GLAPI PFNGLGETMATERIALXOESPROC glad_glGetMaterialxOES;
GLAPI PFNGLGETMATERIALXOESPROC glad_debug_glGetMaterialxOES;
#define glGetMaterialxOES glad_debug_glGetMaterialxOES
typedef void (APIENTRYP PFNGLGETPIXELMAPXVPROC)(GLenum map, GLint size, GLfixed* values);
GLAPI PFNGLGETPIXELMAPXVPROC glad_glGetPixelMapxv;
GLAPI PFNGLGETPIXELMAPXVPROC glad_debug_glGetPixelMapxv;
#define glGetPixelMapxv glad_debug_glGetPixelMapxv
typedef void (APIENTRYP PFNGLGETTEXGENXVOESPROC)(GLenum coord, GLenum pname, GLfixed* params);
GLAPI PFNGLGETTEXGENXVOESPROC glad_glGetTexGenxvOES;
GLAPI PFNGLGETTEXGENXVOESPROC glad_debug_glGetTexGenxvOES;
#define glGetTexGenxvOES glad_debug_glGetTexGenxvOES
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERXVOESPROC)(GLenum target, GLint level, GLenum pname, GLfixed* params);
GLAPI PFNGLGETTEXLEVELPARAMETERXVOESPROC glad_glGetTexLevelParameterxvOES;
GLAPI PFNGLGETTEXLEVELPARAMETERXVOESPROC glad_debug_glGetTexLevelParameterxvOES;
#define glGetTexLevelParameterxvOES glad_debug_glGetTexLevelParameterxvOES
typedef void (APIENTRYP PFNGLINDEXXOESPROC)(GLfixed component);
GLAPI PFNGLINDEXXOESPROC glad_glIndexxOES;
GLAPI PFNGLINDEXXOESPROC glad_debug_glIndexxOES;
#define glIndexxOES glad_debug_glIndexxOES
typedef void (APIENTRYP PFNGLINDEXXVOESPROC)(const GLfixed* component);
GLAPI PFNGLINDEXXVOESPROC glad_glIndexxvOES;
GLAPI PFNGLINDEXXVOESPROC glad_debug_glIndexxvOES;
#define glIndexxvOES glad_debug_glIndexxvOES
typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXXOESPROC)(const GLfixed* m);
GLAPI PFNGLLOADTRANSPOSEMATRIXXOESPROC glad_glLoadTransposeMatrixxOES;
GLAPI PFNGLLOADTRANSPOSEMATRIXXOESPROC glad_debug_glLoadTransposeMatrixxOES;
#define glLoadTransposeMatrixxOES glad_debug_glLoadTransposeMatrixxOES
typedef void (APIENTRYP PFNGLMAP1XOESPROC)(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
GLAPI PFNGLMAP1XOESPROC glad_glMap1xOES;
GLAPI PFNGLMAP1XOESPROC glad_debug_glMap1xOES;
#define glMap1xOES glad_debug_glMap1xOES
typedef void (APIENTRYP PFNGLMAP2XOESPROC)(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
GLAPI PFNGLMAP2XOESPROC glad_glMap2xOES;
GLAPI PFNGLMAP2XOESPROC glad_debug_glMap2xOES;
#define glMap2xOES glad_debug_glMap2xOES
typedef void (APIENTRYP PFNGLMAPGRID1XOESPROC)(GLint n, GLfixed u1, GLfixed u2);
GLAPI PFNGLMAPGRID1XOESPROC glad_glMapGrid1xOES;
GLAPI PFNGLMAPGRID1XOESPROC glad_debug_glMapGrid1xOES;
#define glMapGrid1xOES glad_debug_glMapGrid1xOES
typedef void (APIENTRYP PFNGLMAPGRID2XOESPROC)(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
GLAPI PFNGLMAPGRID2XOESPROC glad_glMapGrid2xOES;
GLAPI PFNGLMAPGRID2XOESPROC glad_debug_glMapGrid2xOES;
#define glMapGrid2xOES glad_debug_glMapGrid2xOES
typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXXOESPROC)(const GLfixed* m);
GLAPI PFNGLMULTTRANSPOSEMATRIXXOESPROC glad_glMultTransposeMatrixxOES;
GLAPI PFNGLMULTTRANSPOSEMATRIXXOESPROC glad_debug_glMultTransposeMatrixxOES;
#define glMultTransposeMatrixxOES glad_debug_glMultTransposeMatrixxOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD1XOESPROC)(GLenum texture, GLfixed s);
GLAPI PFNGLMULTITEXCOORD1XOESPROC glad_glMultiTexCoord1xOES;
GLAPI PFNGLMULTITEXCOORD1XOESPROC glad_debug_glMultiTexCoord1xOES;
#define glMultiTexCoord1xOES glad_debug_glMultiTexCoord1xOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD1XVOESPROC)(GLenum texture, const GLfixed* coords);
GLAPI PFNGLMULTITEXCOORD1XVOESPROC glad_glMultiTexCoord1xvOES;
GLAPI PFNGLMULTITEXCOORD1XVOESPROC glad_debug_glMultiTexCoord1xvOES;
#define glMultiTexCoord1xvOES glad_debug_glMultiTexCoord1xvOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD2XOESPROC)(GLenum texture, GLfixed s, GLfixed t);
GLAPI PFNGLMULTITEXCOORD2XOESPROC glad_glMultiTexCoord2xOES;
GLAPI PFNGLMULTITEXCOORD2XOESPROC glad_debug_glMultiTexCoord2xOES;
#define glMultiTexCoord2xOES glad_debug_glMultiTexCoord2xOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD2XVOESPROC)(GLenum texture, const GLfixed* coords);
GLAPI PFNGLMULTITEXCOORD2XVOESPROC glad_glMultiTexCoord2xvOES;
GLAPI PFNGLMULTITEXCOORD2XVOESPROC glad_debug_glMultiTexCoord2xvOES;
#define glMultiTexCoord2xvOES glad_debug_glMultiTexCoord2xvOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD3XOESPROC)(GLenum texture, GLfixed s, GLfixed t, GLfixed r);
GLAPI PFNGLMULTITEXCOORD3XOESPROC glad_glMultiTexCoord3xOES;
GLAPI PFNGLMULTITEXCOORD3XOESPROC glad_debug_glMultiTexCoord3xOES;
#define glMultiTexCoord3xOES glad_debug_glMultiTexCoord3xOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD3XVOESPROC)(GLenum texture, const GLfixed* coords);
GLAPI PFNGLMULTITEXCOORD3XVOESPROC glad_glMultiTexCoord3xvOES;
GLAPI PFNGLMULTITEXCOORD3XVOESPROC glad_debug_glMultiTexCoord3xvOES;
#define glMultiTexCoord3xvOES glad_debug_glMultiTexCoord3xvOES
typedef void (APIENTRYP PFNGLMULTITEXCOORD4XVOESPROC)(GLenum texture, const GLfixed* coords);
GLAPI PFNGLMULTITEXCOORD4XVOESPROC glad_glMultiTexCoord4xvOES;
GLAPI PFNGLMULTITEXCOORD4XVOESPROC glad_debug_glMultiTexCoord4xvOES;
#define glMultiTexCoord4xvOES glad_debug_glMultiTexCoord4xvOES
typedef void (APIENTRYP PFNGLNORMAL3XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLNORMAL3XVOESPROC glad_glNormal3xvOES;
GLAPI PFNGLNORMAL3XVOESPROC glad_debug_glNormal3xvOES;
#define glNormal3xvOES glad_debug_glNormal3xvOES
typedef void (APIENTRYP PFNGLPASSTHROUGHXOESPROC)(GLfixed token);
GLAPI PFNGLPASSTHROUGHXOESPROC glad_glPassThroughxOES;
GLAPI PFNGLPASSTHROUGHXOESPROC glad_debug_glPassThroughxOES;
#define glPassThroughxOES glad_debug_glPassThroughxOES
typedef void (APIENTRYP PFNGLPIXELMAPXPROC)(GLenum map, GLint size, const GLfixed* values);
GLAPI PFNGLPIXELMAPXPROC glad_glPixelMapx;
GLAPI PFNGLPIXELMAPXPROC glad_debug_glPixelMapx;
#define glPixelMapx glad_debug_glPixelMapx
typedef void (APIENTRYP PFNGLPIXELSTOREXPROC)(GLenum pname, GLfixed param);
GLAPI PFNGLPIXELSTOREXPROC glad_glPixelStorex;
GLAPI PFNGLPIXELSTOREXPROC glad_debug_glPixelStorex;
#define glPixelStorex glad_debug_glPixelStorex
typedef void (APIENTRYP PFNGLPIXELTRANSFERXOESPROC)(GLenum pname, GLfixed param);
GLAPI PFNGLPIXELTRANSFERXOESPROC glad_glPixelTransferxOES;
GLAPI PFNGLPIXELTRANSFERXOESPROC glad_debug_glPixelTransferxOES;
#define glPixelTransferxOES glad_debug_glPixelTransferxOES
typedef void (APIENTRYP PFNGLPIXELZOOMXOESPROC)(GLfixed xfactor, GLfixed yfactor);
GLAPI PFNGLPIXELZOOMXOESPROC glad_glPixelZoomxOES;
GLAPI PFNGLPIXELZOOMXOESPROC glad_debug_glPixelZoomxOES;
#define glPixelZoomxOES glad_debug_glPixelZoomxOES
typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESXOESPROC)(GLsizei n, const GLuint* textures, const GLfixed* priorities);
GLAPI PFNGLPRIORITIZETEXTURESXOESPROC glad_glPrioritizeTexturesxOES;
GLAPI PFNGLPRIORITIZETEXTURESXOESPROC glad_debug_glPrioritizeTexturesxOES;
#define glPrioritizeTexturesxOES glad_debug_glPrioritizeTexturesxOES
typedef void (APIENTRYP PFNGLRASTERPOS2XOESPROC)(GLfixed x, GLfixed y);
GLAPI PFNGLRASTERPOS2XOESPROC glad_glRasterPos2xOES;
GLAPI PFNGLRASTERPOS2XOESPROC glad_debug_glRasterPos2xOES;
#define glRasterPos2xOES glad_debug_glRasterPos2xOES
typedef void (APIENTRYP PFNGLRASTERPOS2XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLRASTERPOS2XVOESPROC glad_glRasterPos2xvOES;
GLAPI PFNGLRASTERPOS2XVOESPROC glad_debug_glRasterPos2xvOES;
#define glRasterPos2xvOES glad_debug_glRasterPos2xvOES
typedef void (APIENTRYP PFNGLRASTERPOS3XOESPROC)(GLfixed x, GLfixed y, GLfixed z);
GLAPI PFNGLRASTERPOS3XOESPROC glad_glRasterPos3xOES;
GLAPI PFNGLRASTERPOS3XOESPROC glad_debug_glRasterPos3xOES;
#define glRasterPos3xOES glad_debug_glRasterPos3xOES
typedef void (APIENTRYP PFNGLRASTERPOS3XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLRASTERPOS3XVOESPROC glad_glRasterPos3xvOES;
GLAPI PFNGLRASTERPOS3XVOESPROC glad_debug_glRasterPos3xvOES;
#define glRasterPos3xvOES glad_debug_glRasterPos3xvOES
typedef void (APIENTRYP PFNGLRASTERPOS4XOESPROC)(GLfixed x, GLfixed y, GLfixed z, GLfixed w);
GLAPI PFNGLRASTERPOS4XOESPROC glad_glRasterPos4xOES;
GLAPI PFNGLRASTERPOS4XOESPROC glad_debug_glRasterPos4xOES;
#define glRasterPos4xOES glad_debug_glRasterPos4xOES
typedef void (APIENTRYP PFNGLRASTERPOS4XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLRASTERPOS4XVOESPROC glad_glRasterPos4xvOES;
GLAPI PFNGLRASTERPOS4XVOESPROC glad_debug_glRasterPos4xvOES;
#define glRasterPos4xvOES glad_debug_glRasterPos4xvOES
typedef void (APIENTRYP PFNGLRECTXOESPROC)(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
GLAPI PFNGLRECTXOESPROC glad_glRectxOES;
GLAPI PFNGLRECTXOESPROC glad_debug_glRectxOES;
#define glRectxOES glad_debug_glRectxOES
typedef void (APIENTRYP PFNGLRECTXVOESPROC)(const GLfixed* v1, const GLfixed* v2);
GLAPI PFNGLRECTXVOESPROC glad_glRectxvOES;
GLAPI PFNGLRECTXVOESPROC glad_debug_glRectxvOES;
#define glRectxvOES glad_debug_glRectxvOES
typedef void (APIENTRYP PFNGLTEXCOORD1XOESPROC)(GLfixed s);
GLAPI PFNGLTEXCOORD1XOESPROC glad_glTexCoord1xOES;
GLAPI PFNGLTEXCOORD1XOESPROC glad_debug_glTexCoord1xOES;
#define glTexCoord1xOES glad_debug_glTexCoord1xOES
typedef void (APIENTRYP PFNGLTEXCOORD1XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLTEXCOORD1XVOESPROC glad_glTexCoord1xvOES;
GLAPI PFNGLTEXCOORD1XVOESPROC glad_debug_glTexCoord1xvOES;
#define glTexCoord1xvOES glad_debug_glTexCoord1xvOES
typedef void (APIENTRYP PFNGLTEXCOORD2XOESPROC)(GLfixed s, GLfixed t);
GLAPI PFNGLTEXCOORD2XOESPROC glad_glTexCoord2xOES;
GLAPI PFNGLTEXCOORD2XOESPROC glad_debug_glTexCoord2xOES;
#define glTexCoord2xOES glad_debug_glTexCoord2xOES
typedef void (APIENTRYP PFNGLTEXCOORD2XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLTEXCOORD2XVOESPROC glad_glTexCoord2xvOES;
GLAPI PFNGLTEXCOORD2XVOESPROC glad_debug_glTexCoord2xvOES;
#define glTexCoord2xvOES glad_debug_glTexCoord2xvOES
typedef void (APIENTRYP PFNGLTEXCOORD3XOESPROC)(GLfixed s, GLfixed t, GLfixed r);
GLAPI PFNGLTEXCOORD3XOESPROC glad_glTexCoord3xOES;
GLAPI PFNGLTEXCOORD3XOESPROC glad_debug_glTexCoord3xOES;
#define glTexCoord3xOES glad_debug_glTexCoord3xOES
typedef void (APIENTRYP PFNGLTEXCOORD3XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLTEXCOORD3XVOESPROC glad_glTexCoord3xvOES;
GLAPI PFNGLTEXCOORD3XVOESPROC glad_debug_glTexCoord3xvOES;
#define glTexCoord3xvOES glad_debug_glTexCoord3xvOES
typedef void (APIENTRYP PFNGLTEXCOORD4XOESPROC)(GLfixed s, GLfixed t, GLfixed r, GLfixed q);
GLAPI PFNGLTEXCOORD4XOESPROC glad_glTexCoord4xOES;
GLAPI PFNGLTEXCOORD4XOESPROC glad_debug_glTexCoord4xOES;
#define glTexCoord4xOES glad_debug_glTexCoord4xOES
typedef void (APIENTRYP PFNGLTEXCOORD4XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLTEXCOORD4XVOESPROC glad_glTexCoord4xvOES;
GLAPI PFNGLTEXCOORD4XVOESPROC glad_debug_glTexCoord4xvOES;
#define glTexCoord4xvOES glad_debug_glTexCoord4xvOES
typedef void (APIENTRYP PFNGLTEXGENXOESPROC)(GLenum coord, GLenum pname, GLfixed param);
GLAPI PFNGLTEXGENXOESPROC glad_glTexGenxOES;
GLAPI PFNGLTEXGENXOESPROC glad_debug_glTexGenxOES;
#define glTexGenxOES glad_debug_glTexGenxOES
typedef void (APIENTRYP PFNGLTEXGENXVOESPROC)(GLenum coord, GLenum pname, const GLfixed* params);
GLAPI PFNGLTEXGENXVOESPROC glad_glTexGenxvOES;
GLAPI PFNGLTEXGENXVOESPROC glad_debug_glTexGenxvOES;
#define glTexGenxvOES glad_debug_glTexGenxvOES
typedef void (APIENTRYP PFNGLVERTEX2XOESPROC)(GLfixed x);
GLAPI PFNGLVERTEX2XOESPROC glad_glVertex2xOES;
GLAPI PFNGLVERTEX2XOESPROC glad_debug_glVertex2xOES;
#define glVertex2xOES glad_debug_glVertex2xOES
typedef void (APIENTRYP PFNGLVERTEX2XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLVERTEX2XVOESPROC glad_glVertex2xvOES;
GLAPI PFNGLVERTEX2XVOESPROC glad_debug_glVertex2xvOES;
#define glVertex2xvOES glad_debug_glVertex2xvOES
typedef void (APIENTRYP PFNGLVERTEX3XOESPROC)(GLfixed x, GLfixed y);
GLAPI PFNGLVERTEX3XOESPROC glad_glVertex3xOES;
GLAPI PFNGLVERTEX3XOESPROC glad_debug_glVertex3xOES;
#define glVertex3xOES glad_debug_glVertex3xOES
typedef void (APIENTRYP PFNGLVERTEX3XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLVERTEX3XVOESPROC glad_glVertex3xvOES;
GLAPI PFNGLVERTEX3XVOESPROC glad_debug_glVertex3xvOES;
#define glVertex3xvOES glad_debug_glVertex3xvOES
typedef void (APIENTRYP PFNGLVERTEX4XOESPROC)(GLfixed x, GLfixed y, GLfixed z);
GLAPI PFNGLVERTEX4XOESPROC glad_glVertex4xOES;
GLAPI PFNGLVERTEX4XOESPROC glad_debug_glVertex4xOES;
#define glVertex4xOES glad_debug_glVertex4xOES
typedef void (APIENTRYP PFNGLVERTEX4XVOESPROC)(const GLfixed* coords);
GLAPI PFNGLVERTEX4XVOESPROC glad_glVertex4xvOES;
GLAPI PFNGLVERTEX4XVOESPROC glad_debug_glVertex4xvOES;
#define glVertex4xvOES glad_debug_glVertex4xvOES
#endif
#ifndef GL_NV_blend_square
#define GL_NV_blend_square 1
GLAPI int GLAD_GL_NV_blend_square;
#endif
#ifndef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample 1
GLAPI int GLAD_GL_EXT_framebuffer_multisample;
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_glRenderbufferStorageMultisampleEXT;
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_debug_glRenderbufferStorageMultisampleEXT;
#define glRenderbufferStorageMultisampleEXT glad_debug_glRenderbufferStorageMultisampleEXT
#endif
#ifndef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 1
GLAPI int GLAD_GL_ARB_gpu_shader5;
#endif
#ifndef GL_SGIS_texture4D
#define GL_SGIS_texture4D 1
GLAPI int GLAD_GL_SGIS_texture4D;
typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE4DSGISPROC glad_glTexImage4DSGIS;
GLAPI PFNGLTEXIMAGE4DSGISPROC glad_debug_glTexImage4DSGIS;
#define glTexImage4DSGIS glad_debug_glTexImage4DSGIS
typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE4DSGISPROC glad_glTexSubImage4DSGIS;
GLAPI PFNGLTEXSUBIMAGE4DSGISPROC glad_debug_glTexSubImage4DSGIS;
#define glTexSubImage4DSGIS glad_debug_glTexSubImage4DSGIS
#endif
#ifndef GL_EXT_texture3D
#define GL_EXT_texture3D 1
GLAPI int GLAD_GL_EXT_texture3D;
typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXIMAGE3DEXTPROC glad_glTexImage3DEXT;
GLAPI PFNGLTEXIMAGE3DEXTPROC glad_debug_glTexImage3DEXT;
#define glTexImage3DEXT glad_debug_glTexImage3DEXT
typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLAPI PFNGLTEXSUBIMAGE3DEXTPROC glad_glTexSubImage3DEXT;
GLAPI PFNGLTEXSUBIMAGE3DEXTPROC glad_debug_glTexSubImage3DEXT;
#define glTexSubImage3DEXT glad_debug_glTexSubImage3DEXT
#endif
#ifndef GL_EXT_multisample
#define GL_EXT_multisample 1
GLAPI int GLAD_GL_EXT_multisample;
typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC)(GLclampf value, GLboolean invert);
GLAPI PFNGLSAMPLEMASKEXTPROC glad_glSampleMaskEXT;
GLAPI PFNGLSAMPLEMASKEXTPROC glad_debug_glSampleMaskEXT;
#define glSampleMaskEXT glad_debug_glSampleMaskEXT
typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC)(GLenum pattern);
GLAPI PFNGLSAMPLEPATTERNEXTPROC glad_glSamplePatternEXT;
GLAPI PFNGLSAMPLEPATTERNEXTPROC glad_debug_glSamplePatternEXT;
#define glSamplePatternEXT glad_debug_glSamplePatternEXT
#endif
#ifndef GL_EXT_secondary_color
#define GL_EXT_secondary_color 1
GLAPI int GLAD_GL_EXT_secondary_color;
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC)(GLbyte red, GLbyte green, GLbyte blue);
GLAPI PFNGLSECONDARYCOLOR3BEXTPROC glad_glSecondaryColor3bEXT;
GLAPI PFNGLSECONDARYCOLOR3BEXTPROC glad_debug_glSecondaryColor3bEXT;
#define glSecondaryColor3bEXT glad_debug_glSecondaryColor3bEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC)(const GLbyte* v);
GLAPI PFNGLSECONDARYCOLOR3BVEXTPROC glad_glSecondaryColor3bvEXT;
GLAPI PFNGLSECONDARYCOLOR3BVEXTPROC glad_debug_glSecondaryColor3bvEXT;
#define glSecondaryColor3bvEXT glad_debug_glSecondaryColor3bvEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DEXTPROC)(GLdouble red, GLdouble green, GLdouble blue);
GLAPI PFNGLSECONDARYCOLOR3DEXTPROC glad_glSecondaryColor3dEXT;
GLAPI PFNGLSECONDARYCOLOR3DEXTPROC glad_debug_glSecondaryColor3dEXT;
#define glSecondaryColor3dEXT glad_debug_glSecondaryColor3dEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVEXTPROC)(const GLdouble* v);
GLAPI PFNGLSECONDARYCOLOR3DVEXTPROC glad_glSecondaryColor3dvEXT;
GLAPI PFNGLSECONDARYCOLOR3DVEXTPROC glad_debug_glSecondaryColor3dvEXT;
#define glSecondaryColor3dvEXT glad_debug_glSecondaryColor3dvEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FEXTPROC)(GLfloat red, GLfloat green, GLfloat blue);
GLAPI PFNGLSECONDARYCOLOR3FEXTPROC glad_glSecondaryColor3fEXT;
GLAPI PFNGLSECONDARYCOLOR3FEXTPROC glad_debug_glSecondaryColor3fEXT;
#define glSecondaryColor3fEXT glad_debug_glSecondaryColor3fEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVEXTPROC)(const GLfloat* v);
GLAPI PFNGLSECONDARYCOLOR3FVEXTPROC glad_glSecondaryColor3fvEXT;
GLAPI PFNGLSECONDARYCOLOR3FVEXTPROC glad_debug_glSecondaryColor3fvEXT;
#define glSecondaryColor3fvEXT glad_debug_glSecondaryColor3fvEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IEXTPROC)(GLint red, GLint green, GLint blue);
GLAPI PFNGLSECONDARYCOLOR3IEXTPROC glad_glSecondaryColor3iEXT;
GLAPI PFNGLSECONDARYCOLOR3IEXTPROC glad_debug_glSecondaryColor3iEXT;
#define glSecondaryColor3iEXT glad_debug_glSecondaryColor3iEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVEXTPROC)(const GLint* v);
GLAPI PFNGLSECONDARYCOLOR3IVEXTPROC glad_glSecondaryColor3ivEXT;
GLAPI PFNGLSECONDARYCOLOR3IVEXTPROC glad_debug_glSecondaryColor3ivEXT;
#define glSecondaryColor3ivEXT glad_debug_glSecondaryColor3ivEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SEXTPROC)(GLshort red, GLshort green, GLshort blue);
GLAPI PFNGLSECONDARYCOLOR3SEXTPROC glad_glSecondaryColor3sEXT;
GLAPI PFNGLSECONDARYCOLOR3SEXTPROC glad_debug_glSecondaryColor3sEXT;
#define glSecondaryColor3sEXT glad_debug_glSecondaryColor3sEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVEXTPROC)(const GLshort* v);
GLAPI PFNGLSECONDARYCOLOR3SVEXTPROC glad_glSecondaryColor3svEXT;
GLAPI PFNGLSECONDARYCOLOR3SVEXTPROC glad_debug_glSecondaryColor3svEXT;
#define glSecondaryColor3svEXT glad_debug_glSecondaryColor3svEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBEXTPROC)(GLubyte red, GLubyte green, GLubyte blue);
GLAPI PFNGLSECONDARYCOLOR3UBEXTPROC glad_glSecondaryColor3ubEXT;
GLAPI PFNGLSECONDARYCOLOR3UBEXTPROC glad_debug_glSecondaryColor3ubEXT;
#define glSecondaryColor3ubEXT glad_debug_glSecondaryColor3ubEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVEXTPROC)(const GLubyte* v);
GLAPI PFNGLSECONDARYCOLOR3UBVEXTPROC glad_glSecondaryColor3ubvEXT;
GLAPI PFNGLSECONDARYCOLOR3UBVEXTPROC glad_debug_glSecondaryColor3ubvEXT;
#define glSecondaryColor3ubvEXT glad_debug_glSecondaryColor3ubvEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIEXTPROC)(GLuint red, GLuint green, GLuint blue);
GLAPI PFNGLSECONDARYCOLOR3UIEXTPROC glad_glSecondaryColor3uiEXT;
GLAPI PFNGLSECONDARYCOLOR3UIEXTPROC glad_debug_glSecondaryColor3uiEXT;
#define glSecondaryColor3uiEXT glad_debug_glSecondaryColor3uiEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVEXTPROC)(const GLuint* v);
GLAPI PFNGLSECONDARYCOLOR3UIVEXTPROC glad_glSecondaryColor3uivEXT;
GLAPI PFNGLSECONDARYCOLOR3UIVEXTPROC glad_debug_glSecondaryColor3uivEXT;
#define glSecondaryColor3uivEXT glad_debug_glSecondaryColor3uivEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC)(GLushort red, GLushort green, GLushort blue);
GLAPI PFNGLSECONDARYCOLOR3USEXTPROC glad_glSecondaryColor3usEXT;
GLAPI PFNGLSECONDARYCOLOR3USEXTPROC glad_debug_glSecondaryColor3usEXT;
#define glSecondaryColor3usEXT glad_debug_glSecondaryColor3usEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC)(const GLushort* v);
GLAPI PFNGLSECONDARYCOLOR3USVEXTPROC glad_glSecondaryColor3usvEXT;
GLAPI PFNGLSECONDARYCOLOR3USVEXTPROC glad_debug_glSecondaryColor3usvEXT;
#define glSecondaryColor3usvEXT glad_debug_glSecondaryColor3usvEXT
typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
GLAPI PFNGLSECONDARYCOLORPOINTEREXTPROC glad_glSecondaryColorPointerEXT;
GLAPI PFNGLSECONDARYCOLORPOINTEREXTPROC glad_debug_glSecondaryColorPointerEXT;
#define glSecondaryColorPointerEXT glad_debug_glSecondaryColorPointerEXT
#endif
#ifndef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 1
GLAPI int GLAD_GL_ARB_texture_filter_minmax;
#endif
#ifndef GL_ATI_vertex_array_object
#define GL_ATI_vertex_array_object 1
GLAPI int GLAD_GL_ATI_vertex_array_object;
typedef GLuint (APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC)(GLsizei size, const void* pointer, GLenum usage);
GLAPI PFNGLNEWOBJECTBUFFERATIPROC glad_glNewObjectBufferATI;
GLAPI PFNGLNEWOBJECTBUFFERATIPROC glad_debug_glNewObjectBufferATI;
#define glNewObjectBufferATI glad_debug_glNewObjectBufferATI
typedef GLboolean (APIENTRYP PFNGLISOBJECTBUFFERATIPROC)(GLuint buffer);
GLAPI PFNGLISOBJECTBUFFERATIPROC glad_glIsObjectBufferATI;
GLAPI PFNGLISOBJECTBUFFERATIPROC glad_debug_glIsObjectBufferATI;
#define glIsObjectBufferATI glad_debug_glIsObjectBufferATI
typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC)(GLuint buffer, GLuint offset, GLsizei size, const void* pointer, GLenum preserve);
GLAPI PFNGLUPDATEOBJECTBUFFERATIPROC glad_glUpdateObjectBufferATI;
GLAPI PFNGLUPDATEOBJECTBUFFERATIPROC glad_debug_glUpdateObjectBufferATI;
#define glUpdateObjectBufferATI glad_debug_glUpdateObjectBufferATI
typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC)(GLuint buffer, GLenum pname, GLfloat* params);
GLAPI PFNGLGETOBJECTBUFFERFVATIPROC glad_glGetObjectBufferfvATI;
GLAPI PFNGLGETOBJECTBUFFERFVATIPROC glad_debug_glGetObjectBufferfvATI;
#define glGetObjectBufferfvATI glad_debug_glGetObjectBufferfvATI
typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC)(GLuint buffer, GLenum pname, GLint* params);
GLAPI PFNGLGETOBJECTBUFFERIVATIPROC glad_glGetObjectBufferivATI;
GLAPI PFNGLGETOBJECTBUFFERIVATIPROC glad_debug_glGetObjectBufferivATI;
#define glGetObjectBufferivATI glad_debug_glGetObjectBufferivATI
typedef void (APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC)(GLuint buffer);
GLAPI PFNGLFREEOBJECTBUFFERATIPROC glad_glFreeObjectBufferATI;
GLAPI PFNGLFREEOBJECTBUFFERATIPROC glad_debug_glFreeObjectBufferATI;
#define glFreeObjectBufferATI glad_debug_glFreeObjectBufferATI
typedef void (APIENTRYP PFNGLARRAYOBJECTATIPROC)(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
GLAPI PFNGLARRAYOBJECTATIPROC glad_glArrayObjectATI;
GLAPI PFNGLARRAYOBJECTATIPROC glad_debug_glArrayObjectATI;
#define glArrayObjectATI glad_debug_glArrayObjectATI
typedef void (APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC)(GLenum array, GLenum pname, GLfloat* params);
GLAPI PFNGLGETARRAYOBJECTFVATIPROC glad_glGetArrayObjectfvATI;
GLAPI PFNGLGETARRAYOBJECTFVATIPROC glad_debug_glGetArrayObjectfvATI;
#define glGetArrayObjectfvATI glad_debug_glGetArrayObjectfvATI
typedef void (APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC)(GLenum array, GLenum pname, GLint* params);
GLAPI PFNGLGETARRAYOBJECTIVATIPROC glad_glGetArrayObjectivATI;
GLAPI PFNGLGETARRAYOBJECTIVATIPROC glad_debug_glGetArrayObjectivATI;
#define glGetArrayObjectivATI glad_debug_glGetArrayObjectivATI
typedef void (APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC)(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
GLAPI PFNGLVARIANTARRAYOBJECTATIPROC glad_glVariantArrayObjectATI;
GLAPI PFNGLVARIANTARRAYOBJECTATIPROC glad_debug_glVariantArrayObjectATI;
#define glVariantArrayObjectATI glad_debug_glVariantArrayObjectATI
typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC)(GLuint id, GLenum pname, GLfloat* params);
GLAPI PFNGLGETVARIANTARRAYOBJECTFVATIPROC glad_glGetVariantArrayObjectfvATI;
GLAPI PFNGLGETVARIANTARRAYOBJECTFVATIPROC glad_debug_glGetVariantArrayObjectfvATI;
#define glGetVariantArrayObjectfvATI glad_debug_glGetVariantArrayObjectfvATI
typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC)(GLuint id, GLenum pname, GLint* params);
GLAPI PFNGLGETVARIANTARRAYOBJECTIVATIPROC glad_glGetVariantArrayObjectivATI;
GLAPI PFNGLGETVARIANTARRAYOBJECTIVATIPROC glad_debug_glGetVariantArrayObjectivATI;
#define glGetVariantArrayObjectivATI glad_debug_glGetVariantArrayObjectivATI
#endif
#ifndef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 1
GLAPI int GLAD_GL_ARB_parallel_shader_compile;
typedef void (APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSARBPROC)(GLuint count);
GLAPI PFNGLMAXSHADERCOMPILERTHREADSARBPROC glad_glMaxShaderCompilerThreadsARB;
GLAPI PFNGLMAXSHADERCOMPILERTHREADSARBPROC glad_debug_glMaxShaderCompilerThreadsARB;
#define glMaxShaderCompilerThreadsARB glad_debug_glMaxShaderCompilerThreadsARB
#endif
#ifndef GL_NVX_gpu_memory_info
#define GL_NVX_gpu_memory_info 1
GLAPI int GLAD_GL_NVX_gpu_memory_info;
#endif
#ifndef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 1
GLAPI int GLAD_GL_ARB_sparse_texture;
typedef void (APIENTRYP PFNGLTEXPAGECOMMITMENTARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
GLAPI PFNGLTEXPAGECOMMITMENTARBPROC glad_glTexPageCommitmentARB;
GLAPI PFNGLTEXPAGECOMMITMENTARBPROC glad_debug_glTexPageCommitmentARB;
#define glTexPageCommitmentARB glad_debug_glTexPageCommitmentARB
#endif
#ifndef GL_SGIS_point_line_texgen
#define GL_SGIS_point_line_texgen 1
GLAPI int GLAD_GL_SGIS_point_line_texgen;
#endif
#ifndef GL_ARB_sample_locations
#define GL_ARB_sample_locations 1
GLAPI int GLAD_GL_ARB_sample_locations;
typedef void (APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLenum target, GLuint start, GLsizei count, const GLfloat* v);
GLAPI PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_glFramebufferSampleLocationsfvARB;
GLAPI PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_debug_glFramebufferSampleLocationsfvARB;
#define glFramebufferSampleLocationsfvARB glad_debug_glFramebufferSampleLocationsfvARB
typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v);
GLAPI PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_glNamedFramebufferSampleLocationsfvARB;
GLAPI PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_debug_glNamedFramebufferSampleLocationsfvARB;
#define glNamedFramebufferSampleLocationsfvARB glad_debug_glNamedFramebufferSampleLocationsfvARB
typedef void (APIENTRYP PFNGLEVALUATEDEPTHVALUESARBPROC)();
GLAPI PFNGLEVALUATEDEPTHVALUESARBPROC glad_glEvaluateDepthValuesARB;
GLAPI PFNGLEVALUATEDEPTHVALUESARBPROC glad_debug_glEvaluateDepthValuesARB;
#define glEvaluateDepthValuesARB glad_debug_glEvaluateDepthValuesARB
#endif
#ifndef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 1
GLAPI int GLAD_GL_ARB_sparse_buffer;
typedef void (APIENTRYP PFNGLBUFFERPAGECOMMITMENTARBPROC)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
GLAPI PFNGLBUFFERPAGECOMMITMENTARBPROC glad_glBufferPageCommitmentARB;
GLAPI PFNGLBUFFERPAGECOMMITMENTARBPROC glad_debug_glBufferPageCommitmentARB;
#define glBufferPageCommitmentARB glad_debug_glBufferPageCommitmentARB
typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
GLAPI PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glad_glNamedBufferPageCommitmentEXT;
GLAPI PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glad_debug_glNamedBufferPageCommitmentEXT;
#define glNamedBufferPageCommitmentEXT glad_debug_glNamedBufferPageCommitmentEXT
typedef void (APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
GLAPI PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glad_glNamedBufferPageCommitmentARB;
GLAPI PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glad_debug_glNamedBufferPageCommitmentARB;
#define glNamedBufferPageCommitmentARB glad_debug_glNamedBufferPageCommitmentARB
#endif
#ifndef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements 1
GLAPI int GLAD_GL_EXT_draw_range_elements;
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
GLAPI PFNGLDRAWRANGEELEMENTSEXTPROC glad_glDrawRangeElementsEXT;
GLAPI PFNGLDRAWRANGEELEMENTSEXTPROC glad_debug_glDrawRangeElementsEXT;
#define glDrawRangeElementsEXT glad_debug_glDrawRangeElementsEXT
#endif
#ifndef GL_SGIX_blend_alpha_minmax
#define GL_SGIX_blend_alpha_minmax 1
GLAPI int GLAD_GL_SGIX_blend_alpha_minmax;
#endif
#ifndef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 1
GLAPI int GLAD_GL_KHR_context_flush_control;
#endif

//
// Implementation section
//

#ifdef GLAD_IMPLEMENTATION

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void _pre_call_callback_default(const char *name, void *funcptr, int len_args, ...) {}
void _post_call_callback_default(const char *name, void *funcptr, int len_args, ...) {
    GLenum error_code;
    error_code = glad_glGetError();

    if (error_code != GL_NO_ERROR) {
        fprintf(stderr, "ERROR %d in %s\n", error_code, name);
    }
}

static GLADcallback _pre_call_callback = _pre_call_callback_default;
void glad_set_pre_callback(GLADcallback cb) {
    _pre_call_callback = cb;
}

static GLADcallback _post_call_callback = _post_call_callback_default;
void glad_set_post_callback(GLADcallback cb) {
    _post_call_callback = cb;
}

struct gladGLversionStruct GLVersion;

#if defined(GL_ES_VERSION_3_0) || defined(GL_VERSION_3_0)
#define _GLAD_IS_SOME_NEW_VERSION 1
#endif

static int max_loaded_major;
static int max_loaded_minor;

static const char *exts = NULL;
static int num_exts_i = 0;
static const char **exts_i = NULL;

static int get_exts(void) {
#ifdef _GLAD_IS_SOME_NEW_VERSION
    if(max_loaded_major < 3) {
#endif
        exts = (const char *)glGetString(GL_EXTENSIONS);
#ifdef _GLAD_IS_SOME_NEW_VERSION
    } else {
        int index;

        num_exts_i = 0;
        glGetIntegerv(GL_NUM_EXTENSIONS, &num_exts_i);
        if (num_exts_i > 0) {
            exts_i = (const char **)realloc((void *)exts_i, num_exts_i * sizeof *exts_i);
        }

        if (exts_i == NULL) {
            return 0;
        }

        for(index = 0; index < num_exts_i; index++) {
            exts_i[index] = (const char*)glGetStringi(GL_EXTENSIONS, index);
        }
    }
#endif
    return 1;
}

static void free_exts(void) {
    if (exts_i != NULL) {
        free((char **)exts_i);
        exts_i = NULL;
    }
}

static int has_ext(const char *ext) {
#ifdef _GLAD_IS_SOME_NEW_VERSION
    if(max_loaded_major < 3) {
#endif
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }

        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }

            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
#ifdef _GLAD_IS_SOME_NEW_VERSION
    } else {
        int index;

        for(index = 0; index < num_exts_i; index++) {
            const char *e = exts_i[index];

            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    }
#endif

    return 0;
}
int GLAD_GL_VERSION_1_0;
int GLAD_GL_VERSION_1_1;
int GLAD_GL_VERSION_1_2;
int GLAD_GL_VERSION_1_3;
int GLAD_GL_VERSION_1_4;
int GLAD_GL_VERSION_1_5;
int GLAD_GL_VERSION_2_0;
int GLAD_GL_VERSION_2_1;
int GLAD_GL_VERSION_3_0;
int GLAD_GL_VERSION_3_1;
int GLAD_GL_VERSION_3_2;
int GLAD_GL_VERSION_3_3;
PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
void APIENTRY glad_debug_impl_glCopyTexImage1D(GLenum arg0, GLint arg1, GLenum arg2, GLint arg3, GLint arg4, GLsizei arg5, GLint arg6) {
    _pre_call_callback("glCopyTexImage1D", (void*)glCopyTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCopyTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCopyTexImage1D", (void*)glCopyTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOPYTEXIMAGE1DPROC glad_debug_glCopyTexImage1D = glad_debug_impl_glCopyTexImage1D;
PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
void APIENTRY glad_debug_impl_glVertexAttribI3ui(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_callback("glVertexAttribI3ui", (void*)glVertexAttribI3ui, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribI3ui(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribI3ui", (void*)glVertexAttribI3ui, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBI3UIPROC glad_debug_glVertexAttribI3ui = glad_debug_impl_glVertexAttribI3ui;
PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
void APIENTRY glad_debug_impl_glStencilMaskSeparate(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glStencilMaskSeparate", (void*)glStencilMaskSeparate, 2, arg0, arg1);
     glad_glStencilMaskSeparate(arg0, arg1);
    _post_call_callback("glStencilMaskSeparate", (void*)glStencilMaskSeparate, 2, arg0, arg1);

}
PFNGLSTENCILMASKSEPARATEPROC glad_debug_glStencilMaskSeparate = glad_debug_impl_glStencilMaskSeparate;
PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
void APIENTRY glad_debug_impl_glFramebufferRenderbuffer(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    _pre_call_callback("glFramebufferRenderbuffer", (void*)glFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);
     glad_glFramebufferRenderbuffer(arg0, arg1, arg2, arg3);
    _post_call_callback("glFramebufferRenderbuffer", (void*)glFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);

}
PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_debug_glFramebufferRenderbuffer = glad_debug_impl_glFramebufferRenderbuffer;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
void APIENTRY glad_debug_impl_glCompressedTexSubImage3D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLsizei arg9, const void* arg10) {
    _pre_call_callback("glCompressedTexSubImage3D", (void*)glCompressedTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glCompressedTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glCompressedTexSubImage3D", (void*)glCompressedTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_debug_glCompressedTexSubImage3D = glad_debug_impl_glCompressedTexSubImage3D;
PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;
void APIENTRY glad_debug_impl_glTexCoordP3uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glTexCoordP3uiv", (void*)glTexCoordP3uiv, 2, arg0, arg1);
     glad_glTexCoordP3uiv(arg0, arg1);
    _post_call_callback("glTexCoordP3uiv", (void*)glTexCoordP3uiv, 2, arg0, arg1);

}
PFNGLTEXCOORDP3UIVPROC glad_debug_glTexCoordP3uiv = glad_debug_impl_glTexCoordP3uiv;
PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
void APIENTRY glad_debug_impl_glVertexAttrib1sv(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib1sv", (void*)glVertexAttrib1sv, 2, arg0, arg1);
     glad_glVertexAttrib1sv(arg0, arg1);
    _post_call_callback("glVertexAttrib1sv", (void*)glVertexAttrib1sv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1SVPROC glad_debug_glVertexAttrib1sv = glad_debug_impl_glVertexAttrib1sv;
PFNGLBINDSAMPLERPROC glad_glBindSampler;
void APIENTRY glad_debug_impl_glBindSampler(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glBindSampler", (void*)glBindSampler, 2, arg0, arg1);
     glad_glBindSampler(arg0, arg1);
    _post_call_callback("glBindSampler", (void*)glBindSampler, 2, arg0, arg1);

}
PFNGLBINDSAMPLERPROC glad_debug_glBindSampler = glad_debug_impl_glBindSampler;
PFNGLLINEWIDTHPROC glad_glLineWidth;
void APIENTRY glad_debug_impl_glLineWidth(GLfloat arg0) {
    _pre_call_callback("glLineWidth", (void*)glLineWidth, 1, arg0);
     glad_glLineWidth(arg0);
    _post_call_callback("glLineWidth", (void*)glLineWidth, 1, arg0);

}
PFNGLLINEWIDTHPROC glad_debug_glLineWidth = glad_debug_impl_glLineWidth;
PFNGLCOLORP3UIVPROC glad_glColorP3uiv;
void APIENTRY glad_debug_impl_glColorP3uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glColorP3uiv", (void*)glColorP3uiv, 2, arg0, arg1);
     glad_glColorP3uiv(arg0, arg1);
    _post_call_callback("glColorP3uiv", (void*)glColorP3uiv, 2, arg0, arg1);

}
PFNGLCOLORP3UIVPROC glad_debug_glColorP3uiv = glad_debug_impl_glColorP3uiv;
PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
void APIENTRY glad_debug_impl_glGetIntegeri_v(GLenum arg0, GLuint arg1, GLint* arg2) {
    _pre_call_callback("glGetIntegeri_v", (void*)glGetIntegeri_v, 3, arg0, arg1, arg2);
     glad_glGetIntegeri_v(arg0, arg1, arg2);
    _post_call_callback("glGetIntegeri_v", (void*)glGetIntegeri_v, 3, arg0, arg1, arg2);

}
PFNGLGETINTEGERI_VPROC glad_debug_glGetIntegeri_v = glad_debug_impl_glGetIntegeri_v;
PFNGLCOMPILESHADERPROC glad_glCompileShader;
void APIENTRY glad_debug_impl_glCompileShader(GLuint arg0) {
    _pre_call_callback("glCompileShader", (void*)glCompileShader, 1, arg0);
     glad_glCompileShader(arg0);
    _post_call_callback("glCompileShader", (void*)glCompileShader, 1, arg0);

}
PFNGLCOMPILESHADERPROC glad_debug_glCompileShader = glad_debug_impl_glCompileShader;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
void APIENTRY glad_debug_impl_glGetTransformFeedbackVarying(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLsizei* arg4, GLenum* arg5, GLchar* arg6) {
    _pre_call_callback("glGetTransformFeedbackVarying", (void*)glGetTransformFeedbackVarying, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetTransformFeedbackVarying(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetTransformFeedbackVarying", (void*)glGetTransformFeedbackVarying, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_debug_glGetTransformFeedbackVarying = glad_debug_impl_glGetTransformFeedbackVarying;
PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
void APIENTRY glad_debug_impl_glVertexAttribIPointer(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glVertexAttribIPointer", (void*)glVertexAttribIPointer, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribIPointer(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribIPointer", (void*)glVertexAttribIPointer, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBIPOINTERPROC glad_debug_glVertexAttribIPointer = glad_debug_impl_glVertexAttribIPointer;
PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;
void APIENTRY glad_debug_impl_glMultiTexCoordP3ui(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glMultiTexCoordP3ui", (void*)glMultiTexCoordP3ui, 3, arg0, arg1, arg2);
     glad_glMultiTexCoordP3ui(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoordP3ui", (void*)glMultiTexCoordP3ui, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORDP3UIPROC glad_debug_glMultiTexCoordP3ui = glad_debug_impl_glMultiTexCoordP3ui;
PFNGLVERTEXP4UIPROC glad_glVertexP4ui;
void APIENTRY glad_debug_impl_glVertexP4ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glVertexP4ui", (void*)glVertexP4ui, 2, arg0, arg1);
     glad_glVertexP4ui(arg0, arg1);
    _post_call_callback("glVertexP4ui", (void*)glVertexP4ui, 2, arg0, arg1);

}
PFNGLVERTEXP4UIPROC glad_debug_glVertexP4ui = glad_debug_impl_glVertexP4ui;
PFNGLENABLEIPROC glad_glEnablei;
void APIENTRY glad_debug_impl_glEnablei(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glEnablei", (void*)glEnablei, 2, arg0, arg1);
     glad_glEnablei(arg0, arg1);
    _post_call_callback("glEnablei", (void*)glEnablei, 2, arg0, arg1);

}
PFNGLENABLEIPROC glad_debug_glEnablei = glad_debug_impl_glEnablei;
PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
void APIENTRY glad_debug_impl_glVertexAttribP4ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_callback("glVertexAttribP4ui", (void*)glVertexAttribP4ui, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribP4ui(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribP4ui", (void*)glVertexAttribP4ui, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBP4UIPROC glad_debug_glVertexAttribP4ui = glad_debug_impl_glVertexAttribP4ui;
PFNGLCREATESHADERPROC glad_glCreateShader;
GLuint APIENTRY glad_debug_impl_glCreateShader(GLenum arg0) {
    GLuint ret;
    _pre_call_callback("glCreateShader", (void*)glCreateShader, 1, arg0);
    ret =  glad_glCreateShader(arg0);
    _post_call_callback("glCreateShader", (void*)glCreateShader, 1, arg0);
    return ret;
}
PFNGLCREATESHADERPROC glad_debug_glCreateShader = glad_debug_impl_glCreateShader;
PFNGLISBUFFERPROC glad_glIsBuffer;
GLboolean APIENTRY glad_debug_impl_glIsBuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsBuffer", (void*)glIsBuffer, 1, arg0);
    ret =  glad_glIsBuffer(arg0);
    _post_call_callback("glIsBuffer", (void*)glIsBuffer, 1, arg0);
    return ret;
}
PFNGLISBUFFERPROC glad_debug_glIsBuffer = glad_debug_impl_glIsBuffer;
PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
void APIENTRY glad_debug_impl_glGetMultisamplefv(GLenum arg0, GLuint arg1, GLfloat* arg2) {
    _pre_call_callback("glGetMultisamplefv", (void*)glGetMultisamplefv, 3, arg0, arg1, arg2);
     glad_glGetMultisamplefv(arg0, arg1, arg2);
    _post_call_callback("glGetMultisamplefv", (void*)glGetMultisamplefv, 3, arg0, arg1, arg2);

}
PFNGLGETMULTISAMPLEFVPROC glad_debug_glGetMultisamplefv = glad_debug_impl_glGetMultisamplefv;
PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
void APIENTRY glad_debug_impl_glGenRenderbuffers(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenRenderbuffers", (void*)glGenRenderbuffers, 2, arg0, arg1);
     glad_glGenRenderbuffers(arg0, arg1);
    _post_call_callback("glGenRenderbuffers", (void*)glGenRenderbuffers, 2, arg0, arg1);

}
PFNGLGENRENDERBUFFERSPROC glad_debug_glGenRenderbuffers = glad_debug_impl_glGenRenderbuffers;
PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
void APIENTRY glad_debug_impl_glCopyTexSubImage2D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7) {
    _pre_call_callback("glCopyTexSubImage2D", (void*)glCopyTexSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCopyTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCopyTexSubImage2D", (void*)glCopyTexSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOPYTEXSUBIMAGE2DPROC glad_debug_glCopyTexSubImage2D = glad_debug_impl_glCopyTexSubImage2D;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
void APIENTRY glad_debug_impl_glCompressedTexImage2D(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLint arg5, GLsizei arg6, const void* arg7) {
    _pre_call_callback("glCompressedTexImage2D", (void*)glCompressedTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCompressedTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCompressedTexImage2D", (void*)glCompressedTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_debug_glCompressedTexImage2D = glad_debug_impl_glCompressedTexImage2D;
PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
void APIENTRY glad_debug_impl_glVertexAttrib1f(GLuint arg0, GLfloat arg1) {
    _pre_call_callback("glVertexAttrib1f", (void*)glVertexAttrib1f, 2, arg0, arg1);
     glad_glVertexAttrib1f(arg0, arg1);
    _post_call_callback("glVertexAttrib1f", (void*)glVertexAttrib1f, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1FPROC glad_debug_glVertexAttrib1f = glad_debug_impl_glVertexAttrib1f;
PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
void APIENTRY glad_debug_impl_glBlendFuncSeparate(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_callback("glBlendFuncSeparate", (void*)glBlendFuncSeparate, 4, arg0, arg1, arg2, arg3);
     glad_glBlendFuncSeparate(arg0, arg1, arg2, arg3);
    _post_call_callback("glBlendFuncSeparate", (void*)glBlendFuncSeparate, 4, arg0, arg1, arg2, arg3);

}
PFNGLBLENDFUNCSEPARATEPROC glad_debug_glBlendFuncSeparate = glad_debug_impl_glBlendFuncSeparate;
PFNGLHINTPROC glad_glHint;
void APIENTRY glad_debug_impl_glHint(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glHint", (void*)glHint, 2, arg0, arg1);
     glad_glHint(arg0, arg1);
    _post_call_callback("glHint", (void*)glHint, 2, arg0, arg1);

}
PFNGLHINTPROC glad_debug_glHint = glad_debug_impl_glHint;
PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
void APIENTRY glad_debug_impl_glVertexAttrib1s(GLuint arg0, GLshort arg1) {
    _pre_call_callback("glVertexAttrib1s", (void*)glVertexAttrib1s, 2, arg0, arg1);
     glad_glVertexAttrib1s(arg0, arg1);
    _post_call_callback("glVertexAttrib1s", (void*)glVertexAttrib1s, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1SPROC glad_debug_glVertexAttrib1s = glad_debug_impl_glVertexAttrib1s;
PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
void APIENTRY glad_debug_impl_glSampleMaski(GLuint arg0, GLbitfield arg1) {
    _pre_call_callback("glSampleMaski", (void*)glSampleMaski, 2, arg0, arg1);
     glad_glSampleMaski(arg0, arg1);
    _post_call_callback("glSampleMaski", (void*)glSampleMaski, 2, arg0, arg1);

}
PFNGLSAMPLEMASKIPROC glad_debug_glSampleMaski = glad_debug_impl_glSampleMaski;
PFNGLVERTEXP2UIPROC glad_glVertexP2ui;
void APIENTRY glad_debug_impl_glVertexP2ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glVertexP2ui", (void*)glVertexP2ui, 2, arg0, arg1);
     glad_glVertexP2ui(arg0, arg1);
    _post_call_callback("glVertexP2ui", (void*)glVertexP2ui, 2, arg0, arg1);

}
PFNGLVERTEXP2UIPROC glad_debug_glVertexP2ui = glad_debug_impl_glVertexP2ui;
PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
void APIENTRY glad_debug_impl_glUniformMatrix3x2fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix3x2fv", (void*)glUniformMatrix3x2fv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix3x2fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix3x2fv", (void*)glUniformMatrix3x2fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX3X2FVPROC glad_debug_glUniformMatrix3x2fv = glad_debug_impl_glUniformMatrix3x2fv;
PFNGLPOINTSIZEPROC glad_glPointSize;
void APIENTRY glad_debug_impl_glPointSize(GLfloat arg0) {
    _pre_call_callback("glPointSize", (void*)glPointSize, 1, arg0);
     glad_glPointSize(arg0);
    _post_call_callback("glPointSize", (void*)glPointSize, 1, arg0);

}
PFNGLPOINTSIZEPROC glad_debug_glPointSize = glad_debug_impl_glPointSize;
PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
void APIENTRY glad_debug_impl_glVertexAttrib2dv(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib2dv", (void*)glVertexAttrib2dv, 2, arg0, arg1);
     glad_glVertexAttrib2dv(arg0, arg1);
    _post_call_callback("glVertexAttrib2dv", (void*)glVertexAttrib2dv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2DVPROC glad_debug_glVertexAttrib2dv = glad_debug_impl_glVertexAttrib2dv;
PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
void APIENTRY glad_debug_impl_glDeleteProgram(GLuint arg0) {
    _pre_call_callback("glDeleteProgram", (void*)glDeleteProgram, 1, arg0);
     glad_glDeleteProgram(arg0);
    _post_call_callback("glDeleteProgram", (void*)glDeleteProgram, 1, arg0);

}
PFNGLDELETEPROGRAMPROC glad_debug_glDeleteProgram = glad_debug_impl_glDeleteProgram;
PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
void APIENTRY glad_debug_impl_glVertexAttrib4Nuiv(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttrib4Nuiv", (void*)glVertexAttrib4Nuiv, 2, arg0, arg1);
     glad_glVertexAttrib4Nuiv(arg0, arg1);
    _post_call_callback("glVertexAttrib4Nuiv", (void*)glVertexAttrib4Nuiv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NUIVPROC glad_debug_glVertexAttrib4Nuiv = glad_debug_impl_glVertexAttrib4Nuiv;
PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
void APIENTRY glad_debug_impl_glRenderbufferStorage(GLenum arg0, GLenum arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glRenderbufferStorage", (void*)glRenderbufferStorage, 4, arg0, arg1, arg2, arg3);
     glad_glRenderbufferStorage(arg0, arg1, arg2, arg3);
    _post_call_callback("glRenderbufferStorage", (void*)glRenderbufferStorage, 4, arg0, arg1, arg2, arg3);

}
PFNGLRENDERBUFFERSTORAGEPROC glad_debug_glRenderbufferStorage = glad_debug_impl_glRenderbufferStorage;
PFNGLWAITSYNCPROC glad_glWaitSync;
void APIENTRY glad_debug_impl_glWaitSync(GLsync arg0, GLbitfield arg1, GLuint64 arg2) {
    _pre_call_callback("glWaitSync", (void*)glWaitSync, 3, arg0, arg1, arg2);
     glad_glWaitSync(arg0, arg1, arg2);
    _post_call_callback("glWaitSync", (void*)glWaitSync, 3, arg0, arg1, arg2);

}
PFNGLWAITSYNCPROC glad_debug_glWaitSync = glad_debug_impl_glWaitSync;
PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
void APIENTRY glad_debug_impl_glUniformMatrix4x3fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix4x3fv", (void*)glUniformMatrix4x3fv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix4x3fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix4x3fv", (void*)glUniformMatrix4x3fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX4X3FVPROC glad_debug_glUniformMatrix4x3fv = glad_debug_impl_glUniformMatrix4x3fv;
PFNGLUNIFORM3IPROC glad_glUniform3i;
void APIENTRY glad_debug_impl_glUniform3i(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glUniform3i", (void*)glUniform3i, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3i(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3i", (void*)glUniform3i, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3IPROC glad_debug_glUniform3i = glad_debug_impl_glUniform3i;
PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
void APIENTRY glad_debug_impl_glClearBufferfv(GLenum arg0, GLint arg1, const GLfloat* arg2) {
    _pre_call_callback("glClearBufferfv", (void*)glClearBufferfv, 3, arg0, arg1, arg2);
     glad_glClearBufferfv(arg0, arg1, arg2);
    _post_call_callback("glClearBufferfv", (void*)glClearBufferfv, 3, arg0, arg1, arg2);

}
PFNGLCLEARBUFFERFVPROC glad_debug_glClearBufferfv = glad_debug_impl_glClearBufferfv;
PFNGLUNIFORM3FPROC glad_glUniform3f;
void APIENTRY glad_debug_impl_glUniform3f(GLint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glUniform3f", (void*)glUniform3f, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3f(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3f", (void*)glUniform3f, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3FPROC glad_debug_glUniform3f = glad_debug_impl_glUniform3f;
PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
void APIENTRY glad_debug_impl_glVertexAttrib4ubv(GLuint arg0, const GLubyte* arg1) {
    _pre_call_callback("glVertexAttrib4ubv", (void*)glVertexAttrib4ubv, 2, arg0, arg1);
     glad_glVertexAttrib4ubv(arg0, arg1);
    _post_call_callback("glVertexAttrib4ubv", (void*)glVertexAttrib4ubv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4UBVPROC glad_debug_glVertexAttrib4ubv = glad_debug_impl_glVertexAttrib4ubv;
PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
void APIENTRY glad_debug_impl_glGetBufferParameteriv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetBufferParameteriv", (void*)glGetBufferParameteriv, 3, arg0, arg1, arg2);
     glad_glGetBufferParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetBufferParameteriv", (void*)glGetBufferParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETBUFFERPARAMETERIVPROC glad_debug_glGetBufferParameteriv = glad_debug_impl_glGetBufferParameteriv;
PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;
void APIENTRY glad_debug_impl_glTexCoordP2ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glTexCoordP2ui", (void*)glTexCoordP2ui, 2, arg0, arg1);
     glad_glTexCoordP2ui(arg0, arg1);
    _post_call_callback("glTexCoordP2ui", (void*)glTexCoordP2ui, 2, arg0, arg1);

}
PFNGLTEXCOORDP2UIPROC glad_debug_glTexCoordP2ui = glad_debug_impl_glTexCoordP2ui;
PFNGLCOLORMASKIPROC glad_glColorMaski;
void APIENTRY glad_debug_impl_glColorMaski(GLuint arg0, GLboolean arg1, GLboolean arg2, GLboolean arg3, GLboolean arg4) {
    _pre_call_callback("glColorMaski", (void*)glColorMaski, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glColorMaski(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glColorMaski", (void*)glColorMaski, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOLORMASKIPROC glad_debug_glColorMaski = glad_debug_impl_glColorMaski;
PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
void APIENTRY glad_debug_impl_glClearBufferfi(GLenum arg0, GLint arg1, GLfloat arg2, GLint arg3) {
    _pre_call_callback("glClearBufferfi", (void*)glClearBufferfi, 4, arg0, arg1, arg2, arg3);
     glad_glClearBufferfi(arg0, arg1, arg2, arg3);
    _post_call_callback("glClearBufferfi", (void*)glClearBufferfi, 4, arg0, arg1, arg2, arg3);

}
PFNGLCLEARBUFFERFIPROC glad_debug_glClearBufferfi = glad_debug_impl_glClearBufferfi;
PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
void APIENTRY glad_debug_impl_glGenVertexArrays(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenVertexArrays", (void*)glGenVertexArrays, 2, arg0, arg1);
     glad_glGenVertexArrays(arg0, arg1);
    _post_call_callback("glGenVertexArrays", (void*)glGenVertexArrays, 2, arg0, arg1);

}
PFNGLGENVERTEXARRAYSPROC glad_debug_glGenVertexArrays = glad_debug_impl_glGenVertexArrays;
PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;
void APIENTRY glad_debug_impl_glMultiTexCoordP2ui(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glMultiTexCoordP2ui", (void*)glMultiTexCoordP2ui, 3, arg0, arg1, arg2);
     glad_glMultiTexCoordP2ui(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoordP2ui", (void*)glMultiTexCoordP2ui, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORDP2UIPROC glad_debug_glMultiTexCoordP2ui = glad_debug_impl_glMultiTexCoordP2ui;
PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
void APIENTRY glad_debug_impl_glGetSamplerParameterIiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetSamplerParameterIiv", (void*)glGetSamplerParameterIiv, 3, arg0, arg1, arg2);
     glad_glGetSamplerParameterIiv(arg0, arg1, arg2);
    _post_call_callback("glGetSamplerParameterIiv", (void*)glGetSamplerParameterIiv, 3, arg0, arg1, arg2);

}
PFNGLGETSAMPLERPARAMETERIIVPROC glad_debug_glGetSamplerParameterIiv = glad_debug_impl_glGetSamplerParameterIiv;
PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
GLint APIENTRY glad_debug_impl_glGetFragDataIndex(GLuint arg0, const GLchar* arg1) {
    GLint ret;
    _pre_call_callback("glGetFragDataIndex", (void*)glGetFragDataIndex, 2, arg0, arg1);
    ret =  glad_glGetFragDataIndex(arg0, arg1);
    _post_call_callback("glGetFragDataIndex", (void*)glGetFragDataIndex, 2, arg0, arg1);
    return ret;
}
PFNGLGETFRAGDATAINDEXPROC glad_debug_glGetFragDataIndex = glad_debug_impl_glGetFragDataIndex;
PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
void APIENTRY glad_debug_impl_glGetVertexAttribdv(GLuint arg0, GLenum arg1, GLdouble* arg2) {
    _pre_call_callback("glGetVertexAttribdv", (void*)glGetVertexAttribdv, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribdv(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribdv", (void*)glGetVertexAttribdv, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBDVPROC glad_debug_glGetVertexAttribdv = glad_debug_impl_glGetVertexAttribdv;
PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
void APIENTRY glad_debug_impl_glUniformMatrix3x4fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix3x4fv", (void*)glUniformMatrix3x4fv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix3x4fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix3x4fv", (void*)glUniformMatrix3x4fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX3X4FVPROC glad_debug_glUniformMatrix3x4fv = glad_debug_impl_glUniformMatrix3x4fv;
PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;
void APIENTRY glad_debug_impl_glMultiTexCoordP4ui(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glMultiTexCoordP4ui", (void*)glMultiTexCoordP4ui, 3, arg0, arg1, arg2);
     glad_glMultiTexCoordP4ui(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoordP4ui", (void*)glMultiTexCoordP4ui, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORDP4UIPROC glad_debug_glMultiTexCoordP4ui = glad_debug_impl_glMultiTexCoordP4ui;
PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
void APIENTRY glad_debug_impl_glDeleteFramebuffers(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteFramebuffers", (void*)glDeleteFramebuffers, 2, arg0, arg1);
     glad_glDeleteFramebuffers(arg0, arg1);
    _post_call_callback("glDeleteFramebuffers", (void*)glDeleteFramebuffers, 2, arg0, arg1);

}
PFNGLDELETEFRAMEBUFFERSPROC glad_debug_glDeleteFramebuffers = glad_debug_impl_glDeleteFramebuffers;
PFNGLDRAWARRAYSPROC glad_glDrawArrays;
void APIENTRY glad_debug_impl_glDrawArrays(GLenum arg0, GLint arg1, GLsizei arg2) {
    _pre_call_callback("glDrawArrays", (void*)glDrawArrays, 3, arg0, arg1, arg2);
     glad_glDrawArrays(arg0, arg1, arg2);
    _post_call_callback("glDrawArrays", (void*)glDrawArrays, 3, arg0, arg1, arg2);

}
PFNGLDRAWARRAYSPROC glad_debug_glDrawArrays = glad_debug_impl_glDrawArrays;
PFNGLUNIFORM1UIPROC glad_glUniform1ui;
void APIENTRY glad_debug_impl_glUniform1ui(GLint arg0, GLuint arg1) {
    _pre_call_callback("glUniform1ui", (void*)glUniform1ui, 2, arg0, arg1);
     glad_glUniform1ui(arg0, arg1);
    _post_call_callback("glUniform1ui", (void*)glUniform1ui, 2, arg0, arg1);

}
PFNGLUNIFORM1UIPROC glad_debug_glUniform1ui = glad_debug_impl_glUniform1ui;
PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
void APIENTRY glad_debug_impl_glVertexAttribI2i(GLuint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glVertexAttribI2i", (void*)glVertexAttribI2i, 3, arg0, arg1, arg2);
     glad_glVertexAttribI2i(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribI2i", (void*)glVertexAttribI2i, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBI2IPROC glad_debug_glVertexAttribI2i = glad_debug_impl_glVertexAttribI2i;
PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;
void APIENTRY glad_debug_impl_glTexCoordP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glTexCoordP3ui", (void*)glTexCoordP3ui, 2, arg0, arg1);
     glad_glTexCoordP3ui(arg0, arg1);
    _post_call_callback("glTexCoordP3ui", (void*)glTexCoordP3ui, 2, arg0, arg1);

}
PFNGLTEXCOORDP3UIPROC glad_debug_glTexCoordP3ui = glad_debug_impl_glTexCoordP3ui;
PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
void APIENTRY glad_debug_impl_glVertexAttrib3d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glVertexAttrib3d", (void*)glVertexAttrib3d, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3d(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3d", (void*)glVertexAttrib3d, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3DPROC glad_debug_glVertexAttrib3d = glad_debug_impl_glVertexAttrib3d;
PFNGLCLEARPROC glad_glClear;
void APIENTRY glad_debug_impl_glClear(GLbitfield arg0) {
    _pre_call_callback("glClear", (void*)glClear, 1, arg0);
     glad_glClear(arg0);
    _post_call_callback("glClear", (void*)glClear, 1, arg0);

}
PFNGLCLEARPROC glad_debug_glClear = glad_debug_impl_glClear;
PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
void APIENTRY glad_debug_impl_glGetActiveUniformName(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLchar* arg4) {
    _pre_call_callback("glGetActiveUniformName", (void*)glGetActiveUniformName, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetActiveUniformName(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetActiveUniformName", (void*)glGetActiveUniformName, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETACTIVEUNIFORMNAMEPROC glad_debug_glGetActiveUniformName = glad_debug_impl_glGetActiveUniformName;
PFNGLISENABLEDPROC glad_glIsEnabled;
GLboolean APIENTRY glad_debug_impl_glIsEnabled(GLenum arg0) {
    GLboolean ret;
    _pre_call_callback("glIsEnabled", (void*)glIsEnabled, 1, arg0);
    ret =  glad_glIsEnabled(arg0);
    _post_call_callback("glIsEnabled", (void*)glIsEnabled, 1, arg0);
    return ret;
}
PFNGLISENABLEDPROC glad_debug_glIsEnabled = glad_debug_impl_glIsEnabled;
PFNGLSTENCILOPPROC glad_glStencilOp;
void APIENTRY glad_debug_impl_glStencilOp(GLenum arg0, GLenum arg1, GLenum arg2) {
    _pre_call_callback("glStencilOp", (void*)glStencilOp, 3, arg0, arg1, arg2);
     glad_glStencilOp(arg0, arg1, arg2);
    _post_call_callback("glStencilOp", (void*)glStencilOp, 3, arg0, arg1, arg2);

}
PFNGLSTENCILOPPROC glad_debug_glStencilOp = glad_debug_impl_glStencilOp;
PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
void APIENTRY glad_debug_impl_glFramebufferTexture2D(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_callback("glFramebufferTexture2D", (void*)glFramebufferTexture2D, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glFramebufferTexture2D(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glFramebufferTexture2D", (void*)glFramebufferTexture2D, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLFRAMEBUFFERTEXTURE2DPROC glad_debug_glFramebufferTexture2D = glad_debug_impl_glFramebufferTexture2D;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
void APIENTRY glad_debug_impl_glGetFramebufferAttachmentParameteriv(GLenum arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetFramebufferAttachmentParameteriv", (void*)glGetFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);
     glad_glGetFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetFramebufferAttachmentParameteriv", (void*)glGetFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetFramebufferAttachmentParameteriv = glad_debug_impl_glGetFramebufferAttachmentParameteriv;
PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
void APIENTRY glad_debug_impl_glVertexAttrib4Nub(GLuint arg0, GLubyte arg1, GLubyte arg2, GLubyte arg3, GLubyte arg4) {
    _pre_call_callback("glVertexAttrib4Nub", (void*)glVertexAttrib4Nub, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4Nub(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4Nub", (void*)glVertexAttrib4Nub, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4NUBPROC glad_debug_glVertexAttrib4Nub = glad_debug_impl_glVertexAttrib4Nub;
PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
GLint APIENTRY glad_debug_impl_glGetFragDataLocation(GLuint arg0, const GLchar* arg1) {
    GLint ret;
    _pre_call_callback("glGetFragDataLocation", (void*)glGetFragDataLocation, 2, arg0, arg1);
    ret =  glad_glGetFragDataLocation(arg0, arg1);
    _post_call_callback("glGetFragDataLocation", (void*)glGetFragDataLocation, 2, arg0, arg1);
    return ret;
}
PFNGLGETFRAGDATALOCATIONPROC glad_debug_glGetFragDataLocation = glad_debug_impl_glGetFragDataLocation;
PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
void APIENTRY glad_debug_impl_glTexImage1D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLint arg4, GLenum arg5, GLenum arg6, const void* arg7) {
    _pre_call_callback("glTexImage1D", (void*)glTexImage1D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTexImage1D", (void*)glTexImage1D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXIMAGE1DPROC glad_debug_glTexImage1D = glad_debug_impl_glTexImage1D;
PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
void APIENTRY glad_debug_impl_glTexParameteriv(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glTexParameteriv", (void*)glTexParameteriv, 3, arg0, arg1, arg2);
     glad_glTexParameteriv(arg0, arg1, arg2);
    _post_call_callback("glTexParameteriv", (void*)glTexParameteriv, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERIVPROC glad_debug_glTexParameteriv = glad_debug_impl_glTexParameteriv;
PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
void APIENTRY glad_debug_impl_glGetTexImage(GLenum arg0, GLint arg1, GLenum arg2, GLenum arg3, void* arg4) {
    _pre_call_callback("glGetTexImage", (void*)glGetTexImage, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetTexImage(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetTexImage", (void*)glGetTexImage, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETTEXIMAGEPROC glad_debug_glGetTexImage = glad_debug_impl_glGetTexImage;
PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
void APIENTRY glad_debug_impl_glGetQueryObjecti64v(GLuint arg0, GLenum arg1, GLint64* arg2) {
    _pre_call_callback("glGetQueryObjecti64v", (void*)glGetQueryObjecti64v, 3, arg0, arg1, arg2);
     glad_glGetQueryObjecti64v(arg0, arg1, arg2);
    _post_call_callback("glGetQueryObjecti64v", (void*)glGetQueryObjecti64v, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYOBJECTI64VPROC glad_debug_glGetQueryObjecti64v = glad_debug_impl_glGetQueryObjecti64v;
PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
void APIENTRY glad_debug_impl_glGenFramebuffers(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenFramebuffers", (void*)glGenFramebuffers, 2, arg0, arg1);
     glad_glGenFramebuffers(arg0, arg1);
    _post_call_callback("glGenFramebuffers", (void*)glGenFramebuffers, 2, arg0, arg1);

}
PFNGLGENFRAMEBUFFERSPROC glad_debug_glGenFramebuffers = glad_debug_impl_glGenFramebuffers;
PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
void APIENTRY glad_debug_impl_glGetAttachedShaders(GLuint arg0, GLsizei arg1, GLsizei* arg2, GLuint* arg3) {
    _pre_call_callback("glGetAttachedShaders", (void*)glGetAttachedShaders, 4, arg0, arg1, arg2, arg3);
     glad_glGetAttachedShaders(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetAttachedShaders", (void*)glGetAttachedShaders, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETATTACHEDSHADERSPROC glad_debug_glGetAttachedShaders = glad_debug_impl_glGetAttachedShaders;
PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
GLboolean APIENTRY glad_debug_impl_glIsRenderbuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsRenderbuffer", (void*)glIsRenderbuffer, 1, arg0);
    ret =  glad_glIsRenderbuffer(arg0);
    _post_call_callback("glIsRenderbuffer", (void*)glIsRenderbuffer, 1, arg0);
    return ret;
}
PFNGLISRENDERBUFFERPROC glad_debug_glIsRenderbuffer = glad_debug_impl_glIsRenderbuffer;
PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
void APIENTRY glad_debug_impl_glDeleteVertexArrays(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteVertexArrays", (void*)glDeleteVertexArrays, 2, arg0, arg1);
     glad_glDeleteVertexArrays(arg0, arg1);
    _post_call_callback("glDeleteVertexArrays", (void*)glDeleteVertexArrays, 2, arg0, arg1);

}
PFNGLDELETEVERTEXARRAYSPROC glad_debug_glDeleteVertexArrays = glad_debug_impl_glDeleteVertexArrays;
PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
GLboolean APIENTRY glad_debug_impl_glIsVertexArray(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsVertexArray", (void*)glIsVertexArray, 1, arg0);
    ret =  glad_glIsVertexArray(arg0);
    _post_call_callback("glIsVertexArray", (void*)glIsVertexArray, 1, arg0);
    return ret;
}
PFNGLISVERTEXARRAYPROC glad_debug_glIsVertexArray = glad_debug_impl_glIsVertexArray;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
void APIENTRY glad_debug_impl_glDisableVertexAttribArray(GLuint arg0) {
    _pre_call_callback("glDisableVertexAttribArray", (void*)glDisableVertexAttribArray, 1, arg0);
     glad_glDisableVertexAttribArray(arg0);
    _post_call_callback("glDisableVertexAttribArray", (void*)glDisableVertexAttribArray, 1, arg0);

}
PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_debug_glDisableVertexAttribArray = glad_debug_impl_glDisableVertexAttribArray;
PFNGLGETQUERYIVPROC glad_glGetQueryiv;
void APIENTRY glad_debug_impl_glGetQueryiv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetQueryiv", (void*)glGetQueryiv, 3, arg0, arg1, arg2);
     glad_glGetQueryiv(arg0, arg1, arg2);
    _post_call_callback("glGetQueryiv", (void*)glGetQueryiv, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYIVPROC glad_debug_glGetQueryiv = glad_debug_impl_glGetQueryiv;
PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
void APIENTRY glad_debug_impl_glGetSamplerParameterfv(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetSamplerParameterfv", (void*)glGetSamplerParameterfv, 3, arg0, arg1, arg2);
     glad_glGetSamplerParameterfv(arg0, arg1, arg2);
    _post_call_callback("glGetSamplerParameterfv", (void*)glGetSamplerParameterfv, 3, arg0, arg1, arg2);

}
PFNGLGETSAMPLERPARAMETERFVPROC glad_debug_glGetSamplerParameterfv = glad_debug_impl_glGetSamplerParameterfv;
PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
void APIENTRY glad_debug_impl_glGetUniformIndices(GLuint arg0, GLsizei arg1, const GLchar** arg2, GLuint* arg3) {
    _pre_call_callback("glGetUniformIndices", (void*)glGetUniformIndices, 4, arg0, arg1, arg2, arg3);
     glad_glGetUniformIndices(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetUniformIndices", (void*)glGetUniformIndices, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETUNIFORMINDICESPROC glad_debug_glGetUniformIndices = glad_debug_impl_glGetUniformIndices;
PFNGLISSHADERPROC glad_glIsShader;
GLboolean APIENTRY glad_debug_impl_glIsShader(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsShader", (void*)glIsShader, 1, arg0);
    ret =  glad_glIsShader(arg0);
    _post_call_callback("glIsShader", (void*)glIsShader, 1, arg0);
    return ret;
}
PFNGLISSHADERPROC glad_debug_glIsShader = glad_debug_impl_glIsShader;
PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
void APIENTRY glad_debug_impl_glVertexAttribI4ubv(GLuint arg0, const GLubyte* arg1) {
    _pre_call_callback("glVertexAttribI4ubv", (void*)glVertexAttribI4ubv, 2, arg0, arg1);
     glad_glVertexAttribI4ubv(arg0, arg1);
    _post_call_callback("glVertexAttribI4ubv", (void*)glVertexAttribI4ubv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4UBVPROC glad_debug_glVertexAttribI4ubv = glad_debug_impl_glVertexAttribI4ubv;
PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
void APIENTRY glad_debug_impl_glPointParameteriv(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glPointParameteriv", (void*)glPointParameteriv, 2, arg0, arg1);
     glad_glPointParameteriv(arg0, arg1);
    _post_call_callback("glPointParameteriv", (void*)glPointParameteriv, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERIVPROC glad_debug_glPointParameteriv = glad_debug_impl_glPointParameteriv;
PFNGLENABLEPROC glad_glEnable;
void APIENTRY glad_debug_impl_glEnable(GLenum arg0) {
    _pre_call_callback("glEnable", (void*)glEnable, 1, arg0);
     glad_glEnable(arg0);
    _post_call_callback("glEnable", (void*)glEnable, 1, arg0);

}
PFNGLENABLEPROC glad_debug_glEnable = glad_debug_impl_glEnable;
PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
void APIENTRY glad_debug_impl_glGetActiveUniformsiv(GLuint arg0, GLsizei arg1, const GLuint* arg2, GLenum arg3, GLint* arg4) {
    _pre_call_callback("glGetActiveUniformsiv", (void*)glGetActiveUniformsiv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetActiveUniformsiv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetActiveUniformsiv", (void*)glGetActiveUniformsiv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETACTIVEUNIFORMSIVPROC glad_debug_glGetActiveUniformsiv = glad_debug_impl_glGetActiveUniformsiv;
PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
GLint APIENTRY glad_debug_impl_glGetAttribLocation(GLuint arg0, const GLchar* arg1) {
    GLint ret;
    _pre_call_callback("glGetAttribLocation", (void*)glGetAttribLocation, 2, arg0, arg1);
    ret =  glad_glGetAttribLocation(arg0, arg1);
    _post_call_callback("glGetAttribLocation", (void*)glGetAttribLocation, 2, arg0, arg1);
    return ret;
}
PFNGLGETATTRIBLOCATIONPROC glad_debug_glGetAttribLocation = glad_debug_impl_glGetAttribLocation;
PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
void APIENTRY glad_debug_impl_glVertexAttrib4dv(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib4dv", (void*)glVertexAttrib4dv, 2, arg0, arg1);
     glad_glVertexAttrib4dv(arg0, arg1);
    _post_call_callback("glVertexAttrib4dv", (void*)glVertexAttrib4dv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4DVPROC glad_debug_glVertexAttrib4dv = glad_debug_impl_glVertexAttrib4dv;
PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;
void APIENTRY glad_debug_impl_glMultiTexCoordP3uiv(GLenum arg0, GLenum arg1, const GLuint* arg2) {
    _pre_call_callback("glMultiTexCoordP3uiv", (void*)glMultiTexCoordP3uiv, 3, arg0, arg1, arg2);
     glad_glMultiTexCoordP3uiv(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoordP3uiv", (void*)glMultiTexCoordP3uiv, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORDP3UIVPROC glad_debug_glMultiTexCoordP3uiv = glad_debug_impl_glMultiTexCoordP3uiv;
PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
void APIENTRY glad_debug_impl_glVertexAttribP3ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_callback("glVertexAttribP3ui", (void*)glVertexAttribP3ui, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribP3ui(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribP3ui", (void*)glVertexAttribP3ui, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBP3UIPROC glad_debug_glVertexAttribP3ui = glad_debug_impl_glVertexAttribP3ui;
PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
void APIENTRY glad_debug_impl_glGetUniformfv(GLuint arg0, GLint arg1, GLfloat* arg2) {
    _pre_call_callback("glGetUniformfv", (void*)glGetUniformfv, 3, arg0, arg1, arg2);
     glad_glGetUniformfv(arg0, arg1, arg2);
    _post_call_callback("glGetUniformfv", (void*)glGetUniformfv, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMFVPROC glad_debug_glGetUniformfv = glad_debug_impl_glGetUniformfv;
PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
void APIENTRY glad_debug_impl_glGetUniformuiv(GLuint arg0, GLint arg1, GLuint* arg2) {
    _pre_call_callback("glGetUniformuiv", (void*)glGetUniformuiv, 3, arg0, arg1, arg2);
     glad_glGetUniformuiv(arg0, arg1, arg2);
    _post_call_callback("glGetUniformuiv", (void*)glGetUniformuiv, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMUIVPROC glad_debug_glGetUniformuiv = glad_debug_impl_glGetUniformuiv;
PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
void APIENTRY glad_debug_impl_glGetVertexAttribIiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVertexAttribIiv", (void*)glGetVertexAttribIiv, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribIiv(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribIiv", (void*)glGetVertexAttribIiv, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBIIVPROC glad_debug_glGetVertexAttribIiv = glad_debug_impl_glGetVertexAttribIiv;
PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
void APIENTRY glad_debug_impl_glDrawBuffer(GLenum arg0) {
    _pre_call_callback("glDrawBuffer", (void*)glDrawBuffer, 1, arg0);
     glad_glDrawBuffer(arg0);
    _post_call_callback("glDrawBuffer", (void*)glDrawBuffer, 1, arg0);

}
PFNGLDRAWBUFFERPROC glad_debug_glDrawBuffer = glad_debug_impl_glDrawBuffer;
PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
void APIENTRY glad_debug_impl_glClearBufferuiv(GLenum arg0, GLint arg1, const GLuint* arg2) {
    _pre_call_callback("glClearBufferuiv", (void*)glClearBufferuiv, 3, arg0, arg1, arg2);
     glad_glClearBufferuiv(arg0, arg1, arg2);
    _post_call_callback("glClearBufferuiv", (void*)glClearBufferuiv, 3, arg0, arg1, arg2);

}
PFNGLCLEARBUFFERUIVPROC glad_debug_glClearBufferuiv = glad_debug_impl_glClearBufferuiv;
PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
void APIENTRY glad_debug_impl_glDrawElementsInstanced(GLenum arg0, GLsizei arg1, GLenum arg2, const void* arg3, GLsizei arg4) {
    _pre_call_callback("glDrawElementsInstanced", (void*)glDrawElementsInstanced, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDrawElementsInstanced(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDrawElementsInstanced", (void*)glDrawElementsInstanced, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDRAWELEMENTSINSTANCEDPROC glad_debug_glDrawElementsInstanced = glad_debug_impl_glDrawElementsInstanced;
PFNGLFLUSHPROC glad_glFlush;
void APIENTRY glad_debug_impl_glFlush() {
    _pre_call_callback("glFlush", (void*)glFlush, 0);
     glad_glFlush();
    _post_call_callback("glFlush", (void*)glFlush, 0);

}
PFNGLFLUSHPROC glad_debug_glFlush = glad_debug_impl_glFlush;
PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
void APIENTRY glad_debug_impl_glGetRenderbufferParameteriv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetRenderbufferParameteriv", (void*)glGetRenderbufferParameteriv, 3, arg0, arg1, arg2);
     glad_glGetRenderbufferParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetRenderbufferParameteriv", (void*)glGetRenderbufferParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_debug_glGetRenderbufferParameteriv = glad_debug_impl_glGetRenderbufferParameteriv;
PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
void APIENTRY glad_debug_impl_glGetVertexAttribPointerv(GLuint arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetVertexAttribPointerv", (void*)glGetVertexAttribPointerv, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribPointerv(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribPointerv", (void*)glGetVertexAttribPointerv, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBPOINTERVPROC glad_debug_glGetVertexAttribPointerv = glad_debug_impl_glGetVertexAttribPointerv;
PFNGLFENCESYNCPROC glad_glFenceSync;
GLsync APIENTRY glad_debug_impl_glFenceSync(GLenum arg0, GLbitfield arg1) {
    GLsync ret;
    _pre_call_callback("glFenceSync", (void*)glFenceSync, 2, arg0, arg1);
    ret =  glad_glFenceSync(arg0, arg1);
    _post_call_callback("glFenceSync", (void*)glFenceSync, 2, arg0, arg1);
    return ret;
}
PFNGLFENCESYNCPROC glad_debug_glFenceSync = glad_debug_impl_glFenceSync;
PFNGLCOLORP3UIPROC glad_glColorP3ui;
void APIENTRY glad_debug_impl_glColorP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glColorP3ui", (void*)glColorP3ui, 2, arg0, arg1);
     glad_glColorP3ui(arg0, arg1);
    _post_call_callback("glColorP3ui", (void*)glColorP3ui, 2, arg0, arg1);

}
PFNGLCOLORP3UIPROC glad_debug_glColorP3ui = glad_debug_impl_glColorP3ui;
PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
void APIENTRY glad_debug_impl_glVertexAttrib3sv(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib3sv", (void*)glVertexAttrib3sv, 2, arg0, arg1);
     glad_glVertexAttrib3sv(arg0, arg1);
    _post_call_callback("glVertexAttrib3sv", (void*)glVertexAttrib3sv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3SVPROC glad_debug_glVertexAttrib3sv = glad_debug_impl_glVertexAttrib3sv;
PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
void APIENTRY glad_debug_impl_glBeginConditionalRender(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glBeginConditionalRender", (void*)glBeginConditionalRender, 2, arg0, arg1);
     glad_glBeginConditionalRender(arg0, arg1);
    _post_call_callback("glBeginConditionalRender", (void*)glBeginConditionalRender, 2, arg0, arg1);

}
PFNGLBEGINCONDITIONALRENDERPROC glad_debug_glBeginConditionalRender = glad_debug_impl_glBeginConditionalRender;
PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
void APIENTRY glad_debug_impl_glGetTexLevelParameteriv(GLenum arg0, GLint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetTexLevelParameteriv", (void*)glGetTexLevelParameteriv, 4, arg0, arg1, arg2, arg3);
     glad_glGetTexLevelParameteriv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTexLevelParameteriv", (void*)glGetTexLevelParameteriv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTEXLEVELPARAMETERIVPROC glad_debug_glGetTexLevelParameteriv = glad_debug_impl_glGetTexLevelParameteriv;
PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;
void APIENTRY glad_debug_impl_glMultiTexCoordP4uiv(GLenum arg0, GLenum arg1, const GLuint* arg2) {
    _pre_call_callback("glMultiTexCoordP4uiv", (void*)glMultiTexCoordP4uiv, 3, arg0, arg1, arg2);
     glad_glMultiTexCoordP4uiv(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoordP4uiv", (void*)glMultiTexCoordP4uiv, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORDP4UIVPROC glad_debug_glMultiTexCoordP4uiv = glad_debug_impl_glMultiTexCoordP4uiv;
PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
void APIENTRY glad_debug_impl_glStencilFuncSeparate(GLenum arg0, GLenum arg1, GLint arg2, GLuint arg3) {
    _pre_call_callback("glStencilFuncSeparate", (void*)glStencilFuncSeparate, 4, arg0, arg1, arg2, arg3);
     glad_glStencilFuncSeparate(arg0, arg1, arg2, arg3);
    _post_call_callback("glStencilFuncSeparate", (void*)glStencilFuncSeparate, 4, arg0, arg1, arg2, arg3);

}
PFNGLSTENCILFUNCSEPARATEPROC glad_debug_glStencilFuncSeparate = glad_debug_impl_glStencilFuncSeparate;
PFNGLGENSAMPLERSPROC glad_glGenSamplers;
void APIENTRY glad_debug_impl_glGenSamplers(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenSamplers", (void*)glGenSamplers, 2, arg0, arg1);
     glad_glGenSamplers(arg0, arg1);
    _post_call_callback("glGenSamplers", (void*)glGenSamplers, 2, arg0, arg1);

}
PFNGLGENSAMPLERSPROC glad_debug_glGenSamplers = glad_debug_impl_glGenSamplers;
PFNGLCLAMPCOLORPROC glad_glClampColor;
void APIENTRY glad_debug_impl_glClampColor(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glClampColor", (void*)glClampColor, 2, arg0, arg1);
     glad_glClampColor(arg0, arg1);
    _post_call_callback("glClampColor", (void*)glClampColor, 2, arg0, arg1);

}
PFNGLCLAMPCOLORPROC glad_debug_glClampColor = glad_debug_impl_glClampColor;
PFNGLUNIFORM4IVPROC glad_glUniform4iv;
void APIENTRY glad_debug_impl_glUniform4iv(GLint arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glUniform4iv", (void*)glUniform4iv, 3, arg0, arg1, arg2);
     glad_glUniform4iv(arg0, arg1, arg2);
    _post_call_callback("glUniform4iv", (void*)glUniform4iv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4IVPROC glad_debug_glUniform4iv = glad_debug_impl_glUniform4iv;
PFNGLCLEARSTENCILPROC glad_glClearStencil;
void APIENTRY glad_debug_impl_glClearStencil(GLint arg0) {
    _pre_call_callback("glClearStencil", (void*)glClearStencil, 1, arg0);
     glad_glClearStencil(arg0);
    _post_call_callback("glClearStencil", (void*)glClearStencil, 1, arg0);

}
PFNGLCLEARSTENCILPROC glad_debug_glClearStencil = glad_debug_impl_glClearStencil;
PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;
void APIENTRY glad_debug_impl_glTexCoordP1uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glTexCoordP1uiv", (void*)glTexCoordP1uiv, 2, arg0, arg1);
     glad_glTexCoordP1uiv(arg0, arg1);
    _post_call_callback("glTexCoordP1uiv", (void*)glTexCoordP1uiv, 2, arg0, arg1);

}
PFNGLTEXCOORDP1UIVPROC glad_debug_glTexCoordP1uiv = glad_debug_impl_glTexCoordP1uiv;
PFNGLGENTEXTURESPROC glad_glGenTextures;
void APIENTRY glad_debug_impl_glGenTextures(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenTextures", (void*)glGenTextures, 2, arg0, arg1);
     glad_glGenTextures(arg0, arg1);
    _post_call_callback("glGenTextures", (void*)glGenTextures, 2, arg0, arg1);

}
PFNGLGENTEXTURESPROC glad_debug_glGenTextures = glad_debug_impl_glGenTextures;
PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
void APIENTRY glad_debug_impl_glGetTexParameterIuiv(GLenum arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetTexParameterIuiv", (void*)glGetTexParameterIuiv, 3, arg0, arg1, arg2);
     glad_glGetTexParameterIuiv(arg0, arg1, arg2);
    _post_call_callback("glGetTexParameterIuiv", (void*)glGetTexParameterIuiv, 3, arg0, arg1, arg2);

}
PFNGLGETTEXPARAMETERIUIVPROC glad_debug_glGetTexParameterIuiv = glad_debug_impl_glGetTexParameterIuiv;
PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
void APIENTRY glad_debug_impl_glVertexAttrib4Nbv(GLuint arg0, const GLbyte* arg1) {
    _pre_call_callback("glVertexAttrib4Nbv", (void*)glVertexAttrib4Nbv, 2, arg0, arg1);
     glad_glVertexAttrib4Nbv(arg0, arg1);
    _post_call_callback("glVertexAttrib4Nbv", (void*)glVertexAttrib4Nbv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NBVPROC glad_debug_glVertexAttrib4Nbv = glad_debug_impl_glVertexAttrib4Nbv;
PFNGLISSYNCPROC glad_glIsSync;
GLboolean APIENTRY glad_debug_impl_glIsSync(GLsync arg0) {
    GLboolean ret;
    _pre_call_callback("glIsSync", (void*)glIsSync, 1, arg0);
    ret =  glad_glIsSync(arg0);
    _post_call_callback("glIsSync", (void*)glIsSync, 1, arg0);
    return ret;
}
PFNGLISSYNCPROC glad_debug_glIsSync = glad_debug_impl_glIsSync;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
void APIENTRY glad_debug_impl_glGetActiveUniformBlockName(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLchar* arg4) {
    _pre_call_callback("glGetActiveUniformBlockName", (void*)glGetActiveUniformBlockName, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetActiveUniformBlockName(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetActiveUniformBlockName", (void*)glGetActiveUniformBlockName, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_debug_glGetActiveUniformBlockName = glad_debug_impl_glGetActiveUniformBlockName;
PFNGLUNIFORM2IPROC glad_glUniform2i;
void APIENTRY glad_debug_impl_glUniform2i(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glUniform2i", (void*)glUniform2i, 3, arg0, arg1, arg2);
     glad_glUniform2i(arg0, arg1, arg2);
    _post_call_callback("glUniform2i", (void*)glUniform2i, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2IPROC glad_debug_glUniform2i = glad_debug_impl_glUniform2i;
PFNGLUNIFORM2FPROC glad_glUniform2f;
void APIENTRY glad_debug_impl_glUniform2f(GLint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glUniform2f", (void*)glUniform2f, 3, arg0, arg1, arg2);
     glad_glUniform2f(arg0, arg1, arg2);
    _post_call_callback("glUniform2f", (void*)glUniform2f, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2FPROC glad_debug_glUniform2f = glad_debug_impl_glUniform2f;
PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;
void APIENTRY glad_debug_impl_glTexCoordP4ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glTexCoordP4ui", (void*)glTexCoordP4ui, 2, arg0, arg1);
     glad_glTexCoordP4ui(arg0, arg1);
    _post_call_callback("glTexCoordP4ui", (void*)glTexCoordP4ui, 2, arg0, arg1);

}
PFNGLTEXCOORDP4UIPROC glad_debug_glTexCoordP4ui = glad_debug_impl_glTexCoordP4ui;
PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
void APIENTRY glad_debug_impl_glGetProgramiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetProgramiv", (void*)glGetProgramiv, 3, arg0, arg1, arg2);
     glad_glGetProgramiv(arg0, arg1, arg2);
    _post_call_callback("glGetProgramiv", (void*)glGetProgramiv, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMIVPROC glad_debug_glGetProgramiv = glad_debug_impl_glGetProgramiv;
PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
void APIENTRY glad_debug_impl_glVertexAttribPointer(GLuint arg0, GLint arg1, GLenum arg2, GLboolean arg3, GLsizei arg4, const void* arg5) {
    _pre_call_callback("glVertexAttribPointer", (void*)glVertexAttribPointer, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glVertexAttribPointer(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glVertexAttribPointer", (void*)glVertexAttribPointer, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLVERTEXATTRIBPOINTERPROC glad_debug_glVertexAttribPointer = glad_debug_impl_glVertexAttribPointer;
PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
void APIENTRY glad_debug_impl_glFramebufferTextureLayer(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glFramebufferTextureLayer", (void*)glFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glFramebufferTextureLayer(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glFramebufferTextureLayer", (void*)glFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_debug_glFramebufferTextureLayer = glad_debug_impl_glFramebufferTextureLayer;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
void APIENTRY glad_debug_impl_glFlushMappedBufferRange(GLenum arg0, GLintptr arg1, GLsizeiptr arg2) {
    _pre_call_callback("glFlushMappedBufferRange", (void*)glFlushMappedBufferRange, 3, arg0, arg1, arg2);
     glad_glFlushMappedBufferRange(arg0, arg1, arg2);
    _post_call_callback("glFlushMappedBufferRange", (void*)glFlushMappedBufferRange, 3, arg0, arg1, arg2);

}
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_debug_glFlushMappedBufferRange = glad_debug_impl_glFlushMappedBufferRange;
PFNGLGENQUERIESPROC glad_glGenQueries;
void APIENTRY glad_debug_impl_glGenQueries(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenQueries", (void*)glGenQueries, 2, arg0, arg1);
     glad_glGenQueries(arg0, arg1);
    _post_call_callback("glGenQueries", (void*)glGenQueries, 2, arg0, arg1);

}
PFNGLGENQUERIESPROC glad_debug_glGenQueries = glad_debug_impl_glGenQueries;
PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
void APIENTRY glad_debug_impl_glVertexAttribP1ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_callback("glVertexAttribP1ui", (void*)glVertexAttribP1ui, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribP1ui(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribP1ui", (void*)glVertexAttribP1ui, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBP1UIPROC glad_debug_glVertexAttribP1ui = glad_debug_impl_glVertexAttribP1ui;
PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
void APIENTRY glad_debug_impl_glTexSubImage3D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, const void* arg10) {
    _pre_call_callback("glTexSubImage3D", (void*)glTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glTexSubImage3D", (void*)glTexSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLTEXSUBIMAGE3DPROC glad_debug_glTexSubImage3D = glad_debug_impl_glTexSubImage3D;
PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
void APIENTRY glad_debug_impl_glGetInteger64i_v(GLenum arg0, GLuint arg1, GLint64* arg2) {
    _pre_call_callback("glGetInteger64i_v", (void*)glGetInteger64i_v, 3, arg0, arg1, arg2);
     glad_glGetInteger64i_v(arg0, arg1, arg2);
    _post_call_callback("glGetInteger64i_v", (void*)glGetInteger64i_v, 3, arg0, arg1, arg2);

}
PFNGLGETINTEGER64I_VPROC glad_debug_glGetInteger64i_v = glad_debug_impl_glGetInteger64i_v;
PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
void APIENTRY glad_debug_impl_glDeleteSamplers(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteSamplers", (void*)glDeleteSamplers, 2, arg0, arg1);
     glad_glDeleteSamplers(arg0, arg1);
    _post_call_callback("glDeleteSamplers", (void*)glDeleteSamplers, 2, arg0, arg1);

}
PFNGLDELETESAMPLERSPROC glad_debug_glDeleteSamplers = glad_debug_impl_glDeleteSamplers;
PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
void APIENTRY glad_debug_impl_glCopyTexImage2D(GLenum arg0, GLint arg1, GLenum arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLint arg7) {
    _pre_call_callback("glCopyTexImage2D", (void*)glCopyTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCopyTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCopyTexImage2D", (void*)glCopyTexImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOPYTEXIMAGE2DPROC glad_debug_glCopyTexImage2D = glad_debug_impl_glCopyTexImage2D;
PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
void APIENTRY glad_debug_impl_glBlitFramebuffer(GLint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLint arg7, GLbitfield arg8, GLenum arg9) {
    _pre_call_callback("glBlitFramebuffer", (void*)glBlitFramebuffer, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glBlitFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glBlitFramebuffer", (void*)glBlitFramebuffer, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLBLITFRAMEBUFFERPROC glad_debug_glBlitFramebuffer = glad_debug_impl_glBlitFramebuffer;
PFNGLISENABLEDIPROC glad_glIsEnabledi;
GLboolean APIENTRY glad_debug_impl_glIsEnabledi(GLenum arg0, GLuint arg1) {
    GLboolean ret;
    _pre_call_callback("glIsEnabledi", (void*)glIsEnabledi, 2, arg0, arg1);
    ret =  glad_glIsEnabledi(arg0, arg1);
    _post_call_callback("glIsEnabledi", (void*)glIsEnabledi, 2, arg0, arg1);
    return ret;
}
PFNGLISENABLEDIPROC glad_debug_glIsEnabledi = glad_debug_impl_glIsEnabledi;
PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;
void APIENTRY glad_debug_impl_glSecondaryColorP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glSecondaryColorP3ui", (void*)glSecondaryColorP3ui, 2, arg0, arg1);
     glad_glSecondaryColorP3ui(arg0, arg1);
    _post_call_callback("glSecondaryColorP3ui", (void*)glSecondaryColorP3ui, 2, arg0, arg1);

}
PFNGLSECONDARYCOLORP3UIPROC glad_debug_glSecondaryColorP3ui = glad_debug_impl_glSecondaryColorP3ui;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
void APIENTRY glad_debug_impl_glBindFragDataLocationIndexed(GLuint arg0, GLuint arg1, GLuint arg2, const GLchar* arg3) {
    _pre_call_callback("glBindFragDataLocationIndexed", (void*)glBindFragDataLocationIndexed, 4, arg0, arg1, arg2, arg3);
     glad_glBindFragDataLocationIndexed(arg0, arg1, arg2, arg3);
    _post_call_callback("glBindFragDataLocationIndexed", (void*)glBindFragDataLocationIndexed, 4, arg0, arg1, arg2, arg3);

}
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_debug_glBindFragDataLocationIndexed = glad_debug_impl_glBindFragDataLocationIndexed;
PFNGLUNIFORM2IVPROC glad_glUniform2iv;
void APIENTRY glad_debug_impl_glUniform2iv(GLint arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glUniform2iv", (void*)glUniform2iv, 3, arg0, arg1, arg2);
     glad_glUniform2iv(arg0, arg1, arg2);
    _post_call_callback("glUniform2iv", (void*)glUniform2iv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2IVPROC glad_debug_glUniform2iv = glad_debug_impl_glUniform2iv;
PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
void APIENTRY glad_debug_impl_glVertexAttrib1fv(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib1fv", (void*)glVertexAttrib1fv, 2, arg0, arg1);
     glad_glVertexAttrib1fv(arg0, arg1);
    _post_call_callback("glVertexAttrib1fv", (void*)glVertexAttrib1fv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1FVPROC glad_debug_glVertexAttrib1fv = glad_debug_impl_glVertexAttrib1fv;
PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
void APIENTRY glad_debug_impl_glUniform4uiv(GLint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glUniform4uiv", (void*)glUniform4uiv, 3, arg0, arg1, arg2);
     glad_glUniform4uiv(arg0, arg1, arg2);
    _post_call_callback("glUniform4uiv", (void*)glUniform4uiv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4UIVPROC glad_debug_glUniform4uiv = glad_debug_impl_glUniform4uiv;
PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
void APIENTRY glad_debug_impl_glFramebufferTexture1D(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_callback("glFramebufferTexture1D", (void*)glFramebufferTexture1D, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glFramebufferTexture1D(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glFramebufferTexture1D", (void*)glFramebufferTexture1D, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLFRAMEBUFFERTEXTURE1DPROC glad_debug_glFramebufferTexture1D = glad_debug_impl_glFramebufferTexture1D;
PFNGLGETSHADERIVPROC glad_glGetShaderiv;
void APIENTRY glad_debug_impl_glGetShaderiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetShaderiv", (void*)glGetShaderiv, 3, arg0, arg1, arg2);
     glad_glGetShaderiv(arg0, arg1, arg2);
    _post_call_callback("glGetShaderiv", (void*)glGetShaderiv, 3, arg0, arg1, arg2);

}
PFNGLGETSHADERIVPROC glad_debug_glGetShaderiv = glad_debug_impl_glGetShaderiv;
PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
void APIENTRY glad_debug_impl_glBindFragDataLocation(GLuint arg0, GLuint arg1, const GLchar* arg2) {
    _pre_call_callback("glBindFragDataLocation", (void*)glBindFragDataLocation, 3, arg0, arg1, arg2);
     glad_glBindFragDataLocation(arg0, arg1, arg2);
    _post_call_callback("glBindFragDataLocation", (void*)glBindFragDataLocation, 3, arg0, arg1, arg2);

}
PFNGLBINDFRAGDATALOCATIONPROC glad_debug_glBindFragDataLocation = glad_debug_impl_glBindFragDataLocation;
PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
void APIENTRY glad_debug_impl_glPolygonOffset(GLfloat arg0, GLfloat arg1) {
    _pre_call_callback("glPolygonOffset", (void*)glPolygonOffset, 2, arg0, arg1);
     glad_glPolygonOffset(arg0, arg1);
    _post_call_callback("glPolygonOffset", (void*)glPolygonOffset, 2, arg0, arg1);

}
PFNGLPOLYGONOFFSETPROC glad_debug_glPolygonOffset = glad_debug_impl_glPolygonOffset;
PFNGLGETDOUBLEVPROC glad_glGetDoublev;
void APIENTRY glad_debug_impl_glGetDoublev(GLenum arg0, GLdouble* arg1) {
    _pre_call_callback("glGetDoublev", (void*)glGetDoublev, 2, arg0, arg1);
     glad_glGetDoublev(arg0, arg1);
    _post_call_callback("glGetDoublev", (void*)glGetDoublev, 2, arg0, arg1);

}
PFNGLGETDOUBLEVPROC glad_debug_glGetDoublev = glad_debug_impl_glGetDoublev;
PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
void APIENTRY glad_debug_impl_glVertexAttrib1d(GLuint arg0, GLdouble arg1) {
    _pre_call_callback("glVertexAttrib1d", (void*)glVertexAttrib1d, 2, arg0, arg1);
     glad_glVertexAttrib1d(arg0, arg1);
    _post_call_callback("glVertexAttrib1d", (void*)glVertexAttrib1d, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1DPROC glad_debug_glVertexAttrib1d = glad_debug_impl_glVertexAttrib1d;
PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
void APIENTRY glad_debug_impl_glGetUniformiv(GLuint arg0, GLint arg1, GLint* arg2) {
    _pre_call_callback("glGetUniformiv", (void*)glGetUniformiv, 3, arg0, arg1, arg2);
     glad_glGetUniformiv(arg0, arg1, arg2);
    _post_call_callback("glGetUniformiv", (void*)glGetUniformiv, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMIVPROC glad_debug_glGetUniformiv = glad_debug_impl_glGetUniformiv;
PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;
void APIENTRY glad_debug_impl_glMultiTexCoordP1uiv(GLenum arg0, GLenum arg1, const GLuint* arg2) {
    _pre_call_callback("glMultiTexCoordP1uiv", (void*)glMultiTexCoordP1uiv, 3, arg0, arg1, arg2);
     glad_glMultiTexCoordP1uiv(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoordP1uiv", (void*)glMultiTexCoordP1uiv, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORDP1UIVPROC glad_debug_glMultiTexCoordP1uiv = glad_debug_impl_glMultiTexCoordP1uiv;
PFNGLUNIFORM3FVPROC glad_glUniform3fv;
void APIENTRY glad_debug_impl_glUniform3fv(GLint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glUniform3fv", (void*)glUniform3fv, 3, arg0, arg1, arg2);
     glad_glUniform3fv(arg0, arg1, arg2);
    _post_call_callback("glUniform3fv", (void*)glUniform3fv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3FVPROC glad_debug_glUniform3fv = glad_debug_impl_glUniform3fv;
PFNGLDEPTHRANGEPROC glad_glDepthRange;
void APIENTRY glad_debug_impl_glDepthRange(GLdouble arg0, GLdouble arg1) {
    _pre_call_callback("glDepthRange", (void*)glDepthRange, 2, arg0, arg1);
     glad_glDepthRange(arg0, arg1);
    _post_call_callback("glDepthRange", (void*)glDepthRange, 2, arg0, arg1);

}
PFNGLDEPTHRANGEPROC glad_debug_glDepthRange = glad_debug_impl_glDepthRange;
PFNGLMAPBUFFERPROC glad_glMapBuffer;
void* APIENTRY glad_debug_impl_glMapBuffer(GLenum arg0, GLenum arg1) {
    void* ret;
    _pre_call_callback("glMapBuffer", (void*)glMapBuffer, 2, arg0, arg1);
    ret =  glad_glMapBuffer(arg0, arg1);
    _post_call_callback("glMapBuffer", (void*)glMapBuffer, 2, arg0, arg1);
    return ret;
}
PFNGLMAPBUFFERPROC glad_debug_glMapBuffer = glad_debug_impl_glMapBuffer;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
void APIENTRY glad_debug_impl_glCompressedTexImage3D(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLsizei arg7, const void* arg8) {
    _pre_call_callback("glCompressedTexImage3D", (void*)glCompressedTexImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCompressedTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCompressedTexImage3D", (void*)glCompressedTexImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_debug_glCompressedTexImage3D = glad_debug_impl_glCompressedTexImage3D;
PFNGLDELETESYNCPROC glad_glDeleteSync;
void APIENTRY glad_debug_impl_glDeleteSync(GLsync arg0) {
    _pre_call_callback("glDeleteSync", (void*)glDeleteSync, 1, arg0);
     glad_glDeleteSync(arg0);
    _post_call_callback("glDeleteSync", (void*)glDeleteSync, 1, arg0);

}
PFNGLDELETESYNCPROC glad_debug_glDeleteSync = glad_debug_impl_glDeleteSync;
PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
void APIENTRY glad_debug_impl_glCopyTexSubImage3D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLsizei arg7, GLsizei arg8) {
    _pre_call_callback("glCopyTexSubImage3D", (void*)glCopyTexSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCopyTexSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCopyTexSubImage3D", (void*)glCopyTexSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOPYTEXSUBIMAGE3DPROC glad_debug_glCopyTexSubImage3D = glad_debug_impl_glCopyTexSubImage3D;
PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
void APIENTRY glad_debug_impl_glGetVertexAttribiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVertexAttribiv", (void*)glGetVertexAttribiv, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribiv(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribiv", (void*)glGetVertexAttribiv, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBIVPROC glad_debug_glGetVertexAttribiv = glad_debug_impl_glGetVertexAttribiv;
PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
void APIENTRY glad_debug_impl_glMultiDrawElements(GLenum arg0, const GLsizei* arg1, GLenum arg2, const void** arg3, GLsizei arg4) {
    _pre_call_callback("glMultiDrawElements", (void*)glMultiDrawElements, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiDrawElements(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiDrawElements", (void*)glMultiDrawElements, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTIDRAWELEMENTSPROC glad_debug_glMultiDrawElements = glad_debug_impl_glMultiDrawElements;
PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
void APIENTRY glad_debug_impl_glVertexAttrib3fv(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib3fv", (void*)glVertexAttrib3fv, 2, arg0, arg1);
     glad_glVertexAttrib3fv(arg0, arg1);
    _post_call_callback("glVertexAttrib3fv", (void*)glVertexAttrib3fv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3FVPROC glad_debug_glVertexAttrib3fv = glad_debug_impl_glVertexAttrib3fv;
PFNGLUNIFORM3IVPROC glad_glUniform3iv;
void APIENTRY glad_debug_impl_glUniform3iv(GLint arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glUniform3iv", (void*)glUniform3iv, 3, arg0, arg1, arg2);
     glad_glUniform3iv(arg0, arg1, arg2);
    _post_call_callback("glUniform3iv", (void*)glUniform3iv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3IVPROC glad_debug_glUniform3iv = glad_debug_impl_glUniform3iv;
PFNGLPOLYGONMODEPROC glad_glPolygonMode;
void APIENTRY glad_debug_impl_glPolygonMode(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glPolygonMode", (void*)glPolygonMode, 2, arg0, arg1);
     glad_glPolygonMode(arg0, arg1);
    _post_call_callback("glPolygonMode", (void*)glPolygonMode, 2, arg0, arg1);

}
PFNGLPOLYGONMODEPROC glad_debug_glPolygonMode = glad_debug_impl_glPolygonMode;
PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
void APIENTRY glad_debug_impl_glDrawBuffers(GLsizei arg0, const GLenum* arg1) {
    _pre_call_callback("glDrawBuffers", (void*)glDrawBuffers, 2, arg0, arg1);
     glad_glDrawBuffers(arg0, arg1);
    _post_call_callback("glDrawBuffers", (void*)glDrawBuffers, 2, arg0, arg1);

}
PFNGLDRAWBUFFERSPROC glad_debug_glDrawBuffers = glad_debug_impl_glDrawBuffers;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
void APIENTRY glad_debug_impl_glGetActiveUniformBlockiv(GLuint arg0, GLuint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetActiveUniformBlockiv", (void*)glGetActiveUniformBlockiv, 4, arg0, arg1, arg2, arg3);
     glad_glGetActiveUniformBlockiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetActiveUniformBlockiv", (void*)glGetActiveUniformBlockiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_debug_glGetActiveUniformBlockiv = glad_debug_impl_glGetActiveUniformBlockiv;
PFNGLUSEPROGRAMPROC glad_glUseProgram;
void APIENTRY glad_debug_impl_glUseProgram(GLuint arg0) {
    _pre_call_callback("glUseProgram", (void*)glUseProgram, 1, arg0);
     glad_glUseProgram(arg0);
    _post_call_callback("glUseProgram", (void*)glUseProgram, 1, arg0);

}
PFNGLUSEPROGRAMPROC glad_debug_glUseProgram = glad_debug_impl_glUseProgram;
PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
void APIENTRY glad_debug_impl_glGetProgramInfoLog(GLuint arg0, GLsizei arg1, GLsizei* arg2, GLchar* arg3) {
    _pre_call_callback("glGetProgramInfoLog", (void*)glGetProgramInfoLog, 4, arg0, arg1, arg2, arg3);
     glad_glGetProgramInfoLog(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetProgramInfoLog", (void*)glGetProgramInfoLog, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPROGRAMINFOLOGPROC glad_debug_glGetProgramInfoLog = glad_debug_impl_glGetProgramInfoLog;
PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
void APIENTRY glad_debug_impl_glBindVertexArray(GLuint arg0) {
    _pre_call_callback("glBindVertexArray", (void*)glBindVertexArray, 1, arg0);
     glad_glBindVertexArray(arg0);
    _post_call_callback("glBindVertexArray", (void*)glBindVertexArray, 1, arg0);

}
PFNGLBINDVERTEXARRAYPROC glad_debug_glBindVertexArray = glad_debug_impl_glBindVertexArray;
PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
void APIENTRY glad_debug_impl_glDeleteBuffers(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteBuffers", (void*)glDeleteBuffers, 2, arg0, arg1);
     glad_glDeleteBuffers(arg0, arg1);
    _post_call_callback("glDeleteBuffers", (void*)glDeleteBuffers, 2, arg0, arg1);

}
PFNGLDELETEBUFFERSPROC glad_debug_glDeleteBuffers = glad_debug_impl_glDeleteBuffers;
PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
void APIENTRY glad_debug_impl_glSamplerParameterIiv(GLuint arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glSamplerParameterIiv", (void*)glSamplerParameterIiv, 3, arg0, arg1, arg2);
     glad_glSamplerParameterIiv(arg0, arg1, arg2);
    _post_call_callback("glSamplerParameterIiv", (void*)glSamplerParameterIiv, 3, arg0, arg1, arg2);

}
PFNGLSAMPLERPARAMETERIIVPROC glad_debug_glSamplerParameterIiv = glad_debug_impl_glSamplerParameterIiv;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
void APIENTRY glad_debug_impl_glMultiDrawElementsBaseVertex(GLenum arg0, const GLsizei* arg1, GLenum arg2, const void** arg3, GLsizei arg4, const GLint* arg5) {
    _pre_call_callback("glMultiDrawElementsBaseVertex", (void*)glMultiDrawElementsBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glMultiDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glMultiDrawElementsBaseVertex", (void*)glMultiDrawElementsBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_debug_glMultiDrawElementsBaseVertex = glad_debug_impl_glMultiDrawElementsBaseVertex;
PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
void APIENTRY glad_debug_impl_glUniform2uiv(GLint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glUniform2uiv", (void*)glUniform2uiv, 3, arg0, arg1, arg2);
     glad_glUniform2uiv(arg0, arg1, arg2);
    _post_call_callback("glUniform2uiv", (void*)glUniform2uiv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2UIVPROC glad_debug_glUniform2uiv = glad_debug_impl_glUniform2uiv;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
void APIENTRY glad_debug_impl_glCompressedTexSubImage1D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLsizei arg5, const void* arg6) {
    _pre_call_callback("glCompressedTexSubImage1D", (void*)glCompressedTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCompressedTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCompressedTexSubImage1D", (void*)glCompressedTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_debug_glCompressedTexSubImage1D = glad_debug_impl_glCompressedTexSubImage1D;
PFNGLFINISHPROC glad_glFinish;
void APIENTRY glad_debug_impl_glFinish() {
    _pre_call_callback("glFinish", (void*)glFinish, 0);
     glad_glFinish();
    _post_call_callback("glFinish", (void*)glFinish, 0);

}
PFNGLFINISHPROC glad_debug_glFinish = glad_debug_impl_glFinish;
PFNGLDELETESHADERPROC glad_glDeleteShader;
void APIENTRY glad_debug_impl_glDeleteShader(GLuint arg0) {
    _pre_call_callback("glDeleteShader", (void*)glDeleteShader, 1, arg0);
     glad_glDeleteShader(arg0);
    _post_call_callback("glDeleteShader", (void*)glDeleteShader, 1, arg0);

}
PFNGLDELETESHADERPROC glad_debug_glDeleteShader = glad_debug_impl_glDeleteShader;
PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
void APIENTRY glad_debug_impl_glVertexAttrib4Nsv(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib4Nsv", (void*)glVertexAttrib4Nsv, 2, arg0, arg1);
     glad_glVertexAttrib4Nsv(arg0, arg1);
    _post_call_callback("glVertexAttrib4Nsv", (void*)glVertexAttrib4Nsv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NSVPROC glad_debug_glVertexAttrib4Nsv = glad_debug_impl_glVertexAttrib4Nsv;
PFNGLVIEWPORTPROC glad_glViewport;
void APIENTRY glad_debug_impl_glViewport(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glViewport", (void*)glViewport, 4, arg0, arg1, arg2, arg3);
     glad_glViewport(arg0, arg1, arg2, arg3);
    _post_call_callback("glViewport", (void*)glViewport, 4, arg0, arg1, arg2, arg3);

}
PFNGLVIEWPORTPROC glad_debug_glViewport = glad_debug_impl_glViewport;
PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
void APIENTRY glad_debug_impl_glUniform1uiv(GLint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glUniform1uiv", (void*)glUniform1uiv, 3, arg0, arg1, arg2);
     glad_glUniform1uiv(arg0, arg1, arg2);
    _post_call_callback("glUniform1uiv", (void*)glUniform1uiv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1UIVPROC glad_debug_glUniform1uiv = glad_debug_impl_glUniform1uiv;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
void APIENTRY glad_debug_impl_glTransformFeedbackVaryings(GLuint arg0, GLsizei arg1, const GLchar** arg2, GLenum arg3) {
    _pre_call_callback("glTransformFeedbackVaryings", (void*)glTransformFeedbackVaryings, 4, arg0, arg1, arg2, arg3);
     glad_glTransformFeedbackVaryings(arg0, arg1, arg2, arg3);
    _post_call_callback("glTransformFeedbackVaryings", (void*)glTransformFeedbackVaryings, 4, arg0, arg1, arg2, arg3);

}
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_debug_glTransformFeedbackVaryings = glad_debug_impl_glTransformFeedbackVaryings;
PFNGLUNIFORM2UIPROC glad_glUniform2ui;
void APIENTRY glad_debug_impl_glUniform2ui(GLint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glUniform2ui", (void*)glUniform2ui, 3, arg0, arg1, arg2);
     glad_glUniform2ui(arg0, arg1, arg2);
    _post_call_callback("glUniform2ui", (void*)glUniform2ui, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2UIPROC glad_debug_glUniform2ui = glad_debug_impl_glUniform2ui;
PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
void APIENTRY glad_debug_impl_glVertexAttribI3i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glVertexAttribI3i", (void*)glVertexAttribI3i, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribI3i(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribI3i", (void*)glVertexAttribI3i, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBI3IPROC glad_debug_glVertexAttribI3i = glad_debug_impl_glVertexAttribI3i;
PFNGLCLEARDEPTHPROC glad_glClearDepth;
void APIENTRY glad_debug_impl_glClearDepth(GLdouble arg0) {
    _pre_call_callback("glClearDepth", (void*)glClearDepth, 1, arg0);
     glad_glClearDepth(arg0);
    _post_call_callback("glClearDepth", (void*)glClearDepth, 1, arg0);

}
PFNGLCLEARDEPTHPROC glad_debug_glClearDepth = glad_debug_impl_glClearDepth;
PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
void APIENTRY glad_debug_impl_glVertexAttribI4usv(GLuint arg0, const GLushort* arg1) {
    _pre_call_callback("glVertexAttribI4usv", (void*)glVertexAttribI4usv, 2, arg0, arg1);
     glad_glVertexAttribI4usv(arg0, arg1);
    _post_call_callback("glVertexAttribI4usv", (void*)glVertexAttribI4usv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4USVPROC glad_debug_glVertexAttribI4usv = glad_debug_impl_glVertexAttribI4usv;
PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
void APIENTRY glad_debug_impl_glTexParameterf(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glTexParameterf", (void*)glTexParameterf, 3, arg0, arg1, arg2);
     glad_glTexParameterf(arg0, arg1, arg2);
    _post_call_callback("glTexParameterf", (void*)glTexParameterf, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERFPROC glad_debug_glTexParameterf = glad_debug_impl_glTexParameterf;
PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
void APIENTRY glad_debug_impl_glTexParameteri(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glTexParameteri", (void*)glTexParameteri, 3, arg0, arg1, arg2);
     glad_glTexParameteri(arg0, arg1, arg2);
    _post_call_callback("glTexParameteri", (void*)glTexParameteri, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERIPROC glad_debug_glTexParameteri = glad_debug_impl_glTexParameteri;
PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
void APIENTRY glad_debug_impl_glGetShaderSource(GLuint arg0, GLsizei arg1, GLsizei* arg2, GLchar* arg3) {
    _pre_call_callback("glGetShaderSource", (void*)glGetShaderSource, 4, arg0, arg1, arg2, arg3);
     glad_glGetShaderSource(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetShaderSource", (void*)glGetShaderSource, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETSHADERSOURCEPROC glad_debug_glGetShaderSource = glad_debug_impl_glGetShaderSource;
PFNGLTEXBUFFERPROC glad_glTexBuffer;
void APIENTRY glad_debug_impl_glTexBuffer(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glTexBuffer", (void*)glTexBuffer, 3, arg0, arg1, arg2);
     glad_glTexBuffer(arg0, arg1, arg2);
    _post_call_callback("glTexBuffer", (void*)glTexBuffer, 3, arg0, arg1, arg2);

}
PFNGLTEXBUFFERPROC glad_debug_glTexBuffer = glad_debug_impl_glTexBuffer;
PFNGLPIXELSTOREIPROC glad_glPixelStorei;
void APIENTRY glad_debug_impl_glPixelStorei(GLenum arg0, GLint arg1) {
    _pre_call_callback("glPixelStorei", (void*)glPixelStorei, 2, arg0, arg1);
     glad_glPixelStorei(arg0, arg1);
    _post_call_callback("glPixelStorei", (void*)glPixelStorei, 2, arg0, arg1);

}
PFNGLPIXELSTOREIPROC glad_debug_glPixelStorei = glad_debug_impl_glPixelStorei;
PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
void APIENTRY glad_debug_impl_glValidateProgram(GLuint arg0) {
    _pre_call_callback("glValidateProgram", (void*)glValidateProgram, 1, arg0);
     glad_glValidateProgram(arg0);
    _post_call_callback("glValidateProgram", (void*)glValidateProgram, 1, arg0);

}
PFNGLVALIDATEPROGRAMPROC glad_debug_glValidateProgram = glad_debug_impl_glValidateProgram;
PFNGLPIXELSTOREFPROC glad_glPixelStoref;
void APIENTRY glad_debug_impl_glPixelStoref(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glPixelStoref", (void*)glPixelStoref, 2, arg0, arg1);
     glad_glPixelStoref(arg0, arg1);
    _post_call_callback("glPixelStoref", (void*)glPixelStoref, 2, arg0, arg1);

}
PFNGLPIXELSTOREFPROC glad_debug_glPixelStoref = glad_debug_impl_glPixelStoref;
PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
void APIENTRY glad_debug_impl_glGetBooleani_v(GLenum arg0, GLuint arg1, GLboolean* arg2) {
    _pre_call_callback("glGetBooleani_v", (void*)glGetBooleani_v, 3, arg0, arg1, arg2);
     glad_glGetBooleani_v(arg0, arg1, arg2);
    _post_call_callback("glGetBooleani_v", (void*)glGetBooleani_v, 3, arg0, arg1, arg2);

}
PFNGLGETBOOLEANI_VPROC glad_debug_glGetBooleani_v = glad_debug_impl_glGetBooleani_v;
PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;
void APIENTRY glad_debug_impl_glMultiTexCoordP2uiv(GLenum arg0, GLenum arg1, const GLuint* arg2) {
    _pre_call_callback("glMultiTexCoordP2uiv", (void*)glMultiTexCoordP2uiv, 3, arg0, arg1, arg2);
     glad_glMultiTexCoordP2uiv(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoordP2uiv", (void*)glMultiTexCoordP2uiv, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORDP2UIVPROC glad_debug_glMultiTexCoordP2uiv = glad_debug_impl_glMultiTexCoordP2uiv;
PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
void APIENTRY glad_debug_impl_glVertexAttribP1uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint* arg3) {
    _pre_call_callback("glVertexAttribP1uiv", (void*)glVertexAttribP1uiv, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribP1uiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribP1uiv", (void*)glVertexAttribP1uiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBP1UIVPROC glad_debug_glVertexAttribP1uiv = glad_debug_impl_glVertexAttribP1uiv;
PFNGLLINKPROGRAMPROC glad_glLinkProgram;
void APIENTRY glad_debug_impl_glLinkProgram(GLuint arg0) {
    _pre_call_callback("glLinkProgram", (void*)glLinkProgram, 1, arg0);
     glad_glLinkProgram(arg0);
    _post_call_callback("glLinkProgram", (void*)glLinkProgram, 1, arg0);

}
PFNGLLINKPROGRAMPROC glad_debug_glLinkProgram = glad_debug_impl_glLinkProgram;
PFNGLBINDTEXTUREPROC glad_glBindTexture;
void APIENTRY glad_debug_impl_glBindTexture(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindTexture", (void*)glBindTexture, 2, arg0, arg1);
     glad_glBindTexture(arg0, arg1);
    _post_call_callback("glBindTexture", (void*)glBindTexture, 2, arg0, arg1);

}
PFNGLBINDTEXTUREPROC glad_debug_glBindTexture = glad_debug_impl_glBindTexture;
PFNGLGETSTRINGPROC glad_glGetString;
const GLubyte* APIENTRY glad_debug_impl_glGetString(GLenum arg0) {
    const GLubyte* ret;
    _pre_call_callback("glGetString", (void*)glGetString, 1, arg0);
    ret =  glad_glGetString(arg0);
    _post_call_callback("glGetString", (void*)glGetString, 1, arg0);
    return ret;
}
PFNGLGETSTRINGPROC glad_debug_glGetString = glad_debug_impl_glGetString;
PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
void APIENTRY glad_debug_impl_glVertexAttribP2uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint* arg3) {
    _pre_call_callback("glVertexAttribP2uiv", (void*)glVertexAttribP2uiv, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribP2uiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribP2uiv", (void*)glVertexAttribP2uiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBP2UIVPROC glad_debug_glVertexAttribP2uiv = glad_debug_impl_glVertexAttribP2uiv;
PFNGLDETACHSHADERPROC glad_glDetachShader;
void APIENTRY glad_debug_impl_glDetachShader(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glDetachShader", (void*)glDetachShader, 2, arg0, arg1);
     glad_glDetachShader(arg0, arg1);
    _post_call_callback("glDetachShader", (void*)glDetachShader, 2, arg0, arg1);

}
PFNGLDETACHSHADERPROC glad_debug_glDetachShader = glad_debug_impl_glDetachShader;
PFNGLENDQUERYPROC glad_glEndQuery;
void APIENTRY glad_debug_impl_glEndQuery(GLenum arg0) {
    _pre_call_callback("glEndQuery", (void*)glEndQuery, 1, arg0);
     glad_glEndQuery(arg0);
    _post_call_callback("glEndQuery", (void*)glEndQuery, 1, arg0);

}
PFNGLENDQUERYPROC glad_debug_glEndQuery = glad_debug_impl_glEndQuery;
PFNGLNORMALP3UIPROC glad_glNormalP3ui;
void APIENTRY glad_debug_impl_glNormalP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glNormalP3ui", (void*)glNormalP3ui, 2, arg0, arg1);
     glad_glNormalP3ui(arg0, arg1);
    _post_call_callback("glNormalP3ui", (void*)glNormalP3ui, 2, arg0, arg1);

}
PFNGLNORMALP3UIPROC glad_debug_glNormalP3ui = glad_debug_impl_glNormalP3ui;
PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
void APIENTRY glad_debug_impl_glVertexAttribI2ui(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glVertexAttribI2ui", (void*)glVertexAttribI2ui, 3, arg0, arg1, arg2);
     glad_glVertexAttribI2ui(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribI2ui", (void*)glVertexAttribI2ui, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBI2UIPROC glad_debug_glVertexAttribI2ui = glad_debug_impl_glVertexAttribI2ui;
PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
void APIENTRY glad_debug_impl_glDeleteTextures(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteTextures", (void*)glDeleteTextures, 2, arg0, arg1);
     glad_glDeleteTextures(arg0, arg1);
    _post_call_callback("glDeleteTextures", (void*)glDeleteTextures, 2, arg0, arg1);

}
PFNGLDELETETEXTURESPROC glad_debug_glDeleteTextures = glad_debug_impl_glDeleteTextures;
PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
void APIENTRY glad_debug_impl_glStencilOpSeparate(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_callback("glStencilOpSeparate", (void*)glStencilOpSeparate, 4, arg0, arg1, arg2, arg3);
     glad_glStencilOpSeparate(arg0, arg1, arg2, arg3);
    _post_call_callback("glStencilOpSeparate", (void*)glStencilOpSeparate, 4, arg0, arg1, arg2, arg3);

}
PFNGLSTENCILOPSEPARATEPROC glad_debug_glStencilOpSeparate = glad_debug_impl_glStencilOpSeparate;
PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
void APIENTRY glad_debug_impl_glDeleteQueries(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteQueries", (void*)glDeleteQueries, 2, arg0, arg1);
     glad_glDeleteQueries(arg0, arg1);
    _post_call_callback("glDeleteQueries", (void*)glDeleteQueries, 2, arg0, arg1);

}
PFNGLDELETEQUERIESPROC glad_debug_glDeleteQueries = glad_debug_impl_glDeleteQueries;
PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;
void APIENTRY glad_debug_impl_glNormalP3uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glNormalP3uiv", (void*)glNormalP3uiv, 2, arg0, arg1);
     glad_glNormalP3uiv(arg0, arg1);
    _post_call_callback("glNormalP3uiv", (void*)glNormalP3uiv, 2, arg0, arg1);

}
PFNGLNORMALP3UIVPROC glad_debug_glNormalP3uiv = glad_debug_impl_glNormalP3uiv;
PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
void APIENTRY glad_debug_impl_glVertexAttrib4f(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glVertexAttrib4f", (void*)glVertexAttrib4f, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4f(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4f", (void*)glVertexAttrib4f, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4FPROC glad_debug_glVertexAttrib4f = glad_debug_impl_glVertexAttrib4f;
PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
void APIENTRY glad_debug_impl_glVertexAttrib4d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glVertexAttrib4d", (void*)glVertexAttrib4d, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4d", (void*)glVertexAttrib4d, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4DPROC glad_debug_glVertexAttrib4d = glad_debug_impl_glVertexAttrib4d;
PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
void APIENTRY glad_debug_impl_glGetTexParameteriv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetTexParameteriv", (void*)glGetTexParameteriv, 3, arg0, arg1, arg2);
     glad_glGetTexParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetTexParameteriv", (void*)glGetTexParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETTEXPARAMETERIVPROC glad_debug_glGetTexParameteriv = glad_debug_impl_glGetTexParameteriv;
PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
void APIENTRY glad_debug_impl_glVertexAttrib4s(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3, GLshort arg4) {
    _pre_call_callback("glVertexAttrib4s", (void*)glVertexAttrib4s, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4s(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4s", (void*)glVertexAttrib4s, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4SPROC glad_debug_glVertexAttrib4s = glad_debug_impl_glVertexAttrib4s;
PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
void APIENTRY glad_debug_impl_glDrawElementsBaseVertex(GLenum arg0, GLsizei arg1, GLenum arg2, const void* arg3, GLint arg4) {
    _pre_call_callback("glDrawElementsBaseVertex", (void*)glDrawElementsBaseVertex, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDrawElementsBaseVertex(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDrawElementsBaseVertex", (void*)glDrawElementsBaseVertex, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDRAWELEMENTSBASEVERTEXPROC glad_debug_glDrawElementsBaseVertex = glad_debug_impl_glDrawElementsBaseVertex;
PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
void APIENTRY glad_debug_impl_glSampleCoverage(GLfloat arg0, GLboolean arg1) {
    _pre_call_callback("glSampleCoverage", (void*)glSampleCoverage, 2, arg0, arg1);
     glad_glSampleCoverage(arg0, arg1);
    _post_call_callback("glSampleCoverage", (void*)glSampleCoverage, 2, arg0, arg1);

}
PFNGLSAMPLECOVERAGEPROC glad_debug_glSampleCoverage = glad_debug_impl_glSampleCoverage;
PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
void APIENTRY glad_debug_impl_glSamplerParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glSamplerParameteri", (void*)glSamplerParameteri, 3, arg0, arg1, arg2);
     glad_glSamplerParameteri(arg0, arg1, arg2);
    _post_call_callback("glSamplerParameteri", (void*)glSamplerParameteri, 3, arg0, arg1, arg2);

}
PFNGLSAMPLERPARAMETERIPROC glad_debug_glSamplerParameteri = glad_debug_impl_glSamplerParameteri;
PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
void APIENTRY glad_debug_impl_glSamplerParameterf(GLuint arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glSamplerParameterf", (void*)glSamplerParameterf, 3, arg0, arg1, arg2);
     glad_glSamplerParameterf(arg0, arg1, arg2);
    _post_call_callback("glSamplerParameterf", (void*)glSamplerParameterf, 3, arg0, arg1, arg2);

}
PFNGLSAMPLERPARAMETERFPROC glad_debug_glSamplerParameterf = glad_debug_impl_glSamplerParameterf;
PFNGLUNIFORM1FPROC glad_glUniform1f;
void APIENTRY glad_debug_impl_glUniform1f(GLint arg0, GLfloat arg1) {
    _pre_call_callback("glUniform1f", (void*)glUniform1f, 2, arg0, arg1);
     glad_glUniform1f(arg0, arg1);
    _post_call_callback("glUniform1f", (void*)glUniform1f, 2, arg0, arg1);

}
PFNGLUNIFORM1FPROC glad_debug_glUniform1f = glad_debug_impl_glUniform1f;
PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
void APIENTRY glad_debug_impl_glGetVertexAttribfv(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetVertexAttribfv", (void*)glGetVertexAttribfv, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribfv(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribfv", (void*)glGetVertexAttribfv, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBFVPROC glad_debug_glGetVertexAttribfv = glad_debug_impl_glGetVertexAttribfv;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
void APIENTRY glad_debug_impl_glGetCompressedTexImage(GLenum arg0, GLint arg1, void* arg2) {
    _pre_call_callback("glGetCompressedTexImage", (void*)glGetCompressedTexImage, 3, arg0, arg1, arg2);
     glad_glGetCompressedTexImage(arg0, arg1, arg2);
    _post_call_callback("glGetCompressedTexImage", (void*)glGetCompressedTexImage, 3, arg0, arg1, arg2);

}
PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_debug_glGetCompressedTexImage = glad_debug_impl_glGetCompressedTexImage;
PFNGLUNIFORM1IPROC glad_glUniform1i;
void APIENTRY glad_debug_impl_glUniform1i(GLint arg0, GLint arg1) {
    _pre_call_callback("glUniform1i", (void*)glUniform1i, 2, arg0, arg1);
     glad_glUniform1i(arg0, arg1);
    _post_call_callback("glUniform1i", (void*)glUniform1i, 2, arg0, arg1);

}
PFNGLUNIFORM1IPROC glad_debug_glUniform1i = glad_debug_impl_glUniform1i;
PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
void APIENTRY glad_debug_impl_glGetActiveAttrib(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLint* arg4, GLenum* arg5, GLchar* arg6) {
    _pre_call_callback("glGetActiveAttrib", (void*)glGetActiveAttrib, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetActiveAttrib(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetActiveAttrib", (void*)glGetActiveAttrib, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETACTIVEATTRIBPROC glad_debug_glGetActiveAttrib = glad_debug_impl_glGetActiveAttrib;
PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
void APIENTRY glad_debug_impl_glTexSubImage2D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLenum arg7, const void* arg8) {
    _pre_call_callback("glTexSubImage2D", (void*)glTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glTexSubImage2D", (void*)glTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLTEXSUBIMAGE2DPROC glad_debug_glTexSubImage2D = glad_debug_impl_glTexSubImage2D;
PFNGLDISABLEPROC glad_glDisable;
void APIENTRY glad_debug_impl_glDisable(GLenum arg0) {
    _pre_call_callback("glDisable", (void*)glDisable, 1, arg0);
     glad_glDisable(arg0);
    _post_call_callback("glDisable", (void*)glDisable, 1, arg0);

}
PFNGLDISABLEPROC glad_debug_glDisable = glad_debug_impl_glDisable;
PFNGLLOGICOPPROC glad_glLogicOp;
void APIENTRY glad_debug_impl_glLogicOp(GLenum arg0) {
    _pre_call_callback("glLogicOp", (void*)glLogicOp, 1, arg0);
     glad_glLogicOp(arg0);
    _post_call_callback("glLogicOp", (void*)glLogicOp, 1, arg0);

}
PFNGLLOGICOPPROC glad_debug_glLogicOp = glad_debug_impl_glLogicOp;
PFNGLUNIFORM4UIPROC glad_glUniform4ui;
void APIENTRY glad_debug_impl_glUniform4ui(GLint arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_callback("glUniform4ui", (void*)glUniform4ui, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4ui(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4ui", (void*)glUniform4ui, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4UIPROC glad_debug_glUniform4ui = glad_debug_impl_glUniform4ui;
PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
void APIENTRY glad_debug_impl_glBindFramebuffer(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindFramebuffer", (void*)glBindFramebuffer, 2, arg0, arg1);
     glad_glBindFramebuffer(arg0, arg1);
    _post_call_callback("glBindFramebuffer", (void*)glBindFramebuffer, 2, arg0, arg1);

}
PFNGLBINDFRAMEBUFFERPROC glad_debug_glBindFramebuffer = glad_debug_impl_glBindFramebuffer;
PFNGLCULLFACEPROC glad_glCullFace;
void APIENTRY glad_debug_impl_glCullFace(GLenum arg0) {
    _pre_call_callback("glCullFace", (void*)glCullFace, 1, arg0);
     glad_glCullFace(arg0);
    _post_call_callback("glCullFace", (void*)glCullFace, 1, arg0);

}
PFNGLCULLFACEPROC glad_debug_glCullFace = glad_debug_impl_glCullFace;
PFNGLGETSTRINGIPROC glad_glGetStringi;
const GLubyte* APIENTRY glad_debug_impl_glGetStringi(GLenum arg0, GLuint arg1) {
    const GLubyte* ret;
    _pre_call_callback("glGetStringi", (void*)glGetStringi, 2, arg0, arg1);
    ret =  glad_glGetStringi(arg0, arg1);
    _post_call_callback("glGetStringi", (void*)glGetStringi, 2, arg0, arg1);
    return ret;
}
PFNGLGETSTRINGIPROC glad_debug_glGetStringi = glad_debug_impl_glGetStringi;
PFNGLATTACHSHADERPROC glad_glAttachShader;
void APIENTRY glad_debug_impl_glAttachShader(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glAttachShader", (void*)glAttachShader, 2, arg0, arg1);
     glad_glAttachShader(arg0, arg1);
    _post_call_callback("glAttachShader", (void*)glAttachShader, 2, arg0, arg1);

}
PFNGLATTACHSHADERPROC glad_debug_glAttachShader = glad_debug_impl_glAttachShader;
PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
void APIENTRY glad_debug_impl_glQueryCounter(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glQueryCounter", (void*)glQueryCounter, 2, arg0, arg1);
     glad_glQueryCounter(arg0, arg1);
    _post_call_callback("glQueryCounter", (void*)glQueryCounter, 2, arg0, arg1);

}
PFNGLQUERYCOUNTERPROC glad_debug_glQueryCounter = glad_debug_impl_glQueryCounter;
PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
void APIENTRY glad_debug_impl_glProvokingVertex(GLenum arg0) {
    _pre_call_callback("glProvokingVertex", (void*)glProvokingVertex, 1, arg0);
     glad_glProvokingVertex(arg0);
    _post_call_callback("glProvokingVertex", (void*)glProvokingVertex, 1, arg0);

}
PFNGLPROVOKINGVERTEXPROC glad_debug_glProvokingVertex = glad_debug_impl_glProvokingVertex;
PFNGLDRAWELEMENTSPROC glad_glDrawElements;
void APIENTRY glad_debug_impl_glDrawElements(GLenum arg0, GLsizei arg1, GLenum arg2, const void* arg3) {
    _pre_call_callback("glDrawElements", (void*)glDrawElements, 4, arg0, arg1, arg2, arg3);
     glad_glDrawElements(arg0, arg1, arg2, arg3);
    _post_call_callback("glDrawElements", (void*)glDrawElements, 4, arg0, arg1, arg2, arg3);

}
PFNGLDRAWELEMENTSPROC glad_debug_glDrawElements = glad_debug_impl_glDrawElements;
PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
void APIENTRY glad_debug_impl_glVertexAttribI4sv(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttribI4sv", (void*)glVertexAttribI4sv, 2, arg0, arg1);
     glad_glVertexAttribI4sv(arg0, arg1);
    _post_call_callback("glVertexAttribI4sv", (void*)glVertexAttribI4sv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4SVPROC glad_debug_glVertexAttribI4sv = glad_debug_impl_glVertexAttribI4sv;
PFNGLUNIFORM1IVPROC glad_glUniform1iv;
void APIENTRY glad_debug_impl_glUniform1iv(GLint arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glUniform1iv", (void*)glUniform1iv, 3, arg0, arg1, arg2);
     glad_glUniform1iv(arg0, arg1, arg2);
    _post_call_callback("glUniform1iv", (void*)glUniform1iv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1IVPROC glad_debug_glUniform1iv = glad_debug_impl_glUniform1iv;
PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
void APIENTRY glad_debug_impl_glGetQueryObjectiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetQueryObjectiv", (void*)glGetQueryObjectiv, 3, arg0, arg1, arg2);
     glad_glGetQueryObjectiv(arg0, arg1, arg2);
    _post_call_callback("glGetQueryObjectiv", (void*)glGetQueryObjectiv, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYOBJECTIVPROC glad_debug_glGetQueryObjectiv = glad_debug_impl_glGetQueryObjectiv;
PFNGLREADBUFFERPROC glad_glReadBuffer;
void APIENTRY glad_debug_impl_glReadBuffer(GLenum arg0) {
    _pre_call_callback("glReadBuffer", (void*)glReadBuffer, 1, arg0);
     glad_glReadBuffer(arg0);
    _post_call_callback("glReadBuffer", (void*)glReadBuffer, 1, arg0);

}
PFNGLREADBUFFERPROC glad_debug_glReadBuffer = glad_debug_impl_glReadBuffer;
PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
void APIENTRY glad_debug_impl_glTexParameterIuiv(GLenum arg0, GLenum arg1, const GLuint* arg2) {
    _pre_call_callback("glTexParameterIuiv", (void*)glTexParameterIuiv, 3, arg0, arg1, arg2);
     glad_glTexParameterIuiv(arg0, arg1, arg2);
    _post_call_callback("glTexParameterIuiv", (void*)glTexParameterIuiv, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERIUIVPROC glad_debug_glTexParameterIuiv = glad_debug_impl_glTexParameterIuiv;
PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
void APIENTRY glad_debug_impl_glDrawArraysInstanced(GLenum arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glDrawArraysInstanced", (void*)glDrawArraysInstanced, 4, arg0, arg1, arg2, arg3);
     glad_glDrawArraysInstanced(arg0, arg1, arg2, arg3);
    _post_call_callback("glDrawArraysInstanced", (void*)glDrawArraysInstanced, 4, arg0, arg1, arg2, arg3);

}
PFNGLDRAWARRAYSINSTANCEDPROC glad_debug_glDrawArraysInstanced = glad_debug_impl_glDrawArraysInstanced;
PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
void APIENTRY glad_debug_impl_glGenerateMipmap(GLenum arg0) {
    _pre_call_callback("glGenerateMipmap", (void*)glGenerateMipmap, 1, arg0);
     glad_glGenerateMipmap(arg0);
    _post_call_callback("glGenerateMipmap", (void*)glGenerateMipmap, 1, arg0);

}
PFNGLGENERATEMIPMAPPROC glad_debug_glGenerateMipmap = glad_debug_impl_glGenerateMipmap;
PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
void APIENTRY glad_debug_impl_glSamplerParameteriv(GLuint arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glSamplerParameteriv", (void*)glSamplerParameteriv, 3, arg0, arg1, arg2);
     glad_glSamplerParameteriv(arg0, arg1, arg2);
    _post_call_callback("glSamplerParameteriv", (void*)glSamplerParameteriv, 3, arg0, arg1, arg2);

}
PFNGLSAMPLERPARAMETERIVPROC glad_debug_glSamplerParameteriv = glad_debug_impl_glSamplerParameteriv;
PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
void APIENTRY glad_debug_impl_glVertexAttrib3f(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glVertexAttrib3f", (void*)glVertexAttrib3f, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3f(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3f", (void*)glVertexAttrib3f, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3FPROC glad_debug_glVertexAttrib3f = glad_debug_impl_glVertexAttrib3f;
PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
void APIENTRY glad_debug_impl_glVertexAttrib4uiv(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttrib4uiv", (void*)glVertexAttrib4uiv, 2, arg0, arg1);
     glad_glVertexAttrib4uiv(arg0, arg1);
    _post_call_callback("glVertexAttrib4uiv", (void*)glVertexAttrib4uiv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4UIVPROC glad_debug_glVertexAttrib4uiv = glad_debug_impl_glVertexAttrib4uiv;
PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
void APIENTRY glad_debug_impl_glPointParameteri(GLenum arg0, GLint arg1) {
    _pre_call_callback("glPointParameteri", (void*)glPointParameteri, 2, arg0, arg1);
     glad_glPointParameteri(arg0, arg1);
    _post_call_callback("glPointParameteri", (void*)glPointParameteri, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERIPROC glad_debug_glPointParameteri = glad_debug_impl_glPointParameteri;
PFNGLBLENDCOLORPROC glad_glBlendColor;
void APIENTRY glad_debug_impl_glBlendColor(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glBlendColor", (void*)glBlendColor, 4, arg0, arg1, arg2, arg3);
     glad_glBlendColor(arg0, arg1, arg2, arg3);
    _post_call_callback("glBlendColor", (void*)glBlendColor, 4, arg0, arg1, arg2, arg3);

}
PFNGLBLENDCOLORPROC glad_debug_glBlendColor = glad_debug_impl_glBlendColor;
PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
void APIENTRY glad_debug_impl_glSamplerParameterIuiv(GLuint arg0, GLenum arg1, const GLuint* arg2) {
    _pre_call_callback("glSamplerParameterIuiv", (void*)glSamplerParameterIuiv, 3, arg0, arg1, arg2);
     glad_glSamplerParameterIuiv(arg0, arg1, arg2);
    _post_call_callback("glSamplerParameterIuiv", (void*)glSamplerParameterIuiv, 3, arg0, arg1, arg2);

}
PFNGLSAMPLERPARAMETERIUIVPROC glad_debug_glSamplerParameterIuiv = glad_debug_impl_glSamplerParameterIuiv;
PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
GLboolean APIENTRY glad_debug_impl_glUnmapBuffer(GLenum arg0) {
    GLboolean ret;
    _pre_call_callback("glUnmapBuffer", (void*)glUnmapBuffer, 1, arg0);
    ret =  glad_glUnmapBuffer(arg0);
    _post_call_callback("glUnmapBuffer", (void*)glUnmapBuffer, 1, arg0);
    return ret;
}
PFNGLUNMAPBUFFERPROC glad_debug_glUnmapBuffer = glad_debug_impl_glUnmapBuffer;
PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
void APIENTRY glad_debug_impl_glPointParameterf(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glPointParameterf", (void*)glPointParameterf, 2, arg0, arg1);
     glad_glPointParameterf(arg0, arg1);
    _post_call_callback("glPointParameterf", (void*)glPointParameterf, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERFPROC glad_debug_glPointParameterf = glad_debug_impl_glPointParameterf;
PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
void APIENTRY glad_debug_impl_glVertexAttrib3s(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_callback("glVertexAttrib3s", (void*)glVertexAttrib3s, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3s(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3s", (void*)glVertexAttrib3s, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3SPROC glad_debug_glVertexAttrib3s = glad_debug_impl_glVertexAttrib3s;
PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
void APIENTRY glad_debug_impl_glBindRenderbuffer(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindRenderbuffer", (void*)glBindRenderbuffer, 2, arg0, arg1);
     glad_glBindRenderbuffer(arg0, arg1);
    _post_call_callback("glBindRenderbuffer", (void*)glBindRenderbuffer, 2, arg0, arg1);

}
PFNGLBINDRENDERBUFFERPROC glad_debug_glBindRenderbuffer = glad_debug_impl_glBindRenderbuffer;
PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
void APIENTRY glad_debug_impl_glVertexAttribP4uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint* arg3) {
    _pre_call_callback("glVertexAttribP4uiv", (void*)glVertexAttribP4uiv, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribP4uiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribP4uiv", (void*)glVertexAttribP4uiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBP4UIVPROC glad_debug_glVertexAttribP4uiv = glad_debug_impl_glVertexAttribP4uiv;
PFNGLISPROGRAMPROC glad_glIsProgram;
GLboolean APIENTRY glad_debug_impl_glIsProgram(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsProgram", (void*)glIsProgram, 1, arg0);
    ret =  glad_glIsProgram(arg0);
    _post_call_callback("glIsProgram", (void*)glIsProgram, 1, arg0);
    return ret;
}
PFNGLISPROGRAMPROC glad_debug_glIsProgram = glad_debug_impl_glIsProgram;
PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
void APIENTRY glad_debug_impl_glVertexAttrib4bv(GLuint arg0, const GLbyte* arg1) {
    _pre_call_callback("glVertexAttrib4bv", (void*)glVertexAttrib4bv, 2, arg0, arg1);
     glad_glVertexAttrib4bv(arg0, arg1);
    _post_call_callback("glVertexAttrib4bv", (void*)glVertexAttrib4bv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4BVPROC glad_debug_glVertexAttrib4bv = glad_debug_impl_glVertexAttrib4bv;
PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
void APIENTRY glad_debug_impl_glVertexAttrib4fv(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib4fv", (void*)glVertexAttrib4fv, 2, arg0, arg1);
     glad_glVertexAttrib4fv(arg0, arg1);
    _post_call_callback("glVertexAttrib4fv", (void*)glVertexAttrib4fv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4FVPROC glad_debug_glVertexAttrib4fv = glad_debug_impl_glVertexAttrib4fv;
PFNGLUNIFORM4IPROC glad_glUniform4i;
void APIENTRY glad_debug_impl_glUniform4i(GLint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glUniform4i", (void*)glUniform4i, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4i(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4i", (void*)glUniform4i, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4IPROC glad_debug_glUniform4i = glad_debug_impl_glUniform4i;
PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
void APIENTRY glad_debug_impl_glActiveTexture(GLenum arg0) {
    _pre_call_callback("glActiveTexture", (void*)glActiveTexture, 1, arg0);
     glad_glActiveTexture(arg0);
    _post_call_callback("glActiveTexture", (void*)glActiveTexture, 1, arg0);

}
PFNGLACTIVETEXTUREPROC glad_debug_glActiveTexture = glad_debug_impl_glActiveTexture;
PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
void APIENTRY glad_debug_impl_glEnableVertexAttribArray(GLuint arg0) {
    _pre_call_callback("glEnableVertexAttribArray", (void*)glEnableVertexAttribArray, 1, arg0);
     glad_glEnableVertexAttribArray(arg0);
    _post_call_callback("glEnableVertexAttribArray", (void*)glEnableVertexAttribArray, 1, arg0);

}
PFNGLENABLEVERTEXATTRIBARRAYPROC glad_debug_glEnableVertexAttribArray = glad_debug_impl_glEnableVertexAttribArray;
PFNGLREADPIXELSPROC glad_glReadPixels;
void APIENTRY glad_debug_impl_glReadPixels(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, void* arg6) {
    _pre_call_callback("glReadPixels", (void*)glReadPixels, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glReadPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glReadPixels", (void*)glReadPixels, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLREADPIXELSPROC glad_debug_glReadPixels = glad_debug_impl_glReadPixels;
PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
void APIENTRY glad_debug_impl_glVertexAttribI3iv(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttribI3iv", (void*)glVertexAttribI3iv, 2, arg0, arg1);
     glad_glVertexAttribI3iv(arg0, arg1);
    _post_call_callback("glVertexAttribI3iv", (void*)glVertexAttribI3iv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI3IVPROC glad_debug_glVertexAttribI3iv = glad_debug_impl_glVertexAttribI3iv;
PFNGLUNIFORM4FPROC glad_glUniform4f;
void APIENTRY glad_debug_impl_glUniform4f(GLint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glUniform4f", (void*)glUniform4f, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4f(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4f", (void*)glUniform4f, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4FPROC glad_debug_glUniform4f = glad_debug_impl_glUniform4f;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
void APIENTRY glad_debug_impl_glRenderbufferStorageMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glRenderbufferStorageMultisample", (void*)glRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glRenderbufferStorageMultisample(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glRenderbufferStorageMultisample", (void*)glRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glRenderbufferStorageMultisample = glad_debug_impl_glRenderbufferStorageMultisample;
PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
void APIENTRY glad_debug_impl_glUniformMatrix3fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix3fv", (void*)glUniformMatrix3fv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix3fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix3fv", (void*)glUniformMatrix3fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX3FVPROC glad_debug_glUniformMatrix3fv = glad_debug_impl_glUniformMatrix3fv;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
void APIENTRY glad_debug_impl_glDrawElementsInstancedBaseVertex(GLenum arg0, GLsizei arg1, GLenum arg2, const void* arg3, GLsizei arg4, GLint arg5) {
    _pre_call_callback("glDrawElementsInstancedBaseVertex", (void*)glDrawElementsInstancedBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDrawElementsInstancedBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDrawElementsInstancedBaseVertex", (void*)glDrawElementsInstancedBaseVertex, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_debug_glDrawElementsInstancedBaseVertex = glad_debug_impl_glDrawElementsInstancedBaseVertex;
PFNGLSTENCILFUNCPROC glad_glStencilFunc;
void APIENTRY glad_debug_impl_glStencilFunc(GLenum arg0, GLint arg1, GLuint arg2) {
    _pre_call_callback("glStencilFunc", (void*)glStencilFunc, 3, arg0, arg1, arg2);
     glad_glStencilFunc(arg0, arg1, arg2);
    _post_call_callback("glStencilFunc", (void*)glStencilFunc, 3, arg0, arg1, arg2);

}
PFNGLSTENCILFUNCPROC glad_debug_glStencilFunc = glad_debug_impl_glStencilFunc;
PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
void APIENTRY glad_debug_impl_glUniformBlockBinding(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glUniformBlockBinding", (void*)glUniformBlockBinding, 3, arg0, arg1, arg2);
     glad_glUniformBlockBinding(arg0, arg1, arg2);
    _post_call_callback("glUniformBlockBinding", (void*)glUniformBlockBinding, 3, arg0, arg1, arg2);

}
PFNGLUNIFORMBLOCKBINDINGPROC glad_debug_glUniformBlockBinding = glad_debug_impl_glUniformBlockBinding;
PFNGLCOLORP4UIPROC glad_glColorP4ui;
void APIENTRY glad_debug_impl_glColorP4ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glColorP4ui", (void*)glColorP4ui, 2, arg0, arg1);
     glad_glColorP4ui(arg0, arg1);
    _post_call_callback("glColorP4ui", (void*)glColorP4ui, 2, arg0, arg1);

}
PFNGLCOLORP4UIPROC glad_debug_glColorP4ui = glad_debug_impl_glColorP4ui;
PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
void APIENTRY glad_debug_impl_glVertexAttribI4iv(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttribI4iv", (void*)glVertexAttribI4iv, 2, arg0, arg1);
     glad_glVertexAttribI4iv(arg0, arg1);
    _post_call_callback("glVertexAttribI4iv", (void*)glVertexAttribI4iv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4IVPROC glad_debug_glVertexAttribI4iv = glad_debug_impl_glVertexAttribI4iv;
PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
void APIENTRY glad_debug_impl_glGetShaderInfoLog(GLuint arg0, GLsizei arg1, GLsizei* arg2, GLchar* arg3) {
    _pre_call_callback("glGetShaderInfoLog", (void*)glGetShaderInfoLog, 4, arg0, arg1, arg2, arg3);
     glad_glGetShaderInfoLog(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetShaderInfoLog", (void*)glGetShaderInfoLog, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETSHADERINFOLOGPROC glad_debug_glGetShaderInfoLog = glad_debug_impl_glGetShaderInfoLog;
PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
void APIENTRY glad_debug_impl_glVertexAttribI4i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glVertexAttribI4i", (void*)glVertexAttribI4i, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribI4i(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribI4i", (void*)glVertexAttribI4i, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBI4IPROC glad_debug_glVertexAttribI4i = glad_debug_impl_glVertexAttribI4i;
PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
void APIENTRY glad_debug_impl_glGetBufferSubData(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, void* arg3) {
    _pre_call_callback("glGetBufferSubData", (void*)glGetBufferSubData, 4, arg0, arg1, arg2, arg3);
     glad_glGetBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetBufferSubData", (void*)glGetBufferSubData, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETBUFFERSUBDATAPROC glad_debug_glGetBufferSubData = glad_debug_impl_glGetBufferSubData;
PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
void APIENTRY glad_debug_impl_glBlendEquationSeparate(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glBlendEquationSeparate", (void*)glBlendEquationSeparate, 2, arg0, arg1);
     glad_glBlendEquationSeparate(arg0, arg1);
    _post_call_callback("glBlendEquationSeparate", (void*)glBlendEquationSeparate, 2, arg0, arg1);

}
PFNGLBLENDEQUATIONSEPARATEPROC glad_debug_glBlendEquationSeparate = glad_debug_impl_glBlendEquationSeparate;
PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
void APIENTRY glad_debug_impl_glVertexAttribI1ui(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glVertexAttribI1ui", (void*)glVertexAttribI1ui, 2, arg0, arg1);
     glad_glVertexAttribI1ui(arg0, arg1);
    _post_call_callback("glVertexAttribI1ui", (void*)glVertexAttribI1ui, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI1UIPROC glad_debug_glVertexAttribI1ui = glad_debug_impl_glVertexAttribI1ui;
PFNGLGENBUFFERSPROC glad_glGenBuffers;
void APIENTRY glad_debug_impl_glGenBuffers(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenBuffers", (void*)glGenBuffers, 2, arg0, arg1);
     glad_glGenBuffers(arg0, arg1);
    _post_call_callback("glGenBuffers", (void*)glGenBuffers, 2, arg0, arg1);

}
PFNGLGENBUFFERSPROC glad_debug_glGenBuffers = glad_debug_impl_glGenBuffers;
PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
void APIENTRY glad_debug_impl_glVertexAttrib2sv(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib2sv", (void*)glVertexAttrib2sv, 2, arg0, arg1);
     glad_glVertexAttrib2sv(arg0, arg1);
    _post_call_callback("glVertexAttrib2sv", (void*)glVertexAttrib2sv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2SVPROC glad_debug_glVertexAttrib2sv = glad_debug_impl_glVertexAttrib2sv;
PFNGLBLENDFUNCPROC glad_glBlendFunc;
void APIENTRY glad_debug_impl_glBlendFunc(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glBlendFunc", (void*)glBlendFunc, 2, arg0, arg1);
     glad_glBlendFunc(arg0, arg1);
    _post_call_callback("glBlendFunc", (void*)glBlendFunc, 2, arg0, arg1);

}
PFNGLBLENDFUNCPROC glad_debug_glBlendFunc = glad_debug_impl_glBlendFunc;
PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
GLuint APIENTRY glad_debug_impl_glCreateProgram() {
    GLuint ret;
    _pre_call_callback("glCreateProgram", (void*)glCreateProgram, 0);
    ret =  glad_glCreateProgram();
    _post_call_callback("glCreateProgram", (void*)glCreateProgram, 0);
    return ret;
}
PFNGLCREATEPROGRAMPROC glad_debug_glCreateProgram = glad_debug_impl_glCreateProgram;
PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
void APIENTRY glad_debug_impl_glTexImage3D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLenum arg7, GLenum arg8, const void* arg9) {
    _pre_call_callback("glTexImage3D", (void*)glTexImage3D, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glTexImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glTexImage3D", (void*)glTexImage3D, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLTEXIMAGE3DPROC glad_debug_glTexImage3D = glad_debug_impl_glTexImage3D;
PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
GLboolean APIENTRY glad_debug_impl_glIsFramebuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsFramebuffer", (void*)glIsFramebuffer, 1, arg0);
    ret =  glad_glIsFramebuffer(arg0);
    _post_call_callback("glIsFramebuffer", (void*)glIsFramebuffer, 1, arg0);
    return ret;
}
PFNGLISFRAMEBUFFERPROC glad_debug_glIsFramebuffer = glad_debug_impl_glIsFramebuffer;
PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
void APIENTRY glad_debug_impl_glPrimitiveRestartIndex(GLuint arg0) {
    _pre_call_callback("glPrimitiveRestartIndex", (void*)glPrimitiveRestartIndex, 1, arg0);
     glad_glPrimitiveRestartIndex(arg0);
    _post_call_callback("glPrimitiveRestartIndex", (void*)glPrimitiveRestartIndex, 1, arg0);

}
PFNGLPRIMITIVERESTARTINDEXPROC glad_debug_glPrimitiveRestartIndex = glad_debug_impl_glPrimitiveRestartIndex;
PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
void APIENTRY glad_debug_impl_glGetInteger64v(GLenum arg0, GLint64* arg1) {
    _pre_call_callback("glGetInteger64v", (void*)glGetInteger64v, 2, arg0, arg1);
     glad_glGetInteger64v(arg0, arg1);
    _post_call_callback("glGetInteger64v", (void*)glGetInteger64v, 2, arg0, arg1);

}
PFNGLGETINTEGER64VPROC glad_debug_glGetInteger64v = glad_debug_impl_glGetInteger64v;
PFNGLSCISSORPROC glad_glScissor;
void APIENTRY glad_debug_impl_glScissor(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glScissor", (void*)glScissor, 4, arg0, arg1, arg2, arg3);
     glad_glScissor(arg0, arg1, arg2, arg3);
    _post_call_callback("glScissor", (void*)glScissor, 4, arg0, arg1, arg2, arg3);

}
PFNGLSCISSORPROC glad_debug_glScissor = glad_debug_impl_glScissor;
PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;
void APIENTRY glad_debug_impl_glTexCoordP4uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glTexCoordP4uiv", (void*)glTexCoordP4uiv, 2, arg0, arg1);
     glad_glTexCoordP4uiv(arg0, arg1);
    _post_call_callback("glTexCoordP4uiv", (void*)glTexCoordP4uiv, 2, arg0, arg1);

}
PFNGLTEXCOORDP4UIVPROC glad_debug_glTexCoordP4uiv = glad_debug_impl_glTexCoordP4uiv;
PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
void APIENTRY glad_debug_impl_glGetBooleanv(GLenum arg0, GLboolean* arg1) {
    _pre_call_callback("glGetBooleanv", (void*)glGetBooleanv, 2, arg0, arg1);
     glad_glGetBooleanv(arg0, arg1);
    _post_call_callback("glGetBooleanv", (void*)glGetBooleanv, 2, arg0, arg1);

}
PFNGLGETBOOLEANVPROC glad_debug_glGetBooleanv = glad_debug_impl_glGetBooleanv;
PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;
void APIENTRY glad_debug_impl_glVertexP2uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexP2uiv", (void*)glVertexP2uiv, 2, arg0, arg1);
     glad_glVertexP2uiv(arg0, arg1);
    _post_call_callback("glVertexP2uiv", (void*)glVertexP2uiv, 2, arg0, arg1);

}
PFNGLVERTEXP2UIVPROC glad_debug_glVertexP2uiv = glad_debug_impl_glVertexP2uiv;
PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
void APIENTRY glad_debug_impl_glUniform3uiv(GLint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glUniform3uiv", (void*)glUniform3uiv, 3, arg0, arg1, arg2);
     glad_glUniform3uiv(arg0, arg1, arg2);
    _post_call_callback("glUniform3uiv", (void*)glUniform3uiv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3UIVPROC glad_debug_glUniform3uiv = glad_debug_impl_glUniform3uiv;
PFNGLCLEARCOLORPROC glad_glClearColor;
void APIENTRY glad_debug_impl_glClearColor(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glClearColor", (void*)glClearColor, 4, arg0, arg1, arg2, arg3);
     glad_glClearColor(arg0, arg1, arg2, arg3);
    _post_call_callback("glClearColor", (void*)glClearColor, 4, arg0, arg1, arg2, arg3);

}
PFNGLCLEARCOLORPROC glad_debug_glClearColor = glad_debug_impl_glClearColor;
PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
void APIENTRY glad_debug_impl_glVertexAttrib4Niv(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttrib4Niv", (void*)glVertexAttrib4Niv, 2, arg0, arg1);
     glad_glVertexAttrib4Niv(arg0, arg1);
    _post_call_callback("glVertexAttrib4Niv", (void*)glVertexAttrib4Niv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NIVPROC glad_debug_glVertexAttrib4Niv = glad_debug_impl_glVertexAttrib4Niv;
PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
void APIENTRY glad_debug_impl_glClearBufferiv(GLenum arg0, GLint arg1, const GLint* arg2) {
    _pre_call_callback("glClearBufferiv", (void*)glClearBufferiv, 3, arg0, arg1, arg2);
     glad_glClearBufferiv(arg0, arg1, arg2);
    _post_call_callback("glClearBufferiv", (void*)glClearBufferiv, 3, arg0, arg1, arg2);

}
PFNGLCLEARBUFFERIVPROC glad_debug_glClearBufferiv = glad_debug_impl_glClearBufferiv;
PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
void APIENTRY glad_debug_impl_glGetBufferParameteri64v(GLenum arg0, GLenum arg1, GLint64* arg2) {
    _pre_call_callback("glGetBufferParameteri64v", (void*)glGetBufferParameteri64v, 3, arg0, arg1, arg2);
     glad_glGetBufferParameteri64v(arg0, arg1, arg2);
    _post_call_callback("glGetBufferParameteri64v", (void*)glGetBufferParameteri64v, 3, arg0, arg1, arg2);

}
PFNGLGETBUFFERPARAMETERI64VPROC glad_debug_glGetBufferParameteri64v = glad_debug_impl_glGetBufferParameteri64v;
PFNGLCOLORP4UIVPROC glad_glColorP4uiv;
void APIENTRY glad_debug_impl_glColorP4uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glColorP4uiv", (void*)glColorP4uiv, 2, arg0, arg1);
     glad_glColorP4uiv(arg0, arg1);
    _post_call_callback("glColorP4uiv", (void*)glColorP4uiv, 2, arg0, arg1);

}
PFNGLCOLORP4UIVPROC glad_debug_glColorP4uiv = glad_debug_impl_glColorP4uiv;
PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
void APIENTRY glad_debug_impl_glVertexAttribI2uiv(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttribI2uiv", (void*)glVertexAttribI2uiv, 2, arg0, arg1);
     glad_glVertexAttribI2uiv(arg0, arg1);
    _post_call_callback("glVertexAttribI2uiv", (void*)glVertexAttribI2uiv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI2UIVPROC glad_debug_glVertexAttribI2uiv = glad_debug_impl_glVertexAttribI2uiv;
PFNGLUNIFORM3UIPROC glad_glUniform3ui;
void APIENTRY glad_debug_impl_glUniform3ui(GLint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_callback("glUniform3ui", (void*)glUniform3ui, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3ui(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3ui", (void*)glUniform3ui, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3UIPROC glad_debug_glUniform3ui = glad_debug_impl_glUniform3ui;
PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
void APIENTRY glad_debug_impl_glVertexAttribI4uiv(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttribI4uiv", (void*)glVertexAttribI4uiv, 2, arg0, arg1);
     glad_glVertexAttribI4uiv(arg0, arg1);
    _post_call_callback("glVertexAttribI4uiv", (void*)glVertexAttribI4uiv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4UIVPROC glad_debug_glVertexAttribI4uiv = glad_debug_impl_glVertexAttribI4uiv;
PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
void APIENTRY glad_debug_impl_glPointParameterfv(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glPointParameterfv", (void*)glPointParameterfv, 2, arg0, arg1);
     glad_glPointParameterfv(arg0, arg1);
    _post_call_callback("glPointParameterfv", (void*)glPointParameterfv, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERFVPROC glad_debug_glPointParameterfv = glad_debug_impl_glPointParameterfv;
PFNGLUNIFORM2FVPROC glad_glUniform2fv;
void APIENTRY glad_debug_impl_glUniform2fv(GLint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glUniform2fv", (void*)glUniform2fv, 3, arg0, arg1, arg2);
     glad_glUniform2fv(arg0, arg1, arg2);
    _post_call_callback("glUniform2fv", (void*)glUniform2fv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2FVPROC glad_debug_glUniform2fv = glad_debug_impl_glUniform2fv;
PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
void APIENTRY glad_debug_impl_glGetSamplerParameterIuiv(GLuint arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetSamplerParameterIuiv", (void*)glGetSamplerParameterIuiv, 3, arg0, arg1, arg2);
     glad_glGetSamplerParameterIuiv(arg0, arg1, arg2);
    _post_call_callback("glGetSamplerParameterIuiv", (void*)glGetSamplerParameterIuiv, 3, arg0, arg1, arg2);

}
PFNGLGETSAMPLERPARAMETERIUIVPROC glad_debug_glGetSamplerParameterIuiv = glad_debug_impl_glGetSamplerParameterIuiv;
PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
void APIENTRY glad_debug_impl_glBindBufferRange(GLenum arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_callback("glBindBufferRange", (void*)glBindBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glBindBufferRange(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glBindBufferRange", (void*)glBindBufferRange, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLBINDBUFFERRANGEPROC glad_debug_glBindBufferRange = glad_debug_impl_glBindBufferRange;
PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
void APIENTRY glad_debug_impl_glUniformMatrix2x3fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix2x3fv", (void*)glUniformMatrix2x3fv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix2x3fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix2x3fv", (void*)glUniformMatrix2x3fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX2X3FVPROC glad_debug_glUniformMatrix2x3fv = glad_debug_impl_glUniformMatrix2x3fv;
PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
void APIENTRY glad_debug_impl_glGetVertexAttribIuiv(GLuint arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetVertexAttribIuiv", (void*)glGetVertexAttribIuiv, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribIuiv(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribIuiv", (void*)glGetVertexAttribIuiv, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBIUIVPROC glad_debug_glGetVertexAttribIuiv = glad_debug_impl_glGetVertexAttribIuiv;
PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
void APIENTRY glad_debug_impl_glVertexAttrib4Nusv(GLuint arg0, const GLushort* arg1) {
    _pre_call_callback("glVertexAttrib4Nusv", (void*)glVertexAttrib4Nusv, 2, arg0, arg1);
     glad_glVertexAttrib4Nusv(arg0, arg1);
    _post_call_callback("glVertexAttrib4Nusv", (void*)glVertexAttrib4Nusv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NUSVPROC glad_debug_glVertexAttrib4Nusv = glad_debug_impl_glVertexAttrib4Nusv;
PFNGLDEPTHFUNCPROC glad_glDepthFunc;
void APIENTRY glad_debug_impl_glDepthFunc(GLenum arg0) {
    _pre_call_callback("glDepthFunc", (void*)glDepthFunc, 1, arg0);
     glad_glDepthFunc(arg0);
    _post_call_callback("glDepthFunc", (void*)glDepthFunc, 1, arg0);

}
PFNGLDEPTHFUNCPROC glad_debug_glDepthFunc = glad_debug_impl_glDepthFunc;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
void APIENTRY glad_debug_impl_glCompressedTexSubImage2D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLsizei arg7, const void* arg8) {
    _pre_call_callback("glCompressedTexSubImage2D", (void*)glCompressedTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCompressedTexSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCompressedTexSubImage2D", (void*)glCompressedTexSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_debug_glCompressedTexSubImage2D = glad_debug_impl_glCompressedTexSubImage2D;
PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
void APIENTRY glad_debug_impl_glVertexAttribI4bv(GLuint arg0, const GLbyte* arg1) {
    _pre_call_callback("glVertexAttribI4bv", (void*)glVertexAttribI4bv, 2, arg0, arg1);
     glad_glVertexAttribI4bv(arg0, arg1);
    _post_call_callback("glVertexAttribI4bv", (void*)glVertexAttribI4bv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4BVPROC glad_debug_glVertexAttribI4bv = glad_debug_impl_glVertexAttribI4bv;
PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
void APIENTRY glad_debug_impl_glGetTexParameterfv(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetTexParameterfv", (void*)glGetTexParameterfv, 3, arg0, arg1, arg2);
     glad_glGetTexParameterfv(arg0, arg1, arg2);
    _post_call_callback("glGetTexParameterfv", (void*)glGetTexParameterfv, 3, arg0, arg1, arg2);

}
PFNGLGETTEXPARAMETERFVPROC glad_debug_glGetTexParameterfv = glad_debug_impl_glGetTexParameterfv;
PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;
void APIENTRY glad_debug_impl_glMultiTexCoordP1ui(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glMultiTexCoordP1ui", (void*)glMultiTexCoordP1ui, 3, arg0, arg1, arg2);
     glad_glMultiTexCoordP1ui(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoordP1ui", (void*)glMultiTexCoordP1ui, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORDP1UIPROC glad_debug_glMultiTexCoordP1ui = glad_debug_impl_glMultiTexCoordP1ui;
PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
GLenum APIENTRY glad_debug_impl_glClientWaitSync(GLsync arg0, GLbitfield arg1, GLuint64 arg2) {
    GLenum ret;
    _pre_call_callback("glClientWaitSync", (void*)glClientWaitSync, 3, arg0, arg1, arg2);
    ret =  glad_glClientWaitSync(arg0, arg1, arg2);
    _post_call_callback("glClientWaitSync", (void*)glClientWaitSync, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLCLIENTWAITSYNCPROC glad_debug_glClientWaitSync = glad_debug_impl_glClientWaitSync;
PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
void APIENTRY glad_debug_impl_glVertexAttribI4ui(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_callback("glVertexAttribI4ui", (void*)glVertexAttribI4ui, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribI4ui(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribI4ui", (void*)glVertexAttribI4ui, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBI4UIPROC glad_debug_glVertexAttribI4ui = glad_debug_impl_glVertexAttribI4ui;
PFNGLCOLORMASKPROC glad_glColorMask;
void APIENTRY glad_debug_impl_glColorMask(GLboolean arg0, GLboolean arg1, GLboolean arg2, GLboolean arg3) {
    _pre_call_callback("glColorMask", (void*)glColorMask, 4, arg0, arg1, arg2, arg3);
     glad_glColorMask(arg0, arg1, arg2, arg3);
    _post_call_callback("glColorMask", (void*)glColorMask, 4, arg0, arg1, arg2, arg3);

}
PFNGLCOLORMASKPROC glad_debug_glColorMask = glad_debug_impl_glColorMask;
PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
void APIENTRY glad_debug_impl_glTexParameterIiv(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glTexParameterIiv", (void*)glTexParameterIiv, 3, arg0, arg1, arg2);
     glad_glTexParameterIiv(arg0, arg1, arg2);
    _post_call_callback("glTexParameterIiv", (void*)glTexParameterIiv, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERIIVPROC glad_debug_glTexParameterIiv = glad_debug_impl_glTexParameterIiv;
PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
void APIENTRY glad_debug_impl_glBlendEquation(GLenum arg0) {
    _pre_call_callback("glBlendEquation", (void*)glBlendEquation, 1, arg0);
     glad_glBlendEquation(arg0);
    _post_call_callback("glBlendEquation", (void*)glBlendEquation, 1, arg0);

}
PFNGLBLENDEQUATIONPROC glad_debug_glBlendEquation = glad_debug_impl_glBlendEquation;
PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
GLint APIENTRY glad_debug_impl_glGetUniformLocation(GLuint arg0, const GLchar* arg1) {
    GLint ret;
    _pre_call_callback("glGetUniformLocation", (void*)glGetUniformLocation, 2, arg0, arg1);
    ret =  glad_glGetUniformLocation(arg0, arg1);
    _post_call_callback("glGetUniformLocation", (void*)glGetUniformLocation, 2, arg0, arg1);
    return ret;
}
PFNGLGETUNIFORMLOCATIONPROC glad_debug_glGetUniformLocation = glad_debug_impl_glGetUniformLocation;
PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
void APIENTRY glad_debug_impl_glEndTransformFeedback() {
    _pre_call_callback("glEndTransformFeedback", (void*)glEndTransformFeedback, 0);
     glad_glEndTransformFeedback();
    _post_call_callback("glEndTransformFeedback", (void*)glEndTransformFeedback, 0);

}
PFNGLENDTRANSFORMFEEDBACKPROC glad_debug_glEndTransformFeedback = glad_debug_impl_glEndTransformFeedback;
PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
void APIENTRY glad_debug_impl_glVertexAttrib4usv(GLuint arg0, const GLushort* arg1) {
    _pre_call_callback("glVertexAttrib4usv", (void*)glVertexAttrib4usv, 2, arg0, arg1);
     glad_glVertexAttrib4usv(arg0, arg1);
    _post_call_callback("glVertexAttrib4usv", (void*)glVertexAttrib4usv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4USVPROC glad_debug_glVertexAttrib4usv = glad_debug_impl_glVertexAttrib4usv;
PFNGLUNIFORM4FVPROC glad_glUniform4fv;
void APIENTRY glad_debug_impl_glUniform4fv(GLint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glUniform4fv", (void*)glUniform4fv, 3, arg0, arg1, arg2);
     glad_glUniform4fv(arg0, arg1, arg2);
    _post_call_callback("glUniform4fv", (void*)glUniform4fv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4FVPROC glad_debug_glUniform4fv = glad_debug_impl_glUniform4fv;
PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
void APIENTRY glad_debug_impl_glBeginTransformFeedback(GLenum arg0) {
    _pre_call_callback("glBeginTransformFeedback", (void*)glBeginTransformFeedback, 1, arg0);
     glad_glBeginTransformFeedback(arg0);
    _post_call_callback("glBeginTransformFeedback", (void*)glBeginTransformFeedback, 1, arg0);

}
PFNGLBEGINTRANSFORMFEEDBACKPROC glad_debug_glBeginTransformFeedback = glad_debug_impl_glBeginTransformFeedback;
PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
void APIENTRY glad_debug_impl_glVertexAttribI1iv(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttribI1iv", (void*)glVertexAttribI1iv, 2, arg0, arg1);
     glad_glVertexAttribI1iv(arg0, arg1);
    _post_call_callback("glVertexAttribI1iv", (void*)glVertexAttribI1iv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI1IVPROC glad_debug_glVertexAttribI1iv = glad_debug_impl_glVertexAttribI1iv;
PFNGLISSAMPLERPROC glad_glIsSampler;
GLboolean APIENTRY glad_debug_impl_glIsSampler(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsSampler", (void*)glIsSampler, 1, arg0);
    ret =  glad_glIsSampler(arg0);
    _post_call_callback("glIsSampler", (void*)glIsSampler, 1, arg0);
    return ret;
}
PFNGLISSAMPLERPROC glad_debug_glIsSampler = glad_debug_impl_glIsSampler;
PFNGLVERTEXP3UIPROC glad_glVertexP3ui;
void APIENTRY glad_debug_impl_glVertexP3ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glVertexP3ui", (void*)glVertexP3ui, 2, arg0, arg1);
     glad_glVertexP3ui(arg0, arg1);
    _post_call_callback("glVertexP3ui", (void*)glVertexP3ui, 2, arg0, arg1);

}
PFNGLVERTEXP3UIPROC glad_debug_glVertexP3ui = glad_debug_impl_glVertexP3ui;
PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
void APIENTRY glad_debug_impl_glVertexAttribDivisor(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glVertexAttribDivisor", (void*)glVertexAttribDivisor, 2, arg0, arg1);
     glad_glVertexAttribDivisor(arg0, arg1);
    _post_call_callback("glVertexAttribDivisor", (void*)glVertexAttribDivisor, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBDIVISORPROC glad_debug_glVertexAttribDivisor = glad_debug_impl_glVertexAttribDivisor;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
void APIENTRY glad_debug_impl_glCompressedTexImage1D(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLint arg4, GLsizei arg5, const void* arg6) {
    _pre_call_callback("glCompressedTexImage1D", (void*)glCompressedTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCompressedTexImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCompressedTexImage1D", (void*)glCompressedTexImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_debug_glCompressedTexImage1D = glad_debug_impl_glCompressedTexImage1D;
PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
void APIENTRY glad_debug_impl_glCopyTexSubImage1D(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5) {
    _pre_call_callback("glCopyTexSubImage1D", (void*)glCopyTexSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glCopyTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glCopyTexSubImage1D", (void*)glCopyTexSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOPYTEXSUBIMAGE1DPROC glad_debug_glCopyTexSubImage1D = glad_debug_impl_glCopyTexSubImage1D;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
void APIENTRY glad_debug_impl_glDrawRangeElementsBaseVertex(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, GLenum arg4, const void* arg5, GLint arg6) {
    _pre_call_callback("glDrawRangeElementsBaseVertex", (void*)glDrawRangeElementsBaseVertex, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glDrawRangeElementsBaseVertex(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glDrawRangeElementsBaseVertex", (void*)glDrawRangeElementsBaseVertex, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_debug_glDrawRangeElementsBaseVertex = glad_debug_impl_glDrawRangeElementsBaseVertex;
PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
GLenum APIENTRY glad_debug_impl_glCheckFramebufferStatus(GLenum arg0) {
    GLenum ret;
    _pre_call_callback("glCheckFramebufferStatus", (void*)glCheckFramebufferStatus, 1, arg0);
    ret =  glad_glCheckFramebufferStatus(arg0);
    _post_call_callback("glCheckFramebufferStatus", (void*)glCheckFramebufferStatus, 1, arg0);
    return ret;
}
PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_debug_glCheckFramebufferStatus = glad_debug_impl_glCheckFramebufferStatus;
PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
void APIENTRY glad_debug_impl_glEndConditionalRender() {
    _pre_call_callback("glEndConditionalRender", (void*)glEndConditionalRender, 0);
     glad_glEndConditionalRender();
    _post_call_callback("glEndConditionalRender", (void*)glEndConditionalRender, 0);

}
PFNGLENDCONDITIONALRENDERPROC glad_debug_glEndConditionalRender = glad_debug_impl_glEndConditionalRender;
PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;
void APIENTRY glad_debug_impl_glVertexP3uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexP3uiv", (void*)glVertexP3uiv, 2, arg0, arg1);
     glad_glVertexP3uiv(arg0, arg1);
    _post_call_callback("glVertexP3uiv", (void*)glVertexP3uiv, 2, arg0, arg1);

}
PFNGLVERTEXP3UIVPROC glad_debug_glVertexP3uiv = glad_debug_impl_glVertexP3uiv;
PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
void APIENTRY glad_debug_impl_glBindAttribLocation(GLuint arg0, GLuint arg1, const GLchar* arg2) {
    _pre_call_callback("glBindAttribLocation", (void*)glBindAttribLocation, 3, arg0, arg1, arg2);
     glad_glBindAttribLocation(arg0, arg1, arg2);
    _post_call_callback("glBindAttribLocation", (void*)glBindAttribLocation, 3, arg0, arg1, arg2);

}
PFNGLBINDATTRIBLOCATIONPROC glad_debug_glBindAttribLocation = glad_debug_impl_glBindAttribLocation;
PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
void APIENTRY glad_debug_impl_glUniformMatrix4x2fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix4x2fv", (void*)glUniformMatrix4x2fv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix4x2fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix4x2fv", (void*)glUniformMatrix4x2fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX4X2FVPROC glad_debug_glUniformMatrix4x2fv = glad_debug_impl_glUniformMatrix4x2fv;
PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
void APIENTRY glad_debug_impl_glVertexAttrib1dv(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib1dv", (void*)glVertexAttrib1dv, 2, arg0, arg1);
     glad_glVertexAttrib1dv(arg0, arg1);
    _post_call_callback("glVertexAttrib1dv", (void*)glVertexAttrib1dv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1DVPROC glad_debug_glVertexAttrib1dv = glad_debug_impl_glVertexAttrib1dv;
PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
void APIENTRY glad_debug_impl_glDrawRangeElements(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glDrawRangeElements", (void*)glDrawRangeElements, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDrawRangeElements(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDrawRangeElements", (void*)glDrawRangeElements, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDRAWRANGEELEMENTSPROC glad_debug_glDrawRangeElements = glad_debug_impl_glDrawRangeElements;
PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
void APIENTRY glad_debug_impl_glGetQueryObjectuiv(GLuint arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetQueryObjectuiv", (void*)glGetQueryObjectuiv, 3, arg0, arg1, arg2);
     glad_glGetQueryObjectuiv(arg0, arg1, arg2);
    _post_call_callback("glGetQueryObjectuiv", (void*)glGetQueryObjectuiv, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYOBJECTUIVPROC glad_debug_glGetQueryObjectuiv = glad_debug_impl_glGetQueryObjectuiv;
PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
void APIENTRY glad_debug_impl_glBindBufferBase(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glBindBufferBase", (void*)glBindBufferBase, 3, arg0, arg1, arg2);
     glad_glBindBufferBase(arg0, arg1, arg2);
    _post_call_callback("glBindBufferBase", (void*)glBindBufferBase, 3, arg0, arg1, arg2);

}
PFNGLBINDBUFFERBASEPROC glad_debug_glBindBufferBase = glad_debug_impl_glBindBufferBase;
PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
void APIENTRY glad_debug_impl_glBufferSubData(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, const void* arg3) {
    _pre_call_callback("glBufferSubData", (void*)glBufferSubData, 4, arg0, arg1, arg2, arg3);
     glad_glBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_callback("glBufferSubData", (void*)glBufferSubData, 4, arg0, arg1, arg2, arg3);

}
PFNGLBUFFERSUBDATAPROC glad_debug_glBufferSubData = glad_debug_impl_glBufferSubData;
PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
void APIENTRY glad_debug_impl_glVertexAttrib4iv(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttrib4iv", (void*)glVertexAttrib4iv, 2, arg0, arg1);
     glad_glVertexAttrib4iv(arg0, arg1);
    _post_call_callback("glVertexAttrib4iv", (void*)glVertexAttrib4iv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4IVPROC glad_debug_glVertexAttrib4iv = glad_debug_impl_glVertexAttrib4iv;
PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
void* APIENTRY glad_debug_impl_glMapBufferRange(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, GLbitfield arg3) {
    void* ret;
    _pre_call_callback("glMapBufferRange", (void*)glMapBufferRange, 4, arg0, arg1, arg2, arg3);
    ret =  glad_glMapBufferRange(arg0, arg1, arg2, arg3);
    _post_call_callback("glMapBufferRange", (void*)glMapBufferRange, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLMAPBUFFERRANGEPROC glad_debug_glMapBufferRange = glad_debug_impl_glMapBufferRange;
PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
void APIENTRY glad_debug_impl_glFramebufferTexture(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3) {
    _pre_call_callback("glFramebufferTexture", (void*)glFramebufferTexture, 4, arg0, arg1, arg2, arg3);
     glad_glFramebufferTexture(arg0, arg1, arg2, arg3);
    _post_call_callback("glFramebufferTexture", (void*)glFramebufferTexture, 4, arg0, arg1, arg2, arg3);

}
PFNGLFRAMEBUFFERTEXTUREPROC glad_debug_glFramebufferTexture = glad_debug_impl_glFramebufferTexture;
PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
void APIENTRY glad_debug_impl_glMultiDrawArrays(GLenum arg0, const GLint* arg1, const GLsizei* arg2, GLsizei arg3) {
    _pre_call_callback("glMultiDrawArrays", (void*)glMultiDrawArrays, 4, arg0, arg1, arg2, arg3);
     glad_glMultiDrawArrays(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiDrawArrays", (void*)glMultiDrawArrays, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTIDRAWARRAYSPROC glad_debug_glMultiDrawArrays = glad_debug_impl_glMultiDrawArrays;
PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;
void APIENTRY glad_debug_impl_glVertexP4uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexP4uiv", (void*)glVertexP4uiv, 2, arg0, arg1);
     glad_glVertexP4uiv(arg0, arg1);
    _post_call_callback("glVertexP4uiv", (void*)glVertexP4uiv, 2, arg0, arg1);

}
PFNGLVERTEXP4UIVPROC glad_debug_glVertexP4uiv = glad_debug_impl_glVertexP4uiv;
PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
void APIENTRY glad_debug_impl_glVertexAttribI2iv(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttribI2iv", (void*)glVertexAttribI2iv, 2, arg0, arg1);
     glad_glVertexAttribI2iv(arg0, arg1);
    _post_call_callback("glVertexAttribI2iv", (void*)glVertexAttribI2iv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI2IVPROC glad_debug_glVertexAttribI2iv = glad_debug_impl_glVertexAttribI2iv;
PFNGLDISABLEIPROC glad_glDisablei;
void APIENTRY glad_debug_impl_glDisablei(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glDisablei", (void*)glDisablei, 2, arg0, arg1);
     glad_glDisablei(arg0, arg1);
    _post_call_callback("glDisablei", (void*)glDisablei, 2, arg0, arg1);

}
PFNGLDISABLEIPROC glad_debug_glDisablei = glad_debug_impl_glDisablei;
PFNGLSHADERSOURCEPROC glad_glShaderSource;
void APIENTRY glad_debug_impl_glShaderSource(GLuint arg0, GLsizei arg1, const GLchar** arg2, const GLint* arg3) {
    _pre_call_callback("glShaderSource", (void*)glShaderSource, 4, arg0, arg1, arg2, arg3);
     glad_glShaderSource(arg0, arg1, arg2, arg3);
    _post_call_callback("glShaderSource", (void*)glShaderSource, 4, arg0, arg1, arg2, arg3);

}
PFNGLSHADERSOURCEPROC glad_debug_glShaderSource = glad_debug_impl_glShaderSource;
PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
void APIENTRY glad_debug_impl_glDeleteRenderbuffers(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteRenderbuffers", (void*)glDeleteRenderbuffers, 2, arg0, arg1);
     glad_glDeleteRenderbuffers(arg0, arg1);
    _post_call_callback("glDeleteRenderbuffers", (void*)glDeleteRenderbuffers, 2, arg0, arg1);

}
PFNGLDELETERENDERBUFFERSPROC glad_debug_glDeleteRenderbuffers = glad_debug_impl_glDeleteRenderbuffers;
PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
void APIENTRY glad_debug_impl_glVertexAttribI3uiv(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttribI3uiv", (void*)glVertexAttribI3uiv, 2, arg0, arg1);
     glad_glVertexAttribI3uiv(arg0, arg1);
    _post_call_callback("glVertexAttribI3uiv", (void*)glVertexAttribI3uiv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI3UIVPROC glad_debug_glVertexAttribI3uiv = glad_debug_impl_glVertexAttribI3uiv;
PFNGLGETSYNCIVPROC glad_glGetSynciv;
void APIENTRY glad_debug_impl_glGetSynciv(GLsync arg0, GLenum arg1, GLsizei arg2, GLsizei* arg3, GLint* arg4) {
    _pre_call_callback("glGetSynciv", (void*)glGetSynciv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetSynciv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetSynciv", (void*)glGetSynciv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETSYNCIVPROC glad_debug_glGetSynciv = glad_debug_impl_glGetSynciv;
PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;
void APIENTRY glad_debug_impl_glTexCoordP2uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glTexCoordP2uiv", (void*)glTexCoordP2uiv, 2, arg0, arg1);
     glad_glTexCoordP2uiv(arg0, arg1);
    _post_call_callback("glTexCoordP2uiv", (void*)glTexCoordP2uiv, 2, arg0, arg1);

}
PFNGLTEXCOORDP2UIVPROC glad_debug_glTexCoordP2uiv = glad_debug_impl_glTexCoordP2uiv;
PFNGLBEGINQUERYPROC glad_glBeginQuery;
void APIENTRY glad_debug_impl_glBeginQuery(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBeginQuery", (void*)glBeginQuery, 2, arg0, arg1);
     glad_glBeginQuery(arg0, arg1);
    _post_call_callback("glBeginQuery", (void*)glBeginQuery, 2, arg0, arg1);

}
PFNGLBEGINQUERYPROC glad_debug_glBeginQuery = glad_debug_impl_glBeginQuery;
PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
void APIENTRY glad_debug_impl_glUniformMatrix4fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix4fv", (void*)glUniformMatrix4fv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix4fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix4fv", (void*)glUniformMatrix4fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX4FVPROC glad_debug_glUniformMatrix4fv = glad_debug_impl_glUniformMatrix4fv;
PFNGLBINDBUFFERPROC glad_glBindBuffer;
void APIENTRY glad_debug_impl_glBindBuffer(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindBuffer", (void*)glBindBuffer, 2, arg0, arg1);
     glad_glBindBuffer(arg0, arg1);
    _post_call_callback("glBindBuffer", (void*)glBindBuffer, 2, arg0, arg1);

}
PFNGLBINDBUFFERPROC glad_debug_glBindBuffer = glad_debug_impl_glBindBuffer;
PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
void APIENTRY glad_debug_impl_glUniformMatrix2fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix2fv", (void*)glUniformMatrix2fv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix2fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix2fv", (void*)glUniformMatrix2fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX2FVPROC glad_debug_glUniformMatrix2fv = glad_debug_impl_glUniformMatrix2fv;
PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
void APIENTRY glad_debug_impl_glUniformMatrix2x4fv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix2x4fv", (void*)glUniformMatrix2x4fv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix2x4fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix2x4fv", (void*)glUniformMatrix2x4fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX2X4FVPROC glad_debug_glUniformMatrix2x4fv = glad_debug_impl_glUniformMatrix2x4fv;
PFNGLBUFFERDATAPROC glad_glBufferData;
void APIENTRY glad_debug_impl_glBufferData(GLenum arg0, GLsizeiptr arg1, const void* arg2, GLenum arg3) {
    _pre_call_callback("glBufferData", (void*)glBufferData, 4, arg0, arg1, arg2, arg3);
     glad_glBufferData(arg0, arg1, arg2, arg3);
    _post_call_callback("glBufferData", (void*)glBufferData, 4, arg0, arg1, arg2, arg3);

}
PFNGLBUFFERDATAPROC glad_debug_glBufferData = glad_debug_impl_glBufferData;
PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
void APIENTRY glad_debug_impl_glGetTexParameterIiv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetTexParameterIiv", (void*)glGetTexParameterIiv, 3, arg0, arg1, arg2);
     glad_glGetTexParameterIiv(arg0, arg1, arg2);
    _post_call_callback("glGetTexParameterIiv", (void*)glGetTexParameterIiv, 3, arg0, arg1, arg2);

}
PFNGLGETTEXPARAMETERIIVPROC glad_debug_glGetTexParameterIiv = glad_debug_impl_glGetTexParameterIiv;
PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;
void APIENTRY glad_debug_impl_glTexCoordP1ui(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glTexCoordP1ui", (void*)glTexCoordP1ui, 2, arg0, arg1);
     glad_glTexCoordP1ui(arg0, arg1);
    _post_call_callback("glTexCoordP1ui", (void*)glTexCoordP1ui, 2, arg0, arg1);

}
PFNGLTEXCOORDP1UIPROC glad_debug_glTexCoordP1ui = glad_debug_impl_glTexCoordP1ui;
PFNGLGETERRORPROC glad_glGetError;
GLenum APIENTRY glad_debug_impl_glGetError() {
    GLenum ret;
    _pre_call_callback("glGetError", (void*)glGetError, 0);
    ret =  glad_glGetError();
    _post_call_callback("glGetError", (void*)glGetError, 0);
    return ret;
}
PFNGLGETERRORPROC glad_debug_glGetError = glad_debug_impl_glGetError;
PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
void APIENTRY glad_debug_impl_glVertexAttribP2ui(GLuint arg0, GLenum arg1, GLboolean arg2, GLuint arg3) {
    _pre_call_callback("glVertexAttribP2ui", (void*)glVertexAttribP2ui, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribP2ui(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribP2ui", (void*)glVertexAttribP2ui, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBP2UIPROC glad_debug_glVertexAttribP2ui = glad_debug_impl_glVertexAttribP2ui;
PFNGLGETFLOATVPROC glad_glGetFloatv;
void APIENTRY glad_debug_impl_glGetFloatv(GLenum arg0, GLfloat* arg1) {
    _pre_call_callback("glGetFloatv", (void*)glGetFloatv, 2, arg0, arg1);
     glad_glGetFloatv(arg0, arg1);
    _post_call_callback("glGetFloatv", (void*)glGetFloatv, 2, arg0, arg1);

}
PFNGLGETFLOATVPROC glad_debug_glGetFloatv = glad_debug_impl_glGetFloatv;
PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
void APIENTRY glad_debug_impl_glTexSubImage1D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void* arg6) {
    _pre_call_callback("glTexSubImage1D", (void*)glTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTexSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTexSubImage1D", (void*)glTexSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXSUBIMAGE1DPROC glad_debug_glTexSubImage1D = glad_debug_impl_glTexSubImage1D;
PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
void APIENTRY glad_debug_impl_glVertexAttrib2fv(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib2fv", (void*)glVertexAttrib2fv, 2, arg0, arg1);
     glad_glVertexAttrib2fv(arg0, arg1);
    _post_call_callback("glVertexAttrib2fv", (void*)glVertexAttrib2fv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2FVPROC glad_debug_glVertexAttrib2fv = glad_debug_impl_glVertexAttrib2fv;
PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
void APIENTRY glad_debug_impl_glGetTexLevelParameterfv(GLenum arg0, GLint arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetTexLevelParameterfv", (void*)glGetTexLevelParameterfv, 4, arg0, arg1, arg2, arg3);
     glad_glGetTexLevelParameterfv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTexLevelParameterfv", (void*)glGetTexLevelParameterfv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTEXLEVELPARAMETERFVPROC glad_debug_glGetTexLevelParameterfv = glad_debug_impl_glGetTexLevelParameterfv;
PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
void APIENTRY glad_debug_impl_glVertexAttribI1i(GLuint arg0, GLint arg1) {
    _pre_call_callback("glVertexAttribI1i", (void*)glVertexAttribI1i, 2, arg0, arg1);
     glad_glVertexAttribI1i(arg0, arg1);
    _post_call_callback("glVertexAttribI1i", (void*)glVertexAttribI1i, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI1IPROC glad_debug_glVertexAttribI1i = glad_debug_impl_glVertexAttribI1i;
PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
void APIENTRY glad_debug_impl_glVertexAttribP3uiv(GLuint arg0, GLenum arg1, GLboolean arg2, const GLuint* arg3) {
    _pre_call_callback("glVertexAttribP3uiv", (void*)glVertexAttribP3uiv, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribP3uiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribP3uiv", (void*)glVertexAttribP3uiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBP3UIVPROC glad_debug_glVertexAttribP3uiv = glad_debug_impl_glVertexAttribP3uiv;
PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;
void APIENTRY glad_debug_impl_glSecondaryColorP3uiv(GLenum arg0, const GLuint* arg1) {
    _pre_call_callback("glSecondaryColorP3uiv", (void*)glSecondaryColorP3uiv, 2, arg0, arg1);
     glad_glSecondaryColorP3uiv(arg0, arg1);
    _post_call_callback("glSecondaryColorP3uiv", (void*)glSecondaryColorP3uiv, 2, arg0, arg1);

}
PFNGLSECONDARYCOLORP3UIVPROC glad_debug_glSecondaryColorP3uiv = glad_debug_impl_glSecondaryColorP3uiv;
PFNGLGETINTEGERVPROC glad_glGetIntegerv;
void APIENTRY glad_debug_impl_glGetIntegerv(GLenum arg0, GLint* arg1) {
    _pre_call_callback("glGetIntegerv", (void*)glGetIntegerv, 2, arg0, arg1);
     glad_glGetIntegerv(arg0, arg1);
    _post_call_callback("glGetIntegerv", (void*)glGetIntegerv, 2, arg0, arg1);

}
PFNGLGETINTEGERVPROC glad_debug_glGetIntegerv = glad_debug_impl_glGetIntegerv;
PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
void APIENTRY glad_debug_impl_glGetBufferPointerv(GLenum arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetBufferPointerv", (void*)glGetBufferPointerv, 3, arg0, arg1, arg2);
     glad_glGetBufferPointerv(arg0, arg1, arg2);
    _post_call_callback("glGetBufferPointerv", (void*)glGetBufferPointerv, 3, arg0, arg1, arg2);

}
PFNGLGETBUFFERPOINTERVPROC glad_debug_glGetBufferPointerv = glad_debug_impl_glGetBufferPointerv;
PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
void APIENTRY glad_debug_impl_glFramebufferTexture3D(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4, GLint arg5) {
    _pre_call_callback("glFramebufferTexture3D", (void*)glFramebufferTexture3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glFramebufferTexture3D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glFramebufferTexture3D", (void*)glFramebufferTexture3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLFRAMEBUFFERTEXTURE3DPROC glad_debug_glFramebufferTexture3D = glad_debug_impl_glFramebufferTexture3D;
PFNGLISQUERYPROC glad_glIsQuery;
GLboolean APIENTRY glad_debug_impl_glIsQuery(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsQuery", (void*)glIsQuery, 1, arg0);
    ret =  glad_glIsQuery(arg0);
    _post_call_callback("glIsQuery", (void*)glIsQuery, 1, arg0);
    return ret;
}
PFNGLISQUERYPROC glad_debug_glIsQuery = glad_debug_impl_glIsQuery;
PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
void APIENTRY glad_debug_impl_glVertexAttrib4sv(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib4sv", (void*)glVertexAttrib4sv, 2, arg0, arg1);
     glad_glVertexAttrib4sv(arg0, arg1);
    _post_call_callback("glVertexAttrib4sv", (void*)glVertexAttrib4sv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4SVPROC glad_debug_glVertexAttrib4sv = glad_debug_impl_glVertexAttrib4sv;
PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
void APIENTRY glad_debug_impl_glTexImage2D(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLsizei arg4, GLint arg5, GLenum arg6, GLenum arg7, const void* arg8) {
    _pre_call_callback("glTexImage2D", (void*)glTexImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glTexImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glTexImage2D", (void*)glTexImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLTEXIMAGE2DPROC glad_debug_glTexImage2D = glad_debug_impl_glTexImage2D;
PFNGLSTENCILMASKPROC glad_glStencilMask;
void APIENTRY glad_debug_impl_glStencilMask(GLuint arg0) {
    _pre_call_callback("glStencilMask", (void*)glStencilMask, 1, arg0);
     glad_glStencilMask(arg0);
    _post_call_callback("glStencilMask", (void*)glStencilMask, 1, arg0);

}
PFNGLSTENCILMASKPROC glad_debug_glStencilMask = glad_debug_impl_glStencilMask;
PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
void APIENTRY glad_debug_impl_glSamplerParameterfv(GLuint arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glSamplerParameterfv", (void*)glSamplerParameterfv, 3, arg0, arg1, arg2);
     glad_glSamplerParameterfv(arg0, arg1, arg2);
    _post_call_callback("glSamplerParameterfv", (void*)glSamplerParameterfv, 3, arg0, arg1, arg2);

}
PFNGLSAMPLERPARAMETERFVPROC glad_debug_glSamplerParameterfv = glad_debug_impl_glSamplerParameterfv;
PFNGLISTEXTUREPROC glad_glIsTexture;
GLboolean APIENTRY glad_debug_impl_glIsTexture(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsTexture", (void*)glIsTexture, 1, arg0);
    ret =  glad_glIsTexture(arg0);
    _post_call_callback("glIsTexture", (void*)glIsTexture, 1, arg0);
    return ret;
}
PFNGLISTEXTUREPROC glad_debug_glIsTexture = glad_debug_impl_glIsTexture;
PFNGLUNIFORM1FVPROC glad_glUniform1fv;
void APIENTRY glad_debug_impl_glUniform1fv(GLint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glUniform1fv", (void*)glUniform1fv, 3, arg0, arg1, arg2);
     glad_glUniform1fv(arg0, arg1, arg2);
    _post_call_callback("glUniform1fv", (void*)glUniform1fv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1FVPROC glad_debug_glUniform1fv = glad_debug_impl_glUniform1fv;
PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
void APIENTRY glad_debug_impl_glVertexAttrib4Nubv(GLuint arg0, const GLubyte* arg1) {
    _pre_call_callback("glVertexAttrib4Nubv", (void*)glVertexAttrib4Nubv, 2, arg0, arg1);
     glad_glVertexAttrib4Nubv(arg0, arg1);
    _post_call_callback("glVertexAttrib4Nubv", (void*)glVertexAttrib4Nubv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NUBVPROC glad_debug_glVertexAttrib4Nubv = glad_debug_impl_glVertexAttrib4Nubv;
PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
void APIENTRY glad_debug_impl_glTexParameterfv(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glTexParameterfv", (void*)glTexParameterfv, 3, arg0, arg1, arg2);
     glad_glTexParameterfv(arg0, arg1, arg2);
    _post_call_callback("glTexParameterfv", (void*)glTexParameterfv, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERFVPROC glad_debug_glTexParameterfv = glad_debug_impl_glTexParameterfv;
PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
void APIENTRY glad_debug_impl_glGetSamplerParameteriv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetSamplerParameteriv", (void*)glGetSamplerParameteriv, 3, arg0, arg1, arg2);
     glad_glGetSamplerParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetSamplerParameteriv", (void*)glGetSamplerParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETSAMPLERPARAMETERIVPROC glad_debug_glGetSamplerParameteriv = glad_debug_impl_glGetSamplerParameteriv;
PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
void APIENTRY glad_debug_impl_glCopyBufferSubData(GLenum arg0, GLenum arg1, GLintptr arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_callback("glCopyBufferSubData", (void*)glCopyBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glCopyBufferSubData(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glCopyBufferSubData", (void*)glCopyBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOPYBUFFERSUBDATAPROC glad_debug_glCopyBufferSubData = glad_debug_impl_glCopyBufferSubData;
PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
void APIENTRY glad_debug_impl_glVertexAttribI1uiv(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttribI1uiv", (void*)glVertexAttribI1uiv, 2, arg0, arg1);
     glad_glVertexAttribI1uiv(arg0, arg1);
    _post_call_callback("glVertexAttribI1uiv", (void*)glVertexAttribI1uiv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI1UIVPROC glad_debug_glVertexAttribI1uiv = glad_debug_impl_glVertexAttribI1uiv;
PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
void APIENTRY glad_debug_impl_glVertexAttrib2d(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glVertexAttrib2d", (void*)glVertexAttrib2d, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2d(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2d", (void*)glVertexAttrib2d, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2DPROC glad_debug_glVertexAttrib2d = glad_debug_impl_glVertexAttrib2d;
PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
void APIENTRY glad_debug_impl_glVertexAttrib2f(GLuint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glVertexAttrib2f", (void*)glVertexAttrib2f, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2f(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2f", (void*)glVertexAttrib2f, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2FPROC glad_debug_glVertexAttrib2f = glad_debug_impl_glVertexAttrib2f;
PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
void APIENTRY glad_debug_impl_glVertexAttrib3dv(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib3dv", (void*)glVertexAttrib3dv, 2, arg0, arg1);
     glad_glVertexAttrib3dv(arg0, arg1);
    _post_call_callback("glVertexAttrib3dv", (void*)glVertexAttrib3dv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3DVPROC glad_debug_glVertexAttrib3dv = glad_debug_impl_glVertexAttrib3dv;
PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
void APIENTRY glad_debug_impl_glGetQueryObjectui64v(GLuint arg0, GLenum arg1, GLuint64* arg2) {
    _pre_call_callback("glGetQueryObjectui64v", (void*)glGetQueryObjectui64v, 3, arg0, arg1, arg2);
     glad_glGetQueryObjectui64v(arg0, arg1, arg2);
    _post_call_callback("glGetQueryObjectui64v", (void*)glGetQueryObjectui64v, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYOBJECTUI64VPROC glad_debug_glGetQueryObjectui64v = glad_debug_impl_glGetQueryObjectui64v;
PFNGLDEPTHMASKPROC glad_glDepthMask;
void APIENTRY glad_debug_impl_glDepthMask(GLboolean arg0) {
    _pre_call_callback("glDepthMask", (void*)glDepthMask, 1, arg0);
     glad_glDepthMask(arg0);
    _post_call_callback("glDepthMask", (void*)glDepthMask, 1, arg0);

}
PFNGLDEPTHMASKPROC glad_debug_glDepthMask = glad_debug_impl_glDepthMask;
PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
void APIENTRY glad_debug_impl_glVertexAttrib2s(GLuint arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glVertexAttrib2s", (void*)glVertexAttrib2s, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2s(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2s", (void*)glVertexAttrib2s, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2SPROC glad_debug_glVertexAttrib2s = glad_debug_impl_glVertexAttrib2s;
PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
void APIENTRY glad_debug_impl_glTexImage3DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_callback("glTexImage3DMultisample", (void*)glTexImage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTexImage3DMultisample(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTexImage3DMultisample", (void*)glTexImage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_debug_glTexImage3DMultisample = glad_debug_impl_glTexImage3DMultisample;
PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
GLuint APIENTRY glad_debug_impl_glGetUniformBlockIndex(GLuint arg0, const GLchar* arg1) {
    GLuint ret;
    _pre_call_callback("glGetUniformBlockIndex", (void*)glGetUniformBlockIndex, 2, arg0, arg1);
    ret =  glad_glGetUniformBlockIndex(arg0, arg1);
    _post_call_callback("glGetUniformBlockIndex", (void*)glGetUniformBlockIndex, 2, arg0, arg1);
    return ret;
}
PFNGLGETUNIFORMBLOCKINDEXPROC glad_debug_glGetUniformBlockIndex = glad_debug_impl_glGetUniformBlockIndex;
PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
void APIENTRY glad_debug_impl_glTexImage2DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLboolean arg5) {
    _pre_call_callback("glTexImage2DMultisample", (void*)glTexImage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glTexImage2DMultisample(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glTexImage2DMultisample", (void*)glTexImage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_debug_glTexImage2DMultisample = glad_debug_impl_glTexImage2DMultisample;
PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
void APIENTRY glad_debug_impl_glGetActiveUniform(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLint* arg4, GLenum* arg5, GLchar* arg6) {
    _pre_call_callback("glGetActiveUniform", (void*)glGetActiveUniform, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetActiveUniform(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetActiveUniform", (void*)glGetActiveUniform, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETACTIVEUNIFORMPROC glad_debug_glGetActiveUniform = glad_debug_impl_glGetActiveUniform;
PFNGLFRONTFACEPROC glad_glFrontFace;
void APIENTRY glad_debug_impl_glFrontFace(GLenum arg0) {
    _pre_call_callback("glFrontFace", (void*)glFrontFace, 1, arg0);
     glad_glFrontFace(arg0);
    _post_call_callback("glFrontFace", (void*)glFrontFace, 1, arg0);

}
PFNGLFRONTFACEPROC glad_debug_glFrontFace = glad_debug_impl_glFrontFace;
int GLAD_GL_SGIX_pixel_tiles;
int GLAD_GL_NV_point_sprite;
int GLAD_GL_APPLE_element_array;
int GLAD_GL_AMD_multi_draw_indirect;
int GLAD_GL_EXT_blend_subtract;
int GLAD_GL_SGIX_tag_sample_buffer;
int GLAD_GL_IBM_texture_mirrored_repeat;
int GLAD_GL_APPLE_transform_hint;
int GLAD_GL_ATI_separate_stencil;
int GLAD_GL_NV_shader_atomic_int64;
int GLAD_GL_NV_vertex_program2_option;
int GLAD_GL_EXT_texture_buffer_object;
int GLAD_GL_ARB_vertex_blend;
int GLAD_GL_OVR_multiview;
int GLAD_GL_ARB_program_interface_query;
int GLAD_GL_EXT_misc_attribute;
int GLAD_GL_NV_multisample_coverage;
int GLAD_GL_ARB_shading_language_packing;
int GLAD_GL_EXT_texture_cube_map;
int GLAD_GL_NV_viewport_array2;
int GLAD_GL_KHR_robustness;
int GLAD_GL_EXT_index_func;
int GLAD_GL_OES_compressed_paletted_texture;
int GLAD_GL_NV_depth_clamp;
int GLAD_GL_NV_shader_buffer_load;
int GLAD_GL_EXT_color_subtable;
int GLAD_GL_SUNX_constant_data;
int GLAD_GL_EXT_multi_draw_arrays;
int GLAD_GL_ARB_shader_atomic_counters;
int GLAD_GL_ARB_arrays_of_arrays;
int GLAD_GL_NV_conditional_render;
int GLAD_GL_EXT_texture_env_combine;
int GLAD_GL_AMD_depth_clamp_separate;
int GLAD_GL_SGIX_async_histogram;
int GLAD_GL_MESA_resize_buffers;
int GLAD_GL_ARB_sample_shading;
int GLAD_GL_NV_texture_env_combine4;
int GLAD_GL_ARB_texture_view;
int GLAD_GL_ARB_texture_env_combine;
int GLAD_GL_ARB_map_buffer_range;
int GLAD_GL_EXT_convolution;
int GLAD_GL_NV_compute_program5;
int GLAD_GL_EXT_paletted_texture;
int GLAD_GL_ARB_texture_buffer_object;
int GLAD_GL_SUN_triangle_list;
int GLAD_GL_SGIX_resample;
int GLAD_GL_SGIX_flush_raster;
int GLAD_GL_EXT_light_texture;
int GLAD_GL_ARB_point_sprite;
int GLAD_GL_ARB_sparse_texture2;
int GLAD_GL_ARB_half_float_pixel;
int GLAD_GL_NV_tessellation_program5;
int GLAD_GL_REND_screen_coordinates;
int GLAD_GL_EXT_shared_texture_palette;
int GLAD_GL_EXT_packed_float;
int GLAD_GL_ATI_vertex_attrib_array_object;
int GLAD_GL_SGIX_vertex_preclip;
int GLAD_GL_SGIX_texture_scale_bias;
int GLAD_GL_AMD_draw_buffers_blend;
int GLAD_GL_APPLE_texture_range;
int GLAD_GL_SGIX_framezoom;
int GLAD_GL_NV_texture_barrier;
int GLAD_GL_ARB_texture_query_levels;
int GLAD_GL_EXT_blend_logic_op;
int GLAD_GL_EXT_texture_swizzle;
int GLAD_GL_ARB_texture_rg;
int GLAD_GL_ARB_vertex_type_2_10_10_10_rev;
int GLAD_GL_ARB_fragment_shader;
int GLAD_GL_3DFX_tbuffer;
int GLAD_GL_SGIX_ycrcb;
int GLAD_GL_IBM_cull_vertex;
int GLAD_GL_EXT_separate_shader_objects;
int GLAD_GL_NV_texture_multisample;
int GLAD_GL_ARB_shader_objects;
int GLAD_GL_ARB_framebuffer_object;
int GLAD_GL_ATI_envmap_bumpmap;
int GLAD_GL_AMD_shader_explicit_vertex_parameter;
int GLAD_GL_ARB_robust_buffer_access_behavior;
int GLAD_GL_ARB_shader_stencil_export;
int GLAD_GL_AMD_sample_positions;
int GLAD_GL_ARB_enhanced_layouts;
int GLAD_GL_ARB_texture_rectangle;
int GLAD_GL_SGI_texture_color_table;
int GLAD_GL_NV_viewport_swizzle;
int GLAD_GL_ATI_map_object_buffer;
int GLAD_GL_ARB_robustness;
int GLAD_GL_NV_pixel_data_range;
int GLAD_GL_EXT_framebuffer_blit;
int GLAD_GL_ARB_gpu_shader_fp64;
int GLAD_GL_NV_command_list;
int GLAD_GL_ARB_window_pos;
int GLAD_GL_ARB_robustness_isolation;
int GLAD_GL_GREMEDY_string_marker;
int GLAD_GL_ARB_texture_compression_bptc;
int GLAD_GL_EXT_subtexture;
int GLAD_GL_EXT_pixel_transform_color_table;
int GLAD_GL_EXT_texture_compression_rgtc;
int GLAD_GL_ARB_shadow;
int GLAD_GL_SGIX_depth_pass_instrument;
int GLAD_GL_NVX_conditional_render;
int GLAD_GL_NV_evaluators;
int GLAD_GL_SGIS_texture_filter4;
int GLAD_GL_AMD_performance_monitor;
int GLAD_GL_NV_geometry_shader4;
int GLAD_GL_EXT_stencil_clear_tag;
int GLAD_GL_NV_vertex_program1_1;
int GLAD_GL_NV_present_video;
int GLAD_GL_ARB_texture_compression_rgtc;
int GLAD_GL_ARB_texture_filter_minmax;
int GLAD_GL_HP_convolution_border_modes;
int GLAD_GL_EXT_gpu_program_parameters;
int GLAD_GL_SGIX_list_priority;
int GLAD_GL_ARB_stencil_texturing;
int GLAD_GL_ARB_shader_clock;
int GLAD_GL_NV_shader_atomic_fp16_vector;
int GLAD_GL_SGIX_fog_offset;
int GLAD_GL_ARB_draw_elements_base_vertex;
int GLAD_GL_INGR_interlace_read;
int GLAD_GL_NV_transform_feedback;
int GLAD_GL_EXT_post_depth_coverage;
int GLAD_GL_ARB_debug_output;
int GLAD_GL_AMD_stencil_operation_extended;
int GLAD_GL_ARB_compatibility;
int GLAD_GL_ARB_instanced_arrays;
int GLAD_GL_EXT_polygon_offset;
int GLAD_GL_NV_vertex_array_range2;
int GLAD_GL_ARB_texture_stencil8;
int GLAD_GL_AMD_sparse_texture;
int GLAD_GL_ARB_clip_control;
int GLAD_GL_NV_fragment_coverage_to_color;
int GLAD_GL_NV_fence;
int GLAD_GL_ARB_texture_buffer_range;
int GLAD_GL_SUN_mesh_array;
int GLAD_GL_ARB_vertex_attrib_binding;
int GLAD_GL_EXT_texture_compression_s3tc;
int GLAD_GL_ARB_cl_event;
int GLAD_GL_ARB_derivative_control;
int GLAD_GL_NV_packed_depth_stencil;
int GLAD_GL_OES_single_precision;
int GLAD_GL_NV_primitive_restart;
int GLAD_GL_ARB_fragment_shader_interlock;
int GLAD_GL_EXT_texture_object;
int GLAD_GL_AMD_name_gen_delete;
int GLAD_GL_NV_texture_compression_vtc;
int GLAD_GL_NV_sample_mask_override_coverage;
int GLAD_GL_NV_texture_shader3;
int GLAD_GL_NV_texture_shader2;
int GLAD_GL_EXT_texture;
int GLAD_GL_ARB_buffer_storage;
int GLAD_GL_AMD_shader_atomic_counter_ops;
int GLAD_GL_APPLE_vertex_program_evaluators;
int GLAD_GL_ARB_multi_bind;
int GLAD_GL_ARB_explicit_uniform_location;
int GLAD_GL_ARB_depth_buffer_float;
int GLAD_GL_NV_path_rendering_shared_edge;
int GLAD_GL_SGIX_shadow_ambient;
int GLAD_GL_ARB_texture_cube_map;
int GLAD_GL_AMD_vertex_shader_viewport_index;
int GLAD_GL_EXT_shader_integer_mix;
int GLAD_GL_NV_vertex_buffer_unified_memory;
int GLAD_GL_EXT_fog_coord;
int GLAD_GL_ARB_clear_texture;
int GLAD_GL_ATI_texture_env_combine3;
int GLAD_GL_ARB_map_buffer_alignment;
int GLAD_GL_NV_blend_equation_advanced;
int GLAD_GL_SGIS_sharpen_texture;
int GLAD_GL_KHR_robust_buffer_access_behavior;
int GLAD_GL_ARB_pipeline_statistics_query;
int GLAD_GL_ARB_vertex_program;
int GLAD_GL_ARB_texture_rgb10_a2ui;
int GLAD_GL_OML_interlace;
int GLAD_GL_ATI_pixel_format_float;
int GLAD_GL_NV_clip_space_w_scaling;
int GLAD_GL_ARB_vertex_buffer_object;
int GLAD_GL_EXT_shadow_funcs;
int GLAD_GL_ATI_text_fragment_shader;
int GLAD_GL_NV_vertex_array_range;
int GLAD_GL_SGIX_fragment_lighting;
int GLAD_GL_NV_texture_expand_normal;
int GLAD_GL_NV_framebuffer_multisample_coverage;
int GLAD_GL_ARB_framebuffer_no_attachments;
int GLAD_GL_EXT_timer_query;
int GLAD_GL_EXT_vertex_array_bgra;
int GLAD_GL_NV_bindless_texture;
int GLAD_GL_KHR_debug;
int GLAD_GL_SGIS_texture_border_clamp;
int GLAD_GL_OML_subsample;
int GLAD_GL_SGIX_clipmap;
int GLAD_GL_EXT_geometry_shader4;
int GLAD_GL_ARB_shader_texture_image_samples;
int GLAD_GL_MESA_ycbcr_texture;
int GLAD_GL_MESAX_texture_stack;
int GLAD_GL_AMD_seamless_cubemap_per_texture;
int GLAD_GL_EXT_bindable_uniform;
int GLAD_GL_KHR_texture_compression_astc_hdr;
int GLAD_GL_ARB_shader_ballot;
int GLAD_GL_KHR_blend_equation_advanced;
int GLAD_GL_ARB_fragment_program_shadow;
int GLAD_GL_ATI_element_array;
int GLAD_GL_ARB_sparse_texture_clamp;
int GLAD_GL_AMD_texture_texture4;
int GLAD_GL_SGIX_reference_plane;
int GLAD_GL_EXT_stencil_two_side;
int GLAD_GL_ARB_transform_feedback_overflow_query;
int GLAD_GL_SGIX_texture_lod_bias;
int GLAD_GL_KHR_no_error;
int GLAD_GL_NV_explicit_multisample;
int GLAD_GL_NV_stereo_view_rendering;
int GLAD_GL_IBM_static_data;
int GLAD_GL_EXT_clip_volume_hint;
int GLAD_GL_EXT_texture_perturb_normal;
int GLAD_GL_NV_fragment_program2;
int GLAD_GL_NV_fragment_program4;
int GLAD_GL_EXT_point_parameters;
int GLAD_GL_PGI_misc_hints;
int GLAD_GL_SGIX_subsample;
int GLAD_GL_AMD_shader_stencil_export;
int GLAD_GL_ARB_shader_texture_lod;
int GLAD_GL_ARB_vertex_shader;
int GLAD_GL_ARB_depth_clamp;
int GLAD_GL_SGIS_texture_select;
int GLAD_GL_NV_texture_shader;
int GLAD_GL_ARB_tessellation_shader;
int GLAD_GL_EXT_draw_buffers2;
int GLAD_GL_ARB_vertex_attrib_64bit;
int GLAD_GL_EXT_texture_filter_minmax;
int GLAD_GL_ARB_texture_gather;
int GLAD_GL_AMD_interleaved_elements;
int GLAD_GL_ARB_fragment_program;
int GLAD_GL_OML_resample;
int GLAD_GL_APPLE_ycbcr_422;
int GLAD_GL_SGIX_texture_add_env;
int GLAD_GL_ARB_shadow_ambient;
int GLAD_GL_ARB_texture_storage;
int GLAD_GL_EXT_pixel_buffer_object;
int GLAD_GL_NV_vertex_program;
int GLAD_GL_SGIS_pixel_texture;
int GLAD_GL_SGIS_generate_mipmap;
int GLAD_GL_SGIX_instruments;
int GLAD_GL_ARB_fragment_layer_viewport;
int GLAD_GL_ARB_shader_storage_buffer_object;
int GLAD_GL_EXT_sparse_texture2;
int GLAD_GL_EXT_blend_minmax;
int GLAD_GL_MESA_pack_invert;
int GLAD_GL_ARB_base_instance;
int GLAD_GL_SUN_global_alpha;
int GLAD_GL_PGI_vertex_hints;
int GLAD_GL_AMD_transform_feedback4;
int GLAD_GL_ARB_ES3_1_compatibility;
int GLAD_GL_EXT_texture_integer;
int GLAD_GL_ARB_texture_multisample;
int GLAD_GL_AMD_gpu_shader_int64;
int GLAD_GL_S3_s3tc;
int GLAD_GL_ARB_query_buffer_object;
int GLAD_GL_AMD_vertex_shader_tessellator;
int GLAD_GL_ARB_invalidate_subdata;
int GLAD_GL_ARB_transform_feedback2;
int GLAD_GL_EXT_index_material;
int GLAD_GL_NV_blend_equation_advanced_coherent;
int GLAD_GL_ARB_texture_non_power_of_two;
int GLAD_GL_KHR_texture_compression_astc_sliced_3d;
int GLAD_GL_ATI_draw_buffers;
int GLAD_GL_EXT_cmyka;
int GLAD_GL_SGIX_pixel_texture;
int GLAD_GL_APPLE_specular_vector;
int GLAD_GL_ARB_seamless_cubemap_per_texture;
int GLAD_GL_ARB_conservative_depth;
int GLAD_GL_SGIX_interlace;
int GLAD_GL_NV_parameter_buffer_object;
int GLAD_GL_AMD_shader_trinary_minmax;
int GLAD_GL_EXT_texture_lod_bias;
int GLAD_GL_EXT_rescale_normal;
int GLAD_GL_ARB_pixel_buffer_object;
int GLAD_GL_ARB_uniform_buffer_object;
int GLAD_GL_ARB_vertex_type_10f_11f_11f_rev;
int GLAD_GL_ARB_texture_swizzle;
int GLAD_GL_ARB_texture_compression;
int GLAD_GL_SGIX_async_pixel;
int GLAD_GL_NV_fragment_program_option;
int GLAD_GL_ARB_explicit_attrib_location;
int GLAD_GL_EXT_blend_color;
int GLAD_GL_NV_shader_thread_group;
int GLAD_GL_EXT_stencil_wrap;
int GLAD_GL_EXT_index_array_formats;
int GLAD_GL_OVR_multiview2;
int GLAD_GL_EXT_histogram;
int GLAD_GL_ARB_get_texture_sub_image;
int GLAD_GL_SGIS_point_parameters;
int GLAD_GL_EXT_direct_state_access;
int GLAD_GL_ARB_shader_group_vote;
int GLAD_GL_NV_texture_rectangle;
int GLAD_GL_ARB_copy_image;
int GLAD_GL_NV_shader_thread_shuffle;
int GLAD_GL_ARB_shader_precision;
int GLAD_GL_EXT_vertex_shader;
int GLAD_GL_EXT_blend_func_separate;
int GLAD_GL_APPLE_fence;
int GLAD_GL_OES_byte_coordinates;
int GLAD_GL_ARB_transpose_matrix;
int GLAD_GL_ARB_provoking_vertex;
int GLAD_GL_NV_uniform_buffer_unified_memory;
int GLAD_GL_NV_fragment_shader_interlock;
int GLAD_GL_EXT_vertex_array;
int GLAD_GL_ARB_half_float_vertex;
int GLAD_GL_EXT_blend_equation_separate;
int GLAD_GL_NV_framebuffer_mixed_samples;
int GLAD_GL_ARB_multi_draw_indirect;
int GLAD_GL_EXT_raster_multisample;
int GLAD_GL_NV_copy_image;
int GLAD_GL_HP_texture_lighting;
int GLAD_GL_INTEL_framebuffer_CMAA;
int GLAD_GL_SGIX_convolution_accuracy;
int GLAD_GL_ARB_transform_feedback3;
int GLAD_GL_SGIX_ycrcba;
int GLAD_GL_EXT_debug_marker;
int GLAD_GL_EXT_bgra;
int GLAD_GL_INTEL_parallel_arrays;
int GLAD_GL_EXT_pixel_transform;
int GLAD_GL_NV_vertex_attrib_integer_64bit;
int GLAD_GL_ATI_fragment_shader;
int GLAD_GL_ARB_vertex_array_object;
int GLAD_GL_ATI_pn_triangles;
int GLAD_GL_EXT_texture_env_add;
int GLAD_GL_EXT_packed_depth_stencil;
int GLAD_GL_EXT_texture_mirror_clamp;
int GLAD_GL_NV_multisample_filter_hint;
int GLAD_GL_INTEL_performance_query;
int GLAD_GL_ARB_transform_feedback_instanced;
int GLAD_GL_SGIX_async;
int GLAD_GL_EXT_texture_compression_latc;
int GLAD_GL_NV_robustness_video_memory_purge;
int GLAD_GL_ARB_shading_language_100;
int GLAD_GL_APPLE_float_pixels;
int GLAD_GL_ARB_texture_mirror_clamp_to_edge;
int GLAD_GL_NV_vertex_program2;
int GLAD_GL_NV_bindless_multi_draw_indirect_count;
int GLAD_GL_ARB_draw_indirect;
int GLAD_GL_ARB_ES2_compatibility;
int GLAD_GL_ARB_indirect_parameters;
int GLAD_GL_EXT_window_rectangles;
int GLAD_GL_NV_half_float;
int GLAD_GL_ARB_ES3_2_compatibility;
int GLAD_GL_ATI_texture_mirror_once;
int GLAD_GL_IBM_rasterpos_clip;
int GLAD_GL_SGIX_shadow;
int GLAD_GL_EXT_polygon_offset_clamp;
int GLAD_GL_NV_deep_texture3D;
int GLAD_GL_ARB_shader_draw_parameters;
int GLAD_GL_SGIX_calligraphic_fragment;
int GLAD_GL_ARB_shader_bit_encoding;
int GLAD_GL_EXT_compiled_vertex_array;
int GLAD_GL_NV_depth_buffer_float;
int GLAD_GL_APPLE_flush_buffer_range;
int GLAD_GL_ARB_imaging;
int GLAD_GL_NV_shader_atomic_float;
int GLAD_GL_ARB_draw_buffers_blend;
int GLAD_GL_AMD_gcn_shader;
int GLAD_GL_AMD_blend_minmax_factor;
int GLAD_GL_EXT_texture_sRGB_decode;
int GLAD_GL_ARB_shading_language_420pack;
int GLAD_GL_ARB_shader_viewport_layer_array;
int GLAD_GL_ATI_meminfo;
int GLAD_GL_EXT_abgr;
int GLAD_GL_AMD_pinned_memory;
int GLAD_GL_EXT_texture_snorm;
int GLAD_GL_SGIX_texture_coordinate_clamp;
int GLAD_GL_ARB_clear_buffer_object;
int GLAD_GL_ARB_multisample;
int GLAD_GL_EXT_debug_label;
int GLAD_GL_NV_light_max_exponent;
int GLAD_GL_NV_internalformat_sample_query;
int GLAD_GL_INTEL_map_texture;
int GLAD_GL_ARB_texture_env_crossbar;
int GLAD_GL_EXT_422_pixels;
int GLAD_GL_NV_conservative_raster_pre_snap_triangles;
int GLAD_GL_ARB_compute_shader;
int GLAD_GL_NV_texgen_emboss;
int GLAD_GL_ARB_blend_func_extended;
int GLAD_GL_IBM_vertex_array_lists;
int GLAD_GL_ARB_color_buffer_float;
int GLAD_GL_ARB_bindless_texture;
int GLAD_GL_SGIX_depth_texture;
int GLAD_GL_ARB_internalformat_query;
int GLAD_GL_ARB_shader_atomic_counter_ops;
int GLAD_GL_ARB_texture_mirrored_repeat;
int GLAD_GL_EXT_shader_image_load_store;
int GLAD_GL_EXT_copy_texture;
int GLAD_GL_NV_register_combiners2;
int GLAD_GL_SGIX_ycrcb_subsample;
int GLAD_GL_ARB_copy_buffer;
int GLAD_GL_NV_draw_texture;
int GLAD_GL_EXT_texture_shared_exponent;
int GLAD_GL_EXT_draw_instanced;
int GLAD_GL_NV_copy_depth_to_color;
int GLAD_GL_ARB_viewport_array;
int GLAD_GL_ARB_separate_shader_objects;
int GLAD_GL_EXT_multisample;
int GLAD_GL_EXT_depth_bounds_test;
int GLAD_GL_HP_image_transform;
int GLAD_GL_ARB_texture_env_add;
int GLAD_GL_NV_video_capture;
int GLAD_GL_ARB_sampler_objects;
int GLAD_GL_ARB_matrix_palette;
int GLAD_GL_SGIS_texture_color_mask;
int GLAD_GL_EXT_packed_pixels;
int GLAD_GL_EXT_coordinate_frame;
int GLAD_GL_NV_transform_feedback2;
int GLAD_GL_APPLE_aux_depth_stencil;
int GLAD_GL_ARB_shader_subroutine;
int GLAD_GL_EXT_framebuffer_sRGB;
int GLAD_GL_ARB_texture_storage_multisample;
int GLAD_GL_KHR_blend_equation_advanced_coherent;
int GLAD_GL_EXT_vertex_attrib_64bit;
int GLAD_GL_NV_shader_atomic_float64;
int GLAD_GL_ARB_depth_texture;
int GLAD_GL_NV_shader_buffer_store;
int GLAD_GL_OES_query_matrix;
int GLAD_GL_MESA_window_pos;
int GLAD_GL_NV_fill_rectangle;
int GLAD_GL_NV_shader_storage_buffer_object;
int GLAD_GL_ARB_texture_query_lod;
int GLAD_GL_SGIX_ir_instrument1;
int GLAD_GL_ARB_shader_image_size;
int GLAD_GL_NV_shader_atomic_counters;
int GLAD_GL_APPLE_object_purgeable;
int GLAD_GL_ARB_occlusion_query;
int GLAD_GL_INGR_color_clamp;
int GLAD_GL_SGI_color_table;
int GLAD_GL_EXT_framebuffer_multisample_blit_scaled;
int GLAD_GL_ARB_texture_cube_map_array;
int GLAD_GL_AMD_debug_output;
int GLAD_GL_EXT_gpu_shader4;
int GLAD_GL_NV_geometry_program4;
int GLAD_GL_NV_gpu_program5_mem_extended;
int GLAD_GL_SGIX_scalebias_hint;
int GLAD_GL_ARB_texture_border_clamp;
int GLAD_GL_ARB_fragment_coord_conventions;
int GLAD_GL_SGIX_polynomial_ffd;
int GLAD_GL_EXT_provoking_vertex;
int GLAD_GL_ARB_point_parameters;
int GLAD_GL_ARB_shader_image_load_store;
int GLAD_GL_ARB_conditional_render_inverted;
int GLAD_GL_HP_occlusion_test;
int GLAD_GL_ARB_ES3_compatibility;
int GLAD_GL_EXT_texture_array;
int GLAD_GL_ARB_texture_buffer_object_rgb32;
int GLAD_GL_NV_bindless_multi_draw_indirect;
int GLAD_GL_SGIX_texture_multi_buffer;
int GLAD_GL_EXT_transform_feedback;
int GLAD_GL_KHR_texture_compression_astc_ldr;
int GLAD_GL_3DFX_multisample;
int GLAD_GL_INTEL_fragment_shader_ordering;
int GLAD_GL_ARB_texture_env_dot3;
int GLAD_GL_NV_gpu_program4;
int GLAD_GL_NV_gpu_program5;
int GLAD_GL_NV_float_buffer;
int GLAD_GL_SGIS_texture_edge_clamp;
int GLAD_GL_ARB_framebuffer_sRGB;
int GLAD_GL_SUN_slice_accum;
int GLAD_GL_EXT_index_texture;
int GLAD_GL_EXT_shader_image_load_formatted;
int GLAD_GL_ARB_geometry_shader4;
int GLAD_GL_EXT_separate_specular_color;
int GLAD_GL_NV_fog_distance;
int GLAD_GL_NV_conservative_raster;
int GLAD_GL_SUN_convolution_border_modes;
int GLAD_GL_SGIX_sprite;
int GLAD_GL_ARB_get_program_binary;
int GLAD_GL_ARB_timer_query;
int GLAD_GL_AMD_occlusion_query_event;
int GLAD_GL_SGIS_multisample;
int GLAD_GL_EXT_framebuffer_object;
int GLAD_GL_EXT_vertex_weighting;
int GLAD_GL_ARB_vertex_array_bgra;
int GLAD_GL_APPLE_vertex_array_range;
int GLAD_GL_AMD_query_buffer_object;
int GLAD_GL_NV_register_combiners;
int GLAD_GL_ARB_draw_buffers;
int GLAD_GL_EXT_texture_env_dot3;
int GLAD_GL_NV_fragment_program;
int GLAD_GL_SGI_color_matrix;
int GLAD_GL_EXT_cull_vertex;
int GLAD_GL_EXT_texture_sRGB;
int GLAD_GL_APPLE_row_bytes;
int GLAD_GL_NV_texgen_reflection;
int GLAD_GL_IBM_multimode_draw_arrays;
int GLAD_GL_APPLE_vertex_array_object;
int GLAD_GL_3DFX_texture_compression_FXT1;
int GLAD_GL_GREMEDY_frame_terminator;
int GLAD_GL_AMD_conservative_depth;
int GLAD_GL_ARB_texture_float;
int GLAD_GL_ARB_compressed_texture_pixel_storage;
int GLAD_GL_SGIS_detail_texture;
int GLAD_GL_NV_geometry_shader_passthrough;
int GLAD_GL_ARB_draw_instanced;
int GLAD_GL_OES_read_format;
int GLAD_GL_ATI_texture_float;
int GLAD_GL_WIN_specular_fog;
int GLAD_GL_AMD_vertex_shader_layer;
int GLAD_GL_ARB_shading_language_include;
int GLAD_GL_APPLE_client_storage;
int GLAD_GL_WIN_phong_shading;
int GLAD_GL_INGR_blend_func_separate;
int GLAD_GL_NV_path_rendering;
int GLAD_GL_NV_conservative_raster_dilate;
int GLAD_GL_ARB_texture_barrier;
int GLAD_GL_ATI_vertex_streams;
int GLAD_GL_ARB_post_depth_coverage;
int GLAD_GL_NV_occlusion_query;
int GLAD_GL_APPLE_rgb_422;
int GLAD_GL_ARB_direct_state_access;
int GLAD_GL_ARB_gpu_shader_int64;
int GLAD_GL_ARB_seamless_cube_map;
int GLAD_GL_ARB_cull_distance;
int GLAD_GL_NV_vdpau_interop;
int GLAD_GL_ARB_occlusion_query2;
int GLAD_GL_ARB_internalformat_query2;
int GLAD_GL_EXT_texture_filter_anisotropic;
int GLAD_GL_SUN_vertex;
int GLAD_GL_ARB_sparse_texture;
int GLAD_GL_SGIS_texture_lod;
int GLAD_GL_NV_vertex_program3;
int GLAD_GL_NV_gpu_shader5;
int GLAD_GL_NV_vertex_program4;
int GLAD_GL_AMD_transform_feedback3_lines_triangles;
int GLAD_GL_SGIS_fog_function;
int GLAD_GL_EXT_x11_sync_object;
int GLAD_GL_ARB_sync;
int GLAD_GL_NV_sample_locations;
int GLAD_GL_ARB_compute_variable_group_size;
int GLAD_GL_OES_fixed_point;
int GLAD_GL_NV_blend_square;
int GLAD_GL_EXT_framebuffer_multisample;
int GLAD_GL_ARB_gpu_shader5;
int GLAD_GL_SGIS_texture4D;
int GLAD_GL_EXT_texture3D;
int GLAD_GL_ARB_multitexture;
int GLAD_GL_EXT_secondary_color;
int GLAD_GL_NV_parameter_buffer_object2;
int GLAD_GL_ATI_vertex_array_object;
int GLAD_GL_ARB_parallel_shader_compile;
int GLAD_GL_NVX_gpu_memory_info;
int GLAD_GL_SGIX_igloo_interface;
int GLAD_GL_SGIS_point_line_texgen;
int GLAD_GL_ARB_sample_locations;
int GLAD_GL_ARB_sparse_buffer;
int GLAD_GL_EXT_draw_range_elements;
int GLAD_GL_SGIX_blend_alpha_minmax;
int GLAD_GL_KHR_context_flush_control;
PFNGLELEMENTPOINTERAPPLEPROC glad_glElementPointerAPPLE;
void APIENTRY glad_debug_impl_glElementPointerAPPLE(GLenum arg0, const void* arg1) {
    _pre_call_callback("glElementPointerAPPLE", (void*)glElementPointerAPPLE, 2, arg0, arg1);
     glad_glElementPointerAPPLE(arg0, arg1);
    _post_call_callback("glElementPointerAPPLE", (void*)glElementPointerAPPLE, 2, arg0, arg1);

}
PFNGLELEMENTPOINTERAPPLEPROC glad_debug_glElementPointerAPPLE = glad_debug_impl_glElementPointerAPPLE;
PFNGLDRAWELEMENTARRAYAPPLEPROC glad_glDrawElementArrayAPPLE;
void APIENTRY glad_debug_impl_glDrawElementArrayAPPLE(GLenum arg0, GLint arg1, GLsizei arg2) {
    _pre_call_callback("glDrawElementArrayAPPLE", (void*)glDrawElementArrayAPPLE, 3, arg0, arg1, arg2);
     glad_glDrawElementArrayAPPLE(arg0, arg1, arg2);
    _post_call_callback("glDrawElementArrayAPPLE", (void*)glDrawElementArrayAPPLE, 3, arg0, arg1, arg2);

}
PFNGLDRAWELEMENTARRAYAPPLEPROC glad_debug_glDrawElementArrayAPPLE = glad_debug_impl_glDrawElementArrayAPPLE;
PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glad_glDrawRangeElementArrayAPPLE;
void APIENTRY glad_debug_impl_glDrawRangeElementArrayAPPLE(GLenum arg0, GLuint arg1, GLuint arg2, GLint arg3, GLsizei arg4) {
    _pre_call_callback("glDrawRangeElementArrayAPPLE", (void*)glDrawRangeElementArrayAPPLE, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDrawRangeElementArrayAPPLE(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDrawRangeElementArrayAPPLE", (void*)glDrawRangeElementArrayAPPLE, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glad_debug_glDrawRangeElementArrayAPPLE = glad_debug_impl_glDrawRangeElementArrayAPPLE;
PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glad_glMultiDrawElementArrayAPPLE;
void APIENTRY glad_debug_impl_glMultiDrawElementArrayAPPLE(GLenum arg0, const GLint* arg1, const GLsizei* arg2, GLsizei arg3) {
    _pre_call_callback("glMultiDrawElementArrayAPPLE", (void*)glMultiDrawElementArrayAPPLE, 4, arg0, arg1, arg2, arg3);
     glad_glMultiDrawElementArrayAPPLE(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiDrawElementArrayAPPLE", (void*)glMultiDrawElementArrayAPPLE, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glad_debug_glMultiDrawElementArrayAPPLE = glad_debug_impl_glMultiDrawElementArrayAPPLE;
PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glad_glMultiDrawRangeElementArrayAPPLE;
void APIENTRY glad_debug_impl_glMultiDrawRangeElementArrayAPPLE(GLenum arg0, GLuint arg1, GLuint arg2, const GLint* arg3, const GLsizei* arg4, GLsizei arg5) {
    _pre_call_callback("glMultiDrawRangeElementArrayAPPLE", (void*)glMultiDrawRangeElementArrayAPPLE, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glMultiDrawRangeElementArrayAPPLE(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glMultiDrawRangeElementArrayAPPLE", (void*)glMultiDrawRangeElementArrayAPPLE, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glad_debug_glMultiDrawRangeElementArrayAPPLE = glad_debug_impl_glMultiDrawRangeElementArrayAPPLE;
PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glad_glMultiDrawArraysIndirectAMD;
void APIENTRY glad_debug_impl_glMultiDrawArraysIndirectAMD(GLenum arg0, const void* arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glMultiDrawArraysIndirectAMD", (void*)glMultiDrawArraysIndirectAMD, 4, arg0, arg1, arg2, arg3);
     glad_glMultiDrawArraysIndirectAMD(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiDrawArraysIndirectAMD", (void*)glMultiDrawArraysIndirectAMD, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glad_debug_glMultiDrawArraysIndirectAMD = glad_debug_impl_glMultiDrawArraysIndirectAMD;
PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glad_glMultiDrawElementsIndirectAMD;
void APIENTRY glad_debug_impl_glMultiDrawElementsIndirectAMD(GLenum arg0, GLenum arg1, const void* arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glMultiDrawElementsIndirectAMD", (void*)glMultiDrawElementsIndirectAMD, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiDrawElementsIndirectAMD(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiDrawElementsIndirectAMD", (void*)glMultiDrawElementsIndirectAMD, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glad_debug_glMultiDrawElementsIndirectAMD = glad_debug_impl_glMultiDrawElementsIndirectAMD;
PFNGLTAGSAMPLEBUFFERSGIXPROC glad_glTagSampleBufferSGIX;
void APIENTRY glad_debug_impl_glTagSampleBufferSGIX() {
    _pre_call_callback("glTagSampleBufferSGIX", (void*)glTagSampleBufferSGIX, 0);
     glad_glTagSampleBufferSGIX();
    _post_call_callback("glTagSampleBufferSGIX", (void*)glTagSampleBufferSGIX, 0);

}
PFNGLTAGSAMPLEBUFFERSGIXPROC glad_debug_glTagSampleBufferSGIX = glad_debug_impl_glTagSampleBufferSGIX;
PFNGLPOINTPARAMETERINVPROC glad_glPointParameteriNV;
void APIENTRY glad_debug_impl_glPointParameteriNV(GLenum arg0, GLint arg1) {
    _pre_call_callback("glPointParameteriNV", (void*)glPointParameteriNV, 2, arg0, arg1);
     glad_glPointParameteriNV(arg0, arg1);
    _post_call_callback("glPointParameteriNV", (void*)glPointParameteriNV, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERINVPROC glad_debug_glPointParameteriNV = glad_debug_impl_glPointParameteriNV;
PFNGLPOINTPARAMETERIVNVPROC glad_glPointParameterivNV;
void APIENTRY glad_debug_impl_glPointParameterivNV(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glPointParameterivNV", (void*)glPointParameterivNV, 2, arg0, arg1);
     glad_glPointParameterivNV(arg0, arg1);
    _post_call_callback("glPointParameterivNV", (void*)glPointParameterivNV, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERIVNVPROC glad_debug_glPointParameterivNV = glad_debug_impl_glPointParameterivNV;
PFNGLSTENCILOPSEPARATEATIPROC glad_glStencilOpSeparateATI;
void APIENTRY glad_debug_impl_glStencilOpSeparateATI(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_callback("glStencilOpSeparateATI", (void*)glStencilOpSeparateATI, 4, arg0, arg1, arg2, arg3);
     glad_glStencilOpSeparateATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glStencilOpSeparateATI", (void*)glStencilOpSeparateATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLSTENCILOPSEPARATEATIPROC glad_debug_glStencilOpSeparateATI = glad_debug_impl_glStencilOpSeparateATI;
PFNGLSTENCILFUNCSEPARATEATIPROC glad_glStencilFuncSeparateATI;
void APIENTRY glad_debug_impl_glStencilFuncSeparateATI(GLenum arg0, GLenum arg1, GLint arg2, GLuint arg3) {
    _pre_call_callback("glStencilFuncSeparateATI", (void*)glStencilFuncSeparateATI, 4, arg0, arg1, arg2, arg3);
     glad_glStencilFuncSeparateATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glStencilFuncSeparateATI", (void*)glStencilFuncSeparateATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLSTENCILFUNCSEPARATEATIPROC glad_debug_glStencilFuncSeparateATI = glad_debug_impl_glStencilFuncSeparateATI;
PFNGLTEXBUFFEREXTPROC glad_glTexBufferEXT;
void APIENTRY glad_debug_impl_glTexBufferEXT(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glTexBufferEXT", (void*)glTexBufferEXT, 3, arg0, arg1, arg2);
     glad_glTexBufferEXT(arg0, arg1, arg2);
    _post_call_callback("glTexBufferEXT", (void*)glTexBufferEXT, 3, arg0, arg1, arg2);

}
PFNGLTEXBUFFEREXTPROC glad_debug_glTexBufferEXT = glad_debug_impl_glTexBufferEXT;
PFNGLWEIGHTBVARBPROC glad_glWeightbvARB;
void APIENTRY glad_debug_impl_glWeightbvARB(GLint arg0, const GLbyte* arg1) {
    _pre_call_callback("glWeightbvARB", (void*)glWeightbvARB, 2, arg0, arg1);
     glad_glWeightbvARB(arg0, arg1);
    _post_call_callback("glWeightbvARB", (void*)glWeightbvARB, 2, arg0, arg1);

}
PFNGLWEIGHTBVARBPROC glad_debug_glWeightbvARB = glad_debug_impl_glWeightbvARB;
PFNGLWEIGHTSVARBPROC glad_glWeightsvARB;
void APIENTRY glad_debug_impl_glWeightsvARB(GLint arg0, const GLshort* arg1) {
    _pre_call_callback("glWeightsvARB", (void*)glWeightsvARB, 2, arg0, arg1);
     glad_glWeightsvARB(arg0, arg1);
    _post_call_callback("glWeightsvARB", (void*)glWeightsvARB, 2, arg0, arg1);

}
PFNGLWEIGHTSVARBPROC glad_debug_glWeightsvARB = glad_debug_impl_glWeightsvARB;
PFNGLWEIGHTIVARBPROC glad_glWeightivARB;
void APIENTRY glad_debug_impl_glWeightivARB(GLint arg0, const GLint* arg1) {
    _pre_call_callback("glWeightivARB", (void*)glWeightivARB, 2, arg0, arg1);
     glad_glWeightivARB(arg0, arg1);
    _post_call_callback("glWeightivARB", (void*)glWeightivARB, 2, arg0, arg1);

}
PFNGLWEIGHTIVARBPROC glad_debug_glWeightivARB = glad_debug_impl_glWeightivARB;
PFNGLWEIGHTFVARBPROC glad_glWeightfvARB;
void APIENTRY glad_debug_impl_glWeightfvARB(GLint arg0, const GLfloat* arg1) {
    _pre_call_callback("glWeightfvARB", (void*)glWeightfvARB, 2, arg0, arg1);
     glad_glWeightfvARB(arg0, arg1);
    _post_call_callback("glWeightfvARB", (void*)glWeightfvARB, 2, arg0, arg1);

}
PFNGLWEIGHTFVARBPROC glad_debug_glWeightfvARB = glad_debug_impl_glWeightfvARB;
PFNGLWEIGHTDVARBPROC glad_glWeightdvARB;
void APIENTRY glad_debug_impl_glWeightdvARB(GLint arg0, const GLdouble* arg1) {
    _pre_call_callback("glWeightdvARB", (void*)glWeightdvARB, 2, arg0, arg1);
     glad_glWeightdvARB(arg0, arg1);
    _post_call_callback("glWeightdvARB", (void*)glWeightdvARB, 2, arg0, arg1);

}
PFNGLWEIGHTDVARBPROC glad_debug_glWeightdvARB = glad_debug_impl_glWeightdvARB;
PFNGLWEIGHTUBVARBPROC glad_glWeightubvARB;
void APIENTRY glad_debug_impl_glWeightubvARB(GLint arg0, const GLubyte* arg1) {
    _pre_call_callback("glWeightubvARB", (void*)glWeightubvARB, 2, arg0, arg1);
     glad_glWeightubvARB(arg0, arg1);
    _post_call_callback("glWeightubvARB", (void*)glWeightubvARB, 2, arg0, arg1);

}
PFNGLWEIGHTUBVARBPROC glad_debug_glWeightubvARB = glad_debug_impl_glWeightubvARB;
PFNGLWEIGHTUSVARBPROC glad_glWeightusvARB;
void APIENTRY glad_debug_impl_glWeightusvARB(GLint arg0, const GLushort* arg1) {
    _pre_call_callback("glWeightusvARB", (void*)glWeightusvARB, 2, arg0, arg1);
     glad_glWeightusvARB(arg0, arg1);
    _post_call_callback("glWeightusvARB", (void*)glWeightusvARB, 2, arg0, arg1);

}
PFNGLWEIGHTUSVARBPROC glad_debug_glWeightusvARB = glad_debug_impl_glWeightusvARB;
PFNGLWEIGHTUIVARBPROC glad_glWeightuivARB;
void APIENTRY glad_debug_impl_glWeightuivARB(GLint arg0, const GLuint* arg1) {
    _pre_call_callback("glWeightuivARB", (void*)glWeightuivARB, 2, arg0, arg1);
     glad_glWeightuivARB(arg0, arg1);
    _post_call_callback("glWeightuivARB", (void*)glWeightuivARB, 2, arg0, arg1);

}
PFNGLWEIGHTUIVARBPROC glad_debug_glWeightuivARB = glad_debug_impl_glWeightuivARB;
PFNGLWEIGHTPOINTERARBPROC glad_glWeightPointerARB;
void APIENTRY glad_debug_impl_glWeightPointerARB(GLint arg0, GLenum arg1, GLsizei arg2, const void* arg3) {
    _pre_call_callback("glWeightPointerARB", (void*)glWeightPointerARB, 4, arg0, arg1, arg2, arg3);
     glad_glWeightPointerARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glWeightPointerARB", (void*)glWeightPointerARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLWEIGHTPOINTERARBPROC glad_debug_glWeightPointerARB = glad_debug_impl_glWeightPointerARB;
PFNGLVERTEXBLENDARBPROC glad_glVertexBlendARB;
void APIENTRY glad_debug_impl_glVertexBlendARB(GLint arg0) {
    _pre_call_callback("glVertexBlendARB", (void*)glVertexBlendARB, 1, arg0);
     glad_glVertexBlendARB(arg0);
    _post_call_callback("glVertexBlendARB", (void*)glVertexBlendARB, 1, arg0);

}
PFNGLVERTEXBLENDARBPROC glad_debug_glVertexBlendARB = glad_debug_impl_glVertexBlendARB;
PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC glad_glFramebufferTextureMultiviewOVR;
void APIENTRY glad_debug_impl_glFramebufferTextureMultiviewOVR(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4, GLsizei arg5) {
    _pre_call_callback("glFramebufferTextureMultiviewOVR", (void*)glFramebufferTextureMultiviewOVR, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glFramebufferTextureMultiviewOVR(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glFramebufferTextureMultiviewOVR", (void*)glFramebufferTextureMultiviewOVR, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC glad_debug_glFramebufferTextureMultiviewOVR = glad_debug_impl_glFramebufferTextureMultiviewOVR;
PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv;
void APIENTRY glad_debug_impl_glGetProgramInterfaceiv(GLuint arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetProgramInterfaceiv", (void*)glGetProgramInterfaceiv, 4, arg0, arg1, arg2, arg3);
     glad_glGetProgramInterfaceiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetProgramInterfaceiv", (void*)glGetProgramInterfaceiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPROGRAMINTERFACEIVPROC glad_debug_glGetProgramInterfaceiv = glad_debug_impl_glGetProgramInterfaceiv;
PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex;
GLuint APIENTRY glad_debug_impl_glGetProgramResourceIndex(GLuint arg0, GLenum arg1, const GLchar* arg2) {
    GLuint ret;
    _pre_call_callback("glGetProgramResourceIndex", (void*)glGetProgramResourceIndex, 3, arg0, arg1, arg2);
    ret =  glad_glGetProgramResourceIndex(arg0, arg1, arg2);
    _post_call_callback("glGetProgramResourceIndex", (void*)glGetProgramResourceIndex, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETPROGRAMRESOURCEINDEXPROC glad_debug_glGetProgramResourceIndex = glad_debug_impl_glGetProgramResourceIndex;
PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName;
void APIENTRY glad_debug_impl_glGetProgramResourceName(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, GLsizei* arg4, GLchar* arg5) {
    _pre_call_callback("glGetProgramResourceName", (void*)glGetProgramResourceName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetProgramResourceName(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetProgramResourceName", (void*)glGetProgramResourceName, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETPROGRAMRESOURCENAMEPROC glad_debug_glGetProgramResourceName = glad_debug_impl_glGetProgramResourceName;
PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv;
void APIENTRY glad_debug_impl_glGetProgramResourceiv(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, const GLenum* arg4, GLsizei arg5, GLsizei* arg6, GLint* arg7) {
    _pre_call_callback("glGetProgramResourceiv", (void*)glGetProgramResourceiv, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glGetProgramResourceiv(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glGetProgramResourceiv", (void*)glGetProgramResourceiv, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLGETPROGRAMRESOURCEIVPROC glad_debug_glGetProgramResourceiv = glad_debug_impl_glGetProgramResourceiv;
PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation;
GLint APIENTRY glad_debug_impl_glGetProgramResourceLocation(GLuint arg0, GLenum arg1, const GLchar* arg2) {
    GLint ret;
    _pre_call_callback("glGetProgramResourceLocation", (void*)glGetProgramResourceLocation, 3, arg0, arg1, arg2);
    ret =  glad_glGetProgramResourceLocation(arg0, arg1, arg2);
    _post_call_callback("glGetProgramResourceLocation", (void*)glGetProgramResourceLocation, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_debug_glGetProgramResourceLocation = glad_debug_impl_glGetProgramResourceLocation;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex;
GLint APIENTRY glad_debug_impl_glGetProgramResourceLocationIndex(GLuint arg0, GLenum arg1, const GLchar* arg2) {
    GLint ret;
    _pre_call_callback("glGetProgramResourceLocationIndex", (void*)glGetProgramResourceLocationIndex, 3, arg0, arg1, arg2);
    ret =  glad_glGetProgramResourceLocationIndex(arg0, arg1, arg2);
    _post_call_callback("glGetProgramResourceLocationIndex", (void*)glGetProgramResourceLocationIndex, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_debug_glGetProgramResourceLocationIndex = glad_debug_impl_glGetProgramResourceLocationIndex;
PFNGLINDEXFUNCEXTPROC glad_glIndexFuncEXT;
void APIENTRY glad_debug_impl_glIndexFuncEXT(GLenum arg0, GLclampf arg1) {
    _pre_call_callback("glIndexFuncEXT", (void*)glIndexFuncEXT, 2, arg0, arg1);
     glad_glIndexFuncEXT(arg0, arg1);
    _post_call_callback("glIndexFuncEXT", (void*)glIndexFuncEXT, 2, arg0, arg1);

}
PFNGLINDEXFUNCEXTPROC glad_debug_glIndexFuncEXT = glad_debug_impl_glIndexFuncEXT;
PFNGLMAKEBUFFERRESIDENTNVPROC glad_glMakeBufferResidentNV;
void APIENTRY glad_debug_impl_glMakeBufferResidentNV(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glMakeBufferResidentNV", (void*)glMakeBufferResidentNV, 2, arg0, arg1);
     glad_glMakeBufferResidentNV(arg0, arg1);
    _post_call_callback("glMakeBufferResidentNV", (void*)glMakeBufferResidentNV, 2, arg0, arg1);

}
PFNGLMAKEBUFFERRESIDENTNVPROC glad_debug_glMakeBufferResidentNV = glad_debug_impl_glMakeBufferResidentNV;
PFNGLMAKEBUFFERNONRESIDENTNVPROC glad_glMakeBufferNonResidentNV;
void APIENTRY glad_debug_impl_glMakeBufferNonResidentNV(GLenum arg0) {
    _pre_call_callback("glMakeBufferNonResidentNV", (void*)glMakeBufferNonResidentNV, 1, arg0);
     glad_glMakeBufferNonResidentNV(arg0);
    _post_call_callback("glMakeBufferNonResidentNV", (void*)glMakeBufferNonResidentNV, 1, arg0);

}
PFNGLMAKEBUFFERNONRESIDENTNVPROC glad_debug_glMakeBufferNonResidentNV = glad_debug_impl_glMakeBufferNonResidentNV;
PFNGLISBUFFERRESIDENTNVPROC glad_glIsBufferResidentNV;
GLboolean APIENTRY glad_debug_impl_glIsBufferResidentNV(GLenum arg0) {
    GLboolean ret;
    _pre_call_callback("glIsBufferResidentNV", (void*)glIsBufferResidentNV, 1, arg0);
    ret =  glad_glIsBufferResidentNV(arg0);
    _post_call_callback("glIsBufferResidentNV", (void*)glIsBufferResidentNV, 1, arg0);
    return ret;
}
PFNGLISBUFFERRESIDENTNVPROC glad_debug_glIsBufferResidentNV = glad_debug_impl_glIsBufferResidentNV;
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glad_glMakeNamedBufferResidentNV;
void APIENTRY glad_debug_impl_glMakeNamedBufferResidentNV(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glMakeNamedBufferResidentNV", (void*)glMakeNamedBufferResidentNV, 2, arg0, arg1);
     glad_glMakeNamedBufferResidentNV(arg0, arg1);
    _post_call_callback("glMakeNamedBufferResidentNV", (void*)glMakeNamedBufferResidentNV, 2, arg0, arg1);

}
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glad_debug_glMakeNamedBufferResidentNV = glad_debug_impl_glMakeNamedBufferResidentNV;
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glad_glMakeNamedBufferNonResidentNV;
void APIENTRY glad_debug_impl_glMakeNamedBufferNonResidentNV(GLuint arg0) {
    _pre_call_callback("glMakeNamedBufferNonResidentNV", (void*)glMakeNamedBufferNonResidentNV, 1, arg0);
     glad_glMakeNamedBufferNonResidentNV(arg0);
    _post_call_callback("glMakeNamedBufferNonResidentNV", (void*)glMakeNamedBufferNonResidentNV, 1, arg0);

}
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glad_debug_glMakeNamedBufferNonResidentNV = glad_debug_impl_glMakeNamedBufferNonResidentNV;
PFNGLISNAMEDBUFFERRESIDENTNVPROC glad_glIsNamedBufferResidentNV;
GLboolean APIENTRY glad_debug_impl_glIsNamedBufferResidentNV(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsNamedBufferResidentNV", (void*)glIsNamedBufferResidentNV, 1, arg0);
    ret =  glad_glIsNamedBufferResidentNV(arg0);
    _post_call_callback("glIsNamedBufferResidentNV", (void*)glIsNamedBufferResidentNV, 1, arg0);
    return ret;
}
PFNGLISNAMEDBUFFERRESIDENTNVPROC glad_debug_glIsNamedBufferResidentNV = glad_debug_impl_glIsNamedBufferResidentNV;
PFNGLGETBUFFERPARAMETERUI64VNVPROC glad_glGetBufferParameterui64vNV;
void APIENTRY glad_debug_impl_glGetBufferParameterui64vNV(GLenum arg0, GLenum arg1, GLuint64EXT* arg2) {
    _pre_call_callback("glGetBufferParameterui64vNV", (void*)glGetBufferParameterui64vNV, 3, arg0, arg1, arg2);
     glad_glGetBufferParameterui64vNV(arg0, arg1, arg2);
    _post_call_callback("glGetBufferParameterui64vNV", (void*)glGetBufferParameterui64vNV, 3, arg0, arg1, arg2);

}
PFNGLGETBUFFERPARAMETERUI64VNVPROC glad_debug_glGetBufferParameterui64vNV = glad_debug_impl_glGetBufferParameterui64vNV;
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glad_glGetNamedBufferParameterui64vNV;
void APIENTRY glad_debug_impl_glGetNamedBufferParameterui64vNV(GLuint arg0, GLenum arg1, GLuint64EXT* arg2) {
    _pre_call_callback("glGetNamedBufferParameterui64vNV", (void*)glGetNamedBufferParameterui64vNV, 3, arg0, arg1, arg2);
     glad_glGetNamedBufferParameterui64vNV(arg0, arg1, arg2);
    _post_call_callback("glGetNamedBufferParameterui64vNV", (void*)glGetNamedBufferParameterui64vNV, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glad_debug_glGetNamedBufferParameterui64vNV = glad_debug_impl_glGetNamedBufferParameterui64vNV;
PFNGLGETINTEGERUI64VNVPROC glad_glGetIntegerui64vNV;
void APIENTRY glad_debug_impl_glGetIntegerui64vNV(GLenum arg0, GLuint64EXT* arg1) {
    _pre_call_callback("glGetIntegerui64vNV", (void*)glGetIntegerui64vNV, 2, arg0, arg1);
     glad_glGetIntegerui64vNV(arg0, arg1);
    _post_call_callback("glGetIntegerui64vNV", (void*)glGetIntegerui64vNV, 2, arg0, arg1);

}
PFNGLGETINTEGERUI64VNVPROC glad_debug_glGetIntegerui64vNV = glad_debug_impl_glGetIntegerui64vNV;
PFNGLUNIFORMUI64NVPROC glad_glUniformui64NV;
void APIENTRY glad_debug_impl_glUniformui64NV(GLint arg0, GLuint64EXT arg1) {
    _pre_call_callback("glUniformui64NV", (void*)glUniformui64NV, 2, arg0, arg1);
     glad_glUniformui64NV(arg0, arg1);
    _post_call_callback("glUniformui64NV", (void*)glUniformui64NV, 2, arg0, arg1);

}
PFNGLUNIFORMUI64NVPROC glad_debug_glUniformui64NV = glad_debug_impl_glUniformui64NV;
PFNGLUNIFORMUI64VNVPROC glad_glUniformui64vNV;
void APIENTRY glad_debug_impl_glUniformui64vNV(GLint arg0, GLsizei arg1, const GLuint64EXT* arg2) {
    _pre_call_callback("glUniformui64vNV", (void*)glUniformui64vNV, 3, arg0, arg1, arg2);
     glad_glUniformui64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniformui64vNV", (void*)glUniformui64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORMUI64VNVPROC glad_debug_glUniformui64vNV = glad_debug_impl_glUniformui64vNV;
PFNGLGETUNIFORMUI64VNVPROC glad_glGetUniformui64vNV;
void APIENTRY glad_debug_impl_glGetUniformui64vNV(GLuint arg0, GLint arg1, GLuint64EXT* arg2) {
    _pre_call_callback("glGetUniformui64vNV", (void*)glGetUniformui64vNV, 3, arg0, arg1, arg2);
     glad_glGetUniformui64vNV(arg0, arg1, arg2);
    _post_call_callback("glGetUniformui64vNV", (void*)glGetUniformui64vNV, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMUI64VNVPROC glad_debug_glGetUniformui64vNV = glad_debug_impl_glGetUniformui64vNV;
PFNGLPROGRAMUNIFORMUI64NVPROC glad_glProgramUniformui64NV;
void APIENTRY glad_debug_impl_glProgramUniformui64NV(GLuint arg0, GLint arg1, GLuint64EXT arg2) {
    _pre_call_callback("glProgramUniformui64NV", (void*)glProgramUniformui64NV, 3, arg0, arg1, arg2);
     glad_glProgramUniformui64NV(arg0, arg1, arg2);
    _post_call_callback("glProgramUniformui64NV", (void*)glProgramUniformui64NV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORMUI64NVPROC glad_debug_glProgramUniformui64NV = glad_debug_impl_glProgramUniformui64NV;
PFNGLPROGRAMUNIFORMUI64VNVPROC glad_glProgramUniformui64vNV;
void APIENTRY glad_debug_impl_glProgramUniformui64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64EXT* arg3) {
    _pre_call_callback("glProgramUniformui64vNV", (void*)glProgramUniformui64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniformui64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniformui64vNV", (void*)glProgramUniformui64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORMUI64VNVPROC glad_debug_glProgramUniformui64vNV = glad_debug_impl_glProgramUniformui64vNV;
PFNGLCOLORSUBTABLEEXTPROC glad_glColorSubTableEXT;
void APIENTRY glad_debug_impl_glColorSubTableEXT(GLenum arg0, GLsizei arg1, GLsizei arg2, GLenum arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glColorSubTableEXT", (void*)glColorSubTableEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glColorSubTableEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glColorSubTableEXT", (void*)glColorSubTableEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOLORSUBTABLEEXTPROC glad_debug_glColorSubTableEXT = glad_debug_impl_glColorSubTableEXT;
PFNGLCOPYCOLORSUBTABLEEXTPROC glad_glCopyColorSubTableEXT;
void APIENTRY glad_debug_impl_glCopyColorSubTableEXT(GLenum arg0, GLsizei arg1, GLint arg2, GLint arg3, GLsizei arg4) {
    _pre_call_callback("glCopyColorSubTableEXT", (void*)glCopyColorSubTableEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glCopyColorSubTableEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glCopyColorSubTableEXT", (void*)glCopyColorSubTableEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOPYCOLORSUBTABLEEXTPROC glad_debug_glCopyColorSubTableEXT = glad_debug_impl_glCopyColorSubTableEXT;
PFNGLFINISHTEXTURESUNXPROC glad_glFinishTextureSUNX;
void APIENTRY glad_debug_impl_glFinishTextureSUNX() {
    _pre_call_callback("glFinishTextureSUNX", (void*)glFinishTextureSUNX, 0);
     glad_glFinishTextureSUNX();
    _post_call_callback("glFinishTextureSUNX", (void*)glFinishTextureSUNX, 0);

}
PFNGLFINISHTEXTURESUNXPROC glad_debug_glFinishTextureSUNX = glad_debug_impl_glFinishTextureSUNX;
PFNGLMULTIDRAWARRAYSEXTPROC glad_glMultiDrawArraysEXT;
void APIENTRY glad_debug_impl_glMultiDrawArraysEXT(GLenum arg0, const GLint* arg1, const GLsizei* arg2, GLsizei arg3) {
    _pre_call_callback("glMultiDrawArraysEXT", (void*)glMultiDrawArraysEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiDrawArraysEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiDrawArraysEXT", (void*)glMultiDrawArraysEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTIDRAWARRAYSEXTPROC glad_debug_glMultiDrawArraysEXT = glad_debug_impl_glMultiDrawArraysEXT;
PFNGLMULTIDRAWELEMENTSEXTPROC glad_glMultiDrawElementsEXT;
void APIENTRY glad_debug_impl_glMultiDrawElementsEXT(GLenum arg0, const GLsizei* arg1, GLenum arg2, const void** arg3, GLsizei arg4) {
    _pre_call_callback("glMultiDrawElementsEXT", (void*)glMultiDrawElementsEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiDrawElementsEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiDrawElementsEXT", (void*)glMultiDrawElementsEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTIDRAWELEMENTSEXTPROC glad_debug_glMultiDrawElementsEXT = glad_debug_impl_glMultiDrawElementsEXT;
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv;
void APIENTRY glad_debug_impl_glGetActiveAtomicCounterBufferiv(GLuint arg0, GLuint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetActiveAtomicCounterBufferiv", (void*)glGetActiveAtomicCounterBufferiv, 4, arg0, arg1, arg2, arg3);
     glad_glGetActiveAtomicCounterBufferiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetActiveAtomicCounterBufferiv", (void*)glGetActiveAtomicCounterBufferiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_debug_glGetActiveAtomicCounterBufferiv = glad_debug_impl_glGetActiveAtomicCounterBufferiv;
PFNGLBEGINCONDITIONALRENDERNVPROC glad_glBeginConditionalRenderNV;
void APIENTRY glad_debug_impl_glBeginConditionalRenderNV(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glBeginConditionalRenderNV", (void*)glBeginConditionalRenderNV, 2, arg0, arg1);
     glad_glBeginConditionalRenderNV(arg0, arg1);
    _post_call_callback("glBeginConditionalRenderNV", (void*)glBeginConditionalRenderNV, 2, arg0, arg1);

}
PFNGLBEGINCONDITIONALRENDERNVPROC glad_debug_glBeginConditionalRenderNV = glad_debug_impl_glBeginConditionalRenderNV;
PFNGLENDCONDITIONALRENDERNVPROC glad_glEndConditionalRenderNV;
void APIENTRY glad_debug_impl_glEndConditionalRenderNV() {
    _pre_call_callback("glEndConditionalRenderNV", (void*)glEndConditionalRenderNV, 0);
     glad_glEndConditionalRenderNV();
    _post_call_callback("glEndConditionalRenderNV", (void*)glEndConditionalRenderNV, 0);

}
PFNGLENDCONDITIONALRENDERNVPROC glad_debug_glEndConditionalRenderNV = glad_debug_impl_glEndConditionalRenderNV;
PFNGLRESIZEBUFFERSMESAPROC glad_glResizeBuffersMESA;
void APIENTRY glad_debug_impl_glResizeBuffersMESA() {
    _pre_call_callback("glResizeBuffersMESA", (void*)glResizeBuffersMESA, 0);
     glad_glResizeBuffersMESA();
    _post_call_callback("glResizeBuffersMESA", (void*)glResizeBuffersMESA, 0);

}
PFNGLRESIZEBUFFERSMESAPROC glad_debug_glResizeBuffersMESA = glad_debug_impl_glResizeBuffersMESA;
PFNGLTEXTUREVIEWPROC glad_glTextureView;
void APIENTRY glad_debug_impl_glTextureView(GLuint arg0, GLenum arg1, GLuint arg2, GLenum arg3, GLuint arg4, GLuint arg5, GLuint arg6, GLuint arg7) {
    _pre_call_callback("glTextureView", (void*)glTextureView, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTextureView(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTextureView", (void*)glTextureView, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXTUREVIEWPROC glad_debug_glTextureView = glad_debug_impl_glTextureView;
PFNGLCONVOLUTIONFILTER1DEXTPROC glad_glConvolutionFilter1DEXT;
void APIENTRY glad_debug_impl_glConvolutionFilter1DEXT(GLenum arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glConvolutionFilter1DEXT", (void*)glConvolutionFilter1DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glConvolutionFilter1DEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glConvolutionFilter1DEXT", (void*)glConvolutionFilter1DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCONVOLUTIONFILTER1DEXTPROC glad_debug_glConvolutionFilter1DEXT = glad_debug_impl_glConvolutionFilter1DEXT;
PFNGLCONVOLUTIONFILTER2DEXTPROC glad_glConvolutionFilter2DEXT;
void APIENTRY glad_debug_impl_glConvolutionFilter2DEXT(GLenum arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void* arg6) {
    _pre_call_callback("glConvolutionFilter2DEXT", (void*)glConvolutionFilter2DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glConvolutionFilter2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glConvolutionFilter2DEXT", (void*)glConvolutionFilter2DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCONVOLUTIONFILTER2DEXTPROC glad_debug_glConvolutionFilter2DEXT = glad_debug_impl_glConvolutionFilter2DEXT;
PFNGLCONVOLUTIONPARAMETERFEXTPROC glad_glConvolutionParameterfEXT;
void APIENTRY glad_debug_impl_glConvolutionParameterfEXT(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glConvolutionParameterfEXT", (void*)glConvolutionParameterfEXT, 3, arg0, arg1, arg2);
     glad_glConvolutionParameterfEXT(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameterfEXT", (void*)glConvolutionParameterfEXT, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERFEXTPROC glad_debug_glConvolutionParameterfEXT = glad_debug_impl_glConvolutionParameterfEXT;
PFNGLCONVOLUTIONPARAMETERFVEXTPROC glad_glConvolutionParameterfvEXT;
void APIENTRY glad_debug_impl_glConvolutionParameterfvEXT(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glConvolutionParameterfvEXT", (void*)glConvolutionParameterfvEXT, 3, arg0, arg1, arg2);
     glad_glConvolutionParameterfvEXT(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameterfvEXT", (void*)glConvolutionParameterfvEXT, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERFVEXTPROC glad_debug_glConvolutionParameterfvEXT = glad_debug_impl_glConvolutionParameterfvEXT;
PFNGLCONVOLUTIONPARAMETERIEXTPROC glad_glConvolutionParameteriEXT;
void APIENTRY glad_debug_impl_glConvolutionParameteriEXT(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glConvolutionParameteriEXT", (void*)glConvolutionParameteriEXT, 3, arg0, arg1, arg2);
     glad_glConvolutionParameteriEXT(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameteriEXT", (void*)glConvolutionParameteriEXT, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERIEXTPROC glad_debug_glConvolutionParameteriEXT = glad_debug_impl_glConvolutionParameteriEXT;
PFNGLCONVOLUTIONPARAMETERIVEXTPROC glad_glConvolutionParameterivEXT;
void APIENTRY glad_debug_impl_glConvolutionParameterivEXT(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glConvolutionParameterivEXT", (void*)glConvolutionParameterivEXT, 3, arg0, arg1, arg2);
     glad_glConvolutionParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameterivEXT", (void*)glConvolutionParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERIVEXTPROC glad_debug_glConvolutionParameterivEXT = glad_debug_impl_glConvolutionParameterivEXT;
PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glad_glCopyConvolutionFilter1DEXT;
void APIENTRY glad_debug_impl_glCopyConvolutionFilter1DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4) {
    _pre_call_callback("glCopyConvolutionFilter1DEXT", (void*)glCopyConvolutionFilter1DEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glCopyConvolutionFilter1DEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glCopyConvolutionFilter1DEXT", (void*)glCopyConvolutionFilter1DEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glad_debug_glCopyConvolutionFilter1DEXT = glad_debug_impl_glCopyConvolutionFilter1DEXT;
PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glad_glCopyConvolutionFilter2DEXT;
void APIENTRY glad_debug_impl_glCopyConvolutionFilter2DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_callback("glCopyConvolutionFilter2DEXT", (void*)glCopyConvolutionFilter2DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glCopyConvolutionFilter2DEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glCopyConvolutionFilter2DEXT", (void*)glCopyConvolutionFilter2DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glad_debug_glCopyConvolutionFilter2DEXT = glad_debug_impl_glCopyConvolutionFilter2DEXT;
PFNGLGETCONVOLUTIONFILTEREXTPROC glad_glGetConvolutionFilterEXT;
void APIENTRY glad_debug_impl_glGetConvolutionFilterEXT(GLenum arg0, GLenum arg1, GLenum arg2, void* arg3) {
    _pre_call_callback("glGetConvolutionFilterEXT", (void*)glGetConvolutionFilterEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetConvolutionFilterEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetConvolutionFilterEXT", (void*)glGetConvolutionFilterEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCONVOLUTIONFILTEREXTPROC glad_debug_glGetConvolutionFilterEXT = glad_debug_impl_glGetConvolutionFilterEXT;
PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glad_glGetConvolutionParameterfvEXT;
void APIENTRY glad_debug_impl_glGetConvolutionParameterfvEXT(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetConvolutionParameterfvEXT", (void*)glGetConvolutionParameterfvEXT, 3, arg0, arg1, arg2);
     glad_glGetConvolutionParameterfvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetConvolutionParameterfvEXT", (void*)glGetConvolutionParameterfvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glad_debug_glGetConvolutionParameterfvEXT = glad_debug_impl_glGetConvolutionParameterfvEXT;
PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glad_glGetConvolutionParameterivEXT;
void APIENTRY glad_debug_impl_glGetConvolutionParameterivEXT(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetConvolutionParameterivEXT", (void*)glGetConvolutionParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetConvolutionParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetConvolutionParameterivEXT", (void*)glGetConvolutionParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glad_debug_glGetConvolutionParameterivEXT = glad_debug_impl_glGetConvolutionParameterivEXT;
PFNGLGETSEPARABLEFILTEREXTPROC glad_glGetSeparableFilterEXT;
void APIENTRY glad_debug_impl_glGetSeparableFilterEXT(GLenum arg0, GLenum arg1, GLenum arg2, void* arg3, void* arg4, void* arg5) {
    _pre_call_callback("glGetSeparableFilterEXT", (void*)glGetSeparableFilterEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetSeparableFilterEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetSeparableFilterEXT", (void*)glGetSeparableFilterEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETSEPARABLEFILTEREXTPROC glad_debug_glGetSeparableFilterEXT = glad_debug_impl_glGetSeparableFilterEXT;
PFNGLSEPARABLEFILTER2DEXTPROC glad_glSeparableFilter2DEXT;
void APIENTRY glad_debug_impl_glSeparableFilter2DEXT(GLenum arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void* arg6, const void* arg7) {
    _pre_call_callback("glSeparableFilter2DEXT", (void*)glSeparableFilter2DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glSeparableFilter2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glSeparableFilter2DEXT", (void*)glSeparableFilter2DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLSEPARABLEFILTER2DEXTPROC glad_debug_glSeparableFilter2DEXT = glad_debug_impl_glSeparableFilter2DEXT;
PFNGLVERTEXATTRIBL1I64NVPROC glad_glVertexAttribL1i64NV;
void APIENTRY glad_debug_impl_glVertexAttribL1i64NV(GLuint arg0, GLint64EXT arg1) {
    _pre_call_callback("glVertexAttribL1i64NV", (void*)glVertexAttribL1i64NV, 2, arg0, arg1);
     glad_glVertexAttribL1i64NV(arg0, arg1);
    _post_call_callback("glVertexAttribL1i64NV", (void*)glVertexAttribL1i64NV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1I64NVPROC glad_debug_glVertexAttribL1i64NV = glad_debug_impl_glVertexAttribL1i64NV;
PFNGLVERTEXATTRIBL2I64NVPROC glad_glVertexAttribL2i64NV;
void APIENTRY glad_debug_impl_glVertexAttribL2i64NV(GLuint arg0, GLint64EXT arg1, GLint64EXT arg2) {
    _pre_call_callback("glVertexAttribL2i64NV", (void*)glVertexAttribL2i64NV, 3, arg0, arg1, arg2);
     glad_glVertexAttribL2i64NV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribL2i64NV", (void*)glVertexAttribL2i64NV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBL2I64NVPROC glad_debug_glVertexAttribL2i64NV = glad_debug_impl_glVertexAttribL2i64NV;
PFNGLVERTEXATTRIBL3I64NVPROC glad_glVertexAttribL3i64NV;
void APIENTRY glad_debug_impl_glVertexAttribL3i64NV(GLuint arg0, GLint64EXT arg1, GLint64EXT arg2, GLint64EXT arg3) {
    _pre_call_callback("glVertexAttribL3i64NV", (void*)glVertexAttribL3i64NV, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribL3i64NV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribL3i64NV", (void*)glVertexAttribL3i64NV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBL3I64NVPROC glad_debug_glVertexAttribL3i64NV = glad_debug_impl_glVertexAttribL3i64NV;
PFNGLVERTEXATTRIBL4I64NVPROC glad_glVertexAttribL4i64NV;
void APIENTRY glad_debug_impl_glVertexAttribL4i64NV(GLuint arg0, GLint64EXT arg1, GLint64EXT arg2, GLint64EXT arg3, GLint64EXT arg4) {
    _pre_call_callback("glVertexAttribL4i64NV", (void*)glVertexAttribL4i64NV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribL4i64NV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribL4i64NV", (void*)glVertexAttribL4i64NV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBL4I64NVPROC glad_debug_glVertexAttribL4i64NV = glad_debug_impl_glVertexAttribL4i64NV;
PFNGLVERTEXATTRIBL1I64VNVPROC glad_glVertexAttribL1i64vNV;
void APIENTRY glad_debug_impl_glVertexAttribL1i64vNV(GLuint arg0, const GLint64EXT* arg1) {
    _pre_call_callback("glVertexAttribL1i64vNV", (void*)glVertexAttribL1i64vNV, 2, arg0, arg1);
     glad_glVertexAttribL1i64vNV(arg0, arg1);
    _post_call_callback("glVertexAttribL1i64vNV", (void*)glVertexAttribL1i64vNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1I64VNVPROC glad_debug_glVertexAttribL1i64vNV = glad_debug_impl_glVertexAttribL1i64vNV;
PFNGLVERTEXATTRIBL2I64VNVPROC glad_glVertexAttribL2i64vNV;
void APIENTRY glad_debug_impl_glVertexAttribL2i64vNV(GLuint arg0, const GLint64EXT* arg1) {
    _pre_call_callback("glVertexAttribL2i64vNV", (void*)glVertexAttribL2i64vNV, 2, arg0, arg1);
     glad_glVertexAttribL2i64vNV(arg0, arg1);
    _post_call_callback("glVertexAttribL2i64vNV", (void*)glVertexAttribL2i64vNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL2I64VNVPROC glad_debug_glVertexAttribL2i64vNV = glad_debug_impl_glVertexAttribL2i64vNV;
PFNGLVERTEXATTRIBL3I64VNVPROC glad_glVertexAttribL3i64vNV;
void APIENTRY glad_debug_impl_glVertexAttribL3i64vNV(GLuint arg0, const GLint64EXT* arg1) {
    _pre_call_callback("glVertexAttribL3i64vNV", (void*)glVertexAttribL3i64vNV, 2, arg0, arg1);
     glad_glVertexAttribL3i64vNV(arg0, arg1);
    _post_call_callback("glVertexAttribL3i64vNV", (void*)glVertexAttribL3i64vNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL3I64VNVPROC glad_debug_glVertexAttribL3i64vNV = glad_debug_impl_glVertexAttribL3i64vNV;
PFNGLVERTEXATTRIBL4I64VNVPROC glad_glVertexAttribL4i64vNV;
void APIENTRY glad_debug_impl_glVertexAttribL4i64vNV(GLuint arg0, const GLint64EXT* arg1) {
    _pre_call_callback("glVertexAttribL4i64vNV", (void*)glVertexAttribL4i64vNV, 2, arg0, arg1);
     glad_glVertexAttribL4i64vNV(arg0, arg1);
    _post_call_callback("glVertexAttribL4i64vNV", (void*)glVertexAttribL4i64vNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL4I64VNVPROC glad_debug_glVertexAttribL4i64vNV = glad_debug_impl_glVertexAttribL4i64vNV;
PFNGLVERTEXATTRIBL1UI64NVPROC glad_glVertexAttribL1ui64NV;
void APIENTRY glad_debug_impl_glVertexAttribL1ui64NV(GLuint arg0, GLuint64EXT arg1) {
    _pre_call_callback("glVertexAttribL1ui64NV", (void*)glVertexAttribL1ui64NV, 2, arg0, arg1);
     glad_glVertexAttribL1ui64NV(arg0, arg1);
    _post_call_callback("glVertexAttribL1ui64NV", (void*)glVertexAttribL1ui64NV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1UI64NVPROC glad_debug_glVertexAttribL1ui64NV = glad_debug_impl_glVertexAttribL1ui64NV;
PFNGLVERTEXATTRIBL2UI64NVPROC glad_glVertexAttribL2ui64NV;
void APIENTRY glad_debug_impl_glVertexAttribL2ui64NV(GLuint arg0, GLuint64EXT arg1, GLuint64EXT arg2) {
    _pre_call_callback("glVertexAttribL2ui64NV", (void*)glVertexAttribL2ui64NV, 3, arg0, arg1, arg2);
     glad_glVertexAttribL2ui64NV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribL2ui64NV", (void*)glVertexAttribL2ui64NV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBL2UI64NVPROC glad_debug_glVertexAttribL2ui64NV = glad_debug_impl_glVertexAttribL2ui64NV;
PFNGLVERTEXATTRIBL3UI64NVPROC glad_glVertexAttribL3ui64NV;
void APIENTRY glad_debug_impl_glVertexAttribL3ui64NV(GLuint arg0, GLuint64EXT arg1, GLuint64EXT arg2, GLuint64EXT arg3) {
    _pre_call_callback("glVertexAttribL3ui64NV", (void*)glVertexAttribL3ui64NV, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribL3ui64NV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribL3ui64NV", (void*)glVertexAttribL3ui64NV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBL3UI64NVPROC glad_debug_glVertexAttribL3ui64NV = glad_debug_impl_glVertexAttribL3ui64NV;
PFNGLVERTEXATTRIBL4UI64NVPROC glad_glVertexAttribL4ui64NV;
void APIENTRY glad_debug_impl_glVertexAttribL4ui64NV(GLuint arg0, GLuint64EXT arg1, GLuint64EXT arg2, GLuint64EXT arg3, GLuint64EXT arg4) {
    _pre_call_callback("glVertexAttribL4ui64NV", (void*)glVertexAttribL4ui64NV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribL4ui64NV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribL4ui64NV", (void*)glVertexAttribL4ui64NV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBL4UI64NVPROC glad_debug_glVertexAttribL4ui64NV = glad_debug_impl_glVertexAttribL4ui64NV;
PFNGLVERTEXATTRIBL1UI64VNVPROC glad_glVertexAttribL1ui64vNV;
void APIENTRY glad_debug_impl_glVertexAttribL1ui64vNV(GLuint arg0, const GLuint64EXT* arg1) {
    _pre_call_callback("glVertexAttribL1ui64vNV", (void*)glVertexAttribL1ui64vNV, 2, arg0, arg1);
     glad_glVertexAttribL1ui64vNV(arg0, arg1);
    _post_call_callback("glVertexAttribL1ui64vNV", (void*)glVertexAttribL1ui64vNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1UI64VNVPROC glad_debug_glVertexAttribL1ui64vNV = glad_debug_impl_glVertexAttribL1ui64vNV;
PFNGLVERTEXATTRIBL2UI64VNVPROC glad_glVertexAttribL2ui64vNV;
void APIENTRY glad_debug_impl_glVertexAttribL2ui64vNV(GLuint arg0, const GLuint64EXT* arg1) {
    _pre_call_callback("glVertexAttribL2ui64vNV", (void*)glVertexAttribL2ui64vNV, 2, arg0, arg1);
     glad_glVertexAttribL2ui64vNV(arg0, arg1);
    _post_call_callback("glVertexAttribL2ui64vNV", (void*)glVertexAttribL2ui64vNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL2UI64VNVPROC glad_debug_glVertexAttribL2ui64vNV = glad_debug_impl_glVertexAttribL2ui64vNV;
PFNGLVERTEXATTRIBL3UI64VNVPROC glad_glVertexAttribL3ui64vNV;
void APIENTRY glad_debug_impl_glVertexAttribL3ui64vNV(GLuint arg0, const GLuint64EXT* arg1) {
    _pre_call_callback("glVertexAttribL3ui64vNV", (void*)glVertexAttribL3ui64vNV, 2, arg0, arg1);
     glad_glVertexAttribL3ui64vNV(arg0, arg1);
    _post_call_callback("glVertexAttribL3ui64vNV", (void*)glVertexAttribL3ui64vNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL3UI64VNVPROC glad_debug_glVertexAttribL3ui64vNV = glad_debug_impl_glVertexAttribL3ui64vNV;
PFNGLVERTEXATTRIBL4UI64VNVPROC glad_glVertexAttribL4ui64vNV;
void APIENTRY glad_debug_impl_glVertexAttribL4ui64vNV(GLuint arg0, const GLuint64EXT* arg1) {
    _pre_call_callback("glVertexAttribL4ui64vNV", (void*)glVertexAttribL4ui64vNV, 2, arg0, arg1);
     glad_glVertexAttribL4ui64vNV(arg0, arg1);
    _post_call_callback("glVertexAttribL4ui64vNV", (void*)glVertexAttribL4ui64vNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL4UI64VNVPROC glad_debug_glVertexAttribL4ui64vNV = glad_debug_impl_glVertexAttribL4ui64vNV;
PFNGLGETVERTEXATTRIBLI64VNVPROC glad_glGetVertexAttribLi64vNV;
void APIENTRY glad_debug_impl_glGetVertexAttribLi64vNV(GLuint arg0, GLenum arg1, GLint64EXT* arg2) {
    _pre_call_callback("glGetVertexAttribLi64vNV", (void*)glGetVertexAttribLi64vNV, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribLi64vNV(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribLi64vNV", (void*)glGetVertexAttribLi64vNV, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBLI64VNVPROC glad_debug_glGetVertexAttribLi64vNV = glad_debug_impl_glGetVertexAttribLi64vNV;
PFNGLGETVERTEXATTRIBLUI64VNVPROC glad_glGetVertexAttribLui64vNV;
void APIENTRY glad_debug_impl_glGetVertexAttribLui64vNV(GLuint arg0, GLenum arg1, GLuint64EXT* arg2) {
    _pre_call_callback("glGetVertexAttribLui64vNV", (void*)glGetVertexAttribLui64vNV, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribLui64vNV(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribLui64vNV", (void*)glGetVertexAttribLui64vNV, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBLUI64VNVPROC glad_debug_glGetVertexAttribLui64vNV = glad_debug_impl_glGetVertexAttribLui64vNV;
PFNGLVERTEXATTRIBLFORMATNVPROC glad_glVertexAttribLFormatNV;
void APIENTRY glad_debug_impl_glVertexAttribLFormatNV(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3) {
    _pre_call_callback("glVertexAttribLFormatNV", (void*)glVertexAttribLFormatNV, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribLFormatNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribLFormatNV", (void*)glVertexAttribLFormatNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBLFORMATNVPROC glad_debug_glVertexAttribLFormatNV = glad_debug_impl_glVertexAttribLFormatNV;
PFNGLCOLORTABLEEXTPROC glad_glColorTableEXT;
void APIENTRY glad_debug_impl_glColorTableEXT(GLenum arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glColorTableEXT", (void*)glColorTableEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glColorTableEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glColorTableEXT", (void*)glColorTableEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOLORTABLEEXTPROC glad_debug_glColorTableEXT = glad_debug_impl_glColorTableEXT;
PFNGLGETCOLORTABLEEXTPROC glad_glGetColorTableEXT;
void APIENTRY glad_debug_impl_glGetColorTableEXT(GLenum arg0, GLenum arg1, GLenum arg2, void* arg3) {
    _pre_call_callback("glGetColorTableEXT", (void*)glGetColorTableEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetColorTableEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetColorTableEXT", (void*)glGetColorTableEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCOLORTABLEEXTPROC glad_debug_glGetColorTableEXT = glad_debug_impl_glGetColorTableEXT;
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glad_glGetColorTableParameterivEXT;
void APIENTRY glad_debug_impl_glGetColorTableParameterivEXT(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetColorTableParameterivEXT", (void*)glGetColorTableParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetColorTableParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetColorTableParameterivEXT", (void*)glGetColorTableParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glad_debug_glGetColorTableParameterivEXT = glad_debug_impl_glGetColorTableParameterivEXT;
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glad_glGetColorTableParameterfvEXT;
void APIENTRY glad_debug_impl_glGetColorTableParameterfvEXT(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetColorTableParameterfvEXT", (void*)glGetColorTableParameterfvEXT, 3, arg0, arg1, arg2);
     glad_glGetColorTableParameterfvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetColorTableParameterfvEXT", (void*)glGetColorTableParameterfvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glad_debug_glGetColorTableParameterfvEXT = glad_debug_impl_glGetColorTableParameterfvEXT;
PFNGLTEXBUFFERARBPROC glad_glTexBufferARB;
void APIENTRY glad_debug_impl_glTexBufferARB(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glTexBufferARB", (void*)glTexBufferARB, 3, arg0, arg1, arg2);
     glad_glTexBufferARB(arg0, arg1, arg2);
    _post_call_callback("glTexBufferARB", (void*)glTexBufferARB, 3, arg0, arg1, arg2);

}
PFNGLTEXBUFFERARBPROC glad_debug_glTexBufferARB = glad_debug_impl_glTexBufferARB;
PFNGLPNTRIANGLESIATIPROC glad_glPNTrianglesiATI;
void APIENTRY glad_debug_impl_glPNTrianglesiATI(GLenum arg0, GLint arg1) {
    _pre_call_callback("glPNTrianglesiATI", (void*)glPNTrianglesiATI, 2, arg0, arg1);
     glad_glPNTrianglesiATI(arg0, arg1);
    _post_call_callback("glPNTrianglesiATI", (void*)glPNTrianglesiATI, 2, arg0, arg1);

}
PFNGLPNTRIANGLESIATIPROC glad_debug_glPNTrianglesiATI = glad_debug_impl_glPNTrianglesiATI;
PFNGLPNTRIANGLESFATIPROC glad_glPNTrianglesfATI;
void APIENTRY glad_debug_impl_glPNTrianglesfATI(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glPNTrianglesfATI", (void*)glPNTrianglesfATI, 2, arg0, arg1);
     glad_glPNTrianglesfATI(arg0, arg1);
    _post_call_callback("glPNTrianglesfATI", (void*)glPNTrianglesfATI, 2, arg0, arg1);

}
PFNGLPNTRIANGLESFATIPROC glad_debug_glPNTrianglesfATI = glad_debug_impl_glPNTrianglesfATI;
PFNGLFLUSHRASTERSGIXPROC glad_glFlushRasterSGIX;
void APIENTRY glad_debug_impl_glFlushRasterSGIX() {
    _pre_call_callback("glFlushRasterSGIX", (void*)glFlushRasterSGIX, 0);
     glad_glFlushRasterSGIX();
    _post_call_callback("glFlushRasterSGIX", (void*)glFlushRasterSGIX, 0);

}
PFNGLFLUSHRASTERSGIXPROC glad_debug_glFlushRasterSGIX = glad_debug_impl_glFlushRasterSGIX;
PFNGLAPPLYTEXTUREEXTPROC glad_glApplyTextureEXT;
void APIENTRY glad_debug_impl_glApplyTextureEXT(GLenum arg0) {
    _pre_call_callback("glApplyTextureEXT", (void*)glApplyTextureEXT, 1, arg0);
     glad_glApplyTextureEXT(arg0);
    _post_call_callback("glApplyTextureEXT", (void*)glApplyTextureEXT, 1, arg0);

}
PFNGLAPPLYTEXTUREEXTPROC glad_debug_glApplyTextureEXT = glad_debug_impl_glApplyTextureEXT;
PFNGLTEXTURELIGHTEXTPROC glad_glTextureLightEXT;
void APIENTRY glad_debug_impl_glTextureLightEXT(GLenum arg0) {
    _pre_call_callback("glTextureLightEXT", (void*)glTextureLightEXT, 1, arg0);
     glad_glTextureLightEXT(arg0);
    _post_call_callback("glTextureLightEXT", (void*)glTextureLightEXT, 1, arg0);

}
PFNGLTEXTURELIGHTEXTPROC glad_debug_glTextureLightEXT = glad_debug_impl_glTextureLightEXT;
PFNGLTEXTUREMATERIALEXTPROC glad_glTextureMaterialEXT;
void APIENTRY glad_debug_impl_glTextureMaterialEXT(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glTextureMaterialEXT", (void*)glTextureMaterialEXT, 2, arg0, arg1);
     glad_glTextureMaterialEXT(arg0, arg1);
    _post_call_callback("glTextureMaterialEXT", (void*)glTextureMaterialEXT, 2, arg0, arg1);

}
PFNGLTEXTUREMATERIALEXTPROC glad_debug_glTextureMaterialEXT = glad_debug_impl_glTextureMaterialEXT;
PFNGLBLENDFUNCINDEXEDAMDPROC glad_glBlendFuncIndexedAMD;
void APIENTRY glad_debug_impl_glBlendFuncIndexedAMD(GLuint arg0, GLenum arg1, GLenum arg2) {
    _pre_call_callback("glBlendFuncIndexedAMD", (void*)glBlendFuncIndexedAMD, 3, arg0, arg1, arg2);
     glad_glBlendFuncIndexedAMD(arg0, arg1, arg2);
    _post_call_callback("glBlendFuncIndexedAMD", (void*)glBlendFuncIndexedAMD, 3, arg0, arg1, arg2);

}
PFNGLBLENDFUNCINDEXEDAMDPROC glad_debug_glBlendFuncIndexedAMD = glad_debug_impl_glBlendFuncIndexedAMD;
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_glBlendFuncSeparateIndexedAMD;
void APIENTRY glad_debug_impl_glBlendFuncSeparateIndexedAMD(GLuint arg0, GLenum arg1, GLenum arg2, GLenum arg3, GLenum arg4) {
    _pre_call_callback("glBlendFuncSeparateIndexedAMD", (void*)glBlendFuncSeparateIndexedAMD, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glBlendFuncSeparateIndexedAMD(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glBlendFuncSeparateIndexedAMD", (void*)glBlendFuncSeparateIndexedAMD, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_debug_glBlendFuncSeparateIndexedAMD = glad_debug_impl_glBlendFuncSeparateIndexedAMD;
PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_glBlendEquationIndexedAMD;
void APIENTRY glad_debug_impl_glBlendEquationIndexedAMD(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glBlendEquationIndexedAMD", (void*)glBlendEquationIndexedAMD, 2, arg0, arg1);
     glad_glBlendEquationIndexedAMD(arg0, arg1);
    _post_call_callback("glBlendEquationIndexedAMD", (void*)glBlendEquationIndexedAMD, 2, arg0, arg1);

}
PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_debug_glBlendEquationIndexedAMD = glad_debug_impl_glBlendEquationIndexedAMD;
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_glBlendEquationSeparateIndexedAMD;
void APIENTRY glad_debug_impl_glBlendEquationSeparateIndexedAMD(GLuint arg0, GLenum arg1, GLenum arg2) {
    _pre_call_callback("glBlendEquationSeparateIndexedAMD", (void*)glBlendEquationSeparateIndexedAMD, 3, arg0, arg1, arg2);
     glad_glBlendEquationSeparateIndexedAMD(arg0, arg1, arg2);
    _post_call_callback("glBlendEquationSeparateIndexedAMD", (void*)glBlendEquationSeparateIndexedAMD, 3, arg0, arg1, arg2);

}
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_debug_glBlendEquationSeparateIndexedAMD = glad_debug_impl_glBlendEquationSeparateIndexedAMD;
PFNGLTEXTURERANGEAPPLEPROC glad_glTextureRangeAPPLE;
void APIENTRY glad_debug_impl_glTextureRangeAPPLE(GLenum arg0, GLsizei arg1, const void* arg2) {
    _pre_call_callback("glTextureRangeAPPLE", (void*)glTextureRangeAPPLE, 3, arg0, arg1, arg2);
     glad_glTextureRangeAPPLE(arg0, arg1, arg2);
    _post_call_callback("glTextureRangeAPPLE", (void*)glTextureRangeAPPLE, 3, arg0, arg1, arg2);

}
PFNGLTEXTURERANGEAPPLEPROC glad_debug_glTextureRangeAPPLE = glad_debug_impl_glTextureRangeAPPLE;
PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glad_glGetTexParameterPointervAPPLE;
void APIENTRY glad_debug_impl_glGetTexParameterPointervAPPLE(GLenum arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetTexParameterPointervAPPLE", (void*)glGetTexParameterPointervAPPLE, 3, arg0, arg1, arg2);
     glad_glGetTexParameterPointervAPPLE(arg0, arg1, arg2);
    _post_call_callback("glGetTexParameterPointervAPPLE", (void*)glGetTexParameterPointervAPPLE, 3, arg0, arg1, arg2);

}
PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glad_debug_glGetTexParameterPointervAPPLE = glad_debug_impl_glGetTexParameterPointervAPPLE;
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glad_glFramebufferTextureLayerEXT;
void APIENTRY glad_debug_impl_glFramebufferTextureLayerEXT(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glFramebufferTextureLayerEXT", (void*)glFramebufferTextureLayerEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glFramebufferTextureLayerEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glFramebufferTextureLayerEXT", (void*)glFramebufferTextureLayerEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glad_debug_glFramebufferTextureLayerEXT = glad_debug_impl_glFramebufferTextureLayerEXT;
PFNGLTEXTUREBARRIERNVPROC glad_glTextureBarrierNV;
void APIENTRY glad_debug_impl_glTextureBarrierNV() {
    _pre_call_callback("glTextureBarrierNV", (void*)glTextureBarrierNV, 0);
     glad_glTextureBarrierNV();
    _post_call_callback("glTextureBarrierNV", (void*)glTextureBarrierNV, 0);

}
PFNGLTEXTUREBARRIERNVPROC glad_debug_glTextureBarrierNV = glad_debug_impl_glTextureBarrierNV;
PFNGLTBUFFERMASK3DFXPROC glad_glTbufferMask3DFX;
void APIENTRY glad_debug_impl_glTbufferMask3DFX(GLuint arg0) {
    _pre_call_callback("glTbufferMask3DFX", (void*)glTbufferMask3DFX, 1, arg0);
     glad_glTbufferMask3DFX(arg0);
    _post_call_callback("glTbufferMask3DFX", (void*)glTbufferMask3DFX, 1, arg0);

}
PFNGLTBUFFERMASK3DFXPROC glad_debug_glTbufferMask3DFX = glad_debug_impl_glTbufferMask3DFX;
PFNGLFRAMETERMINATORGREMEDYPROC glad_glFrameTerminatorGREMEDY;
void APIENTRY glad_debug_impl_glFrameTerminatorGREMEDY() {
    _pre_call_callback("glFrameTerminatorGREMEDY", (void*)glFrameTerminatorGREMEDY, 0);
     glad_glFrameTerminatorGREMEDY();
    _post_call_callback("glFrameTerminatorGREMEDY", (void*)glFrameTerminatorGREMEDY, 0);

}
PFNGLFRAMETERMINATORGREMEDYPROC glad_debug_glFrameTerminatorGREMEDY = glad_debug_impl_glFrameTerminatorGREMEDY;
PFNGLUSESHADERPROGRAMEXTPROC glad_glUseShaderProgramEXT;
void APIENTRY glad_debug_impl_glUseShaderProgramEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glUseShaderProgramEXT", (void*)glUseShaderProgramEXT, 2, arg0, arg1);
     glad_glUseShaderProgramEXT(arg0, arg1);
    _post_call_callback("glUseShaderProgramEXT", (void*)glUseShaderProgramEXT, 2, arg0, arg1);

}
PFNGLUSESHADERPROGRAMEXTPROC glad_debug_glUseShaderProgramEXT = glad_debug_impl_glUseShaderProgramEXT;
PFNGLACTIVEPROGRAMEXTPROC glad_glActiveProgramEXT;
void APIENTRY glad_debug_impl_glActiveProgramEXT(GLuint arg0) {
    _pre_call_callback("glActiveProgramEXT", (void*)glActiveProgramEXT, 1, arg0);
     glad_glActiveProgramEXT(arg0);
    _post_call_callback("glActiveProgramEXT", (void*)glActiveProgramEXT, 1, arg0);

}
PFNGLACTIVEPROGRAMEXTPROC glad_debug_glActiveProgramEXT = glad_debug_impl_glActiveProgramEXT;
PFNGLCREATESHADERPROGRAMEXTPROC glad_glCreateShaderProgramEXT;
GLuint APIENTRY glad_debug_impl_glCreateShaderProgramEXT(GLenum arg0, const GLchar* arg1) {
    GLuint ret;
    _pre_call_callback("glCreateShaderProgramEXT", (void*)glCreateShaderProgramEXT, 2, arg0, arg1);
    ret =  glad_glCreateShaderProgramEXT(arg0, arg1);
    _post_call_callback("glCreateShaderProgramEXT", (void*)glCreateShaderProgramEXT, 2, arg0, arg1);
    return ret;
}
PFNGLCREATESHADERPROGRAMEXTPROC glad_debug_glCreateShaderProgramEXT = glad_debug_impl_glCreateShaderProgramEXT;
PFNGLACTIVESHADERPROGRAMEXTPROC glad_glActiveShaderProgramEXT;
void APIENTRY glad_debug_impl_glActiveShaderProgramEXT(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glActiveShaderProgramEXT", (void*)glActiveShaderProgramEXT, 2, arg0, arg1);
     glad_glActiveShaderProgramEXT(arg0, arg1);
    _post_call_callback("glActiveShaderProgramEXT", (void*)glActiveShaderProgramEXT, 2, arg0, arg1);

}
PFNGLACTIVESHADERPROGRAMEXTPROC glad_debug_glActiveShaderProgramEXT = glad_debug_impl_glActiveShaderProgramEXT;
PFNGLBINDPROGRAMPIPELINEEXTPROC glad_glBindProgramPipelineEXT;
void APIENTRY glad_debug_impl_glBindProgramPipelineEXT(GLuint arg0) {
    _pre_call_callback("glBindProgramPipelineEXT", (void*)glBindProgramPipelineEXT, 1, arg0);
     glad_glBindProgramPipelineEXT(arg0);
    _post_call_callback("glBindProgramPipelineEXT", (void*)glBindProgramPipelineEXT, 1, arg0);

}
PFNGLBINDPROGRAMPIPELINEEXTPROC glad_debug_glBindProgramPipelineEXT = glad_debug_impl_glBindProgramPipelineEXT;
PFNGLCREATESHADERPROGRAMVEXTPROC glad_glCreateShaderProgramvEXT;
GLuint APIENTRY glad_debug_impl_glCreateShaderProgramvEXT(GLenum arg0, GLsizei arg1, const GLchar** arg2) {
    GLuint ret;
    _pre_call_callback("glCreateShaderProgramvEXT", (void*)glCreateShaderProgramvEXT, 3, arg0, arg1, arg2);
    ret =  glad_glCreateShaderProgramvEXT(arg0, arg1, arg2);
    _post_call_callback("glCreateShaderProgramvEXT", (void*)glCreateShaderProgramvEXT, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLCREATESHADERPROGRAMVEXTPROC glad_debug_glCreateShaderProgramvEXT = glad_debug_impl_glCreateShaderProgramvEXT;
PFNGLDELETEPROGRAMPIPELINESEXTPROC glad_glDeleteProgramPipelinesEXT;
void APIENTRY glad_debug_impl_glDeleteProgramPipelinesEXT(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteProgramPipelinesEXT", (void*)glDeleteProgramPipelinesEXT, 2, arg0, arg1);
     glad_glDeleteProgramPipelinesEXT(arg0, arg1);
    _post_call_callback("glDeleteProgramPipelinesEXT", (void*)glDeleteProgramPipelinesEXT, 2, arg0, arg1);

}
PFNGLDELETEPROGRAMPIPELINESEXTPROC glad_debug_glDeleteProgramPipelinesEXT = glad_debug_impl_glDeleteProgramPipelinesEXT;
PFNGLGENPROGRAMPIPELINESEXTPROC glad_glGenProgramPipelinesEXT;
void APIENTRY glad_debug_impl_glGenProgramPipelinesEXT(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenProgramPipelinesEXT", (void*)glGenProgramPipelinesEXT, 2, arg0, arg1);
     glad_glGenProgramPipelinesEXT(arg0, arg1);
    _post_call_callback("glGenProgramPipelinesEXT", (void*)glGenProgramPipelinesEXT, 2, arg0, arg1);

}
PFNGLGENPROGRAMPIPELINESEXTPROC glad_debug_glGenProgramPipelinesEXT = glad_debug_impl_glGenProgramPipelinesEXT;
PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC glad_glGetProgramPipelineInfoLogEXT;
void APIENTRY glad_debug_impl_glGetProgramPipelineInfoLogEXT(GLuint arg0, GLsizei arg1, GLsizei* arg2, GLchar* arg3) {
    _pre_call_callback("glGetProgramPipelineInfoLogEXT", (void*)glGetProgramPipelineInfoLogEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetProgramPipelineInfoLogEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetProgramPipelineInfoLogEXT", (void*)glGetProgramPipelineInfoLogEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC glad_debug_glGetProgramPipelineInfoLogEXT = glad_debug_impl_glGetProgramPipelineInfoLogEXT;
PFNGLGETPROGRAMPIPELINEIVEXTPROC glad_glGetProgramPipelineivEXT;
void APIENTRY glad_debug_impl_glGetProgramPipelineivEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetProgramPipelineivEXT", (void*)glGetProgramPipelineivEXT, 3, arg0, arg1, arg2);
     glad_glGetProgramPipelineivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetProgramPipelineivEXT", (void*)glGetProgramPipelineivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMPIPELINEIVEXTPROC glad_debug_glGetProgramPipelineivEXT = glad_debug_impl_glGetProgramPipelineivEXT;
PFNGLISPROGRAMPIPELINEEXTPROC glad_glIsProgramPipelineEXT;
GLboolean APIENTRY glad_debug_impl_glIsProgramPipelineEXT(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsProgramPipelineEXT", (void*)glIsProgramPipelineEXT, 1, arg0);
    ret =  glad_glIsProgramPipelineEXT(arg0);
    _post_call_callback("glIsProgramPipelineEXT", (void*)glIsProgramPipelineEXT, 1, arg0);
    return ret;
}
PFNGLISPROGRAMPIPELINEEXTPROC glad_debug_glIsProgramPipelineEXT = glad_debug_impl_glIsProgramPipelineEXT;
PFNGLPROGRAMPARAMETERIEXTPROC glad_glProgramParameteriEXT;
void APIENTRY glad_debug_impl_glProgramParameteriEXT(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glProgramParameteriEXT", (void*)glProgramParameteriEXT, 3, arg0, arg1, arg2);
     glad_glProgramParameteriEXT(arg0, arg1, arg2);
    _post_call_callback("glProgramParameteriEXT", (void*)glProgramParameteriEXT, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMPARAMETERIEXTPROC glad_debug_glProgramParameteriEXT = glad_debug_impl_glProgramParameteriEXT;
PFNGLPROGRAMUNIFORM1FEXTPROC glad_glProgramUniform1fEXT;
void APIENTRY glad_debug_impl_glProgramUniform1fEXT(GLuint arg0, GLint arg1, GLfloat arg2) {
    _pre_call_callback("glProgramUniform1fEXT", (void*)glProgramUniform1fEXT, 3, arg0, arg1, arg2);
     glad_glProgramUniform1fEXT(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1fEXT", (void*)glProgramUniform1fEXT, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1FEXTPROC glad_debug_glProgramUniform1fEXT = glad_debug_impl_glProgramUniform1fEXT;
PFNGLPROGRAMUNIFORM1FVEXTPROC glad_glProgramUniform1fvEXT;
void APIENTRY glad_debug_impl_glProgramUniform1fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramUniform1fvEXT", (void*)glProgramUniform1fvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1fvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1fvEXT", (void*)glProgramUniform1fvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1FVEXTPROC glad_debug_glProgramUniform1fvEXT = glad_debug_impl_glProgramUniform1fvEXT;
PFNGLPROGRAMUNIFORM1IEXTPROC glad_glProgramUniform1iEXT;
void APIENTRY glad_debug_impl_glProgramUniform1iEXT(GLuint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glProgramUniform1iEXT", (void*)glProgramUniform1iEXT, 3, arg0, arg1, arg2);
     glad_glProgramUniform1iEXT(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1iEXT", (void*)glProgramUniform1iEXT, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1IEXTPROC glad_debug_glProgramUniform1iEXT = glad_debug_impl_glProgramUniform1iEXT;
PFNGLPROGRAMUNIFORM1IVEXTPROC glad_glProgramUniform1ivEXT;
void APIENTRY glad_debug_impl_glProgramUniform1ivEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramUniform1ivEXT", (void*)glProgramUniform1ivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1ivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1ivEXT", (void*)glProgramUniform1ivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1IVEXTPROC glad_debug_glProgramUniform1ivEXT = glad_debug_impl_glProgramUniform1ivEXT;
PFNGLPROGRAMUNIFORM2FEXTPROC glad_glProgramUniform2fEXT;
void APIENTRY glad_debug_impl_glProgramUniform2fEXT(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glProgramUniform2fEXT", (void*)glProgramUniform2fEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2fEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2fEXT", (void*)glProgramUniform2fEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2FEXTPROC glad_debug_glProgramUniform2fEXT = glad_debug_impl_glProgramUniform2fEXT;
PFNGLPROGRAMUNIFORM2FVEXTPROC glad_glProgramUniform2fvEXT;
void APIENTRY glad_debug_impl_glProgramUniform2fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramUniform2fvEXT", (void*)glProgramUniform2fvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2fvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2fvEXT", (void*)glProgramUniform2fvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2FVEXTPROC glad_debug_glProgramUniform2fvEXT = glad_debug_impl_glProgramUniform2fvEXT;
PFNGLPROGRAMUNIFORM2IEXTPROC glad_glProgramUniform2iEXT;
void APIENTRY glad_debug_impl_glProgramUniform2iEXT(GLuint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glProgramUniform2iEXT", (void*)glProgramUniform2iEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2iEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2iEXT", (void*)glProgramUniform2iEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2IEXTPROC glad_debug_glProgramUniform2iEXT = glad_debug_impl_glProgramUniform2iEXT;
PFNGLPROGRAMUNIFORM2IVEXTPROC glad_glProgramUniform2ivEXT;
void APIENTRY glad_debug_impl_glProgramUniform2ivEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramUniform2ivEXT", (void*)glProgramUniform2ivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2ivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2ivEXT", (void*)glProgramUniform2ivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2IVEXTPROC glad_debug_glProgramUniform2ivEXT = glad_debug_impl_glProgramUniform2ivEXT;
PFNGLPROGRAMUNIFORM3FEXTPROC glad_glProgramUniform3fEXT;
void APIENTRY glad_debug_impl_glProgramUniform3fEXT(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glProgramUniform3fEXT", (void*)glProgramUniform3fEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3fEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3fEXT", (void*)glProgramUniform3fEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3FEXTPROC glad_debug_glProgramUniform3fEXT = glad_debug_impl_glProgramUniform3fEXT;
PFNGLPROGRAMUNIFORM3FVEXTPROC glad_glProgramUniform3fvEXT;
void APIENTRY glad_debug_impl_glProgramUniform3fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramUniform3fvEXT", (void*)glProgramUniform3fvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3fvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3fvEXT", (void*)glProgramUniform3fvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3FVEXTPROC glad_debug_glProgramUniform3fvEXT = glad_debug_impl_glProgramUniform3fvEXT;
PFNGLPROGRAMUNIFORM3IEXTPROC glad_glProgramUniform3iEXT;
void APIENTRY glad_debug_impl_glProgramUniform3iEXT(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glProgramUniform3iEXT", (void*)glProgramUniform3iEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3iEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3iEXT", (void*)glProgramUniform3iEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3IEXTPROC glad_debug_glProgramUniform3iEXT = glad_debug_impl_glProgramUniform3iEXT;
PFNGLPROGRAMUNIFORM3IVEXTPROC glad_glProgramUniform3ivEXT;
void APIENTRY glad_debug_impl_glProgramUniform3ivEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramUniform3ivEXT", (void*)glProgramUniform3ivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3ivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3ivEXT", (void*)glProgramUniform3ivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3IVEXTPROC glad_debug_glProgramUniform3ivEXT = glad_debug_impl_glProgramUniform3ivEXT;
PFNGLPROGRAMUNIFORM4FEXTPROC glad_glProgramUniform4fEXT;
void APIENTRY glad_debug_impl_glProgramUniform4fEXT(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glProgramUniform4fEXT", (void*)glProgramUniform4fEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4fEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4fEXT", (void*)glProgramUniform4fEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4FEXTPROC glad_debug_glProgramUniform4fEXT = glad_debug_impl_glProgramUniform4fEXT;
PFNGLPROGRAMUNIFORM4FVEXTPROC glad_glProgramUniform4fvEXT;
void APIENTRY glad_debug_impl_glProgramUniform4fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramUniform4fvEXT", (void*)glProgramUniform4fvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4fvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4fvEXT", (void*)glProgramUniform4fvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4FVEXTPROC glad_debug_glProgramUniform4fvEXT = glad_debug_impl_glProgramUniform4fvEXT;
PFNGLPROGRAMUNIFORM4IEXTPROC glad_glProgramUniform4iEXT;
void APIENTRY glad_debug_impl_glProgramUniform4iEXT(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5) {
    _pre_call_callback("glProgramUniform4iEXT", (void*)glProgramUniform4iEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4iEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4iEXT", (void*)glProgramUniform4iEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4IEXTPROC glad_debug_glProgramUniform4iEXT = glad_debug_impl_glProgramUniform4iEXT;
PFNGLPROGRAMUNIFORM4IVEXTPROC glad_glProgramUniform4ivEXT;
void APIENTRY glad_debug_impl_glProgramUniform4ivEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramUniform4ivEXT", (void*)glProgramUniform4ivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4ivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4ivEXT", (void*)glProgramUniform4ivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4IVEXTPROC glad_debug_glProgramUniform4ivEXT = glad_debug_impl_glProgramUniform4ivEXT;
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glad_glProgramUniformMatrix2fvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix2fvEXT", (void*)glProgramUniformMatrix2fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2fvEXT", (void*)glProgramUniformMatrix2fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glad_debug_glProgramUniformMatrix2fvEXT = glad_debug_impl_glProgramUniformMatrix2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glad_glProgramUniformMatrix3fvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix3fvEXT", (void*)glProgramUniformMatrix3fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3fvEXT", (void*)glProgramUniformMatrix3fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glad_debug_glProgramUniformMatrix3fvEXT = glad_debug_impl_glProgramUniformMatrix3fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glad_glProgramUniformMatrix4fvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix4fvEXT", (void*)glProgramUniformMatrix4fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4fvEXT", (void*)glProgramUniformMatrix4fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glad_debug_glProgramUniformMatrix4fvEXT = glad_debug_impl_glProgramUniformMatrix4fvEXT;
PFNGLUSEPROGRAMSTAGESEXTPROC glad_glUseProgramStagesEXT;
void APIENTRY glad_debug_impl_glUseProgramStagesEXT(GLuint arg0, GLbitfield arg1, GLuint arg2) {
    _pre_call_callback("glUseProgramStagesEXT", (void*)glUseProgramStagesEXT, 3, arg0, arg1, arg2);
     glad_glUseProgramStagesEXT(arg0, arg1, arg2);
    _post_call_callback("glUseProgramStagesEXT", (void*)glUseProgramStagesEXT, 3, arg0, arg1, arg2);

}
PFNGLUSEPROGRAMSTAGESEXTPROC glad_debug_glUseProgramStagesEXT = glad_debug_impl_glUseProgramStagesEXT;
PFNGLVALIDATEPROGRAMPIPELINEEXTPROC glad_glValidateProgramPipelineEXT;
void APIENTRY glad_debug_impl_glValidateProgramPipelineEXT(GLuint arg0) {
    _pre_call_callback("glValidateProgramPipelineEXT", (void*)glValidateProgramPipelineEXT, 1, arg0);
     glad_glValidateProgramPipelineEXT(arg0);
    _post_call_callback("glValidateProgramPipelineEXT", (void*)glValidateProgramPipelineEXT, 1, arg0);

}
PFNGLVALIDATEPROGRAMPIPELINEEXTPROC glad_debug_glValidateProgramPipelineEXT = glad_debug_impl_glValidateProgramPipelineEXT;
PFNGLPROGRAMUNIFORM1UIEXTPROC glad_glProgramUniform1uiEXT;
void APIENTRY glad_debug_impl_glProgramUniform1uiEXT(GLuint arg0, GLint arg1, GLuint arg2) {
    _pre_call_callback("glProgramUniform1uiEXT", (void*)glProgramUniform1uiEXT, 3, arg0, arg1, arg2);
     glad_glProgramUniform1uiEXT(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1uiEXT", (void*)glProgramUniform1uiEXT, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1UIEXTPROC glad_debug_glProgramUniform1uiEXT = glad_debug_impl_glProgramUniform1uiEXT;
PFNGLPROGRAMUNIFORM2UIEXTPROC glad_glProgramUniform2uiEXT;
void APIENTRY glad_debug_impl_glProgramUniform2uiEXT(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_callback("glProgramUniform2uiEXT", (void*)glProgramUniform2uiEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2uiEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2uiEXT", (void*)glProgramUniform2uiEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2UIEXTPROC glad_debug_glProgramUniform2uiEXT = glad_debug_impl_glProgramUniform2uiEXT;
PFNGLPROGRAMUNIFORM3UIEXTPROC glad_glProgramUniform3uiEXT;
void APIENTRY glad_debug_impl_glProgramUniform3uiEXT(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_callback("glProgramUniform3uiEXT", (void*)glProgramUniform3uiEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3uiEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3uiEXT", (void*)glProgramUniform3uiEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3UIEXTPROC glad_debug_glProgramUniform3uiEXT = glad_debug_impl_glProgramUniform3uiEXT;
PFNGLPROGRAMUNIFORM4UIEXTPROC glad_glProgramUniform4uiEXT;
void APIENTRY glad_debug_impl_glProgramUniform4uiEXT(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5) {
    _pre_call_callback("glProgramUniform4uiEXT", (void*)glProgramUniform4uiEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4uiEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4uiEXT", (void*)glProgramUniform4uiEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4UIEXTPROC glad_debug_glProgramUniform4uiEXT = glad_debug_impl_glProgramUniform4uiEXT;
PFNGLPROGRAMUNIFORM1UIVEXTPROC glad_glProgramUniform1uivEXT;
void APIENTRY glad_debug_impl_glProgramUniform1uivEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramUniform1uivEXT", (void*)glProgramUniform1uivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1uivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1uivEXT", (void*)glProgramUniform1uivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1UIVEXTPROC glad_debug_glProgramUniform1uivEXT = glad_debug_impl_glProgramUniform1uivEXT;
PFNGLPROGRAMUNIFORM2UIVEXTPROC glad_glProgramUniform2uivEXT;
void APIENTRY glad_debug_impl_glProgramUniform2uivEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramUniform2uivEXT", (void*)glProgramUniform2uivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2uivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2uivEXT", (void*)glProgramUniform2uivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2UIVEXTPROC glad_debug_glProgramUniform2uivEXT = glad_debug_impl_glProgramUniform2uivEXT;
PFNGLPROGRAMUNIFORM3UIVEXTPROC glad_glProgramUniform3uivEXT;
void APIENTRY glad_debug_impl_glProgramUniform3uivEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramUniform3uivEXT", (void*)glProgramUniform3uivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3uivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3uivEXT", (void*)glProgramUniform3uivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3UIVEXTPROC glad_debug_glProgramUniform3uivEXT = glad_debug_impl_glProgramUniform3uivEXT;
PFNGLPROGRAMUNIFORM4UIVEXTPROC glad_glProgramUniform4uivEXT;
void APIENTRY glad_debug_impl_glProgramUniform4uivEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramUniform4uivEXT", (void*)glProgramUniform4uivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4uivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4uivEXT", (void*)glProgramUniform4uivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4UIVEXTPROC glad_debug_glProgramUniform4uivEXT = glad_debug_impl_glProgramUniform4uivEXT;
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glad_glProgramUniformMatrix2x3fvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2x3fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix2x3fvEXT", (void*)glProgramUniformMatrix2x3fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2x3fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2x3fvEXT", (void*)glProgramUniformMatrix2x3fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glad_debug_glProgramUniformMatrix2x3fvEXT = glad_debug_impl_glProgramUniformMatrix2x3fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glad_glProgramUniformMatrix3x2fvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3x2fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix3x2fvEXT", (void*)glProgramUniformMatrix3x2fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3x2fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3x2fvEXT", (void*)glProgramUniformMatrix3x2fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glad_debug_glProgramUniformMatrix3x2fvEXT = glad_debug_impl_glProgramUniformMatrix3x2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glad_glProgramUniformMatrix2x4fvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2x4fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix2x4fvEXT", (void*)glProgramUniformMatrix2x4fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2x4fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2x4fvEXT", (void*)glProgramUniformMatrix2x4fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glad_debug_glProgramUniformMatrix2x4fvEXT = glad_debug_impl_glProgramUniformMatrix2x4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glad_glProgramUniformMatrix4x2fvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4x2fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix4x2fvEXT", (void*)glProgramUniformMatrix4x2fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4x2fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4x2fvEXT", (void*)glProgramUniformMatrix4x2fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glad_debug_glProgramUniformMatrix4x2fvEXT = glad_debug_impl_glProgramUniformMatrix4x2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glad_glProgramUniformMatrix3x4fvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3x4fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix3x4fvEXT", (void*)glProgramUniformMatrix3x4fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3x4fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3x4fvEXT", (void*)glProgramUniformMatrix3x4fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glad_debug_glProgramUniformMatrix3x4fvEXT = glad_debug_impl_glProgramUniformMatrix3x4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glad_glProgramUniformMatrix4x3fvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4x3fvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix4x3fvEXT", (void*)glProgramUniformMatrix4x3fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4x3fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4x3fvEXT", (void*)glProgramUniformMatrix4x3fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glad_debug_glProgramUniformMatrix4x3fvEXT = glad_debug_impl_glProgramUniformMatrix4x3fvEXT;
PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glad_glTexImage2DMultisampleCoverageNV;
void APIENTRY glad_debug_impl_glTexImage2DMultisampleCoverageNV(GLenum arg0, GLsizei arg1, GLsizei arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_callback("glTexImage2DMultisampleCoverageNV", (void*)glTexImage2DMultisampleCoverageNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTexImage2DMultisampleCoverageNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTexImage2DMultisampleCoverageNV", (void*)glTexImage2DMultisampleCoverageNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glad_debug_glTexImage2DMultisampleCoverageNV = glad_debug_impl_glTexImage2DMultisampleCoverageNV;
PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glad_glTexImage3DMultisampleCoverageNV;
void APIENTRY glad_debug_impl_glTexImage3DMultisampleCoverageNV(GLenum arg0, GLsizei arg1, GLsizei arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6, GLboolean arg7) {
    _pre_call_callback("glTexImage3DMultisampleCoverageNV", (void*)glTexImage3DMultisampleCoverageNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTexImage3DMultisampleCoverageNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTexImage3DMultisampleCoverageNV", (void*)glTexImage3DMultisampleCoverageNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glad_debug_glTexImage3DMultisampleCoverageNV = glad_debug_impl_glTexImage3DMultisampleCoverageNV;
PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glad_glTextureImage2DMultisampleNV;
void APIENTRY glad_debug_impl_glTextureImage2DMultisampleNV(GLuint arg0, GLenum arg1, GLsizei arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_callback("glTextureImage2DMultisampleNV", (void*)glTextureImage2DMultisampleNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTextureImage2DMultisampleNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTextureImage2DMultisampleNV", (void*)glTextureImage2DMultisampleNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glad_debug_glTextureImage2DMultisampleNV = glad_debug_impl_glTextureImage2DMultisampleNV;
PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glad_glTextureImage3DMultisampleNV;
void APIENTRY glad_debug_impl_glTextureImage3DMultisampleNV(GLuint arg0, GLenum arg1, GLsizei arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6, GLboolean arg7) {
    _pre_call_callback("glTextureImage3DMultisampleNV", (void*)glTextureImage3DMultisampleNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTextureImage3DMultisampleNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTextureImage3DMultisampleNV", (void*)glTextureImage3DMultisampleNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glad_debug_glTextureImage3DMultisampleNV = glad_debug_impl_glTextureImage3DMultisampleNV;
PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glad_glTextureImage2DMultisampleCoverageNV;
void APIENTRY glad_debug_impl_glTextureImage2DMultisampleCoverageNV(GLuint arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLboolean arg7) {
    _pre_call_callback("glTextureImage2DMultisampleCoverageNV", (void*)glTextureImage2DMultisampleCoverageNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTextureImage2DMultisampleCoverageNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTextureImage2DMultisampleCoverageNV", (void*)glTextureImage2DMultisampleCoverageNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glad_debug_glTextureImage2DMultisampleCoverageNV = glad_debug_impl_glTextureImage2DMultisampleCoverageNV;
PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glad_glTextureImage3DMultisampleCoverageNV;
void APIENTRY glad_debug_impl_glTextureImage3DMultisampleCoverageNV(GLuint arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLboolean arg8) {
    _pre_call_callback("glTextureImage3DMultisampleCoverageNV", (void*)glTextureImage3DMultisampleCoverageNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glTextureImage3DMultisampleCoverageNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glTextureImage3DMultisampleCoverageNV", (void*)glTextureImage3DMultisampleCoverageNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glad_debug_glTextureImage3DMultisampleCoverageNV = glad_debug_impl_glTextureImage3DMultisampleCoverageNV;
PFNGLDELETEOBJECTARBPROC glad_glDeleteObjectARB;
void APIENTRY glad_debug_impl_glDeleteObjectARB(GLhandleARB arg0) {
    _pre_call_callback("glDeleteObjectARB", (void*)glDeleteObjectARB, 1, arg0);
     glad_glDeleteObjectARB(arg0);
    _post_call_callback("glDeleteObjectARB", (void*)glDeleteObjectARB, 1, arg0);

}
PFNGLDELETEOBJECTARBPROC glad_debug_glDeleteObjectARB = glad_debug_impl_glDeleteObjectARB;
PFNGLGETHANDLEARBPROC glad_glGetHandleARB;
GLhandleARB APIENTRY glad_debug_impl_glGetHandleARB(GLenum arg0) {
    GLhandleARB ret;
    _pre_call_callback("glGetHandleARB", (void*)glGetHandleARB, 1, arg0);
    ret =  glad_glGetHandleARB(arg0);
    _post_call_callback("glGetHandleARB", (void*)glGetHandleARB, 1, arg0);
    return ret;
}
PFNGLGETHANDLEARBPROC glad_debug_glGetHandleARB = glad_debug_impl_glGetHandleARB;
PFNGLDETACHOBJECTARBPROC glad_glDetachObjectARB;
void APIENTRY glad_debug_impl_glDetachObjectARB(GLhandleARB arg0, GLhandleARB arg1) {
    _pre_call_callback("glDetachObjectARB", (void*)glDetachObjectARB, 2, arg0, arg1);
     glad_glDetachObjectARB(arg0, arg1);
    _post_call_callback("glDetachObjectARB", (void*)glDetachObjectARB, 2, arg0, arg1);

}
PFNGLDETACHOBJECTARBPROC glad_debug_glDetachObjectARB = glad_debug_impl_glDetachObjectARB;
PFNGLCREATESHADEROBJECTARBPROC glad_glCreateShaderObjectARB;
GLhandleARB APIENTRY glad_debug_impl_glCreateShaderObjectARB(GLenum arg0) {
    GLhandleARB ret;
    _pre_call_callback("glCreateShaderObjectARB", (void*)glCreateShaderObjectARB, 1, arg0);
    ret =  glad_glCreateShaderObjectARB(arg0);
    _post_call_callback("glCreateShaderObjectARB", (void*)glCreateShaderObjectARB, 1, arg0);
    return ret;
}
PFNGLCREATESHADEROBJECTARBPROC glad_debug_glCreateShaderObjectARB = glad_debug_impl_glCreateShaderObjectARB;
PFNGLSHADERSOURCEARBPROC glad_glShaderSourceARB;
void APIENTRY glad_debug_impl_glShaderSourceARB(GLhandleARB arg0, GLsizei arg1, const GLcharARB** arg2, const GLint* arg3) {
    _pre_call_callback("glShaderSourceARB", (void*)glShaderSourceARB, 4, arg0, arg1, arg2, arg3);
     glad_glShaderSourceARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glShaderSourceARB", (void*)glShaderSourceARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLSHADERSOURCEARBPROC glad_debug_glShaderSourceARB = glad_debug_impl_glShaderSourceARB;
PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB;
void APIENTRY glad_debug_impl_glCompileShaderARB(GLhandleARB arg0) {
    _pre_call_callback("glCompileShaderARB", (void*)glCompileShaderARB, 1, arg0);
     glad_glCompileShaderARB(arg0);
    _post_call_callback("glCompileShaderARB", (void*)glCompileShaderARB, 1, arg0);

}
PFNGLCOMPILESHADERARBPROC glad_debug_glCompileShaderARB = glad_debug_impl_glCompileShaderARB;
PFNGLCREATEPROGRAMOBJECTARBPROC glad_glCreateProgramObjectARB;
GLhandleARB APIENTRY glad_debug_impl_glCreateProgramObjectARB() {
    GLhandleARB ret;
    _pre_call_callback("glCreateProgramObjectARB", (void*)glCreateProgramObjectARB, 0);
    ret =  glad_glCreateProgramObjectARB();
    _post_call_callback("glCreateProgramObjectARB", (void*)glCreateProgramObjectARB, 0);
    return ret;
}
PFNGLCREATEPROGRAMOBJECTARBPROC glad_debug_glCreateProgramObjectARB = glad_debug_impl_glCreateProgramObjectARB;
PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB;
void APIENTRY glad_debug_impl_glAttachObjectARB(GLhandleARB arg0, GLhandleARB arg1) {
    _pre_call_callback("glAttachObjectARB", (void*)glAttachObjectARB, 2, arg0, arg1);
     glad_glAttachObjectARB(arg0, arg1);
    _post_call_callback("glAttachObjectARB", (void*)glAttachObjectARB, 2, arg0, arg1);

}
PFNGLATTACHOBJECTARBPROC glad_debug_glAttachObjectARB = glad_debug_impl_glAttachObjectARB;
PFNGLLINKPROGRAMARBPROC glad_glLinkProgramARB;
void APIENTRY glad_debug_impl_glLinkProgramARB(GLhandleARB arg0) {
    _pre_call_callback("glLinkProgramARB", (void*)glLinkProgramARB, 1, arg0);
     glad_glLinkProgramARB(arg0);
    _post_call_callback("glLinkProgramARB", (void*)glLinkProgramARB, 1, arg0);

}
PFNGLLINKPROGRAMARBPROC glad_debug_glLinkProgramARB = glad_debug_impl_glLinkProgramARB;
PFNGLUSEPROGRAMOBJECTARBPROC glad_glUseProgramObjectARB;
void APIENTRY glad_debug_impl_glUseProgramObjectARB(GLhandleARB arg0) {
    _pre_call_callback("glUseProgramObjectARB", (void*)glUseProgramObjectARB, 1, arg0);
     glad_glUseProgramObjectARB(arg0);
    _post_call_callback("glUseProgramObjectARB", (void*)glUseProgramObjectARB, 1, arg0);

}
PFNGLUSEPROGRAMOBJECTARBPROC glad_debug_glUseProgramObjectARB = glad_debug_impl_glUseProgramObjectARB;
PFNGLVALIDATEPROGRAMARBPROC glad_glValidateProgramARB;
void APIENTRY glad_debug_impl_glValidateProgramARB(GLhandleARB arg0) {
    _pre_call_callback("glValidateProgramARB", (void*)glValidateProgramARB, 1, arg0);
     glad_glValidateProgramARB(arg0);
    _post_call_callback("glValidateProgramARB", (void*)glValidateProgramARB, 1, arg0);

}
PFNGLVALIDATEPROGRAMARBPROC glad_debug_glValidateProgramARB = glad_debug_impl_glValidateProgramARB;
PFNGLUNIFORM1FARBPROC glad_glUniform1fARB;
void APIENTRY glad_debug_impl_glUniform1fARB(GLint arg0, GLfloat arg1) {
    _pre_call_callback("glUniform1fARB", (void*)glUniform1fARB, 2, arg0, arg1);
     glad_glUniform1fARB(arg0, arg1);
    _post_call_callback("glUniform1fARB", (void*)glUniform1fARB, 2, arg0, arg1);

}
PFNGLUNIFORM1FARBPROC glad_debug_glUniform1fARB = glad_debug_impl_glUniform1fARB;
PFNGLUNIFORM2FARBPROC glad_glUniform2fARB;
void APIENTRY glad_debug_impl_glUniform2fARB(GLint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glUniform2fARB", (void*)glUniform2fARB, 3, arg0, arg1, arg2);
     glad_glUniform2fARB(arg0, arg1, arg2);
    _post_call_callback("glUniform2fARB", (void*)glUniform2fARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2FARBPROC glad_debug_glUniform2fARB = glad_debug_impl_glUniform2fARB;
PFNGLUNIFORM3FARBPROC glad_glUniform3fARB;
void APIENTRY glad_debug_impl_glUniform3fARB(GLint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glUniform3fARB", (void*)glUniform3fARB, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3fARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3fARB", (void*)glUniform3fARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3FARBPROC glad_debug_glUniform3fARB = glad_debug_impl_glUniform3fARB;
PFNGLUNIFORM4FARBPROC glad_glUniform4fARB;
void APIENTRY glad_debug_impl_glUniform4fARB(GLint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glUniform4fARB", (void*)glUniform4fARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4fARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4fARB", (void*)glUniform4fARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4FARBPROC glad_debug_glUniform4fARB = glad_debug_impl_glUniform4fARB;
PFNGLUNIFORM1IARBPROC glad_glUniform1iARB;
void APIENTRY glad_debug_impl_glUniform1iARB(GLint arg0, GLint arg1) {
    _pre_call_callback("glUniform1iARB", (void*)glUniform1iARB, 2, arg0, arg1);
     glad_glUniform1iARB(arg0, arg1);
    _post_call_callback("glUniform1iARB", (void*)glUniform1iARB, 2, arg0, arg1);

}
PFNGLUNIFORM1IARBPROC glad_debug_glUniform1iARB = glad_debug_impl_glUniform1iARB;
PFNGLUNIFORM2IARBPROC glad_glUniform2iARB;
void APIENTRY glad_debug_impl_glUniform2iARB(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glUniform2iARB", (void*)glUniform2iARB, 3, arg0, arg1, arg2);
     glad_glUniform2iARB(arg0, arg1, arg2);
    _post_call_callback("glUniform2iARB", (void*)glUniform2iARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2IARBPROC glad_debug_glUniform2iARB = glad_debug_impl_glUniform2iARB;
PFNGLUNIFORM3IARBPROC glad_glUniform3iARB;
void APIENTRY glad_debug_impl_glUniform3iARB(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glUniform3iARB", (void*)glUniform3iARB, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3iARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3iARB", (void*)glUniform3iARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3IARBPROC glad_debug_glUniform3iARB = glad_debug_impl_glUniform3iARB;
PFNGLUNIFORM4IARBPROC glad_glUniform4iARB;
void APIENTRY glad_debug_impl_glUniform4iARB(GLint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glUniform4iARB", (void*)glUniform4iARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4iARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4iARB", (void*)glUniform4iARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4IARBPROC glad_debug_glUniform4iARB = glad_debug_impl_glUniform4iARB;
PFNGLUNIFORM1FVARBPROC glad_glUniform1fvARB;
void APIENTRY glad_debug_impl_glUniform1fvARB(GLint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glUniform1fvARB", (void*)glUniform1fvARB, 3, arg0, arg1, arg2);
     glad_glUniform1fvARB(arg0, arg1, arg2);
    _post_call_callback("glUniform1fvARB", (void*)glUniform1fvARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1FVARBPROC glad_debug_glUniform1fvARB = glad_debug_impl_glUniform1fvARB;
PFNGLUNIFORM2FVARBPROC glad_glUniform2fvARB;
void APIENTRY glad_debug_impl_glUniform2fvARB(GLint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glUniform2fvARB", (void*)glUniform2fvARB, 3, arg0, arg1, arg2);
     glad_glUniform2fvARB(arg0, arg1, arg2);
    _post_call_callback("glUniform2fvARB", (void*)glUniform2fvARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2FVARBPROC glad_debug_glUniform2fvARB = glad_debug_impl_glUniform2fvARB;
PFNGLUNIFORM3FVARBPROC glad_glUniform3fvARB;
void APIENTRY glad_debug_impl_glUniform3fvARB(GLint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glUniform3fvARB", (void*)glUniform3fvARB, 3, arg0, arg1, arg2);
     glad_glUniform3fvARB(arg0, arg1, arg2);
    _post_call_callback("glUniform3fvARB", (void*)glUniform3fvARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3FVARBPROC glad_debug_glUniform3fvARB = glad_debug_impl_glUniform3fvARB;
PFNGLUNIFORM4FVARBPROC glad_glUniform4fvARB;
void APIENTRY glad_debug_impl_glUniform4fvARB(GLint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glUniform4fvARB", (void*)glUniform4fvARB, 3, arg0, arg1, arg2);
     glad_glUniform4fvARB(arg0, arg1, arg2);
    _post_call_callback("glUniform4fvARB", (void*)glUniform4fvARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4FVARBPROC glad_debug_glUniform4fvARB = glad_debug_impl_glUniform4fvARB;
PFNGLUNIFORM1IVARBPROC glad_glUniform1ivARB;
void APIENTRY glad_debug_impl_glUniform1ivARB(GLint arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glUniform1ivARB", (void*)glUniform1ivARB, 3, arg0, arg1, arg2);
     glad_glUniform1ivARB(arg0, arg1, arg2);
    _post_call_callback("glUniform1ivARB", (void*)glUniform1ivARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1IVARBPROC glad_debug_glUniform1ivARB = glad_debug_impl_glUniform1ivARB;
PFNGLUNIFORM2IVARBPROC glad_glUniform2ivARB;
void APIENTRY glad_debug_impl_glUniform2ivARB(GLint arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glUniform2ivARB", (void*)glUniform2ivARB, 3, arg0, arg1, arg2);
     glad_glUniform2ivARB(arg0, arg1, arg2);
    _post_call_callback("glUniform2ivARB", (void*)glUniform2ivARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2IVARBPROC glad_debug_glUniform2ivARB = glad_debug_impl_glUniform2ivARB;
PFNGLUNIFORM3IVARBPROC glad_glUniform3ivARB;
void APIENTRY glad_debug_impl_glUniform3ivARB(GLint arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glUniform3ivARB", (void*)glUniform3ivARB, 3, arg0, arg1, arg2);
     glad_glUniform3ivARB(arg0, arg1, arg2);
    _post_call_callback("glUniform3ivARB", (void*)glUniform3ivARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3IVARBPROC glad_debug_glUniform3ivARB = glad_debug_impl_glUniform3ivARB;
PFNGLUNIFORM4IVARBPROC glad_glUniform4ivARB;
void APIENTRY glad_debug_impl_glUniform4ivARB(GLint arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glUniform4ivARB", (void*)glUniform4ivARB, 3, arg0, arg1, arg2);
     glad_glUniform4ivARB(arg0, arg1, arg2);
    _post_call_callback("glUniform4ivARB", (void*)glUniform4ivARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4IVARBPROC glad_debug_glUniform4ivARB = glad_debug_impl_glUniform4ivARB;
PFNGLUNIFORMMATRIX2FVARBPROC glad_glUniformMatrix2fvARB;
void APIENTRY glad_debug_impl_glUniformMatrix2fvARB(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix2fvARB", (void*)glUniformMatrix2fvARB, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix2fvARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix2fvARB", (void*)glUniformMatrix2fvARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX2FVARBPROC glad_debug_glUniformMatrix2fvARB = glad_debug_impl_glUniformMatrix2fvARB;
PFNGLUNIFORMMATRIX3FVARBPROC glad_glUniformMatrix3fvARB;
void APIENTRY glad_debug_impl_glUniformMatrix3fvARB(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix3fvARB", (void*)glUniformMatrix3fvARB, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix3fvARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix3fvARB", (void*)glUniformMatrix3fvARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX3FVARBPROC glad_debug_glUniformMatrix3fvARB = glad_debug_impl_glUniformMatrix3fvARB;
PFNGLUNIFORMMATRIX4FVARBPROC glad_glUniformMatrix4fvARB;
void APIENTRY glad_debug_impl_glUniformMatrix4fvARB(GLint arg0, GLsizei arg1, GLboolean arg2, const GLfloat* arg3) {
    _pre_call_callback("glUniformMatrix4fvARB", (void*)glUniformMatrix4fvARB, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix4fvARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix4fvARB", (void*)glUniformMatrix4fvARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX4FVARBPROC glad_debug_glUniformMatrix4fvARB = glad_debug_impl_glUniformMatrix4fvARB;
PFNGLGETOBJECTPARAMETERFVARBPROC glad_glGetObjectParameterfvARB;
void APIENTRY glad_debug_impl_glGetObjectParameterfvARB(GLhandleARB arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetObjectParameterfvARB", (void*)glGetObjectParameterfvARB, 3, arg0, arg1, arg2);
     glad_glGetObjectParameterfvARB(arg0, arg1, arg2);
    _post_call_callback("glGetObjectParameterfvARB", (void*)glGetObjectParameterfvARB, 3, arg0, arg1, arg2);

}
PFNGLGETOBJECTPARAMETERFVARBPROC glad_debug_glGetObjectParameterfvARB = glad_debug_impl_glGetObjectParameterfvARB;
PFNGLGETOBJECTPARAMETERIVARBPROC glad_glGetObjectParameterivARB;
void APIENTRY glad_debug_impl_glGetObjectParameterivARB(GLhandleARB arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetObjectParameterivARB", (void*)glGetObjectParameterivARB, 3, arg0, arg1, arg2);
     glad_glGetObjectParameterivARB(arg0, arg1, arg2);
    _post_call_callback("glGetObjectParameterivARB", (void*)glGetObjectParameterivARB, 3, arg0, arg1, arg2);

}
PFNGLGETOBJECTPARAMETERIVARBPROC glad_debug_glGetObjectParameterivARB = glad_debug_impl_glGetObjectParameterivARB;
PFNGLGETINFOLOGARBPROC glad_glGetInfoLogARB;
void APIENTRY glad_debug_impl_glGetInfoLogARB(GLhandleARB arg0, GLsizei arg1, GLsizei* arg2, GLcharARB* arg3) {
    _pre_call_callback("glGetInfoLogARB", (void*)glGetInfoLogARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetInfoLogARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetInfoLogARB", (void*)glGetInfoLogARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETINFOLOGARBPROC glad_debug_glGetInfoLogARB = glad_debug_impl_glGetInfoLogARB;
PFNGLGETATTACHEDOBJECTSARBPROC glad_glGetAttachedObjectsARB;
void APIENTRY glad_debug_impl_glGetAttachedObjectsARB(GLhandleARB arg0, GLsizei arg1, GLsizei* arg2, GLhandleARB* arg3) {
    _pre_call_callback("glGetAttachedObjectsARB", (void*)glGetAttachedObjectsARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetAttachedObjectsARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetAttachedObjectsARB", (void*)glGetAttachedObjectsARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETATTACHEDOBJECTSARBPROC glad_debug_glGetAttachedObjectsARB = glad_debug_impl_glGetAttachedObjectsARB;
PFNGLGETUNIFORMLOCATIONARBPROC glad_glGetUniformLocationARB;
GLint APIENTRY glad_debug_impl_glGetUniformLocationARB(GLhandleARB arg0, const GLcharARB* arg1) {
    GLint ret;
    _pre_call_callback("glGetUniformLocationARB", (void*)glGetUniformLocationARB, 2, arg0, arg1);
    ret =  glad_glGetUniformLocationARB(arg0, arg1);
    _post_call_callback("glGetUniformLocationARB", (void*)glGetUniformLocationARB, 2, arg0, arg1);
    return ret;
}
PFNGLGETUNIFORMLOCATIONARBPROC glad_debug_glGetUniformLocationARB = glad_debug_impl_glGetUniformLocationARB;
PFNGLGETACTIVEUNIFORMARBPROC glad_glGetActiveUniformARB;
void APIENTRY glad_debug_impl_glGetActiveUniformARB(GLhandleARB arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLint* arg4, GLenum* arg5, GLcharARB* arg6) {
    _pre_call_callback("glGetActiveUniformARB", (void*)glGetActiveUniformARB, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetActiveUniformARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetActiveUniformARB", (void*)glGetActiveUniformARB, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETACTIVEUNIFORMARBPROC glad_debug_glGetActiveUniformARB = glad_debug_impl_glGetActiveUniformARB;
PFNGLGETUNIFORMFVARBPROC glad_glGetUniformfvARB;
void APIENTRY glad_debug_impl_glGetUniformfvARB(GLhandleARB arg0, GLint arg1, GLfloat* arg2) {
    _pre_call_callback("glGetUniformfvARB", (void*)glGetUniformfvARB, 3, arg0, arg1, arg2);
     glad_glGetUniformfvARB(arg0, arg1, arg2);
    _post_call_callback("glGetUniformfvARB", (void*)glGetUniformfvARB, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMFVARBPROC glad_debug_glGetUniformfvARB = glad_debug_impl_glGetUniformfvARB;
PFNGLGETUNIFORMIVARBPROC glad_glGetUniformivARB;
void APIENTRY glad_debug_impl_glGetUniformivARB(GLhandleARB arg0, GLint arg1, GLint* arg2) {
    _pre_call_callback("glGetUniformivARB", (void*)glGetUniformivARB, 3, arg0, arg1, arg2);
     glad_glGetUniformivARB(arg0, arg1, arg2);
    _post_call_callback("glGetUniformivARB", (void*)glGetUniformivARB, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMIVARBPROC glad_debug_glGetUniformivARB = glad_debug_impl_glGetUniformivARB;
PFNGLGETSHADERSOURCEARBPROC glad_glGetShaderSourceARB;
void APIENTRY glad_debug_impl_glGetShaderSourceARB(GLhandleARB arg0, GLsizei arg1, GLsizei* arg2, GLcharARB* arg3) {
    _pre_call_callback("glGetShaderSourceARB", (void*)glGetShaderSourceARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetShaderSourceARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetShaderSourceARB", (void*)glGetShaderSourceARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETSHADERSOURCEARBPROC glad_debug_glGetShaderSourceARB = glad_debug_impl_glGetShaderSourceARB;
PFNGLTEXBUMPPARAMETERIVATIPROC glad_glTexBumpParameterivATI;
void APIENTRY glad_debug_impl_glTexBumpParameterivATI(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glTexBumpParameterivATI", (void*)glTexBumpParameterivATI, 2, arg0, arg1);
     glad_glTexBumpParameterivATI(arg0, arg1);
    _post_call_callback("glTexBumpParameterivATI", (void*)glTexBumpParameterivATI, 2, arg0, arg1);

}
PFNGLTEXBUMPPARAMETERIVATIPROC glad_debug_glTexBumpParameterivATI = glad_debug_impl_glTexBumpParameterivATI;
PFNGLTEXBUMPPARAMETERFVATIPROC glad_glTexBumpParameterfvATI;
void APIENTRY glad_debug_impl_glTexBumpParameterfvATI(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glTexBumpParameterfvATI", (void*)glTexBumpParameterfvATI, 2, arg0, arg1);
     glad_glTexBumpParameterfvATI(arg0, arg1);
    _post_call_callback("glTexBumpParameterfvATI", (void*)glTexBumpParameterfvATI, 2, arg0, arg1);

}
PFNGLTEXBUMPPARAMETERFVATIPROC glad_debug_glTexBumpParameterfvATI = glad_debug_impl_glTexBumpParameterfvATI;
PFNGLGETTEXBUMPPARAMETERIVATIPROC glad_glGetTexBumpParameterivATI;
void APIENTRY glad_debug_impl_glGetTexBumpParameterivATI(GLenum arg0, GLint* arg1) {
    _pre_call_callback("glGetTexBumpParameterivATI", (void*)glGetTexBumpParameterivATI, 2, arg0, arg1);
     glad_glGetTexBumpParameterivATI(arg0, arg1);
    _post_call_callback("glGetTexBumpParameterivATI", (void*)glGetTexBumpParameterivATI, 2, arg0, arg1);

}
PFNGLGETTEXBUMPPARAMETERIVATIPROC glad_debug_glGetTexBumpParameterivATI = glad_debug_impl_glGetTexBumpParameterivATI;
PFNGLGETTEXBUMPPARAMETERFVATIPROC glad_glGetTexBumpParameterfvATI;
void APIENTRY glad_debug_impl_glGetTexBumpParameterfvATI(GLenum arg0, GLfloat* arg1) {
    _pre_call_callback("glGetTexBumpParameterfvATI", (void*)glGetTexBumpParameterfvATI, 2, arg0, arg1);
     glad_glGetTexBumpParameterfvATI(arg0, arg1);
    _post_call_callback("glGetTexBumpParameterfvATI", (void*)glGetTexBumpParameterfvATI, 2, arg0, arg1);

}
PFNGLGETTEXBUMPPARAMETERFVATIPROC glad_debug_glGetTexBumpParameterfvATI = glad_debug_impl_glGetTexBumpParameterfvATI;
PFNGLVIEWPORTSWIZZLENVPROC glad_glViewportSwizzleNV;
void APIENTRY glad_debug_impl_glViewportSwizzleNV(GLuint arg0, GLenum arg1, GLenum arg2, GLenum arg3, GLenum arg4) {
    _pre_call_callback("glViewportSwizzleNV", (void*)glViewportSwizzleNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glViewportSwizzleNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glViewportSwizzleNV", (void*)glViewportSwizzleNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVIEWPORTSWIZZLENVPROC glad_debug_glViewportSwizzleNV = glad_debug_impl_glViewportSwizzleNV;
PFNGLMAPOBJECTBUFFERATIPROC glad_glMapObjectBufferATI;
void* APIENTRY glad_debug_impl_glMapObjectBufferATI(GLuint arg0) {
    void* ret;
    _pre_call_callback("glMapObjectBufferATI", (void*)glMapObjectBufferATI, 1, arg0);
    ret =  glad_glMapObjectBufferATI(arg0);
    _post_call_callback("glMapObjectBufferATI", (void*)glMapObjectBufferATI, 1, arg0);
    return ret;
}
PFNGLMAPOBJECTBUFFERATIPROC glad_debug_glMapObjectBufferATI = glad_debug_impl_glMapObjectBufferATI;
PFNGLUNMAPOBJECTBUFFERATIPROC glad_glUnmapObjectBufferATI;
void APIENTRY glad_debug_impl_glUnmapObjectBufferATI(GLuint arg0) {
    _pre_call_callback("glUnmapObjectBufferATI", (void*)glUnmapObjectBufferATI, 1, arg0);
     glad_glUnmapObjectBufferATI(arg0);
    _post_call_callback("glUnmapObjectBufferATI", (void*)glUnmapObjectBufferATI, 1, arg0);

}
PFNGLUNMAPOBJECTBUFFERATIPROC glad_debug_glUnmapObjectBufferATI = glad_debug_impl_glUnmapObjectBufferATI;
PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB;
GLenum APIENTRY glad_debug_impl_glGetGraphicsResetStatusARB() {
    GLenum ret;
    _pre_call_callback("glGetGraphicsResetStatusARB", (void*)glGetGraphicsResetStatusARB, 0);
    ret =  glad_glGetGraphicsResetStatusARB();
    _post_call_callback("glGetGraphicsResetStatusARB", (void*)glGetGraphicsResetStatusARB, 0);
    return ret;
}
PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_debug_glGetGraphicsResetStatusARB = glad_debug_impl_glGetGraphicsResetStatusARB;
PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB;
void APIENTRY glad_debug_impl_glGetnTexImageARB(GLenum arg0, GLint arg1, GLenum arg2, GLenum arg3, GLsizei arg4, void* arg5) {
    _pre_call_callback("glGetnTexImageARB", (void*)glGetnTexImageARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetnTexImageARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetnTexImageARB", (void*)glGetnTexImageARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETNTEXIMAGEARBPROC glad_debug_glGetnTexImageARB = glad_debug_impl_glGetnTexImageARB;
PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB;
void APIENTRY glad_debug_impl_glReadnPixelsARB(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, GLsizei arg6, void* arg7) {
    _pre_call_callback("glReadnPixelsARB", (void*)glReadnPixelsARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glReadnPixelsARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glReadnPixelsARB", (void*)glReadnPixelsARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLREADNPIXELSARBPROC glad_debug_glReadnPixelsARB = glad_debug_impl_glReadnPixelsARB;
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB;
void APIENTRY glad_debug_impl_glGetnCompressedTexImageARB(GLenum arg0, GLint arg1, GLsizei arg2, void* arg3) {
    _pre_call_callback("glGetnCompressedTexImageARB", (void*)glGetnCompressedTexImageARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnCompressedTexImageARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnCompressedTexImageARB", (void*)glGetnCompressedTexImageARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_debug_glGetnCompressedTexImageARB = glad_debug_impl_glGetnCompressedTexImageARB;
PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB;
void APIENTRY glad_debug_impl_glGetnUniformfvARB(GLuint arg0, GLint arg1, GLsizei arg2, GLfloat* arg3) {
    _pre_call_callback("glGetnUniformfvARB", (void*)glGetnUniformfvARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformfvARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformfvARB", (void*)glGetnUniformfvARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMFVARBPROC glad_debug_glGetnUniformfvARB = glad_debug_impl_glGetnUniformfvARB;
PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB;
void APIENTRY glad_debug_impl_glGetnUniformivARB(GLuint arg0, GLint arg1, GLsizei arg2, GLint* arg3) {
    _pre_call_callback("glGetnUniformivARB", (void*)glGetnUniformivARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformivARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformivARB", (void*)glGetnUniformivARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMIVARBPROC glad_debug_glGetnUniformivARB = glad_debug_impl_glGetnUniformivARB;
PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB;
void APIENTRY glad_debug_impl_glGetnUniformuivARB(GLuint arg0, GLint arg1, GLsizei arg2, GLuint* arg3) {
    _pre_call_callback("glGetnUniformuivARB", (void*)glGetnUniformuivARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformuivARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformuivARB", (void*)glGetnUniformuivARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMUIVARBPROC glad_debug_glGetnUniformuivARB = glad_debug_impl_glGetnUniformuivARB;
PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB;
void APIENTRY glad_debug_impl_glGetnUniformdvARB(GLuint arg0, GLint arg1, GLsizei arg2, GLdouble* arg3) {
    _pre_call_callback("glGetnUniformdvARB", (void*)glGetnUniformdvARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformdvARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformdvARB", (void*)glGetnUniformdvARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMDVARBPROC glad_debug_glGetnUniformdvARB = glad_debug_impl_glGetnUniformdvARB;
PFNGLGETNMAPDVARBPROC glad_glGetnMapdvARB;
void APIENTRY glad_debug_impl_glGetnMapdvARB(GLenum arg0, GLenum arg1, GLsizei arg2, GLdouble* arg3) {
    _pre_call_callback("glGetnMapdvARB", (void*)glGetnMapdvARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnMapdvARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnMapdvARB", (void*)glGetnMapdvARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNMAPDVARBPROC glad_debug_glGetnMapdvARB = glad_debug_impl_glGetnMapdvARB;
PFNGLGETNMAPFVARBPROC glad_glGetnMapfvARB;
void APIENTRY glad_debug_impl_glGetnMapfvARB(GLenum arg0, GLenum arg1, GLsizei arg2, GLfloat* arg3) {
    _pre_call_callback("glGetnMapfvARB", (void*)glGetnMapfvARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnMapfvARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnMapfvARB", (void*)glGetnMapfvARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNMAPFVARBPROC glad_debug_glGetnMapfvARB = glad_debug_impl_glGetnMapfvARB;
PFNGLGETNMAPIVARBPROC glad_glGetnMapivARB;
void APIENTRY glad_debug_impl_glGetnMapivARB(GLenum arg0, GLenum arg1, GLsizei arg2, GLint* arg3) {
    _pre_call_callback("glGetnMapivARB", (void*)glGetnMapivARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnMapivARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnMapivARB", (void*)glGetnMapivARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNMAPIVARBPROC glad_debug_glGetnMapivARB = glad_debug_impl_glGetnMapivARB;
PFNGLGETNPIXELMAPFVARBPROC glad_glGetnPixelMapfvARB;
void APIENTRY glad_debug_impl_glGetnPixelMapfvARB(GLenum arg0, GLsizei arg1, GLfloat* arg2) {
    _pre_call_callback("glGetnPixelMapfvARB", (void*)glGetnPixelMapfvARB, 3, arg0, arg1, arg2);
     glad_glGetnPixelMapfvARB(arg0, arg1, arg2);
    _post_call_callback("glGetnPixelMapfvARB", (void*)glGetnPixelMapfvARB, 3, arg0, arg1, arg2);

}
PFNGLGETNPIXELMAPFVARBPROC glad_debug_glGetnPixelMapfvARB = glad_debug_impl_glGetnPixelMapfvARB;
PFNGLGETNPIXELMAPUIVARBPROC glad_glGetnPixelMapuivARB;
void APIENTRY glad_debug_impl_glGetnPixelMapuivARB(GLenum arg0, GLsizei arg1, GLuint* arg2) {
    _pre_call_callback("glGetnPixelMapuivARB", (void*)glGetnPixelMapuivARB, 3, arg0, arg1, arg2);
     glad_glGetnPixelMapuivARB(arg0, arg1, arg2);
    _post_call_callback("glGetnPixelMapuivARB", (void*)glGetnPixelMapuivARB, 3, arg0, arg1, arg2);

}
PFNGLGETNPIXELMAPUIVARBPROC glad_debug_glGetnPixelMapuivARB = glad_debug_impl_glGetnPixelMapuivARB;
PFNGLGETNPIXELMAPUSVARBPROC glad_glGetnPixelMapusvARB;
void APIENTRY glad_debug_impl_glGetnPixelMapusvARB(GLenum arg0, GLsizei arg1, GLushort* arg2) {
    _pre_call_callback("glGetnPixelMapusvARB", (void*)glGetnPixelMapusvARB, 3, arg0, arg1, arg2);
     glad_glGetnPixelMapusvARB(arg0, arg1, arg2);
    _post_call_callback("glGetnPixelMapusvARB", (void*)glGetnPixelMapusvARB, 3, arg0, arg1, arg2);

}
PFNGLGETNPIXELMAPUSVARBPROC glad_debug_glGetnPixelMapusvARB = glad_debug_impl_glGetnPixelMapusvARB;
PFNGLGETNPOLYGONSTIPPLEARBPROC glad_glGetnPolygonStippleARB;
void APIENTRY glad_debug_impl_glGetnPolygonStippleARB(GLsizei arg0, GLubyte* arg1) {
    _pre_call_callback("glGetnPolygonStippleARB", (void*)glGetnPolygonStippleARB, 2, arg0, arg1);
     glad_glGetnPolygonStippleARB(arg0, arg1);
    _post_call_callback("glGetnPolygonStippleARB", (void*)glGetnPolygonStippleARB, 2, arg0, arg1);

}
PFNGLGETNPOLYGONSTIPPLEARBPROC glad_debug_glGetnPolygonStippleARB = glad_debug_impl_glGetnPolygonStippleARB;
PFNGLGETNCOLORTABLEARBPROC glad_glGetnColorTableARB;
void APIENTRY glad_debug_impl_glGetnColorTableARB(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, void* arg4) {
    _pre_call_callback("glGetnColorTableARB", (void*)glGetnColorTableARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetnColorTableARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetnColorTableARB", (void*)glGetnColorTableARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETNCOLORTABLEARBPROC glad_debug_glGetnColorTableARB = glad_debug_impl_glGetnColorTableARB;
PFNGLGETNCONVOLUTIONFILTERARBPROC glad_glGetnConvolutionFilterARB;
void APIENTRY glad_debug_impl_glGetnConvolutionFilterARB(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, void* arg4) {
    _pre_call_callback("glGetnConvolutionFilterARB", (void*)glGetnConvolutionFilterARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetnConvolutionFilterARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetnConvolutionFilterARB", (void*)glGetnConvolutionFilterARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETNCONVOLUTIONFILTERARBPROC glad_debug_glGetnConvolutionFilterARB = glad_debug_impl_glGetnConvolutionFilterARB;
PFNGLGETNSEPARABLEFILTERARBPROC glad_glGetnSeparableFilterARB;
void APIENTRY glad_debug_impl_glGetnSeparableFilterARB(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, void* arg4, GLsizei arg5, void* arg6, void* arg7) {
    _pre_call_callback("glGetnSeparableFilterARB", (void*)glGetnSeparableFilterARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glGetnSeparableFilterARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glGetnSeparableFilterARB", (void*)glGetnSeparableFilterARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLGETNSEPARABLEFILTERARBPROC glad_debug_glGetnSeparableFilterARB = glad_debug_impl_glGetnSeparableFilterARB;
PFNGLGETNHISTOGRAMARBPROC glad_glGetnHistogramARB;
void APIENTRY glad_debug_impl_glGetnHistogramARB(GLenum arg0, GLboolean arg1, GLenum arg2, GLenum arg3, GLsizei arg4, void* arg5) {
    _pre_call_callback("glGetnHistogramARB", (void*)glGetnHistogramARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetnHistogramARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetnHistogramARB", (void*)glGetnHistogramARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETNHISTOGRAMARBPROC glad_debug_glGetnHistogramARB = glad_debug_impl_glGetnHistogramARB;
PFNGLGETNMINMAXARBPROC glad_glGetnMinmaxARB;
void APIENTRY glad_debug_impl_glGetnMinmaxARB(GLenum arg0, GLboolean arg1, GLenum arg2, GLenum arg3, GLsizei arg4, void* arg5) {
    _pre_call_callback("glGetnMinmaxARB", (void*)glGetnMinmaxARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetnMinmaxARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetnMinmaxARB", (void*)glGetnMinmaxARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETNMINMAXARBPROC glad_debug_glGetnMinmaxARB = glad_debug_impl_glGetnMinmaxARB;
PFNGLPIXELDATARANGENVPROC glad_glPixelDataRangeNV;
void APIENTRY glad_debug_impl_glPixelDataRangeNV(GLenum arg0, GLsizei arg1, const void* arg2) {
    _pre_call_callback("glPixelDataRangeNV", (void*)glPixelDataRangeNV, 3, arg0, arg1, arg2);
     glad_glPixelDataRangeNV(arg0, arg1, arg2);
    _post_call_callback("glPixelDataRangeNV", (void*)glPixelDataRangeNV, 3, arg0, arg1, arg2);

}
PFNGLPIXELDATARANGENVPROC glad_debug_glPixelDataRangeNV = glad_debug_impl_glPixelDataRangeNV;
PFNGLFLUSHPIXELDATARANGENVPROC glad_glFlushPixelDataRangeNV;
void APIENTRY glad_debug_impl_glFlushPixelDataRangeNV(GLenum arg0) {
    _pre_call_callback("glFlushPixelDataRangeNV", (void*)glFlushPixelDataRangeNV, 1, arg0);
     glad_glFlushPixelDataRangeNV(arg0);
    _post_call_callback("glFlushPixelDataRangeNV", (void*)glFlushPixelDataRangeNV, 1, arg0);

}
PFNGLFLUSHPIXELDATARANGENVPROC glad_debug_glFlushPixelDataRangeNV = glad_debug_impl_glFlushPixelDataRangeNV;
PFNGLBLITFRAMEBUFFEREXTPROC glad_glBlitFramebufferEXT;
void APIENTRY glad_debug_impl_glBlitFramebufferEXT(GLint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLint arg7, GLbitfield arg8, GLenum arg9) {
    _pre_call_callback("glBlitFramebufferEXT", (void*)glBlitFramebufferEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glBlitFramebufferEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glBlitFramebufferEXT", (void*)glBlitFramebufferEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLBLITFRAMEBUFFEREXTPROC glad_debug_glBlitFramebufferEXT = glad_debug_impl_glBlitFramebufferEXT;
PFNGLUNIFORM1DPROC glad_glUniform1d;
void APIENTRY glad_debug_impl_glUniform1d(GLint arg0, GLdouble arg1) {
    _pre_call_callback("glUniform1d", (void*)glUniform1d, 2, arg0, arg1);
     glad_glUniform1d(arg0, arg1);
    _post_call_callback("glUniform1d", (void*)glUniform1d, 2, arg0, arg1);

}
PFNGLUNIFORM1DPROC glad_debug_glUniform1d = glad_debug_impl_glUniform1d;
PFNGLUNIFORM2DPROC glad_glUniform2d;
void APIENTRY glad_debug_impl_glUniform2d(GLint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glUniform2d", (void*)glUniform2d, 3, arg0, arg1, arg2);
     glad_glUniform2d(arg0, arg1, arg2);
    _post_call_callback("glUniform2d", (void*)glUniform2d, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2DPROC glad_debug_glUniform2d = glad_debug_impl_glUniform2d;
PFNGLUNIFORM3DPROC glad_glUniform3d;
void APIENTRY glad_debug_impl_glUniform3d(GLint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glUniform3d", (void*)glUniform3d, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3d(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3d", (void*)glUniform3d, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3DPROC glad_debug_glUniform3d = glad_debug_impl_glUniform3d;
PFNGLUNIFORM4DPROC glad_glUniform4d;
void APIENTRY glad_debug_impl_glUniform4d(GLint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glUniform4d", (void*)glUniform4d, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4d", (void*)glUniform4d, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4DPROC glad_debug_glUniform4d = glad_debug_impl_glUniform4d;
PFNGLUNIFORM1DVPROC glad_glUniform1dv;
void APIENTRY glad_debug_impl_glUniform1dv(GLint arg0, GLsizei arg1, const GLdouble* arg2) {
    _pre_call_callback("glUniform1dv", (void*)glUniform1dv, 3, arg0, arg1, arg2);
     glad_glUniform1dv(arg0, arg1, arg2);
    _post_call_callback("glUniform1dv", (void*)glUniform1dv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1DVPROC glad_debug_glUniform1dv = glad_debug_impl_glUniform1dv;
PFNGLUNIFORM2DVPROC glad_glUniform2dv;
void APIENTRY glad_debug_impl_glUniform2dv(GLint arg0, GLsizei arg1, const GLdouble* arg2) {
    _pre_call_callback("glUniform2dv", (void*)glUniform2dv, 3, arg0, arg1, arg2);
     glad_glUniform2dv(arg0, arg1, arg2);
    _post_call_callback("glUniform2dv", (void*)glUniform2dv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2DVPROC glad_debug_glUniform2dv = glad_debug_impl_glUniform2dv;
PFNGLUNIFORM3DVPROC glad_glUniform3dv;
void APIENTRY glad_debug_impl_glUniform3dv(GLint arg0, GLsizei arg1, const GLdouble* arg2) {
    _pre_call_callback("glUniform3dv", (void*)glUniform3dv, 3, arg0, arg1, arg2);
     glad_glUniform3dv(arg0, arg1, arg2);
    _post_call_callback("glUniform3dv", (void*)glUniform3dv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3DVPROC glad_debug_glUniform3dv = glad_debug_impl_glUniform3dv;
PFNGLUNIFORM4DVPROC glad_glUniform4dv;
void APIENTRY glad_debug_impl_glUniform4dv(GLint arg0, GLsizei arg1, const GLdouble* arg2) {
    _pre_call_callback("glUniform4dv", (void*)glUniform4dv, 3, arg0, arg1, arg2);
     glad_glUniform4dv(arg0, arg1, arg2);
    _post_call_callback("glUniform4dv", (void*)glUniform4dv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4DVPROC glad_debug_glUniform4dv = glad_debug_impl_glUniform4dv;
PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
void APIENTRY glad_debug_impl_glUniformMatrix2dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble* arg3) {
    _pre_call_callback("glUniformMatrix2dv", (void*)glUniformMatrix2dv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix2dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix2dv", (void*)glUniformMatrix2dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX2DVPROC glad_debug_glUniformMatrix2dv = glad_debug_impl_glUniformMatrix2dv;
PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
void APIENTRY glad_debug_impl_glUniformMatrix3dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble* arg3) {
    _pre_call_callback("glUniformMatrix3dv", (void*)glUniformMatrix3dv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix3dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix3dv", (void*)glUniformMatrix3dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX3DVPROC glad_debug_glUniformMatrix3dv = glad_debug_impl_glUniformMatrix3dv;
PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
void APIENTRY glad_debug_impl_glUniformMatrix4dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble* arg3) {
    _pre_call_callback("glUniformMatrix4dv", (void*)glUniformMatrix4dv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix4dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix4dv", (void*)glUniformMatrix4dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX4DVPROC glad_debug_glUniformMatrix4dv = glad_debug_impl_glUniformMatrix4dv;
PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
void APIENTRY glad_debug_impl_glUniformMatrix2x3dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble* arg3) {
    _pre_call_callback("glUniformMatrix2x3dv", (void*)glUniformMatrix2x3dv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix2x3dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix2x3dv", (void*)glUniformMatrix2x3dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX2X3DVPROC glad_debug_glUniformMatrix2x3dv = glad_debug_impl_glUniformMatrix2x3dv;
PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
void APIENTRY glad_debug_impl_glUniformMatrix2x4dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble* arg3) {
    _pre_call_callback("glUniformMatrix2x4dv", (void*)glUniformMatrix2x4dv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix2x4dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix2x4dv", (void*)glUniformMatrix2x4dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX2X4DVPROC glad_debug_glUniformMatrix2x4dv = glad_debug_impl_glUniformMatrix2x4dv;
PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
void APIENTRY glad_debug_impl_glUniformMatrix3x2dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble* arg3) {
    _pre_call_callback("glUniformMatrix3x2dv", (void*)glUniformMatrix3x2dv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix3x2dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix3x2dv", (void*)glUniformMatrix3x2dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX3X2DVPROC glad_debug_glUniformMatrix3x2dv = glad_debug_impl_glUniformMatrix3x2dv;
PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
void APIENTRY glad_debug_impl_glUniformMatrix3x4dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble* arg3) {
    _pre_call_callback("glUniformMatrix3x4dv", (void*)glUniformMatrix3x4dv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix3x4dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix3x4dv", (void*)glUniformMatrix3x4dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX3X4DVPROC glad_debug_glUniformMatrix3x4dv = glad_debug_impl_glUniformMatrix3x4dv;
PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
void APIENTRY glad_debug_impl_glUniformMatrix4x2dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble* arg3) {
    _pre_call_callback("glUniformMatrix4x2dv", (void*)glUniformMatrix4x2dv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix4x2dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix4x2dv", (void*)glUniformMatrix4x2dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX4X2DVPROC glad_debug_glUniformMatrix4x2dv = glad_debug_impl_glUniformMatrix4x2dv;
PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
void APIENTRY glad_debug_impl_glUniformMatrix4x3dv(GLint arg0, GLsizei arg1, GLboolean arg2, const GLdouble* arg3) {
    _pre_call_callback("glUniformMatrix4x3dv", (void*)glUniformMatrix4x3dv, 4, arg0, arg1, arg2, arg3);
     glad_glUniformMatrix4x3dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniformMatrix4x3dv", (void*)glUniformMatrix4x3dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORMMATRIX4X3DVPROC glad_debug_glUniformMatrix4x3dv = glad_debug_impl_glUniformMatrix4x3dv;
PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
void APIENTRY glad_debug_impl_glGetUniformdv(GLuint arg0, GLint arg1, GLdouble* arg2) {
    _pre_call_callback("glGetUniformdv", (void*)glGetUniformdv, 3, arg0, arg1, arg2);
     glad_glGetUniformdv(arg0, arg1, arg2);
    _post_call_callback("glGetUniformdv", (void*)glGetUniformdv, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMDVPROC glad_debug_glGetUniformdv = glad_debug_impl_glGetUniformdv;
PFNGLCREATESTATESNVPROC glad_glCreateStatesNV;
void APIENTRY glad_debug_impl_glCreateStatesNV(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glCreateStatesNV", (void*)glCreateStatesNV, 2, arg0, arg1);
     glad_glCreateStatesNV(arg0, arg1);
    _post_call_callback("glCreateStatesNV", (void*)glCreateStatesNV, 2, arg0, arg1);

}
PFNGLCREATESTATESNVPROC glad_debug_glCreateStatesNV = glad_debug_impl_glCreateStatesNV;
PFNGLDELETESTATESNVPROC glad_glDeleteStatesNV;
void APIENTRY glad_debug_impl_glDeleteStatesNV(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteStatesNV", (void*)glDeleteStatesNV, 2, arg0, arg1);
     glad_glDeleteStatesNV(arg0, arg1);
    _post_call_callback("glDeleteStatesNV", (void*)glDeleteStatesNV, 2, arg0, arg1);

}
PFNGLDELETESTATESNVPROC glad_debug_glDeleteStatesNV = glad_debug_impl_glDeleteStatesNV;
PFNGLISSTATENVPROC glad_glIsStateNV;
GLboolean APIENTRY glad_debug_impl_glIsStateNV(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsStateNV", (void*)glIsStateNV, 1, arg0);
    ret =  glad_glIsStateNV(arg0);
    _post_call_callback("glIsStateNV", (void*)glIsStateNV, 1, arg0);
    return ret;
}
PFNGLISSTATENVPROC glad_debug_glIsStateNV = glad_debug_impl_glIsStateNV;
PFNGLSTATECAPTURENVPROC glad_glStateCaptureNV;
void APIENTRY glad_debug_impl_glStateCaptureNV(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glStateCaptureNV", (void*)glStateCaptureNV, 2, arg0, arg1);
     glad_glStateCaptureNV(arg0, arg1);
    _post_call_callback("glStateCaptureNV", (void*)glStateCaptureNV, 2, arg0, arg1);

}
PFNGLSTATECAPTURENVPROC glad_debug_glStateCaptureNV = glad_debug_impl_glStateCaptureNV;
PFNGLGETCOMMANDHEADERNVPROC glad_glGetCommandHeaderNV;
GLuint APIENTRY glad_debug_impl_glGetCommandHeaderNV(GLenum arg0, GLuint arg1) {
    GLuint ret;
    _pre_call_callback("glGetCommandHeaderNV", (void*)glGetCommandHeaderNV, 2, arg0, arg1);
    ret =  glad_glGetCommandHeaderNV(arg0, arg1);
    _post_call_callback("glGetCommandHeaderNV", (void*)glGetCommandHeaderNV, 2, arg0, arg1);
    return ret;
}
PFNGLGETCOMMANDHEADERNVPROC glad_debug_glGetCommandHeaderNV = glad_debug_impl_glGetCommandHeaderNV;
PFNGLGETSTAGEINDEXNVPROC glad_glGetStageIndexNV;
GLushort APIENTRY glad_debug_impl_glGetStageIndexNV(GLenum arg0) {
    GLushort ret;
    _pre_call_callback("glGetStageIndexNV", (void*)glGetStageIndexNV, 1, arg0);
    ret =  glad_glGetStageIndexNV(arg0);
    _post_call_callback("glGetStageIndexNV", (void*)glGetStageIndexNV, 1, arg0);
    return ret;
}
PFNGLGETSTAGEINDEXNVPROC glad_debug_glGetStageIndexNV = glad_debug_impl_glGetStageIndexNV;
PFNGLDRAWCOMMANDSNVPROC glad_glDrawCommandsNV;
void APIENTRY glad_debug_impl_glDrawCommandsNV(GLenum arg0, GLuint arg1, const GLintptr* arg2, const GLsizei* arg3, GLuint arg4) {
    _pre_call_callback("glDrawCommandsNV", (void*)glDrawCommandsNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDrawCommandsNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDrawCommandsNV", (void*)glDrawCommandsNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDRAWCOMMANDSNVPROC glad_debug_glDrawCommandsNV = glad_debug_impl_glDrawCommandsNV;
PFNGLDRAWCOMMANDSADDRESSNVPROC glad_glDrawCommandsAddressNV;
void APIENTRY glad_debug_impl_glDrawCommandsAddressNV(GLenum arg0, const GLuint64* arg1, const GLsizei* arg2, GLuint arg3) {
    _pre_call_callback("glDrawCommandsAddressNV", (void*)glDrawCommandsAddressNV, 4, arg0, arg1, arg2, arg3);
     glad_glDrawCommandsAddressNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glDrawCommandsAddressNV", (void*)glDrawCommandsAddressNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLDRAWCOMMANDSADDRESSNVPROC glad_debug_glDrawCommandsAddressNV = glad_debug_impl_glDrawCommandsAddressNV;
PFNGLDRAWCOMMANDSSTATESNVPROC glad_glDrawCommandsStatesNV;
void APIENTRY glad_debug_impl_glDrawCommandsStatesNV(GLuint arg0, const GLintptr* arg1, const GLsizei* arg2, const GLuint* arg3, const GLuint* arg4, GLuint arg5) {
    _pre_call_callback("glDrawCommandsStatesNV", (void*)glDrawCommandsStatesNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDrawCommandsStatesNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDrawCommandsStatesNV", (void*)glDrawCommandsStatesNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDRAWCOMMANDSSTATESNVPROC glad_debug_glDrawCommandsStatesNV = glad_debug_impl_glDrawCommandsStatesNV;
PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC glad_glDrawCommandsStatesAddressNV;
void APIENTRY glad_debug_impl_glDrawCommandsStatesAddressNV(const GLuint64* arg0, const GLsizei* arg1, const GLuint* arg2, const GLuint* arg3, GLuint arg4) {
    _pre_call_callback("glDrawCommandsStatesAddressNV", (void*)glDrawCommandsStatesAddressNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDrawCommandsStatesAddressNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDrawCommandsStatesAddressNV", (void*)glDrawCommandsStatesAddressNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC glad_debug_glDrawCommandsStatesAddressNV = glad_debug_impl_glDrawCommandsStatesAddressNV;
PFNGLCREATECOMMANDLISTSNVPROC glad_glCreateCommandListsNV;
void APIENTRY glad_debug_impl_glCreateCommandListsNV(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glCreateCommandListsNV", (void*)glCreateCommandListsNV, 2, arg0, arg1);
     glad_glCreateCommandListsNV(arg0, arg1);
    _post_call_callback("glCreateCommandListsNV", (void*)glCreateCommandListsNV, 2, arg0, arg1);

}
PFNGLCREATECOMMANDLISTSNVPROC glad_debug_glCreateCommandListsNV = glad_debug_impl_glCreateCommandListsNV;
PFNGLDELETECOMMANDLISTSNVPROC glad_glDeleteCommandListsNV;
void APIENTRY glad_debug_impl_glDeleteCommandListsNV(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteCommandListsNV", (void*)glDeleteCommandListsNV, 2, arg0, arg1);
     glad_glDeleteCommandListsNV(arg0, arg1);
    _post_call_callback("glDeleteCommandListsNV", (void*)glDeleteCommandListsNV, 2, arg0, arg1);

}
PFNGLDELETECOMMANDLISTSNVPROC glad_debug_glDeleteCommandListsNV = glad_debug_impl_glDeleteCommandListsNV;
PFNGLISCOMMANDLISTNVPROC glad_glIsCommandListNV;
GLboolean APIENTRY glad_debug_impl_glIsCommandListNV(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsCommandListNV", (void*)glIsCommandListNV, 1, arg0);
    ret =  glad_glIsCommandListNV(arg0);
    _post_call_callback("glIsCommandListNV", (void*)glIsCommandListNV, 1, arg0);
    return ret;
}
PFNGLISCOMMANDLISTNVPROC glad_debug_glIsCommandListNV = glad_debug_impl_glIsCommandListNV;
PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC glad_glListDrawCommandsStatesClientNV;
void APIENTRY glad_debug_impl_glListDrawCommandsStatesClientNV(GLuint arg0, GLuint arg1, const void** arg2, const GLsizei* arg3, const GLuint* arg4, const GLuint* arg5, GLuint arg6) {
    _pre_call_callback("glListDrawCommandsStatesClientNV", (void*)glListDrawCommandsStatesClientNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glListDrawCommandsStatesClientNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glListDrawCommandsStatesClientNV", (void*)glListDrawCommandsStatesClientNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC glad_debug_glListDrawCommandsStatesClientNV = glad_debug_impl_glListDrawCommandsStatesClientNV;
PFNGLCOMMANDLISTSEGMENTSNVPROC glad_glCommandListSegmentsNV;
void APIENTRY glad_debug_impl_glCommandListSegmentsNV(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glCommandListSegmentsNV", (void*)glCommandListSegmentsNV, 2, arg0, arg1);
     glad_glCommandListSegmentsNV(arg0, arg1);
    _post_call_callback("glCommandListSegmentsNV", (void*)glCommandListSegmentsNV, 2, arg0, arg1);

}
PFNGLCOMMANDLISTSEGMENTSNVPROC glad_debug_glCommandListSegmentsNV = glad_debug_impl_glCommandListSegmentsNV;
PFNGLCOMPILECOMMANDLISTNVPROC glad_glCompileCommandListNV;
void APIENTRY glad_debug_impl_glCompileCommandListNV(GLuint arg0) {
    _pre_call_callback("glCompileCommandListNV", (void*)glCompileCommandListNV, 1, arg0);
     glad_glCompileCommandListNV(arg0);
    _post_call_callback("glCompileCommandListNV", (void*)glCompileCommandListNV, 1, arg0);

}
PFNGLCOMPILECOMMANDLISTNVPROC glad_debug_glCompileCommandListNV = glad_debug_impl_glCompileCommandListNV;
PFNGLCALLCOMMANDLISTNVPROC glad_glCallCommandListNV;
void APIENTRY glad_debug_impl_glCallCommandListNV(GLuint arg0) {
    _pre_call_callback("glCallCommandListNV", (void*)glCallCommandListNV, 1, arg0);
     glad_glCallCommandListNV(arg0);
    _post_call_callback("glCallCommandListNV", (void*)glCallCommandListNV, 1, arg0);

}
PFNGLCALLCOMMANDLISTNVPROC glad_debug_glCallCommandListNV = glad_debug_impl_glCallCommandListNV;
PFNGLVERTEXWEIGHTFEXTPROC glad_glVertexWeightfEXT;
void APIENTRY glad_debug_impl_glVertexWeightfEXT(GLfloat arg0) {
    _pre_call_callback("glVertexWeightfEXT", (void*)glVertexWeightfEXT, 1, arg0);
     glad_glVertexWeightfEXT(arg0);
    _post_call_callback("glVertexWeightfEXT", (void*)glVertexWeightfEXT, 1, arg0);

}
PFNGLVERTEXWEIGHTFEXTPROC glad_debug_glVertexWeightfEXT = glad_debug_impl_glVertexWeightfEXT;
PFNGLVERTEXWEIGHTFVEXTPROC glad_glVertexWeightfvEXT;
void APIENTRY glad_debug_impl_glVertexWeightfvEXT(const GLfloat* arg0) {
    _pre_call_callback("glVertexWeightfvEXT", (void*)glVertexWeightfvEXT, 1, arg0);
     glad_glVertexWeightfvEXT(arg0);
    _post_call_callback("glVertexWeightfvEXT", (void*)glVertexWeightfvEXT, 1, arg0);

}
PFNGLVERTEXWEIGHTFVEXTPROC glad_debug_glVertexWeightfvEXT = glad_debug_impl_glVertexWeightfvEXT;
PFNGLVERTEXWEIGHTPOINTEREXTPROC glad_glVertexWeightPointerEXT;
void APIENTRY glad_debug_impl_glVertexWeightPointerEXT(GLint arg0, GLenum arg1, GLsizei arg2, const void* arg3) {
    _pre_call_callback("glVertexWeightPointerEXT", (void*)glVertexWeightPointerEXT, 4, arg0, arg1, arg2, arg3);
     glad_glVertexWeightPointerEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexWeightPointerEXT", (void*)glVertexWeightPointerEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXWEIGHTPOINTEREXTPROC glad_debug_glVertexWeightPointerEXT = glad_debug_impl_glVertexWeightPointerEXT;
PFNGLSTRINGMARKERGREMEDYPROC glad_glStringMarkerGREMEDY;
void APIENTRY glad_debug_impl_glStringMarkerGREMEDY(GLsizei arg0, const void* arg1) {
    _pre_call_callback("glStringMarkerGREMEDY", (void*)glStringMarkerGREMEDY, 2, arg0, arg1);
     glad_glStringMarkerGREMEDY(arg0, arg1);
    _post_call_callback("glStringMarkerGREMEDY", (void*)glStringMarkerGREMEDY, 2, arg0, arg1);

}
PFNGLSTRINGMARKERGREMEDYPROC glad_debug_glStringMarkerGREMEDY = glad_debug_impl_glStringMarkerGREMEDY;
PFNGLTEXSUBIMAGE1DEXTPROC glad_glTexSubImage1DEXT;
void APIENTRY glad_debug_impl_glTexSubImage1DEXT(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void* arg6) {
    _pre_call_callback("glTexSubImage1DEXT", (void*)glTexSubImage1DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTexSubImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTexSubImage1DEXT", (void*)glTexSubImage1DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXSUBIMAGE1DEXTPROC glad_debug_glTexSubImage1DEXT = glad_debug_impl_glTexSubImage1DEXT;
PFNGLTEXSUBIMAGE2DEXTPROC glad_glTexSubImage2DEXT;
void APIENTRY glad_debug_impl_glTexSubImage2DEXT(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLenum arg7, const void* arg8) {
    _pre_call_callback("glTexSubImage2DEXT", (void*)glTexSubImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glTexSubImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glTexSubImage2DEXT", (void*)glTexSubImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLTEXSUBIMAGE2DEXTPROC glad_debug_glTexSubImage2DEXT = glad_debug_impl_glTexSubImage2DEXT;
PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glad_glProgramEnvParameters4fvEXT;
void APIENTRY glad_debug_impl_glProgramEnvParameters4fvEXT(GLenum arg0, GLuint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramEnvParameters4fvEXT", (void*)glProgramEnvParameters4fvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramEnvParameters4fvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramEnvParameters4fvEXT", (void*)glProgramEnvParameters4fvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glad_debug_glProgramEnvParameters4fvEXT = glad_debug_impl_glProgramEnvParameters4fvEXT;
PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glad_glProgramLocalParameters4fvEXT;
void APIENTRY glad_debug_impl_glProgramLocalParameters4fvEXT(GLenum arg0, GLuint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramLocalParameters4fvEXT", (void*)glProgramLocalParameters4fvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramLocalParameters4fvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramLocalParameters4fvEXT", (void*)glProgramLocalParameters4fvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glad_debug_glProgramLocalParameters4fvEXT = glad_debug_impl_glProgramLocalParameters4fvEXT;
PFNGLMAPCONTROLPOINTSNVPROC glad_glMapControlPointsNV;
void APIENTRY glad_debug_impl_glMapControlPointsNV(GLenum arg0, GLuint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLint arg5, GLint arg6, GLboolean arg7, const void* arg8) {
    _pre_call_callback("glMapControlPointsNV", (void*)glMapControlPointsNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glMapControlPointsNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glMapControlPointsNV", (void*)glMapControlPointsNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLMAPCONTROLPOINTSNVPROC glad_debug_glMapControlPointsNV = glad_debug_impl_glMapControlPointsNV;
PFNGLMAPPARAMETERIVNVPROC glad_glMapParameterivNV;
void APIENTRY glad_debug_impl_glMapParameterivNV(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glMapParameterivNV", (void*)glMapParameterivNV, 3, arg0, arg1, arg2);
     glad_glMapParameterivNV(arg0, arg1, arg2);
    _post_call_callback("glMapParameterivNV", (void*)glMapParameterivNV, 3, arg0, arg1, arg2);

}
PFNGLMAPPARAMETERIVNVPROC glad_debug_glMapParameterivNV = glad_debug_impl_glMapParameterivNV;
PFNGLMAPPARAMETERFVNVPROC glad_glMapParameterfvNV;
void APIENTRY glad_debug_impl_glMapParameterfvNV(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glMapParameterfvNV", (void*)glMapParameterfvNV, 3, arg0, arg1, arg2);
     glad_glMapParameterfvNV(arg0, arg1, arg2);
    _post_call_callback("glMapParameterfvNV", (void*)glMapParameterfvNV, 3, arg0, arg1, arg2);

}
PFNGLMAPPARAMETERFVNVPROC glad_debug_glMapParameterfvNV = glad_debug_impl_glMapParameterfvNV;
PFNGLGETMAPCONTROLPOINTSNVPROC glad_glGetMapControlPointsNV;
void APIENTRY glad_debug_impl_glGetMapControlPointsNV(GLenum arg0, GLuint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLboolean arg5, void* arg6) {
    _pre_call_callback("glGetMapControlPointsNV", (void*)glGetMapControlPointsNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetMapControlPointsNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetMapControlPointsNV", (void*)glGetMapControlPointsNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETMAPCONTROLPOINTSNVPROC glad_debug_glGetMapControlPointsNV = glad_debug_impl_glGetMapControlPointsNV;
PFNGLGETMAPPARAMETERIVNVPROC glad_glGetMapParameterivNV;
void APIENTRY glad_debug_impl_glGetMapParameterivNV(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetMapParameterivNV", (void*)glGetMapParameterivNV, 3, arg0, arg1, arg2);
     glad_glGetMapParameterivNV(arg0, arg1, arg2);
    _post_call_callback("glGetMapParameterivNV", (void*)glGetMapParameterivNV, 3, arg0, arg1, arg2);

}
PFNGLGETMAPPARAMETERIVNVPROC glad_debug_glGetMapParameterivNV = glad_debug_impl_glGetMapParameterivNV;
PFNGLGETMAPPARAMETERFVNVPROC glad_glGetMapParameterfvNV;
void APIENTRY glad_debug_impl_glGetMapParameterfvNV(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetMapParameterfvNV", (void*)glGetMapParameterfvNV, 3, arg0, arg1, arg2);
     glad_glGetMapParameterfvNV(arg0, arg1, arg2);
    _post_call_callback("glGetMapParameterfvNV", (void*)glGetMapParameterfvNV, 3, arg0, arg1, arg2);

}
PFNGLGETMAPPARAMETERFVNVPROC glad_debug_glGetMapParameterfvNV = glad_debug_impl_glGetMapParameterfvNV;
PFNGLGETMAPATTRIBPARAMETERIVNVPROC glad_glGetMapAttribParameterivNV;
void APIENTRY glad_debug_impl_glGetMapAttribParameterivNV(GLenum arg0, GLuint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetMapAttribParameterivNV", (void*)glGetMapAttribParameterivNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetMapAttribParameterivNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMapAttribParameterivNV", (void*)glGetMapAttribParameterivNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMAPATTRIBPARAMETERIVNVPROC glad_debug_glGetMapAttribParameterivNV = glad_debug_impl_glGetMapAttribParameterivNV;
PFNGLGETMAPATTRIBPARAMETERFVNVPROC glad_glGetMapAttribParameterfvNV;
void APIENTRY glad_debug_impl_glGetMapAttribParameterfvNV(GLenum arg0, GLuint arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetMapAttribParameterfvNV", (void*)glGetMapAttribParameterfvNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetMapAttribParameterfvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMapAttribParameterfvNV", (void*)glGetMapAttribParameterfvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMAPATTRIBPARAMETERFVNVPROC glad_debug_glGetMapAttribParameterfvNV = glad_debug_impl_glGetMapAttribParameterfvNV;
PFNGLEVALMAPSNVPROC glad_glEvalMapsNV;
void APIENTRY glad_debug_impl_glEvalMapsNV(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glEvalMapsNV", (void*)glEvalMapsNV, 2, arg0, arg1);
     glad_glEvalMapsNV(arg0, arg1);
    _post_call_callback("glEvalMapsNV", (void*)glEvalMapsNV, 2, arg0, arg1);

}
PFNGLEVALMAPSNVPROC glad_debug_glEvalMapsNV = glad_debug_impl_glEvalMapsNV;
PFNGLGETTEXFILTERFUNCSGISPROC glad_glGetTexFilterFuncSGIS;
void APIENTRY glad_debug_impl_glGetTexFilterFuncSGIS(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetTexFilterFuncSGIS", (void*)glGetTexFilterFuncSGIS, 3, arg0, arg1, arg2);
     glad_glGetTexFilterFuncSGIS(arg0, arg1, arg2);
    _post_call_callback("glGetTexFilterFuncSGIS", (void*)glGetTexFilterFuncSGIS, 3, arg0, arg1, arg2);

}
PFNGLGETTEXFILTERFUNCSGISPROC glad_debug_glGetTexFilterFuncSGIS = glad_debug_impl_glGetTexFilterFuncSGIS;
PFNGLTEXFILTERFUNCSGISPROC glad_glTexFilterFuncSGIS;
void APIENTRY glad_debug_impl_glTexFilterFuncSGIS(GLenum arg0, GLenum arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glTexFilterFuncSGIS", (void*)glTexFilterFuncSGIS, 4, arg0, arg1, arg2, arg3);
     glad_glTexFilterFuncSGIS(arg0, arg1, arg2, arg3);
    _post_call_callback("glTexFilterFuncSGIS", (void*)glTexFilterFuncSGIS, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXFILTERFUNCSGISPROC glad_debug_glTexFilterFuncSGIS = glad_debug_impl_glTexFilterFuncSGIS;
PFNGLGETPERFMONITORGROUPSAMDPROC glad_glGetPerfMonitorGroupsAMD;
void APIENTRY glad_debug_impl_glGetPerfMonitorGroupsAMD(GLint* arg0, GLsizei arg1, GLuint* arg2) {
    _pre_call_callback("glGetPerfMonitorGroupsAMD", (void*)glGetPerfMonitorGroupsAMD, 3, arg0, arg1, arg2);
     glad_glGetPerfMonitorGroupsAMD(arg0, arg1, arg2);
    _post_call_callback("glGetPerfMonitorGroupsAMD", (void*)glGetPerfMonitorGroupsAMD, 3, arg0, arg1, arg2);

}
PFNGLGETPERFMONITORGROUPSAMDPROC glad_debug_glGetPerfMonitorGroupsAMD = glad_debug_impl_glGetPerfMonitorGroupsAMD;
PFNGLGETPERFMONITORCOUNTERSAMDPROC glad_glGetPerfMonitorCountersAMD;
void APIENTRY glad_debug_impl_glGetPerfMonitorCountersAMD(GLuint arg0, GLint* arg1, GLint* arg2, GLsizei arg3, GLuint* arg4) {
    _pre_call_callback("glGetPerfMonitorCountersAMD", (void*)glGetPerfMonitorCountersAMD, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetPerfMonitorCountersAMD(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetPerfMonitorCountersAMD", (void*)glGetPerfMonitorCountersAMD, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETPERFMONITORCOUNTERSAMDPROC glad_debug_glGetPerfMonitorCountersAMD = glad_debug_impl_glGetPerfMonitorCountersAMD;
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glad_glGetPerfMonitorGroupStringAMD;
void APIENTRY glad_debug_impl_glGetPerfMonitorGroupStringAMD(GLuint arg0, GLsizei arg1, GLsizei* arg2, GLchar* arg3) {
    _pre_call_callback("glGetPerfMonitorGroupStringAMD", (void*)glGetPerfMonitorGroupStringAMD, 4, arg0, arg1, arg2, arg3);
     glad_glGetPerfMonitorGroupStringAMD(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetPerfMonitorGroupStringAMD", (void*)glGetPerfMonitorGroupStringAMD, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glad_debug_glGetPerfMonitorGroupStringAMD = glad_debug_impl_glGetPerfMonitorGroupStringAMD;
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glad_glGetPerfMonitorCounterStringAMD;
void APIENTRY glad_debug_impl_glGetPerfMonitorCounterStringAMD(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLchar* arg4) {
    _pre_call_callback("glGetPerfMonitorCounterStringAMD", (void*)glGetPerfMonitorCounterStringAMD, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetPerfMonitorCounterStringAMD(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetPerfMonitorCounterStringAMD", (void*)glGetPerfMonitorCounterStringAMD, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glad_debug_glGetPerfMonitorCounterStringAMD = glad_debug_impl_glGetPerfMonitorCounterStringAMD;
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glad_glGetPerfMonitorCounterInfoAMD;
void APIENTRY glad_debug_impl_glGetPerfMonitorCounterInfoAMD(GLuint arg0, GLuint arg1, GLenum arg2, void* arg3) {
    _pre_call_callback("glGetPerfMonitorCounterInfoAMD", (void*)glGetPerfMonitorCounterInfoAMD, 4, arg0, arg1, arg2, arg3);
     glad_glGetPerfMonitorCounterInfoAMD(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetPerfMonitorCounterInfoAMD", (void*)glGetPerfMonitorCounterInfoAMD, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glad_debug_glGetPerfMonitorCounterInfoAMD = glad_debug_impl_glGetPerfMonitorCounterInfoAMD;
PFNGLGENPERFMONITORSAMDPROC glad_glGenPerfMonitorsAMD;
void APIENTRY glad_debug_impl_glGenPerfMonitorsAMD(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenPerfMonitorsAMD", (void*)glGenPerfMonitorsAMD, 2, arg0, arg1);
     glad_glGenPerfMonitorsAMD(arg0, arg1);
    _post_call_callback("glGenPerfMonitorsAMD", (void*)glGenPerfMonitorsAMD, 2, arg0, arg1);

}
PFNGLGENPERFMONITORSAMDPROC glad_debug_glGenPerfMonitorsAMD = glad_debug_impl_glGenPerfMonitorsAMD;
PFNGLDELETEPERFMONITORSAMDPROC glad_glDeletePerfMonitorsAMD;
void APIENTRY glad_debug_impl_glDeletePerfMonitorsAMD(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glDeletePerfMonitorsAMD", (void*)glDeletePerfMonitorsAMD, 2, arg0, arg1);
     glad_glDeletePerfMonitorsAMD(arg0, arg1);
    _post_call_callback("glDeletePerfMonitorsAMD", (void*)glDeletePerfMonitorsAMD, 2, arg0, arg1);

}
PFNGLDELETEPERFMONITORSAMDPROC glad_debug_glDeletePerfMonitorsAMD = glad_debug_impl_glDeletePerfMonitorsAMD;
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glad_glSelectPerfMonitorCountersAMD;
void APIENTRY glad_debug_impl_glSelectPerfMonitorCountersAMD(GLuint arg0, GLboolean arg1, GLuint arg2, GLint arg3, GLuint* arg4) {
    _pre_call_callback("glSelectPerfMonitorCountersAMD", (void*)glSelectPerfMonitorCountersAMD, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glSelectPerfMonitorCountersAMD(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glSelectPerfMonitorCountersAMD", (void*)glSelectPerfMonitorCountersAMD, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glad_debug_glSelectPerfMonitorCountersAMD = glad_debug_impl_glSelectPerfMonitorCountersAMD;
PFNGLBEGINPERFMONITORAMDPROC glad_glBeginPerfMonitorAMD;
void APIENTRY glad_debug_impl_glBeginPerfMonitorAMD(GLuint arg0) {
    _pre_call_callback("glBeginPerfMonitorAMD", (void*)glBeginPerfMonitorAMD, 1, arg0);
     glad_glBeginPerfMonitorAMD(arg0);
    _post_call_callback("glBeginPerfMonitorAMD", (void*)glBeginPerfMonitorAMD, 1, arg0);

}
PFNGLBEGINPERFMONITORAMDPROC glad_debug_glBeginPerfMonitorAMD = glad_debug_impl_glBeginPerfMonitorAMD;
PFNGLENDPERFMONITORAMDPROC glad_glEndPerfMonitorAMD;
void APIENTRY glad_debug_impl_glEndPerfMonitorAMD(GLuint arg0) {
    _pre_call_callback("glEndPerfMonitorAMD", (void*)glEndPerfMonitorAMD, 1, arg0);
     glad_glEndPerfMonitorAMD(arg0);
    _post_call_callback("glEndPerfMonitorAMD", (void*)glEndPerfMonitorAMD, 1, arg0);

}
PFNGLENDPERFMONITORAMDPROC glad_debug_glEndPerfMonitorAMD = glad_debug_impl_glEndPerfMonitorAMD;
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glad_glGetPerfMonitorCounterDataAMD;
void APIENTRY glad_debug_impl_glGetPerfMonitorCounterDataAMD(GLuint arg0, GLenum arg1, GLsizei arg2, GLuint* arg3, GLint* arg4) {
    _pre_call_callback("glGetPerfMonitorCounterDataAMD", (void*)glGetPerfMonitorCounterDataAMD, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetPerfMonitorCounterDataAMD(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetPerfMonitorCounterDataAMD", (void*)glGetPerfMonitorCounterDataAMD, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glad_debug_glGetPerfMonitorCounterDataAMD = glad_debug_impl_glGetPerfMonitorCounterDataAMD;
PFNGLSTENCILCLEARTAGEXTPROC glad_glStencilClearTagEXT;
void APIENTRY glad_debug_impl_glStencilClearTagEXT(GLsizei arg0, GLuint arg1) {
    _pre_call_callback("glStencilClearTagEXT", (void*)glStencilClearTagEXT, 2, arg0, arg1);
     glad_glStencilClearTagEXT(arg0, arg1);
    _post_call_callback("glStencilClearTagEXT", (void*)glStencilClearTagEXT, 2, arg0, arg1);

}
PFNGLSTENCILCLEARTAGEXTPROC glad_debug_glStencilClearTagEXT = glad_debug_impl_glStencilClearTagEXT;
PFNGLPRESENTFRAMEKEYEDNVPROC glad_glPresentFrameKeyedNV;
void APIENTRY glad_debug_impl_glPresentFrameKeyedNV(GLuint arg0, GLuint64EXT arg1, GLuint arg2, GLuint arg3, GLenum arg4, GLenum arg5, GLuint arg6, GLuint arg7, GLenum arg8, GLuint arg9, GLuint arg10) {
    _pre_call_callback("glPresentFrameKeyedNV", (void*)glPresentFrameKeyedNV, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glPresentFrameKeyedNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glPresentFrameKeyedNV", (void*)glPresentFrameKeyedNV, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLPRESENTFRAMEKEYEDNVPROC glad_debug_glPresentFrameKeyedNV = glad_debug_impl_glPresentFrameKeyedNV;
PFNGLPRESENTFRAMEDUALFILLNVPROC glad_glPresentFrameDualFillNV;
void APIENTRY glad_debug_impl_glPresentFrameDualFillNV(GLuint arg0, GLuint64EXT arg1, GLuint arg2, GLuint arg3, GLenum arg4, GLenum arg5, GLuint arg6, GLenum arg7, GLuint arg8, GLenum arg9, GLuint arg10, GLenum arg11, GLuint arg12) {
    _pre_call_callback("glPresentFrameDualFillNV", (void*)glPresentFrameDualFillNV, 13, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
     glad_glPresentFrameDualFillNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    _post_call_callback("glPresentFrameDualFillNV", (void*)glPresentFrameDualFillNV, 13, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

}
PFNGLPRESENTFRAMEDUALFILLNVPROC glad_debug_glPresentFrameDualFillNV = glad_debug_impl_glPresentFrameDualFillNV;
PFNGLGETVIDEOIVNVPROC glad_glGetVideoivNV;
void APIENTRY glad_debug_impl_glGetVideoivNV(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVideoivNV", (void*)glGetVideoivNV, 3, arg0, arg1, arg2);
     glad_glGetVideoivNV(arg0, arg1, arg2);
    _post_call_callback("glGetVideoivNV", (void*)glGetVideoivNV, 3, arg0, arg1, arg2);

}
PFNGLGETVIDEOIVNVPROC glad_debug_glGetVideoivNV = glad_debug_impl_glGetVideoivNV;
PFNGLGETVIDEOUIVNVPROC glad_glGetVideouivNV;
void APIENTRY glad_debug_impl_glGetVideouivNV(GLuint arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetVideouivNV", (void*)glGetVideouivNV, 3, arg0, arg1, arg2);
     glad_glGetVideouivNV(arg0, arg1, arg2);
    _post_call_callback("glGetVideouivNV", (void*)glGetVideouivNV, 3, arg0, arg1, arg2);

}
PFNGLGETVIDEOUIVNVPROC glad_debug_glGetVideouivNV = glad_debug_impl_glGetVideouivNV;
PFNGLGETVIDEOI64VNVPROC glad_glGetVideoi64vNV;
void APIENTRY glad_debug_impl_glGetVideoi64vNV(GLuint arg0, GLenum arg1, GLint64EXT* arg2) {
    _pre_call_callback("glGetVideoi64vNV", (void*)glGetVideoi64vNV, 3, arg0, arg1, arg2);
     glad_glGetVideoi64vNV(arg0, arg1, arg2);
    _post_call_callback("glGetVideoi64vNV", (void*)glGetVideoi64vNV, 3, arg0, arg1, arg2);

}
PFNGLGETVIDEOI64VNVPROC glad_debug_glGetVideoi64vNV = glad_debug_impl_glGetVideoi64vNV;
PFNGLGETVIDEOUI64VNVPROC glad_glGetVideoui64vNV;
void APIENTRY glad_debug_impl_glGetVideoui64vNV(GLuint arg0, GLenum arg1, GLuint64EXT* arg2) {
    _pre_call_callback("glGetVideoui64vNV", (void*)glGetVideoui64vNV, 3, arg0, arg1, arg2);
     glad_glGetVideoui64vNV(arg0, arg1, arg2);
    _post_call_callback("glGetVideoui64vNV", (void*)glGetVideoui64vNV, 3, arg0, arg1, arg2);

}
PFNGLGETVIDEOUI64VNVPROC glad_debug_glGetVideoui64vNV = glad_debug_impl_glGetVideoui64vNV;
PFNGLFRAMEZOOMSGIXPROC glad_glFrameZoomSGIX;
void APIENTRY glad_debug_impl_glFrameZoomSGIX(GLint arg0) {
    _pre_call_callback("glFrameZoomSGIX", (void*)glFrameZoomSGIX, 1, arg0);
     glad_glFrameZoomSGIX(arg0);
    _post_call_callback("glFrameZoomSGIX", (void*)glFrameZoomSGIX, 1, arg0);

}
PFNGLFRAMEZOOMSGIXPROC glad_debug_glFrameZoomSGIX = glad_debug_impl_glFrameZoomSGIX;
PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_glBeginTransformFeedbackNV;
void APIENTRY glad_debug_impl_glBeginTransformFeedbackNV(GLenum arg0) {
    _pre_call_callback("glBeginTransformFeedbackNV", (void*)glBeginTransformFeedbackNV, 1, arg0);
     glad_glBeginTransformFeedbackNV(arg0);
    _post_call_callback("glBeginTransformFeedbackNV", (void*)glBeginTransformFeedbackNV, 1, arg0);

}
PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_debug_glBeginTransformFeedbackNV = glad_debug_impl_glBeginTransformFeedbackNV;
PFNGLENDTRANSFORMFEEDBACKNVPROC glad_glEndTransformFeedbackNV;
void APIENTRY glad_debug_impl_glEndTransformFeedbackNV() {
    _pre_call_callback("glEndTransformFeedbackNV", (void*)glEndTransformFeedbackNV, 0);
     glad_glEndTransformFeedbackNV();
    _post_call_callback("glEndTransformFeedbackNV", (void*)glEndTransformFeedbackNV, 0);

}
PFNGLENDTRANSFORMFEEDBACKNVPROC glad_debug_glEndTransformFeedbackNV = glad_debug_impl_glEndTransformFeedbackNV;
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glad_glTransformFeedbackAttribsNV;
void APIENTRY glad_debug_impl_glTransformFeedbackAttribsNV(GLsizei arg0, const GLint* arg1, GLenum arg2) {
    _pre_call_callback("glTransformFeedbackAttribsNV", (void*)glTransformFeedbackAttribsNV, 3, arg0, arg1, arg2);
     glad_glTransformFeedbackAttribsNV(arg0, arg1, arg2);
    _post_call_callback("glTransformFeedbackAttribsNV", (void*)glTransformFeedbackAttribsNV, 3, arg0, arg1, arg2);

}
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glad_debug_glTransformFeedbackAttribsNV = glad_debug_impl_glTransformFeedbackAttribsNV;
PFNGLBINDBUFFERRANGENVPROC glad_glBindBufferRangeNV;
void APIENTRY glad_debug_impl_glBindBufferRangeNV(GLenum arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_callback("glBindBufferRangeNV", (void*)glBindBufferRangeNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glBindBufferRangeNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glBindBufferRangeNV", (void*)glBindBufferRangeNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLBINDBUFFERRANGENVPROC glad_debug_glBindBufferRangeNV = glad_debug_impl_glBindBufferRangeNV;
PFNGLBINDBUFFEROFFSETNVPROC glad_glBindBufferOffsetNV;
void APIENTRY glad_debug_impl_glBindBufferOffsetNV(GLenum arg0, GLuint arg1, GLuint arg2, GLintptr arg3) {
    _pre_call_callback("glBindBufferOffsetNV", (void*)glBindBufferOffsetNV, 4, arg0, arg1, arg2, arg3);
     glad_glBindBufferOffsetNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glBindBufferOffsetNV", (void*)glBindBufferOffsetNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLBINDBUFFEROFFSETNVPROC glad_debug_glBindBufferOffsetNV = glad_debug_impl_glBindBufferOffsetNV;
PFNGLBINDBUFFERBASENVPROC glad_glBindBufferBaseNV;
void APIENTRY glad_debug_impl_glBindBufferBaseNV(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glBindBufferBaseNV", (void*)glBindBufferBaseNV, 3, arg0, arg1, arg2);
     glad_glBindBufferBaseNV(arg0, arg1, arg2);
    _post_call_callback("glBindBufferBaseNV", (void*)glBindBufferBaseNV, 3, arg0, arg1, arg2);

}
PFNGLBINDBUFFERBASENVPROC glad_debug_glBindBufferBaseNV = glad_debug_impl_glBindBufferBaseNV;
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glad_glTransformFeedbackVaryingsNV;
void APIENTRY glad_debug_impl_glTransformFeedbackVaryingsNV(GLuint arg0, GLsizei arg1, const GLint* arg2, GLenum arg3) {
    _pre_call_callback("glTransformFeedbackVaryingsNV", (void*)glTransformFeedbackVaryingsNV, 4, arg0, arg1, arg2, arg3);
     glad_glTransformFeedbackVaryingsNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glTransformFeedbackVaryingsNV", (void*)glTransformFeedbackVaryingsNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glad_debug_glTransformFeedbackVaryingsNV = glad_debug_impl_glTransformFeedbackVaryingsNV;
PFNGLACTIVEVARYINGNVPROC glad_glActiveVaryingNV;
void APIENTRY glad_debug_impl_glActiveVaryingNV(GLuint arg0, const GLchar* arg1) {
    _pre_call_callback("glActiveVaryingNV", (void*)glActiveVaryingNV, 2, arg0, arg1);
     glad_glActiveVaryingNV(arg0, arg1);
    _post_call_callback("glActiveVaryingNV", (void*)glActiveVaryingNV, 2, arg0, arg1);

}
PFNGLACTIVEVARYINGNVPROC glad_debug_glActiveVaryingNV = glad_debug_impl_glActiveVaryingNV;
PFNGLGETVARYINGLOCATIONNVPROC glad_glGetVaryingLocationNV;
GLint APIENTRY glad_debug_impl_glGetVaryingLocationNV(GLuint arg0, const GLchar* arg1) {
    GLint ret;
    _pre_call_callback("glGetVaryingLocationNV", (void*)glGetVaryingLocationNV, 2, arg0, arg1);
    ret =  glad_glGetVaryingLocationNV(arg0, arg1);
    _post_call_callback("glGetVaryingLocationNV", (void*)glGetVaryingLocationNV, 2, arg0, arg1);
    return ret;
}
PFNGLGETVARYINGLOCATIONNVPROC glad_debug_glGetVaryingLocationNV = glad_debug_impl_glGetVaryingLocationNV;
PFNGLGETACTIVEVARYINGNVPROC glad_glGetActiveVaryingNV;
void APIENTRY glad_debug_impl_glGetActiveVaryingNV(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLsizei* arg4, GLenum* arg5, GLchar* arg6) {
    _pre_call_callback("glGetActiveVaryingNV", (void*)glGetActiveVaryingNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetActiveVaryingNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetActiveVaryingNV", (void*)glGetActiveVaryingNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETACTIVEVARYINGNVPROC glad_debug_glGetActiveVaryingNV = glad_debug_impl_glGetActiveVaryingNV;
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glad_glGetTransformFeedbackVaryingNV;
void APIENTRY glad_debug_impl_glGetTransformFeedbackVaryingNV(GLuint arg0, GLuint arg1, GLint* arg2) {
    _pre_call_callback("glGetTransformFeedbackVaryingNV", (void*)glGetTransformFeedbackVaryingNV, 3, arg0, arg1, arg2);
     glad_glGetTransformFeedbackVaryingNV(arg0, arg1, arg2);
    _post_call_callback("glGetTransformFeedbackVaryingNV", (void*)glGetTransformFeedbackVaryingNV, 3, arg0, arg1, arg2);

}
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glad_debug_glGetTransformFeedbackVaryingNV = glad_debug_impl_glGetTransformFeedbackVaryingNV;
PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glad_glTransformFeedbackStreamAttribsNV;
void APIENTRY glad_debug_impl_glTransformFeedbackStreamAttribsNV(GLsizei arg0, const GLint* arg1, GLsizei arg2, const GLint* arg3, GLenum arg4) {
    _pre_call_callback("glTransformFeedbackStreamAttribsNV", (void*)glTransformFeedbackStreamAttribsNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTransformFeedbackStreamAttribsNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTransformFeedbackStreamAttribsNV", (void*)glTransformFeedbackStreamAttribsNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glad_debug_glTransformFeedbackStreamAttribsNV = glad_debug_impl_glTransformFeedbackStreamAttribsNV;
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glad_glProgramNamedParameter4fNV;
void APIENTRY glad_debug_impl_glProgramNamedParameter4fNV(GLuint arg0, GLsizei arg1, const GLubyte* arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6) {
    _pre_call_callback("glProgramNamedParameter4fNV", (void*)glProgramNamedParameter4fNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glProgramNamedParameter4fNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glProgramNamedParameter4fNV", (void*)glProgramNamedParameter4fNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glad_debug_glProgramNamedParameter4fNV = glad_debug_impl_glProgramNamedParameter4fNV;
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glad_glProgramNamedParameter4fvNV;
void APIENTRY glad_debug_impl_glProgramNamedParameter4fvNV(GLuint arg0, GLsizei arg1, const GLubyte* arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramNamedParameter4fvNV", (void*)glProgramNamedParameter4fvNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramNamedParameter4fvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramNamedParameter4fvNV", (void*)glProgramNamedParameter4fvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glad_debug_glProgramNamedParameter4fvNV = glad_debug_impl_glProgramNamedParameter4fvNV;
PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glad_glProgramNamedParameter4dNV;
void APIENTRY glad_debug_impl_glProgramNamedParameter4dNV(GLuint arg0, GLsizei arg1, const GLubyte* arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5, GLdouble arg6) {
    _pre_call_callback("glProgramNamedParameter4dNV", (void*)glProgramNamedParameter4dNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glProgramNamedParameter4dNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glProgramNamedParameter4dNV", (void*)glProgramNamedParameter4dNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glad_debug_glProgramNamedParameter4dNV = glad_debug_impl_glProgramNamedParameter4dNV;
PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glad_glProgramNamedParameter4dvNV;
void APIENTRY glad_debug_impl_glProgramNamedParameter4dvNV(GLuint arg0, GLsizei arg1, const GLubyte* arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramNamedParameter4dvNV", (void*)glProgramNamedParameter4dvNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramNamedParameter4dvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramNamedParameter4dvNV", (void*)glProgramNamedParameter4dvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glad_debug_glProgramNamedParameter4dvNV = glad_debug_impl_glProgramNamedParameter4dvNV;
PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glad_glGetProgramNamedParameterfvNV;
void APIENTRY glad_debug_impl_glGetProgramNamedParameterfvNV(GLuint arg0, GLsizei arg1, const GLubyte* arg2, GLfloat* arg3) {
    _pre_call_callback("glGetProgramNamedParameterfvNV", (void*)glGetProgramNamedParameterfvNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetProgramNamedParameterfvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetProgramNamedParameterfvNV", (void*)glGetProgramNamedParameterfvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glad_debug_glGetProgramNamedParameterfvNV = glad_debug_impl_glGetProgramNamedParameterfvNV;
PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glad_glGetProgramNamedParameterdvNV;
void APIENTRY glad_debug_impl_glGetProgramNamedParameterdvNV(GLuint arg0, GLsizei arg1, const GLubyte* arg2, GLdouble* arg3) {
    _pre_call_callback("glGetProgramNamedParameterdvNV", (void*)glGetProgramNamedParameterdvNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetProgramNamedParameterdvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetProgramNamedParameterdvNV", (void*)glGetProgramNamedParameterdvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glad_debug_glGetProgramNamedParameterdvNV = glad_debug_impl_glGetProgramNamedParameterdvNV;
PFNGLSTENCILOPVALUEAMDPROC glad_glStencilOpValueAMD;
void APIENTRY glad_debug_impl_glStencilOpValueAMD(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glStencilOpValueAMD", (void*)glStencilOpValueAMD, 2, arg0, arg1);
     glad_glStencilOpValueAMD(arg0, arg1);
    _post_call_callback("glStencilOpValueAMD", (void*)glStencilOpValueAMD, 2, arg0, arg1);

}
PFNGLSTENCILOPVALUEAMDPROC glad_debug_glStencilOpValueAMD = glad_debug_impl_glStencilOpValueAMD;
PFNGLVERTEXATTRIBDIVISORARBPROC glad_glVertexAttribDivisorARB;
void APIENTRY glad_debug_impl_glVertexAttribDivisorARB(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glVertexAttribDivisorARB", (void*)glVertexAttribDivisorARB, 2, arg0, arg1);
     glad_glVertexAttribDivisorARB(arg0, arg1);
    _post_call_callback("glVertexAttribDivisorARB", (void*)glVertexAttribDivisorARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBDIVISORARBPROC glad_debug_glVertexAttribDivisorARB = glad_debug_impl_glVertexAttribDivisorARB;
PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage;
void APIENTRY glad_debug_impl_glGetTextureSubImage(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, GLsizei arg10, void* arg11) {
    _pre_call_callback("glGetTextureSubImage", (void*)glGetTextureSubImage, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
     glad_glGetTextureSubImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_callback("glGetTextureSubImage", (void*)glGetTextureSubImage, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

}
PFNGLGETTEXTURESUBIMAGEPROC glad_debug_glGetTextureSubImage = glad_debug_impl_glGetTextureSubImage;
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage;
void APIENTRY glad_debug_impl_glGetCompressedTextureSubImage(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLsizei arg8, void* arg9) {
    _pre_call_callback("glGetCompressedTextureSubImage", (void*)glGetCompressedTextureSubImage, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glGetCompressedTextureSubImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glGetCompressedTextureSubImage", (void*)glGetCompressedTextureSubImage, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_debug_glGetCompressedTextureSubImage = glad_debug_impl_glGetCompressedTextureSubImage;
PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus;
GLenum APIENTRY glad_debug_impl_glGetGraphicsResetStatus() {
    GLenum ret;
    _pre_call_callback("glGetGraphicsResetStatus", (void*)glGetGraphicsResetStatus, 0);
    ret =  glad_glGetGraphicsResetStatus();
    _post_call_callback("glGetGraphicsResetStatus", (void*)glGetGraphicsResetStatus, 0);
    return ret;
}
PFNGLGETGRAPHICSRESETSTATUSPROC glad_debug_glGetGraphicsResetStatus = glad_debug_impl_glGetGraphicsResetStatus;
PFNGLREADNPIXELSPROC glad_glReadnPixels;
void APIENTRY glad_debug_impl_glReadnPixels(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, GLsizei arg6, void* arg7) {
    _pre_call_callback("glReadnPixels", (void*)glReadnPixels, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glReadnPixels(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glReadnPixels", (void*)glReadnPixels, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLREADNPIXELSPROC glad_debug_glReadnPixels = glad_debug_impl_glReadnPixels;
PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv;
void APIENTRY glad_debug_impl_glGetnUniformfv(GLuint arg0, GLint arg1, GLsizei arg2, GLfloat* arg3) {
    _pre_call_callback("glGetnUniformfv", (void*)glGetnUniformfv, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformfv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformfv", (void*)glGetnUniformfv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMFVPROC glad_debug_glGetnUniformfv = glad_debug_impl_glGetnUniformfv;
PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv;
void APIENTRY glad_debug_impl_glGetnUniformiv(GLuint arg0, GLint arg1, GLsizei arg2, GLint* arg3) {
    _pre_call_callback("glGetnUniformiv", (void*)glGetnUniformiv, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformiv", (void*)glGetnUniformiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMIVPROC glad_debug_glGetnUniformiv = glad_debug_impl_glGetnUniformiv;
PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv;
void APIENTRY glad_debug_impl_glGetnUniformuiv(GLuint arg0, GLint arg1, GLsizei arg2, GLuint* arg3) {
    _pre_call_callback("glGetnUniformuiv", (void*)glGetnUniformuiv, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformuiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformuiv", (void*)glGetnUniformuiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMUIVPROC glad_debug_glGetnUniformuiv = glad_debug_impl_glGetnUniformuiv;
PFNGLGETGRAPHICSRESETSTATUSKHRPROC glad_glGetGraphicsResetStatusKHR;
GLenum APIENTRY glad_debug_impl_glGetGraphicsResetStatusKHR() {
    GLenum ret;
    _pre_call_callback("glGetGraphicsResetStatusKHR", (void*)glGetGraphicsResetStatusKHR, 0);
    ret =  glad_glGetGraphicsResetStatusKHR();
    _post_call_callback("glGetGraphicsResetStatusKHR", (void*)glGetGraphicsResetStatusKHR, 0);
    return ret;
}
PFNGLGETGRAPHICSRESETSTATUSKHRPROC glad_debug_glGetGraphicsResetStatusKHR = glad_debug_impl_glGetGraphicsResetStatusKHR;
PFNGLREADNPIXELSKHRPROC glad_glReadnPixelsKHR;
void APIENTRY glad_debug_impl_glReadnPixelsKHR(GLint arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, GLsizei arg6, void* arg7) {
    _pre_call_callback("glReadnPixelsKHR", (void*)glReadnPixelsKHR, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glReadnPixelsKHR(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glReadnPixelsKHR", (void*)glReadnPixelsKHR, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLREADNPIXELSKHRPROC glad_debug_glReadnPixelsKHR = glad_debug_impl_glReadnPixelsKHR;
PFNGLGETNUNIFORMFVKHRPROC glad_glGetnUniformfvKHR;
void APIENTRY glad_debug_impl_glGetnUniformfvKHR(GLuint arg0, GLint arg1, GLsizei arg2, GLfloat* arg3) {
    _pre_call_callback("glGetnUniformfvKHR", (void*)glGetnUniformfvKHR, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformfvKHR(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformfvKHR", (void*)glGetnUniformfvKHR, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMFVKHRPROC glad_debug_glGetnUniformfvKHR = glad_debug_impl_glGetnUniformfvKHR;
PFNGLGETNUNIFORMIVKHRPROC glad_glGetnUniformivKHR;
void APIENTRY glad_debug_impl_glGetnUniformivKHR(GLuint arg0, GLint arg1, GLsizei arg2, GLint* arg3) {
    _pre_call_callback("glGetnUniformivKHR", (void*)glGetnUniformivKHR, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformivKHR(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformivKHR", (void*)glGetnUniformivKHR, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMIVKHRPROC glad_debug_glGetnUniformivKHR = glad_debug_impl_glGetnUniformivKHR;
PFNGLGETNUNIFORMUIVKHRPROC glad_glGetnUniformuivKHR;
void APIENTRY glad_debug_impl_glGetnUniformuivKHR(GLuint arg0, GLint arg1, GLsizei arg2, GLuint* arg3) {
    _pre_call_callback("glGetnUniformuivKHR", (void*)glGetnUniformuivKHR, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformuivKHR(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformuivKHR", (void*)glGetnUniformuivKHR, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMUIVKHRPROC glad_debug_glGetnUniformuivKHR = glad_debug_impl_glGetnUniformuivKHR;
PFNGLTEXSTORAGESPARSEAMDPROC glad_glTexStorageSparseAMD;
void APIENTRY glad_debug_impl_glTexStorageSparseAMD(GLenum arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLbitfield arg6) {
    _pre_call_callback("glTexStorageSparseAMD", (void*)glTexStorageSparseAMD, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTexStorageSparseAMD(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTexStorageSparseAMD", (void*)glTexStorageSparseAMD, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXSTORAGESPARSEAMDPROC glad_debug_glTexStorageSparseAMD = glad_debug_impl_glTexStorageSparseAMD;
PFNGLTEXTURESTORAGESPARSEAMDPROC glad_glTextureStorageSparseAMD;
void APIENTRY glad_debug_impl_glTextureStorageSparseAMD(GLuint arg0, GLenum arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6, GLbitfield arg7) {
    _pre_call_callback("glTextureStorageSparseAMD", (void*)glTextureStorageSparseAMD, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTextureStorageSparseAMD(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTextureStorageSparseAMD", (void*)glTextureStorageSparseAMD, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXTURESTORAGESPARSEAMDPROC glad_debug_glTextureStorageSparseAMD = glad_debug_impl_glTextureStorageSparseAMD;
PFNGLCLIPCONTROLPROC glad_glClipControl;
void APIENTRY glad_debug_impl_glClipControl(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glClipControl", (void*)glClipControl, 2, arg0, arg1);
     glad_glClipControl(arg0, arg1);
    _post_call_callback("glClipControl", (void*)glClipControl, 2, arg0, arg1);

}
PFNGLCLIPCONTROLPROC glad_debug_glClipControl = glad_debug_impl_glClipControl;
PFNGLFRAGMENTCOVERAGECOLORNVPROC glad_glFragmentCoverageColorNV;
void APIENTRY glad_debug_impl_glFragmentCoverageColorNV(GLuint arg0) {
    _pre_call_callback("glFragmentCoverageColorNV", (void*)glFragmentCoverageColorNV, 1, arg0);
     glad_glFragmentCoverageColorNV(arg0);
    _post_call_callback("glFragmentCoverageColorNV", (void*)glFragmentCoverageColorNV, 1, arg0);

}
PFNGLFRAGMENTCOVERAGECOLORNVPROC glad_debug_glFragmentCoverageColorNV = glad_debug_impl_glFragmentCoverageColorNV;
PFNGLDELETEFENCESNVPROC glad_glDeleteFencesNV;
void APIENTRY glad_debug_impl_glDeleteFencesNV(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteFencesNV", (void*)glDeleteFencesNV, 2, arg0, arg1);
     glad_glDeleteFencesNV(arg0, arg1);
    _post_call_callback("glDeleteFencesNV", (void*)glDeleteFencesNV, 2, arg0, arg1);

}
PFNGLDELETEFENCESNVPROC glad_debug_glDeleteFencesNV = glad_debug_impl_glDeleteFencesNV;
PFNGLGENFENCESNVPROC glad_glGenFencesNV;
void APIENTRY glad_debug_impl_glGenFencesNV(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenFencesNV", (void*)glGenFencesNV, 2, arg0, arg1);
     glad_glGenFencesNV(arg0, arg1);
    _post_call_callback("glGenFencesNV", (void*)glGenFencesNV, 2, arg0, arg1);

}
PFNGLGENFENCESNVPROC glad_debug_glGenFencesNV = glad_debug_impl_glGenFencesNV;
PFNGLISFENCENVPROC glad_glIsFenceNV;
GLboolean APIENTRY glad_debug_impl_glIsFenceNV(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsFenceNV", (void*)glIsFenceNV, 1, arg0);
    ret =  glad_glIsFenceNV(arg0);
    _post_call_callback("glIsFenceNV", (void*)glIsFenceNV, 1, arg0);
    return ret;
}
PFNGLISFENCENVPROC glad_debug_glIsFenceNV = glad_debug_impl_glIsFenceNV;
PFNGLTESTFENCENVPROC glad_glTestFenceNV;
GLboolean APIENTRY glad_debug_impl_glTestFenceNV(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glTestFenceNV", (void*)glTestFenceNV, 1, arg0);
    ret =  glad_glTestFenceNV(arg0);
    _post_call_callback("glTestFenceNV", (void*)glTestFenceNV, 1, arg0);
    return ret;
}
PFNGLTESTFENCENVPROC glad_debug_glTestFenceNV = glad_debug_impl_glTestFenceNV;
PFNGLGETFENCEIVNVPROC glad_glGetFenceivNV;
void APIENTRY glad_debug_impl_glGetFenceivNV(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetFenceivNV", (void*)glGetFenceivNV, 3, arg0, arg1, arg2);
     glad_glGetFenceivNV(arg0, arg1, arg2);
    _post_call_callback("glGetFenceivNV", (void*)glGetFenceivNV, 3, arg0, arg1, arg2);

}
PFNGLGETFENCEIVNVPROC glad_debug_glGetFenceivNV = glad_debug_impl_glGetFenceivNV;
PFNGLFINISHFENCENVPROC glad_glFinishFenceNV;
void APIENTRY glad_debug_impl_glFinishFenceNV(GLuint arg0) {
    _pre_call_callback("glFinishFenceNV", (void*)glFinishFenceNV, 1, arg0);
     glad_glFinishFenceNV(arg0);
    _post_call_callback("glFinishFenceNV", (void*)glFinishFenceNV, 1, arg0);

}
PFNGLFINISHFENCENVPROC glad_debug_glFinishFenceNV = glad_debug_impl_glFinishFenceNV;
PFNGLSETFENCENVPROC glad_glSetFenceNV;
void APIENTRY glad_debug_impl_glSetFenceNV(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glSetFenceNV", (void*)glSetFenceNV, 2, arg0, arg1);
     glad_glSetFenceNV(arg0, arg1);
    _post_call_callback("glSetFenceNV", (void*)glSetFenceNV, 2, arg0, arg1);

}
PFNGLSETFENCENVPROC glad_debug_glSetFenceNV = glad_debug_impl_glSetFenceNV;
PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange;
void APIENTRY glad_debug_impl_glTexBufferRange(GLenum arg0, GLenum arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_callback("glTexBufferRange", (void*)glTexBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTexBufferRange(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTexBufferRange", (void*)glTexBufferRange, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTEXBUFFERRANGEPROC glad_debug_glTexBufferRange = glad_debug_impl_glTexBufferRange;
PFNGLDRAWMESHARRAYSSUNPROC glad_glDrawMeshArraysSUN;
void APIENTRY glad_debug_impl_glDrawMeshArraysSUN(GLenum arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glDrawMeshArraysSUN", (void*)glDrawMeshArraysSUN, 4, arg0, arg1, arg2, arg3);
     glad_glDrawMeshArraysSUN(arg0, arg1, arg2, arg3);
    _post_call_callback("glDrawMeshArraysSUN", (void*)glDrawMeshArraysSUN, 4, arg0, arg1, arg2, arg3);

}
PFNGLDRAWMESHARRAYSSUNPROC glad_debug_glDrawMeshArraysSUN = glad_debug_impl_glDrawMeshArraysSUN;
PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer;
void APIENTRY glad_debug_impl_glBindVertexBuffer(GLuint arg0, GLuint arg1, GLintptr arg2, GLsizei arg3) {
    _pre_call_callback("glBindVertexBuffer", (void*)glBindVertexBuffer, 4, arg0, arg1, arg2, arg3);
     glad_glBindVertexBuffer(arg0, arg1, arg2, arg3);
    _post_call_callback("glBindVertexBuffer", (void*)glBindVertexBuffer, 4, arg0, arg1, arg2, arg3);

}
PFNGLBINDVERTEXBUFFERPROC glad_debug_glBindVertexBuffer = glad_debug_impl_glBindVertexBuffer;
PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat;
void APIENTRY glad_debug_impl_glVertexAttribFormat(GLuint arg0, GLint arg1, GLenum arg2, GLboolean arg3, GLuint arg4) {
    _pre_call_callback("glVertexAttribFormat", (void*)glVertexAttribFormat, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribFormat(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribFormat", (void*)glVertexAttribFormat, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBFORMATPROC glad_debug_glVertexAttribFormat = glad_debug_impl_glVertexAttribFormat;
PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat;
void APIENTRY glad_debug_impl_glVertexAttribIFormat(GLuint arg0, GLint arg1, GLenum arg2, GLuint arg3) {
    _pre_call_callback("glVertexAttribIFormat", (void*)glVertexAttribIFormat, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribIFormat(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribIFormat", (void*)glVertexAttribIFormat, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBIFORMATPROC glad_debug_glVertexAttribIFormat = glad_debug_impl_glVertexAttribIFormat;
PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat;
void APIENTRY glad_debug_impl_glVertexAttribLFormat(GLuint arg0, GLint arg1, GLenum arg2, GLuint arg3) {
    _pre_call_callback("glVertexAttribLFormat", (void*)glVertexAttribLFormat, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribLFormat(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribLFormat", (void*)glVertexAttribLFormat, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBLFORMATPROC glad_debug_glVertexAttribLFormat = glad_debug_impl_glVertexAttribLFormat;
PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding;
void APIENTRY glad_debug_impl_glVertexAttribBinding(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glVertexAttribBinding", (void*)glVertexAttribBinding, 2, arg0, arg1);
     glad_glVertexAttribBinding(arg0, arg1);
    _post_call_callback("glVertexAttribBinding", (void*)glVertexAttribBinding, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBBINDINGPROC glad_debug_glVertexAttribBinding = glad_debug_impl_glVertexAttribBinding;
PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor;
void APIENTRY glad_debug_impl_glVertexBindingDivisor(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glVertexBindingDivisor", (void*)glVertexBindingDivisor, 2, arg0, arg1);
     glad_glVertexBindingDivisor(arg0, arg1);
    _post_call_callback("glVertexBindingDivisor", (void*)glVertexBindingDivisor, 2, arg0, arg1);

}
PFNGLVERTEXBINDINGDIVISORPROC glad_debug_glVertexBindingDivisor = glad_debug_impl_glVertexBindingDivisor;
PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri;
void APIENTRY glad_debug_impl_glFramebufferParameteri(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glFramebufferParameteri", (void*)glFramebufferParameteri, 3, arg0, arg1, arg2);
     glad_glFramebufferParameteri(arg0, arg1, arg2);
    _post_call_callback("glFramebufferParameteri", (void*)glFramebufferParameteri, 3, arg0, arg1, arg2);

}
PFNGLFRAMEBUFFERPARAMETERIPROC glad_debug_glFramebufferParameteri = glad_debug_impl_glFramebufferParameteri;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv;
void APIENTRY glad_debug_impl_glGetFramebufferParameteriv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetFramebufferParameteriv", (void*)glGetFramebufferParameteriv, 3, arg0, arg1, arg2);
     glad_glGetFramebufferParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetFramebufferParameteriv", (void*)glGetFramebufferParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_debug_glGetFramebufferParameteriv = glad_debug_impl_glGetFramebufferParameteriv;
PFNGLCREATESYNCFROMCLEVENTARBPROC glad_glCreateSyncFromCLeventARB;
GLsync APIENTRY glad_debug_impl_glCreateSyncFromCLeventARB(struct _cl_context* arg0, struct _cl_event* arg1, GLbitfield arg2) {
    GLsync ret;
    _pre_call_callback("glCreateSyncFromCLeventARB", (void*)glCreateSyncFromCLeventARB, 3, arg0, arg1, arg2);
    ret =  glad_glCreateSyncFromCLeventARB(arg0, arg1, arg2);
    _post_call_callback("glCreateSyncFromCLeventARB", (void*)glCreateSyncFromCLeventARB, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLCREATESYNCFROMCLEVENTARBPROC glad_debug_glCreateSyncFromCLeventARB = glad_debug_impl_glCreateSyncFromCLeventARB;
PFNGLCLEARDEPTHFOESPROC glad_glClearDepthfOES;
void APIENTRY glad_debug_impl_glClearDepthfOES(GLclampf arg0) {
    _pre_call_callback("glClearDepthfOES", (void*)glClearDepthfOES, 1, arg0);
     glad_glClearDepthfOES(arg0);
    _post_call_callback("glClearDepthfOES", (void*)glClearDepthfOES, 1, arg0);

}
PFNGLCLEARDEPTHFOESPROC glad_debug_glClearDepthfOES = glad_debug_impl_glClearDepthfOES;
PFNGLCLIPPLANEFOESPROC glad_glClipPlanefOES;
void APIENTRY glad_debug_impl_glClipPlanefOES(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glClipPlanefOES", (void*)glClipPlanefOES, 2, arg0, arg1);
     glad_glClipPlanefOES(arg0, arg1);
    _post_call_callback("glClipPlanefOES", (void*)glClipPlanefOES, 2, arg0, arg1);

}
PFNGLCLIPPLANEFOESPROC glad_debug_glClipPlanefOES = glad_debug_impl_glClipPlanefOES;
PFNGLDEPTHRANGEFOESPROC glad_glDepthRangefOES;
void APIENTRY glad_debug_impl_glDepthRangefOES(GLclampf arg0, GLclampf arg1) {
    _pre_call_callback("glDepthRangefOES", (void*)glDepthRangefOES, 2, arg0, arg1);
     glad_glDepthRangefOES(arg0, arg1);
    _post_call_callback("glDepthRangefOES", (void*)glDepthRangefOES, 2, arg0, arg1);

}
PFNGLDEPTHRANGEFOESPROC glad_debug_glDepthRangefOES = glad_debug_impl_glDepthRangefOES;
PFNGLFRUSTUMFOESPROC glad_glFrustumfOES;
void APIENTRY glad_debug_impl_glFrustumfOES(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glFrustumfOES", (void*)glFrustumfOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glFrustumfOES(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glFrustumfOES", (void*)glFrustumfOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLFRUSTUMFOESPROC glad_debug_glFrustumfOES = glad_debug_impl_glFrustumfOES;
PFNGLGETCLIPPLANEFOESPROC glad_glGetClipPlanefOES;
void APIENTRY glad_debug_impl_glGetClipPlanefOES(GLenum arg0, GLfloat* arg1) {
    _pre_call_callback("glGetClipPlanefOES", (void*)glGetClipPlanefOES, 2, arg0, arg1);
     glad_glGetClipPlanefOES(arg0, arg1);
    _post_call_callback("glGetClipPlanefOES", (void*)glGetClipPlanefOES, 2, arg0, arg1);

}
PFNGLGETCLIPPLANEFOESPROC glad_debug_glGetClipPlanefOES = glad_debug_impl_glGetClipPlanefOES;
PFNGLORTHOFOESPROC glad_glOrthofOES;
void APIENTRY glad_debug_impl_glOrthofOES(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glOrthofOES", (void*)glOrthofOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glOrthofOES(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glOrthofOES", (void*)glOrthofOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLORTHOFOESPROC glad_debug_glOrthofOES = glad_debug_impl_glOrthofOES;
PFNGLPRIMITIVERESTARTNVPROC glad_glPrimitiveRestartNV;
void APIENTRY glad_debug_impl_glPrimitiveRestartNV() {
    _pre_call_callback("glPrimitiveRestartNV", (void*)glPrimitiveRestartNV, 0);
     glad_glPrimitiveRestartNV();
    _post_call_callback("glPrimitiveRestartNV", (void*)glPrimitiveRestartNV, 0);

}
PFNGLPRIMITIVERESTARTNVPROC glad_debug_glPrimitiveRestartNV = glad_debug_impl_glPrimitiveRestartNV;
PFNGLPRIMITIVERESTARTINDEXNVPROC glad_glPrimitiveRestartIndexNV;
void APIENTRY glad_debug_impl_glPrimitiveRestartIndexNV(GLuint arg0) {
    _pre_call_callback("glPrimitiveRestartIndexNV", (void*)glPrimitiveRestartIndexNV, 1, arg0);
     glad_glPrimitiveRestartIndexNV(arg0);
    _post_call_callback("glPrimitiveRestartIndexNV", (void*)glPrimitiveRestartIndexNV, 1, arg0);

}
PFNGLPRIMITIVERESTARTINDEXNVPROC glad_debug_glPrimitiveRestartIndexNV = glad_debug_impl_glPrimitiveRestartIndexNV;
PFNGLGLOBALALPHAFACTORBSUNPROC glad_glGlobalAlphaFactorbSUN;
void APIENTRY glad_debug_impl_glGlobalAlphaFactorbSUN(GLbyte arg0) {
    _pre_call_callback("glGlobalAlphaFactorbSUN", (void*)glGlobalAlphaFactorbSUN, 1, arg0);
     glad_glGlobalAlphaFactorbSUN(arg0);
    _post_call_callback("glGlobalAlphaFactorbSUN", (void*)glGlobalAlphaFactorbSUN, 1, arg0);

}
PFNGLGLOBALALPHAFACTORBSUNPROC glad_debug_glGlobalAlphaFactorbSUN = glad_debug_impl_glGlobalAlphaFactorbSUN;
PFNGLGLOBALALPHAFACTORSSUNPROC glad_glGlobalAlphaFactorsSUN;
void APIENTRY glad_debug_impl_glGlobalAlphaFactorsSUN(GLshort arg0) {
    _pre_call_callback("glGlobalAlphaFactorsSUN", (void*)glGlobalAlphaFactorsSUN, 1, arg0);
     glad_glGlobalAlphaFactorsSUN(arg0);
    _post_call_callback("glGlobalAlphaFactorsSUN", (void*)glGlobalAlphaFactorsSUN, 1, arg0);

}
PFNGLGLOBALALPHAFACTORSSUNPROC glad_debug_glGlobalAlphaFactorsSUN = glad_debug_impl_glGlobalAlphaFactorsSUN;
PFNGLGLOBALALPHAFACTORISUNPROC glad_glGlobalAlphaFactoriSUN;
void APIENTRY glad_debug_impl_glGlobalAlphaFactoriSUN(GLint arg0) {
    _pre_call_callback("glGlobalAlphaFactoriSUN", (void*)glGlobalAlphaFactoriSUN, 1, arg0);
     glad_glGlobalAlphaFactoriSUN(arg0);
    _post_call_callback("glGlobalAlphaFactoriSUN", (void*)glGlobalAlphaFactoriSUN, 1, arg0);

}
PFNGLGLOBALALPHAFACTORISUNPROC glad_debug_glGlobalAlphaFactoriSUN = glad_debug_impl_glGlobalAlphaFactoriSUN;
PFNGLGLOBALALPHAFACTORFSUNPROC glad_glGlobalAlphaFactorfSUN;
void APIENTRY glad_debug_impl_glGlobalAlphaFactorfSUN(GLfloat arg0) {
    _pre_call_callback("glGlobalAlphaFactorfSUN", (void*)glGlobalAlphaFactorfSUN, 1, arg0);
     glad_glGlobalAlphaFactorfSUN(arg0);
    _post_call_callback("glGlobalAlphaFactorfSUN", (void*)glGlobalAlphaFactorfSUN, 1, arg0);

}
PFNGLGLOBALALPHAFACTORFSUNPROC glad_debug_glGlobalAlphaFactorfSUN = glad_debug_impl_glGlobalAlphaFactorfSUN;
PFNGLGLOBALALPHAFACTORDSUNPROC glad_glGlobalAlphaFactordSUN;
void APIENTRY glad_debug_impl_glGlobalAlphaFactordSUN(GLdouble arg0) {
    _pre_call_callback("glGlobalAlphaFactordSUN", (void*)glGlobalAlphaFactordSUN, 1, arg0);
     glad_glGlobalAlphaFactordSUN(arg0);
    _post_call_callback("glGlobalAlphaFactordSUN", (void*)glGlobalAlphaFactordSUN, 1, arg0);

}
PFNGLGLOBALALPHAFACTORDSUNPROC glad_debug_glGlobalAlphaFactordSUN = glad_debug_impl_glGlobalAlphaFactordSUN;
PFNGLGLOBALALPHAFACTORUBSUNPROC glad_glGlobalAlphaFactorubSUN;
void APIENTRY glad_debug_impl_glGlobalAlphaFactorubSUN(GLubyte arg0) {
    _pre_call_callback("glGlobalAlphaFactorubSUN", (void*)glGlobalAlphaFactorubSUN, 1, arg0);
     glad_glGlobalAlphaFactorubSUN(arg0);
    _post_call_callback("glGlobalAlphaFactorubSUN", (void*)glGlobalAlphaFactorubSUN, 1, arg0);

}
PFNGLGLOBALALPHAFACTORUBSUNPROC glad_debug_glGlobalAlphaFactorubSUN = glad_debug_impl_glGlobalAlphaFactorubSUN;
PFNGLGLOBALALPHAFACTORUSSUNPROC glad_glGlobalAlphaFactorusSUN;
void APIENTRY glad_debug_impl_glGlobalAlphaFactorusSUN(GLushort arg0) {
    _pre_call_callback("glGlobalAlphaFactorusSUN", (void*)glGlobalAlphaFactorusSUN, 1, arg0);
     glad_glGlobalAlphaFactorusSUN(arg0);
    _post_call_callback("glGlobalAlphaFactorusSUN", (void*)glGlobalAlphaFactorusSUN, 1, arg0);

}
PFNGLGLOBALALPHAFACTORUSSUNPROC glad_debug_glGlobalAlphaFactorusSUN = glad_debug_impl_glGlobalAlphaFactorusSUN;
PFNGLGLOBALALPHAFACTORUISUNPROC glad_glGlobalAlphaFactoruiSUN;
void APIENTRY glad_debug_impl_glGlobalAlphaFactoruiSUN(GLuint arg0) {
    _pre_call_callback("glGlobalAlphaFactoruiSUN", (void*)glGlobalAlphaFactoruiSUN, 1, arg0);
     glad_glGlobalAlphaFactoruiSUN(arg0);
    _post_call_callback("glGlobalAlphaFactoruiSUN", (void*)glGlobalAlphaFactoruiSUN, 1, arg0);

}
PFNGLGLOBALALPHAFACTORUISUNPROC glad_debug_glGlobalAlphaFactoruiSUN = glad_debug_impl_glGlobalAlphaFactoruiSUN;
PFNGLARETEXTURESRESIDENTEXTPROC glad_glAreTexturesResidentEXT;
GLboolean APIENTRY glad_debug_impl_glAreTexturesResidentEXT(GLsizei arg0, const GLuint* arg1, GLboolean* arg2) {
    GLboolean ret;
    _pre_call_callback("glAreTexturesResidentEXT", (void*)glAreTexturesResidentEXT, 3, arg0, arg1, arg2);
    ret =  glad_glAreTexturesResidentEXT(arg0, arg1, arg2);
    _post_call_callback("glAreTexturesResidentEXT", (void*)glAreTexturesResidentEXT, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLARETEXTURESRESIDENTEXTPROC glad_debug_glAreTexturesResidentEXT = glad_debug_impl_glAreTexturesResidentEXT;
PFNGLBINDTEXTUREEXTPROC glad_glBindTextureEXT;
void APIENTRY glad_debug_impl_glBindTextureEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindTextureEXT", (void*)glBindTextureEXT, 2, arg0, arg1);
     glad_glBindTextureEXT(arg0, arg1);
    _post_call_callback("glBindTextureEXT", (void*)glBindTextureEXT, 2, arg0, arg1);

}
PFNGLBINDTEXTUREEXTPROC glad_debug_glBindTextureEXT = glad_debug_impl_glBindTextureEXT;
PFNGLDELETETEXTURESEXTPROC glad_glDeleteTexturesEXT;
void APIENTRY glad_debug_impl_glDeleteTexturesEXT(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteTexturesEXT", (void*)glDeleteTexturesEXT, 2, arg0, arg1);
     glad_glDeleteTexturesEXT(arg0, arg1);
    _post_call_callback("glDeleteTexturesEXT", (void*)glDeleteTexturesEXT, 2, arg0, arg1);

}
PFNGLDELETETEXTURESEXTPROC glad_debug_glDeleteTexturesEXT = glad_debug_impl_glDeleteTexturesEXT;
PFNGLGENTEXTURESEXTPROC glad_glGenTexturesEXT;
void APIENTRY glad_debug_impl_glGenTexturesEXT(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenTexturesEXT", (void*)glGenTexturesEXT, 2, arg0, arg1);
     glad_glGenTexturesEXT(arg0, arg1);
    _post_call_callback("glGenTexturesEXT", (void*)glGenTexturesEXT, 2, arg0, arg1);

}
PFNGLGENTEXTURESEXTPROC glad_debug_glGenTexturesEXT = glad_debug_impl_glGenTexturesEXT;
PFNGLISTEXTUREEXTPROC glad_glIsTextureEXT;
GLboolean APIENTRY glad_debug_impl_glIsTextureEXT(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsTextureEXT", (void*)glIsTextureEXT, 1, arg0);
    ret =  glad_glIsTextureEXT(arg0);
    _post_call_callback("glIsTextureEXT", (void*)glIsTextureEXT, 1, arg0);
    return ret;
}
PFNGLISTEXTUREEXTPROC glad_debug_glIsTextureEXT = glad_debug_impl_glIsTextureEXT;
PFNGLPRIORITIZETEXTURESEXTPROC glad_glPrioritizeTexturesEXT;
void APIENTRY glad_debug_impl_glPrioritizeTexturesEXT(GLsizei arg0, const GLuint* arg1, const GLclampf* arg2) {
    _pre_call_callback("glPrioritizeTexturesEXT", (void*)glPrioritizeTexturesEXT, 3, arg0, arg1, arg2);
     glad_glPrioritizeTexturesEXT(arg0, arg1, arg2);
    _post_call_callback("glPrioritizeTexturesEXT", (void*)glPrioritizeTexturesEXT, 3, arg0, arg1, arg2);

}
PFNGLPRIORITIZETEXTURESEXTPROC glad_debug_glPrioritizeTexturesEXT = glad_debug_impl_glPrioritizeTexturesEXT;
PFNGLGENNAMESAMDPROC glad_glGenNamesAMD;
void APIENTRY glad_debug_impl_glGenNamesAMD(GLenum arg0, GLuint arg1, GLuint* arg2) {
    _pre_call_callback("glGenNamesAMD", (void*)glGenNamesAMD, 3, arg0, arg1, arg2);
     glad_glGenNamesAMD(arg0, arg1, arg2);
    _post_call_callback("glGenNamesAMD", (void*)glGenNamesAMD, 3, arg0, arg1, arg2);

}
PFNGLGENNAMESAMDPROC glad_debug_glGenNamesAMD = glad_debug_impl_glGenNamesAMD;
PFNGLDELETENAMESAMDPROC glad_glDeleteNamesAMD;
void APIENTRY glad_debug_impl_glDeleteNamesAMD(GLenum arg0, GLuint arg1, const GLuint* arg2) {
    _pre_call_callback("glDeleteNamesAMD", (void*)glDeleteNamesAMD, 3, arg0, arg1, arg2);
     glad_glDeleteNamesAMD(arg0, arg1, arg2);
    _post_call_callback("glDeleteNamesAMD", (void*)glDeleteNamesAMD, 3, arg0, arg1, arg2);

}
PFNGLDELETENAMESAMDPROC glad_debug_glDeleteNamesAMD = glad_debug_impl_glDeleteNamesAMD;
PFNGLISNAMEAMDPROC glad_glIsNameAMD;
GLboolean APIENTRY glad_debug_impl_glIsNameAMD(GLenum arg0, GLuint arg1) {
    GLboolean ret;
    _pre_call_callback("glIsNameAMD", (void*)glIsNameAMD, 2, arg0, arg1);
    ret =  glad_glIsNameAMD(arg0, arg1);
    _post_call_callback("glIsNameAMD", (void*)glIsNameAMD, 2, arg0, arg1);
    return ret;
}
PFNGLISNAMEAMDPROC glad_debug_glIsNameAMD = glad_debug_impl_glIsNameAMD;
PFNGLBUFFERSTORAGEPROC glad_glBufferStorage;
void APIENTRY glad_debug_impl_glBufferStorage(GLenum arg0, GLsizeiptr arg1, const void* arg2, GLbitfield arg3) {
    _pre_call_callback("glBufferStorage", (void*)glBufferStorage, 4, arg0, arg1, arg2, arg3);
     glad_glBufferStorage(arg0, arg1, arg2, arg3);
    _post_call_callback("glBufferStorage", (void*)glBufferStorage, 4, arg0, arg1, arg2, arg3);

}
PFNGLBUFFERSTORAGEPROC glad_debug_glBufferStorage = glad_debug_impl_glBufferStorage;
PFNGLENABLEVERTEXATTRIBAPPLEPROC glad_glEnableVertexAttribAPPLE;
void APIENTRY glad_debug_impl_glEnableVertexAttribAPPLE(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glEnableVertexAttribAPPLE", (void*)glEnableVertexAttribAPPLE, 2, arg0, arg1);
     glad_glEnableVertexAttribAPPLE(arg0, arg1);
    _post_call_callback("glEnableVertexAttribAPPLE", (void*)glEnableVertexAttribAPPLE, 2, arg0, arg1);

}
PFNGLENABLEVERTEXATTRIBAPPLEPROC glad_debug_glEnableVertexAttribAPPLE = glad_debug_impl_glEnableVertexAttribAPPLE;
PFNGLDISABLEVERTEXATTRIBAPPLEPROC glad_glDisableVertexAttribAPPLE;
void APIENTRY glad_debug_impl_glDisableVertexAttribAPPLE(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glDisableVertexAttribAPPLE", (void*)glDisableVertexAttribAPPLE, 2, arg0, arg1);
     glad_glDisableVertexAttribAPPLE(arg0, arg1);
    _post_call_callback("glDisableVertexAttribAPPLE", (void*)glDisableVertexAttribAPPLE, 2, arg0, arg1);

}
PFNGLDISABLEVERTEXATTRIBAPPLEPROC glad_debug_glDisableVertexAttribAPPLE = glad_debug_impl_glDisableVertexAttribAPPLE;
PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glad_glIsVertexAttribEnabledAPPLE;
GLboolean APIENTRY glad_debug_impl_glIsVertexAttribEnabledAPPLE(GLuint arg0, GLenum arg1) {
    GLboolean ret;
    _pre_call_callback("glIsVertexAttribEnabledAPPLE", (void*)glIsVertexAttribEnabledAPPLE, 2, arg0, arg1);
    ret =  glad_glIsVertexAttribEnabledAPPLE(arg0, arg1);
    _post_call_callback("glIsVertexAttribEnabledAPPLE", (void*)glIsVertexAttribEnabledAPPLE, 2, arg0, arg1);
    return ret;
}
PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glad_debug_glIsVertexAttribEnabledAPPLE = glad_debug_impl_glIsVertexAttribEnabledAPPLE;
PFNGLMAPVERTEXATTRIB1DAPPLEPROC glad_glMapVertexAttrib1dAPPLE;
void APIENTRY glad_debug_impl_glMapVertexAttrib1dAPPLE(GLuint arg0, GLuint arg1, GLdouble arg2, GLdouble arg3, GLint arg4, GLint arg5, const GLdouble* arg6) {
    _pre_call_callback("glMapVertexAttrib1dAPPLE", (void*)glMapVertexAttrib1dAPPLE, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glMapVertexAttrib1dAPPLE(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glMapVertexAttrib1dAPPLE", (void*)glMapVertexAttrib1dAPPLE, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLMAPVERTEXATTRIB1DAPPLEPROC glad_debug_glMapVertexAttrib1dAPPLE = glad_debug_impl_glMapVertexAttrib1dAPPLE;
PFNGLMAPVERTEXATTRIB1FAPPLEPROC glad_glMapVertexAttrib1fAPPLE;
void APIENTRY glad_debug_impl_glMapVertexAttrib1fAPPLE(GLuint arg0, GLuint arg1, GLfloat arg2, GLfloat arg3, GLint arg4, GLint arg5, const GLfloat* arg6) {
    _pre_call_callback("glMapVertexAttrib1fAPPLE", (void*)glMapVertexAttrib1fAPPLE, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glMapVertexAttrib1fAPPLE(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glMapVertexAttrib1fAPPLE", (void*)glMapVertexAttrib1fAPPLE, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLMAPVERTEXATTRIB1FAPPLEPROC glad_debug_glMapVertexAttrib1fAPPLE = glad_debug_impl_glMapVertexAttrib1fAPPLE;
PFNGLMAPVERTEXATTRIB2DAPPLEPROC glad_glMapVertexAttrib2dAPPLE;
void APIENTRY glad_debug_impl_glMapVertexAttrib2dAPPLE(GLuint arg0, GLuint arg1, GLdouble arg2, GLdouble arg3, GLint arg4, GLint arg5, GLdouble arg6, GLdouble arg7, GLint arg8, GLint arg9, const GLdouble* arg10) {
    _pre_call_callback("glMapVertexAttrib2dAPPLE", (void*)glMapVertexAttrib2dAPPLE, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glMapVertexAttrib2dAPPLE(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glMapVertexAttrib2dAPPLE", (void*)glMapVertexAttrib2dAPPLE, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLMAPVERTEXATTRIB2DAPPLEPROC glad_debug_glMapVertexAttrib2dAPPLE = glad_debug_impl_glMapVertexAttrib2dAPPLE;
PFNGLMAPVERTEXATTRIB2FAPPLEPROC glad_glMapVertexAttrib2fAPPLE;
void APIENTRY glad_debug_impl_glMapVertexAttrib2fAPPLE(GLuint arg0, GLuint arg1, GLfloat arg2, GLfloat arg3, GLint arg4, GLint arg5, GLfloat arg6, GLfloat arg7, GLint arg8, GLint arg9, const GLfloat* arg10) {
    _pre_call_callback("glMapVertexAttrib2fAPPLE", (void*)glMapVertexAttrib2fAPPLE, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glMapVertexAttrib2fAPPLE(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glMapVertexAttrib2fAPPLE", (void*)glMapVertexAttrib2fAPPLE, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLMAPVERTEXATTRIB2FAPPLEPROC glad_debug_glMapVertexAttrib2fAPPLE = glad_debug_impl_glMapVertexAttrib2fAPPLE;
PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase;
void APIENTRY glad_debug_impl_glBindBuffersBase(GLenum arg0, GLuint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glBindBuffersBase", (void*)glBindBuffersBase, 4, arg0, arg1, arg2, arg3);
     glad_glBindBuffersBase(arg0, arg1, arg2, arg3);
    _post_call_callback("glBindBuffersBase", (void*)glBindBuffersBase, 4, arg0, arg1, arg2, arg3);

}
PFNGLBINDBUFFERSBASEPROC glad_debug_glBindBuffersBase = glad_debug_impl_glBindBuffersBase;
PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange;
void APIENTRY glad_debug_impl_glBindBuffersRange(GLenum arg0, GLuint arg1, GLsizei arg2, const GLuint* arg3, const GLintptr* arg4, const GLsizeiptr* arg5) {
    _pre_call_callback("glBindBuffersRange", (void*)glBindBuffersRange, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glBindBuffersRange(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glBindBuffersRange", (void*)glBindBuffersRange, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLBINDBUFFERSRANGEPROC glad_debug_glBindBuffersRange = glad_debug_impl_glBindBuffersRange;
PFNGLBINDTEXTURESPROC glad_glBindTextures;
void APIENTRY glad_debug_impl_glBindTextures(GLuint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glBindTextures", (void*)glBindTextures, 3, arg0, arg1, arg2);
     glad_glBindTextures(arg0, arg1, arg2);
    _post_call_callback("glBindTextures", (void*)glBindTextures, 3, arg0, arg1, arg2);

}
PFNGLBINDTEXTURESPROC glad_debug_glBindTextures = glad_debug_impl_glBindTextures;
PFNGLBINDSAMPLERSPROC glad_glBindSamplers;
void APIENTRY glad_debug_impl_glBindSamplers(GLuint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glBindSamplers", (void*)glBindSamplers, 3, arg0, arg1, arg2);
     glad_glBindSamplers(arg0, arg1, arg2);
    _post_call_callback("glBindSamplers", (void*)glBindSamplers, 3, arg0, arg1, arg2);

}
PFNGLBINDSAMPLERSPROC glad_debug_glBindSamplers = glad_debug_impl_glBindSamplers;
PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures;
void APIENTRY glad_debug_impl_glBindImageTextures(GLuint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glBindImageTextures", (void*)glBindImageTextures, 3, arg0, arg1, arg2);
     glad_glBindImageTextures(arg0, arg1, arg2);
    _post_call_callback("glBindImageTextures", (void*)glBindImageTextures, 3, arg0, arg1, arg2);

}
PFNGLBINDIMAGETEXTURESPROC glad_debug_glBindImageTextures = glad_debug_impl_glBindImageTextures;
PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers;
void APIENTRY glad_debug_impl_glBindVertexBuffers(GLuint arg0, GLsizei arg1, const GLuint* arg2, const GLintptr* arg3, const GLsizei* arg4) {
    _pre_call_callback("glBindVertexBuffers", (void*)glBindVertexBuffers, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glBindVertexBuffers(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glBindVertexBuffers", (void*)glBindVertexBuffers, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLBINDVERTEXBUFFERSPROC glad_debug_glBindVertexBuffers = glad_debug_impl_glBindVertexBuffers;
PFNGLGETLISTPARAMETERFVSGIXPROC glad_glGetListParameterfvSGIX;
void APIENTRY glad_debug_impl_glGetListParameterfvSGIX(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetListParameterfvSGIX", (void*)glGetListParameterfvSGIX, 3, arg0, arg1, arg2);
     glad_glGetListParameterfvSGIX(arg0, arg1, arg2);
    _post_call_callback("glGetListParameterfvSGIX", (void*)glGetListParameterfvSGIX, 3, arg0, arg1, arg2);

}
PFNGLGETLISTPARAMETERFVSGIXPROC glad_debug_glGetListParameterfvSGIX = glad_debug_impl_glGetListParameterfvSGIX;
PFNGLGETLISTPARAMETERIVSGIXPROC glad_glGetListParameterivSGIX;
void APIENTRY glad_debug_impl_glGetListParameterivSGIX(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetListParameterivSGIX", (void*)glGetListParameterivSGIX, 3, arg0, arg1, arg2);
     glad_glGetListParameterivSGIX(arg0, arg1, arg2);
    _post_call_callback("glGetListParameterivSGIX", (void*)glGetListParameterivSGIX, 3, arg0, arg1, arg2);

}
PFNGLGETLISTPARAMETERIVSGIXPROC glad_debug_glGetListParameterivSGIX = glad_debug_impl_glGetListParameterivSGIX;
PFNGLLISTPARAMETERFSGIXPROC glad_glListParameterfSGIX;
void APIENTRY glad_debug_impl_glListParameterfSGIX(GLuint arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glListParameterfSGIX", (void*)glListParameterfSGIX, 3, arg0, arg1, arg2);
     glad_glListParameterfSGIX(arg0, arg1, arg2);
    _post_call_callback("glListParameterfSGIX", (void*)glListParameterfSGIX, 3, arg0, arg1, arg2);

}
PFNGLLISTPARAMETERFSGIXPROC glad_debug_glListParameterfSGIX = glad_debug_impl_glListParameterfSGIX;
PFNGLLISTPARAMETERFVSGIXPROC glad_glListParameterfvSGIX;
void APIENTRY glad_debug_impl_glListParameterfvSGIX(GLuint arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glListParameterfvSGIX", (void*)glListParameterfvSGIX, 3, arg0, arg1, arg2);
     glad_glListParameterfvSGIX(arg0, arg1, arg2);
    _post_call_callback("glListParameterfvSGIX", (void*)glListParameterfvSGIX, 3, arg0, arg1, arg2);

}
PFNGLLISTPARAMETERFVSGIXPROC glad_debug_glListParameterfvSGIX = glad_debug_impl_glListParameterfvSGIX;
PFNGLLISTPARAMETERISGIXPROC glad_glListParameteriSGIX;
void APIENTRY glad_debug_impl_glListParameteriSGIX(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glListParameteriSGIX", (void*)glListParameteriSGIX, 3, arg0, arg1, arg2);
     glad_glListParameteriSGIX(arg0, arg1, arg2);
    _post_call_callback("glListParameteriSGIX", (void*)glListParameteriSGIX, 3, arg0, arg1, arg2);

}
PFNGLLISTPARAMETERISGIXPROC glad_debug_glListParameteriSGIX = glad_debug_impl_glListParameteriSGIX;
PFNGLLISTPARAMETERIVSGIXPROC glad_glListParameterivSGIX;
void APIENTRY glad_debug_impl_glListParameterivSGIX(GLuint arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glListParameterivSGIX", (void*)glListParameterivSGIX, 3, arg0, arg1, arg2);
     glad_glListParameterivSGIX(arg0, arg1, arg2);
    _post_call_callback("glListParameterivSGIX", (void*)glListParameterivSGIX, 3, arg0, arg1, arg2);

}
PFNGLLISTPARAMETERIVSGIXPROC glad_debug_glListParameterivSGIX = glad_debug_impl_glListParameterivSGIX;
PFNGLBUFFERADDRESSRANGENVPROC glad_glBufferAddressRangeNV;
void APIENTRY glad_debug_impl_glBufferAddressRangeNV(GLenum arg0, GLuint arg1, GLuint64EXT arg2, GLsizeiptr arg3) {
    _pre_call_callback("glBufferAddressRangeNV", (void*)glBufferAddressRangeNV, 4, arg0, arg1, arg2, arg3);
     glad_glBufferAddressRangeNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glBufferAddressRangeNV", (void*)glBufferAddressRangeNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLBUFFERADDRESSRANGENVPROC glad_debug_glBufferAddressRangeNV = glad_debug_impl_glBufferAddressRangeNV;
PFNGLVERTEXFORMATNVPROC glad_glVertexFormatNV;
void APIENTRY glad_debug_impl_glVertexFormatNV(GLint arg0, GLenum arg1, GLsizei arg2) {
    _pre_call_callback("glVertexFormatNV", (void*)glVertexFormatNV, 3, arg0, arg1, arg2);
     glad_glVertexFormatNV(arg0, arg1, arg2);
    _post_call_callback("glVertexFormatNV", (void*)glVertexFormatNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXFORMATNVPROC glad_debug_glVertexFormatNV = glad_debug_impl_glVertexFormatNV;
PFNGLNORMALFORMATNVPROC glad_glNormalFormatNV;
void APIENTRY glad_debug_impl_glNormalFormatNV(GLenum arg0, GLsizei arg1) {
    _pre_call_callback("glNormalFormatNV", (void*)glNormalFormatNV, 2, arg0, arg1);
     glad_glNormalFormatNV(arg0, arg1);
    _post_call_callback("glNormalFormatNV", (void*)glNormalFormatNV, 2, arg0, arg1);

}
PFNGLNORMALFORMATNVPROC glad_debug_glNormalFormatNV = glad_debug_impl_glNormalFormatNV;
PFNGLCOLORFORMATNVPROC glad_glColorFormatNV;
void APIENTRY glad_debug_impl_glColorFormatNV(GLint arg0, GLenum arg1, GLsizei arg2) {
    _pre_call_callback("glColorFormatNV", (void*)glColorFormatNV, 3, arg0, arg1, arg2);
     glad_glColorFormatNV(arg0, arg1, arg2);
    _post_call_callback("glColorFormatNV", (void*)glColorFormatNV, 3, arg0, arg1, arg2);

}
PFNGLCOLORFORMATNVPROC glad_debug_glColorFormatNV = glad_debug_impl_glColorFormatNV;
PFNGLINDEXFORMATNVPROC glad_glIndexFormatNV;
void APIENTRY glad_debug_impl_glIndexFormatNV(GLenum arg0, GLsizei arg1) {
    _pre_call_callback("glIndexFormatNV", (void*)glIndexFormatNV, 2, arg0, arg1);
     glad_glIndexFormatNV(arg0, arg1);
    _post_call_callback("glIndexFormatNV", (void*)glIndexFormatNV, 2, arg0, arg1);

}
PFNGLINDEXFORMATNVPROC glad_debug_glIndexFormatNV = glad_debug_impl_glIndexFormatNV;
PFNGLTEXCOORDFORMATNVPROC glad_glTexCoordFormatNV;
void APIENTRY glad_debug_impl_glTexCoordFormatNV(GLint arg0, GLenum arg1, GLsizei arg2) {
    _pre_call_callback("glTexCoordFormatNV", (void*)glTexCoordFormatNV, 3, arg0, arg1, arg2);
     glad_glTexCoordFormatNV(arg0, arg1, arg2);
    _post_call_callback("glTexCoordFormatNV", (void*)glTexCoordFormatNV, 3, arg0, arg1, arg2);

}
PFNGLTEXCOORDFORMATNVPROC glad_debug_glTexCoordFormatNV = glad_debug_impl_glTexCoordFormatNV;
PFNGLEDGEFLAGFORMATNVPROC glad_glEdgeFlagFormatNV;
void APIENTRY glad_debug_impl_glEdgeFlagFormatNV(GLsizei arg0) {
    _pre_call_callback("glEdgeFlagFormatNV", (void*)glEdgeFlagFormatNV, 1, arg0);
     glad_glEdgeFlagFormatNV(arg0);
    _post_call_callback("glEdgeFlagFormatNV", (void*)glEdgeFlagFormatNV, 1, arg0);

}
PFNGLEDGEFLAGFORMATNVPROC glad_debug_glEdgeFlagFormatNV = glad_debug_impl_glEdgeFlagFormatNV;
PFNGLSECONDARYCOLORFORMATNVPROC glad_glSecondaryColorFormatNV;
void APIENTRY glad_debug_impl_glSecondaryColorFormatNV(GLint arg0, GLenum arg1, GLsizei arg2) {
    _pre_call_callback("glSecondaryColorFormatNV", (void*)glSecondaryColorFormatNV, 3, arg0, arg1, arg2);
     glad_glSecondaryColorFormatNV(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColorFormatNV", (void*)glSecondaryColorFormatNV, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLORFORMATNVPROC glad_debug_glSecondaryColorFormatNV = glad_debug_impl_glSecondaryColorFormatNV;
PFNGLFOGCOORDFORMATNVPROC glad_glFogCoordFormatNV;
void APIENTRY glad_debug_impl_glFogCoordFormatNV(GLenum arg0, GLsizei arg1) {
    _pre_call_callback("glFogCoordFormatNV", (void*)glFogCoordFormatNV, 2, arg0, arg1);
     glad_glFogCoordFormatNV(arg0, arg1);
    _post_call_callback("glFogCoordFormatNV", (void*)glFogCoordFormatNV, 2, arg0, arg1);

}
PFNGLFOGCOORDFORMATNVPROC glad_debug_glFogCoordFormatNV = glad_debug_impl_glFogCoordFormatNV;
PFNGLVERTEXATTRIBFORMATNVPROC glad_glVertexAttribFormatNV;
void APIENTRY glad_debug_impl_glVertexAttribFormatNV(GLuint arg0, GLint arg1, GLenum arg2, GLboolean arg3, GLsizei arg4) {
    _pre_call_callback("glVertexAttribFormatNV", (void*)glVertexAttribFormatNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribFormatNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribFormatNV", (void*)glVertexAttribFormatNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBFORMATNVPROC glad_debug_glVertexAttribFormatNV = glad_debug_impl_glVertexAttribFormatNV;
PFNGLVERTEXATTRIBIFORMATNVPROC glad_glVertexAttribIFormatNV;
void APIENTRY glad_debug_impl_glVertexAttribIFormatNV(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3) {
    _pre_call_callback("glVertexAttribIFormatNV", (void*)glVertexAttribIFormatNV, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribIFormatNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribIFormatNV", (void*)glVertexAttribIFormatNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBIFORMATNVPROC glad_debug_glVertexAttribIFormatNV = glad_debug_impl_glVertexAttribIFormatNV;
PFNGLGETINTEGERUI64I_VNVPROC glad_glGetIntegerui64i_vNV;
void APIENTRY glad_debug_impl_glGetIntegerui64i_vNV(GLenum arg0, GLuint arg1, GLuint64EXT* arg2) {
    _pre_call_callback("glGetIntegerui64i_vNV", (void*)glGetIntegerui64i_vNV, 3, arg0, arg1, arg2);
     glad_glGetIntegerui64i_vNV(arg0, arg1, arg2);
    _post_call_callback("glGetIntegerui64i_vNV", (void*)glGetIntegerui64i_vNV, 3, arg0, arg1, arg2);

}
PFNGLGETINTEGERUI64I_VNVPROC glad_debug_glGetIntegerui64i_vNV = glad_debug_impl_glGetIntegerui64i_vNV;
PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage;
void APIENTRY glad_debug_impl_glClearTexImage(GLuint arg0, GLint arg1, GLenum arg2, GLenum arg3, const void* arg4) {
    _pre_call_callback("glClearTexImage", (void*)glClearTexImage, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glClearTexImage(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glClearTexImage", (void*)glClearTexImage, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCLEARTEXIMAGEPROC glad_debug_glClearTexImage = glad_debug_impl_glClearTexImage;
PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage;
void APIENTRY glad_debug_impl_glClearTexSubImage(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, const void* arg10) {
    _pre_call_callback("glClearTexSubImage", (void*)glClearTexSubImage, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glClearTexSubImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glClearTexSubImage", (void*)glClearTexSubImage, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLCLEARTEXSUBIMAGEPROC glad_debug_glClearTexSubImage = glad_debug_impl_glClearTexSubImage;
PFNGLBLENDPARAMETERINVPROC glad_glBlendParameteriNV;
void APIENTRY glad_debug_impl_glBlendParameteriNV(GLenum arg0, GLint arg1) {
    _pre_call_callback("glBlendParameteriNV", (void*)glBlendParameteriNV, 2, arg0, arg1);
     glad_glBlendParameteriNV(arg0, arg1);
    _post_call_callback("glBlendParameteriNV", (void*)glBlendParameteriNV, 2, arg0, arg1);

}
PFNGLBLENDPARAMETERINVPROC glad_debug_glBlendParameteriNV = glad_debug_impl_glBlendParameteriNV;
PFNGLBLENDBARRIERNVPROC glad_glBlendBarrierNV;
void APIENTRY glad_debug_impl_glBlendBarrierNV() {
    _pre_call_callback("glBlendBarrierNV", (void*)glBlendBarrierNV, 0);
     glad_glBlendBarrierNV();
    _post_call_callback("glBlendBarrierNV", (void*)glBlendBarrierNV, 0);

}
PFNGLBLENDBARRIERNVPROC glad_debug_glBlendBarrierNV = glad_debug_impl_glBlendBarrierNV;
PFNGLSHARPENTEXFUNCSGISPROC glad_glSharpenTexFuncSGIS;
void APIENTRY glad_debug_impl_glSharpenTexFuncSGIS(GLenum arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glSharpenTexFuncSGIS", (void*)glSharpenTexFuncSGIS, 3, arg0, arg1, arg2);
     glad_glSharpenTexFuncSGIS(arg0, arg1, arg2);
    _post_call_callback("glSharpenTexFuncSGIS", (void*)glSharpenTexFuncSGIS, 3, arg0, arg1, arg2);

}
PFNGLSHARPENTEXFUNCSGISPROC glad_debug_glSharpenTexFuncSGIS = glad_debug_impl_glSharpenTexFuncSGIS;
PFNGLGETSHARPENTEXFUNCSGISPROC glad_glGetSharpenTexFuncSGIS;
void APIENTRY glad_debug_impl_glGetSharpenTexFuncSGIS(GLenum arg0, GLfloat* arg1) {
    _pre_call_callback("glGetSharpenTexFuncSGIS", (void*)glGetSharpenTexFuncSGIS, 2, arg0, arg1);
     glad_glGetSharpenTexFuncSGIS(arg0, arg1);
    _post_call_callback("glGetSharpenTexFuncSGIS", (void*)glGetSharpenTexFuncSGIS, 2, arg0, arg1);

}
PFNGLGETSHARPENTEXFUNCSGISPROC glad_debug_glGetSharpenTexFuncSGIS = glad_debug_impl_glGetSharpenTexFuncSGIS;
PFNGLVERTEXATTRIB1DARBPROC glad_glVertexAttrib1dARB;
void APIENTRY glad_debug_impl_glVertexAttrib1dARB(GLuint arg0, GLdouble arg1) {
    _pre_call_callback("glVertexAttrib1dARB", (void*)glVertexAttrib1dARB, 2, arg0, arg1);
     glad_glVertexAttrib1dARB(arg0, arg1);
    _post_call_callback("glVertexAttrib1dARB", (void*)glVertexAttrib1dARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1DARBPROC glad_debug_glVertexAttrib1dARB = glad_debug_impl_glVertexAttrib1dARB;
PFNGLVERTEXATTRIB1DVARBPROC glad_glVertexAttrib1dvARB;
void APIENTRY glad_debug_impl_glVertexAttrib1dvARB(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib1dvARB", (void*)glVertexAttrib1dvARB, 2, arg0, arg1);
     glad_glVertexAttrib1dvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib1dvARB", (void*)glVertexAttrib1dvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1DVARBPROC glad_debug_glVertexAttrib1dvARB = glad_debug_impl_glVertexAttrib1dvARB;
PFNGLVERTEXATTRIB1FARBPROC glad_glVertexAttrib1fARB;
void APIENTRY glad_debug_impl_glVertexAttrib1fARB(GLuint arg0, GLfloat arg1) {
    _pre_call_callback("glVertexAttrib1fARB", (void*)glVertexAttrib1fARB, 2, arg0, arg1);
     glad_glVertexAttrib1fARB(arg0, arg1);
    _post_call_callback("glVertexAttrib1fARB", (void*)glVertexAttrib1fARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1FARBPROC glad_debug_glVertexAttrib1fARB = glad_debug_impl_glVertexAttrib1fARB;
PFNGLVERTEXATTRIB1FVARBPROC glad_glVertexAttrib1fvARB;
void APIENTRY glad_debug_impl_glVertexAttrib1fvARB(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib1fvARB", (void*)glVertexAttrib1fvARB, 2, arg0, arg1);
     glad_glVertexAttrib1fvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib1fvARB", (void*)glVertexAttrib1fvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1FVARBPROC glad_debug_glVertexAttrib1fvARB = glad_debug_impl_glVertexAttrib1fvARB;
PFNGLVERTEXATTRIB1SARBPROC glad_glVertexAttrib1sARB;
void APIENTRY glad_debug_impl_glVertexAttrib1sARB(GLuint arg0, GLshort arg1) {
    _pre_call_callback("glVertexAttrib1sARB", (void*)glVertexAttrib1sARB, 2, arg0, arg1);
     glad_glVertexAttrib1sARB(arg0, arg1);
    _post_call_callback("glVertexAttrib1sARB", (void*)glVertexAttrib1sARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1SARBPROC glad_debug_glVertexAttrib1sARB = glad_debug_impl_glVertexAttrib1sARB;
PFNGLVERTEXATTRIB1SVARBPROC glad_glVertexAttrib1svARB;
void APIENTRY glad_debug_impl_glVertexAttrib1svARB(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib1svARB", (void*)glVertexAttrib1svARB, 2, arg0, arg1);
     glad_glVertexAttrib1svARB(arg0, arg1);
    _post_call_callback("glVertexAttrib1svARB", (void*)glVertexAttrib1svARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1SVARBPROC glad_debug_glVertexAttrib1svARB = glad_debug_impl_glVertexAttrib1svARB;
PFNGLVERTEXATTRIB2DARBPROC glad_glVertexAttrib2dARB;
void APIENTRY glad_debug_impl_glVertexAttrib2dARB(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glVertexAttrib2dARB", (void*)glVertexAttrib2dARB, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2dARB(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2dARB", (void*)glVertexAttrib2dARB, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2DARBPROC glad_debug_glVertexAttrib2dARB = glad_debug_impl_glVertexAttrib2dARB;
PFNGLVERTEXATTRIB2DVARBPROC glad_glVertexAttrib2dvARB;
void APIENTRY glad_debug_impl_glVertexAttrib2dvARB(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib2dvARB", (void*)glVertexAttrib2dvARB, 2, arg0, arg1);
     glad_glVertexAttrib2dvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib2dvARB", (void*)glVertexAttrib2dvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2DVARBPROC glad_debug_glVertexAttrib2dvARB = glad_debug_impl_glVertexAttrib2dvARB;
PFNGLVERTEXATTRIB2FARBPROC glad_glVertexAttrib2fARB;
void APIENTRY glad_debug_impl_glVertexAttrib2fARB(GLuint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glVertexAttrib2fARB", (void*)glVertexAttrib2fARB, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2fARB(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2fARB", (void*)glVertexAttrib2fARB, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2FARBPROC glad_debug_glVertexAttrib2fARB = glad_debug_impl_glVertexAttrib2fARB;
PFNGLVERTEXATTRIB2FVARBPROC glad_glVertexAttrib2fvARB;
void APIENTRY glad_debug_impl_glVertexAttrib2fvARB(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib2fvARB", (void*)glVertexAttrib2fvARB, 2, arg0, arg1);
     glad_glVertexAttrib2fvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib2fvARB", (void*)glVertexAttrib2fvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2FVARBPROC glad_debug_glVertexAttrib2fvARB = glad_debug_impl_glVertexAttrib2fvARB;
PFNGLVERTEXATTRIB2SARBPROC glad_glVertexAttrib2sARB;
void APIENTRY glad_debug_impl_glVertexAttrib2sARB(GLuint arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glVertexAttrib2sARB", (void*)glVertexAttrib2sARB, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2sARB(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2sARB", (void*)glVertexAttrib2sARB, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2SARBPROC glad_debug_glVertexAttrib2sARB = glad_debug_impl_glVertexAttrib2sARB;
PFNGLVERTEXATTRIB2SVARBPROC glad_glVertexAttrib2svARB;
void APIENTRY glad_debug_impl_glVertexAttrib2svARB(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib2svARB", (void*)glVertexAttrib2svARB, 2, arg0, arg1);
     glad_glVertexAttrib2svARB(arg0, arg1);
    _post_call_callback("glVertexAttrib2svARB", (void*)glVertexAttrib2svARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2SVARBPROC glad_debug_glVertexAttrib2svARB = glad_debug_impl_glVertexAttrib2svARB;
PFNGLVERTEXATTRIB3DARBPROC glad_glVertexAttrib3dARB;
void APIENTRY glad_debug_impl_glVertexAttrib3dARB(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glVertexAttrib3dARB", (void*)glVertexAttrib3dARB, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3dARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3dARB", (void*)glVertexAttrib3dARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3DARBPROC glad_debug_glVertexAttrib3dARB = glad_debug_impl_glVertexAttrib3dARB;
PFNGLVERTEXATTRIB3DVARBPROC glad_glVertexAttrib3dvARB;
void APIENTRY glad_debug_impl_glVertexAttrib3dvARB(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib3dvARB", (void*)glVertexAttrib3dvARB, 2, arg0, arg1);
     glad_glVertexAttrib3dvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib3dvARB", (void*)glVertexAttrib3dvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3DVARBPROC glad_debug_glVertexAttrib3dvARB = glad_debug_impl_glVertexAttrib3dvARB;
PFNGLVERTEXATTRIB3FARBPROC glad_glVertexAttrib3fARB;
void APIENTRY glad_debug_impl_glVertexAttrib3fARB(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glVertexAttrib3fARB", (void*)glVertexAttrib3fARB, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3fARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3fARB", (void*)glVertexAttrib3fARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3FARBPROC glad_debug_glVertexAttrib3fARB = glad_debug_impl_glVertexAttrib3fARB;
PFNGLVERTEXATTRIB3FVARBPROC glad_glVertexAttrib3fvARB;
void APIENTRY glad_debug_impl_glVertexAttrib3fvARB(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib3fvARB", (void*)glVertexAttrib3fvARB, 2, arg0, arg1);
     glad_glVertexAttrib3fvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib3fvARB", (void*)glVertexAttrib3fvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3FVARBPROC glad_debug_glVertexAttrib3fvARB = glad_debug_impl_glVertexAttrib3fvARB;
PFNGLVERTEXATTRIB3SARBPROC glad_glVertexAttrib3sARB;
void APIENTRY glad_debug_impl_glVertexAttrib3sARB(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_callback("glVertexAttrib3sARB", (void*)glVertexAttrib3sARB, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3sARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3sARB", (void*)glVertexAttrib3sARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3SARBPROC glad_debug_glVertexAttrib3sARB = glad_debug_impl_glVertexAttrib3sARB;
PFNGLVERTEXATTRIB3SVARBPROC glad_glVertexAttrib3svARB;
void APIENTRY glad_debug_impl_glVertexAttrib3svARB(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib3svARB", (void*)glVertexAttrib3svARB, 2, arg0, arg1);
     glad_glVertexAttrib3svARB(arg0, arg1);
    _post_call_callback("glVertexAttrib3svARB", (void*)glVertexAttrib3svARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3SVARBPROC glad_debug_glVertexAttrib3svARB = glad_debug_impl_glVertexAttrib3svARB;
PFNGLVERTEXATTRIB4NBVARBPROC glad_glVertexAttrib4NbvARB;
void APIENTRY glad_debug_impl_glVertexAttrib4NbvARB(GLuint arg0, const GLbyte* arg1) {
    _pre_call_callback("glVertexAttrib4NbvARB", (void*)glVertexAttrib4NbvARB, 2, arg0, arg1);
     glad_glVertexAttrib4NbvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4NbvARB", (void*)glVertexAttrib4NbvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NBVARBPROC glad_debug_glVertexAttrib4NbvARB = glad_debug_impl_glVertexAttrib4NbvARB;
PFNGLVERTEXATTRIB4NIVARBPROC glad_glVertexAttrib4NivARB;
void APIENTRY glad_debug_impl_glVertexAttrib4NivARB(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttrib4NivARB", (void*)glVertexAttrib4NivARB, 2, arg0, arg1);
     glad_glVertexAttrib4NivARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4NivARB", (void*)glVertexAttrib4NivARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NIVARBPROC glad_debug_glVertexAttrib4NivARB = glad_debug_impl_glVertexAttrib4NivARB;
PFNGLVERTEXATTRIB4NSVARBPROC glad_glVertexAttrib4NsvARB;
void APIENTRY glad_debug_impl_glVertexAttrib4NsvARB(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib4NsvARB", (void*)glVertexAttrib4NsvARB, 2, arg0, arg1);
     glad_glVertexAttrib4NsvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4NsvARB", (void*)glVertexAttrib4NsvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NSVARBPROC glad_debug_glVertexAttrib4NsvARB = glad_debug_impl_glVertexAttrib4NsvARB;
PFNGLVERTEXATTRIB4NUBARBPROC glad_glVertexAttrib4NubARB;
void APIENTRY glad_debug_impl_glVertexAttrib4NubARB(GLuint arg0, GLubyte arg1, GLubyte arg2, GLubyte arg3, GLubyte arg4) {
    _pre_call_callback("glVertexAttrib4NubARB", (void*)glVertexAttrib4NubARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4NubARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4NubARB", (void*)glVertexAttrib4NubARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4NUBARBPROC glad_debug_glVertexAttrib4NubARB = glad_debug_impl_glVertexAttrib4NubARB;
PFNGLVERTEXATTRIB4NUBVARBPROC glad_glVertexAttrib4NubvARB;
void APIENTRY glad_debug_impl_glVertexAttrib4NubvARB(GLuint arg0, const GLubyte* arg1) {
    _pre_call_callback("glVertexAttrib4NubvARB", (void*)glVertexAttrib4NubvARB, 2, arg0, arg1);
     glad_glVertexAttrib4NubvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4NubvARB", (void*)glVertexAttrib4NubvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NUBVARBPROC glad_debug_glVertexAttrib4NubvARB = glad_debug_impl_glVertexAttrib4NubvARB;
PFNGLVERTEXATTRIB4NUIVARBPROC glad_glVertexAttrib4NuivARB;
void APIENTRY glad_debug_impl_glVertexAttrib4NuivARB(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttrib4NuivARB", (void*)glVertexAttrib4NuivARB, 2, arg0, arg1);
     glad_glVertexAttrib4NuivARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4NuivARB", (void*)glVertexAttrib4NuivARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NUIVARBPROC glad_debug_glVertexAttrib4NuivARB = glad_debug_impl_glVertexAttrib4NuivARB;
PFNGLVERTEXATTRIB4NUSVARBPROC glad_glVertexAttrib4NusvARB;
void APIENTRY glad_debug_impl_glVertexAttrib4NusvARB(GLuint arg0, const GLushort* arg1) {
    _pre_call_callback("glVertexAttrib4NusvARB", (void*)glVertexAttrib4NusvARB, 2, arg0, arg1);
     glad_glVertexAttrib4NusvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4NusvARB", (void*)glVertexAttrib4NusvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4NUSVARBPROC glad_debug_glVertexAttrib4NusvARB = glad_debug_impl_glVertexAttrib4NusvARB;
PFNGLVERTEXATTRIB4BVARBPROC glad_glVertexAttrib4bvARB;
void APIENTRY glad_debug_impl_glVertexAttrib4bvARB(GLuint arg0, const GLbyte* arg1) {
    _pre_call_callback("glVertexAttrib4bvARB", (void*)glVertexAttrib4bvARB, 2, arg0, arg1);
     glad_glVertexAttrib4bvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4bvARB", (void*)glVertexAttrib4bvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4BVARBPROC glad_debug_glVertexAttrib4bvARB = glad_debug_impl_glVertexAttrib4bvARB;
PFNGLVERTEXATTRIB4DARBPROC glad_glVertexAttrib4dARB;
void APIENTRY glad_debug_impl_glVertexAttrib4dARB(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glVertexAttrib4dARB", (void*)glVertexAttrib4dARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4dARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4dARB", (void*)glVertexAttrib4dARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4DARBPROC glad_debug_glVertexAttrib4dARB = glad_debug_impl_glVertexAttrib4dARB;
PFNGLVERTEXATTRIB4DVARBPROC glad_glVertexAttrib4dvARB;
void APIENTRY glad_debug_impl_glVertexAttrib4dvARB(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib4dvARB", (void*)glVertexAttrib4dvARB, 2, arg0, arg1);
     glad_glVertexAttrib4dvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4dvARB", (void*)glVertexAttrib4dvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4DVARBPROC glad_debug_glVertexAttrib4dvARB = glad_debug_impl_glVertexAttrib4dvARB;
PFNGLVERTEXATTRIB4FARBPROC glad_glVertexAttrib4fARB;
void APIENTRY glad_debug_impl_glVertexAttrib4fARB(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glVertexAttrib4fARB", (void*)glVertexAttrib4fARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4fARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4fARB", (void*)glVertexAttrib4fARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4FARBPROC glad_debug_glVertexAttrib4fARB = glad_debug_impl_glVertexAttrib4fARB;
PFNGLVERTEXATTRIB4FVARBPROC glad_glVertexAttrib4fvARB;
void APIENTRY glad_debug_impl_glVertexAttrib4fvARB(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib4fvARB", (void*)glVertexAttrib4fvARB, 2, arg0, arg1);
     glad_glVertexAttrib4fvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4fvARB", (void*)glVertexAttrib4fvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4FVARBPROC glad_debug_glVertexAttrib4fvARB = glad_debug_impl_glVertexAttrib4fvARB;
PFNGLVERTEXATTRIB4IVARBPROC glad_glVertexAttrib4ivARB;
void APIENTRY glad_debug_impl_glVertexAttrib4ivARB(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttrib4ivARB", (void*)glVertexAttrib4ivARB, 2, arg0, arg1);
     glad_glVertexAttrib4ivARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4ivARB", (void*)glVertexAttrib4ivARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4IVARBPROC glad_debug_glVertexAttrib4ivARB = glad_debug_impl_glVertexAttrib4ivARB;
PFNGLVERTEXATTRIB4SARBPROC glad_glVertexAttrib4sARB;
void APIENTRY glad_debug_impl_glVertexAttrib4sARB(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3, GLshort arg4) {
    _pre_call_callback("glVertexAttrib4sARB", (void*)glVertexAttrib4sARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4sARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4sARB", (void*)glVertexAttrib4sARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4SARBPROC glad_debug_glVertexAttrib4sARB = glad_debug_impl_glVertexAttrib4sARB;
PFNGLVERTEXATTRIB4SVARBPROC glad_glVertexAttrib4svARB;
void APIENTRY glad_debug_impl_glVertexAttrib4svARB(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib4svARB", (void*)glVertexAttrib4svARB, 2, arg0, arg1);
     glad_glVertexAttrib4svARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4svARB", (void*)glVertexAttrib4svARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4SVARBPROC glad_debug_glVertexAttrib4svARB = glad_debug_impl_glVertexAttrib4svARB;
PFNGLVERTEXATTRIB4UBVARBPROC glad_glVertexAttrib4ubvARB;
void APIENTRY glad_debug_impl_glVertexAttrib4ubvARB(GLuint arg0, const GLubyte* arg1) {
    _pre_call_callback("glVertexAttrib4ubvARB", (void*)glVertexAttrib4ubvARB, 2, arg0, arg1);
     glad_glVertexAttrib4ubvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4ubvARB", (void*)glVertexAttrib4ubvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4UBVARBPROC glad_debug_glVertexAttrib4ubvARB = glad_debug_impl_glVertexAttrib4ubvARB;
PFNGLVERTEXATTRIB4UIVARBPROC glad_glVertexAttrib4uivARB;
void APIENTRY glad_debug_impl_glVertexAttrib4uivARB(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttrib4uivARB", (void*)glVertexAttrib4uivARB, 2, arg0, arg1);
     glad_glVertexAttrib4uivARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4uivARB", (void*)glVertexAttrib4uivARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4UIVARBPROC glad_debug_glVertexAttrib4uivARB = glad_debug_impl_glVertexAttrib4uivARB;
PFNGLVERTEXATTRIB4USVARBPROC glad_glVertexAttrib4usvARB;
void APIENTRY glad_debug_impl_glVertexAttrib4usvARB(GLuint arg0, const GLushort* arg1) {
    _pre_call_callback("glVertexAttrib4usvARB", (void*)glVertexAttrib4usvARB, 2, arg0, arg1);
     glad_glVertexAttrib4usvARB(arg0, arg1);
    _post_call_callback("glVertexAttrib4usvARB", (void*)glVertexAttrib4usvARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4USVARBPROC glad_debug_glVertexAttrib4usvARB = glad_debug_impl_glVertexAttrib4usvARB;
PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB;
void APIENTRY glad_debug_impl_glVertexAttribPointerARB(GLuint arg0, GLint arg1, GLenum arg2, GLboolean arg3, GLsizei arg4, const void* arg5) {
    _pre_call_callback("glVertexAttribPointerARB", (void*)glVertexAttribPointerARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glVertexAttribPointerARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glVertexAttribPointerARB", (void*)glVertexAttribPointerARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLVERTEXATTRIBPOINTERARBPROC glad_debug_glVertexAttribPointerARB = glad_debug_impl_glVertexAttribPointerARB;
PFNGLENABLEVERTEXATTRIBARRAYARBPROC glad_glEnableVertexAttribArrayARB;
void APIENTRY glad_debug_impl_glEnableVertexAttribArrayARB(GLuint arg0) {
    _pre_call_callback("glEnableVertexAttribArrayARB", (void*)glEnableVertexAttribArrayARB, 1, arg0);
     glad_glEnableVertexAttribArrayARB(arg0);
    _post_call_callback("glEnableVertexAttribArrayARB", (void*)glEnableVertexAttribArrayARB, 1, arg0);

}
PFNGLENABLEVERTEXATTRIBARRAYARBPROC glad_debug_glEnableVertexAttribArrayARB = glad_debug_impl_glEnableVertexAttribArrayARB;
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glad_glDisableVertexAttribArrayARB;
void APIENTRY glad_debug_impl_glDisableVertexAttribArrayARB(GLuint arg0) {
    _pre_call_callback("glDisableVertexAttribArrayARB", (void*)glDisableVertexAttribArrayARB, 1, arg0);
     glad_glDisableVertexAttribArrayARB(arg0);
    _post_call_callback("glDisableVertexAttribArrayARB", (void*)glDisableVertexAttribArrayARB, 1, arg0);

}
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glad_debug_glDisableVertexAttribArrayARB = glad_debug_impl_glDisableVertexAttribArrayARB;
PFNGLPROGRAMSTRINGARBPROC glad_glProgramStringARB;
void APIENTRY glad_debug_impl_glProgramStringARB(GLenum arg0, GLenum arg1, GLsizei arg2, const void* arg3) {
    _pre_call_callback("glProgramStringARB", (void*)glProgramStringARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramStringARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramStringARB", (void*)glProgramStringARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMSTRINGARBPROC glad_debug_glProgramStringARB = glad_debug_impl_glProgramStringARB;
PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB;
void APIENTRY glad_debug_impl_glBindProgramARB(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindProgramARB", (void*)glBindProgramARB, 2, arg0, arg1);
     glad_glBindProgramARB(arg0, arg1);
    _post_call_callback("glBindProgramARB", (void*)glBindProgramARB, 2, arg0, arg1);

}
PFNGLBINDPROGRAMARBPROC glad_debug_glBindProgramARB = glad_debug_impl_glBindProgramARB;
PFNGLDELETEPROGRAMSARBPROC glad_glDeleteProgramsARB;
void APIENTRY glad_debug_impl_glDeleteProgramsARB(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteProgramsARB", (void*)glDeleteProgramsARB, 2, arg0, arg1);
     glad_glDeleteProgramsARB(arg0, arg1);
    _post_call_callback("glDeleteProgramsARB", (void*)glDeleteProgramsARB, 2, arg0, arg1);

}
PFNGLDELETEPROGRAMSARBPROC glad_debug_glDeleteProgramsARB = glad_debug_impl_glDeleteProgramsARB;
PFNGLGENPROGRAMSARBPROC glad_glGenProgramsARB;
void APIENTRY glad_debug_impl_glGenProgramsARB(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenProgramsARB", (void*)glGenProgramsARB, 2, arg0, arg1);
     glad_glGenProgramsARB(arg0, arg1);
    _post_call_callback("glGenProgramsARB", (void*)glGenProgramsARB, 2, arg0, arg1);

}
PFNGLGENPROGRAMSARBPROC glad_debug_glGenProgramsARB = glad_debug_impl_glGenProgramsARB;
PFNGLPROGRAMENVPARAMETER4DARBPROC glad_glProgramEnvParameter4dARB;
void APIENTRY glad_debug_impl_glProgramEnvParameter4dARB(GLenum arg0, GLuint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_callback("glProgramEnvParameter4dARB", (void*)glProgramEnvParameter4dARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramEnvParameter4dARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramEnvParameter4dARB", (void*)glProgramEnvParameter4dARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMENVPARAMETER4DARBPROC glad_debug_glProgramEnvParameter4dARB = glad_debug_impl_glProgramEnvParameter4dARB;
PFNGLPROGRAMENVPARAMETER4DVARBPROC glad_glProgramEnvParameter4dvARB;
void APIENTRY glad_debug_impl_glProgramEnvParameter4dvARB(GLenum arg0, GLuint arg1, const GLdouble* arg2) {
    _pre_call_callback("glProgramEnvParameter4dvARB", (void*)glProgramEnvParameter4dvARB, 3, arg0, arg1, arg2);
     glad_glProgramEnvParameter4dvARB(arg0, arg1, arg2);
    _post_call_callback("glProgramEnvParameter4dvARB", (void*)glProgramEnvParameter4dvARB, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMENVPARAMETER4DVARBPROC glad_debug_glProgramEnvParameter4dvARB = glad_debug_impl_glProgramEnvParameter4dvARB;
PFNGLPROGRAMENVPARAMETER4FARBPROC glad_glProgramEnvParameter4fARB;
void APIENTRY glad_debug_impl_glProgramEnvParameter4fARB(GLenum arg0, GLuint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glProgramEnvParameter4fARB", (void*)glProgramEnvParameter4fARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramEnvParameter4fARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramEnvParameter4fARB", (void*)glProgramEnvParameter4fARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMENVPARAMETER4FARBPROC glad_debug_glProgramEnvParameter4fARB = glad_debug_impl_glProgramEnvParameter4fARB;
PFNGLPROGRAMENVPARAMETER4FVARBPROC glad_glProgramEnvParameter4fvARB;
void APIENTRY glad_debug_impl_glProgramEnvParameter4fvARB(GLenum arg0, GLuint arg1, const GLfloat* arg2) {
    _pre_call_callback("glProgramEnvParameter4fvARB", (void*)glProgramEnvParameter4fvARB, 3, arg0, arg1, arg2);
     glad_glProgramEnvParameter4fvARB(arg0, arg1, arg2);
    _post_call_callback("glProgramEnvParameter4fvARB", (void*)glProgramEnvParameter4fvARB, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMENVPARAMETER4FVARBPROC glad_debug_glProgramEnvParameter4fvARB = glad_debug_impl_glProgramEnvParameter4fvARB;
PFNGLPROGRAMLOCALPARAMETER4DARBPROC glad_glProgramLocalParameter4dARB;
void APIENTRY glad_debug_impl_glProgramLocalParameter4dARB(GLenum arg0, GLuint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_callback("glProgramLocalParameter4dARB", (void*)glProgramLocalParameter4dARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramLocalParameter4dARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramLocalParameter4dARB", (void*)glProgramLocalParameter4dARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMLOCALPARAMETER4DARBPROC glad_debug_glProgramLocalParameter4dARB = glad_debug_impl_glProgramLocalParameter4dARB;
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glad_glProgramLocalParameter4dvARB;
void APIENTRY glad_debug_impl_glProgramLocalParameter4dvARB(GLenum arg0, GLuint arg1, const GLdouble* arg2) {
    _pre_call_callback("glProgramLocalParameter4dvARB", (void*)glProgramLocalParameter4dvARB, 3, arg0, arg1, arg2);
     glad_glProgramLocalParameter4dvARB(arg0, arg1, arg2);
    _post_call_callback("glProgramLocalParameter4dvARB", (void*)glProgramLocalParameter4dvARB, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glad_debug_glProgramLocalParameter4dvARB = glad_debug_impl_glProgramLocalParameter4dvARB;
PFNGLPROGRAMLOCALPARAMETER4FARBPROC glad_glProgramLocalParameter4fARB;
void APIENTRY glad_debug_impl_glProgramLocalParameter4fARB(GLenum arg0, GLuint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glProgramLocalParameter4fARB", (void*)glProgramLocalParameter4fARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramLocalParameter4fARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramLocalParameter4fARB", (void*)glProgramLocalParameter4fARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMLOCALPARAMETER4FARBPROC glad_debug_glProgramLocalParameter4fARB = glad_debug_impl_glProgramLocalParameter4fARB;
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glad_glProgramLocalParameter4fvARB;
void APIENTRY glad_debug_impl_glProgramLocalParameter4fvARB(GLenum arg0, GLuint arg1, const GLfloat* arg2) {
    _pre_call_callback("glProgramLocalParameter4fvARB", (void*)glProgramLocalParameter4fvARB, 3, arg0, arg1, arg2);
     glad_glProgramLocalParameter4fvARB(arg0, arg1, arg2);
    _post_call_callback("glProgramLocalParameter4fvARB", (void*)glProgramLocalParameter4fvARB, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glad_debug_glProgramLocalParameter4fvARB = glad_debug_impl_glProgramLocalParameter4fvARB;
PFNGLGETPROGRAMENVPARAMETERDVARBPROC glad_glGetProgramEnvParameterdvARB;
void APIENTRY glad_debug_impl_glGetProgramEnvParameterdvARB(GLenum arg0, GLuint arg1, GLdouble* arg2) {
    _pre_call_callback("glGetProgramEnvParameterdvARB", (void*)glGetProgramEnvParameterdvARB, 3, arg0, arg1, arg2);
     glad_glGetProgramEnvParameterdvARB(arg0, arg1, arg2);
    _post_call_callback("glGetProgramEnvParameterdvARB", (void*)glGetProgramEnvParameterdvARB, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMENVPARAMETERDVARBPROC glad_debug_glGetProgramEnvParameterdvARB = glad_debug_impl_glGetProgramEnvParameterdvARB;
PFNGLGETPROGRAMENVPARAMETERFVARBPROC glad_glGetProgramEnvParameterfvARB;
void APIENTRY glad_debug_impl_glGetProgramEnvParameterfvARB(GLenum arg0, GLuint arg1, GLfloat* arg2) {
    _pre_call_callback("glGetProgramEnvParameterfvARB", (void*)glGetProgramEnvParameterfvARB, 3, arg0, arg1, arg2);
     glad_glGetProgramEnvParameterfvARB(arg0, arg1, arg2);
    _post_call_callback("glGetProgramEnvParameterfvARB", (void*)glGetProgramEnvParameterfvARB, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMENVPARAMETERFVARBPROC glad_debug_glGetProgramEnvParameterfvARB = glad_debug_impl_glGetProgramEnvParameterfvARB;
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glad_glGetProgramLocalParameterdvARB;
void APIENTRY glad_debug_impl_glGetProgramLocalParameterdvARB(GLenum arg0, GLuint arg1, GLdouble* arg2) {
    _pre_call_callback("glGetProgramLocalParameterdvARB", (void*)glGetProgramLocalParameterdvARB, 3, arg0, arg1, arg2);
     glad_glGetProgramLocalParameterdvARB(arg0, arg1, arg2);
    _post_call_callback("glGetProgramLocalParameterdvARB", (void*)glGetProgramLocalParameterdvARB, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glad_debug_glGetProgramLocalParameterdvARB = glad_debug_impl_glGetProgramLocalParameterdvARB;
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glad_glGetProgramLocalParameterfvARB;
void APIENTRY glad_debug_impl_glGetProgramLocalParameterfvARB(GLenum arg0, GLuint arg1, GLfloat* arg2) {
    _pre_call_callback("glGetProgramLocalParameterfvARB", (void*)glGetProgramLocalParameterfvARB, 3, arg0, arg1, arg2);
     glad_glGetProgramLocalParameterfvARB(arg0, arg1, arg2);
    _post_call_callback("glGetProgramLocalParameterfvARB", (void*)glGetProgramLocalParameterfvARB, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glad_debug_glGetProgramLocalParameterfvARB = glad_debug_impl_glGetProgramLocalParameterfvARB;
PFNGLGETPROGRAMIVARBPROC glad_glGetProgramivARB;
void APIENTRY glad_debug_impl_glGetProgramivARB(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetProgramivARB", (void*)glGetProgramivARB, 3, arg0, arg1, arg2);
     glad_glGetProgramivARB(arg0, arg1, arg2);
    _post_call_callback("glGetProgramivARB", (void*)glGetProgramivARB, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMIVARBPROC glad_debug_glGetProgramivARB = glad_debug_impl_glGetProgramivARB;
PFNGLGETPROGRAMSTRINGARBPROC glad_glGetProgramStringARB;
void APIENTRY glad_debug_impl_glGetProgramStringARB(GLenum arg0, GLenum arg1, void* arg2) {
    _pre_call_callback("glGetProgramStringARB", (void*)glGetProgramStringARB, 3, arg0, arg1, arg2);
     glad_glGetProgramStringARB(arg0, arg1, arg2);
    _post_call_callback("glGetProgramStringARB", (void*)glGetProgramStringARB, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMSTRINGARBPROC glad_debug_glGetProgramStringARB = glad_debug_impl_glGetProgramStringARB;
PFNGLGETVERTEXATTRIBDVARBPROC glad_glGetVertexAttribdvARB;
void APIENTRY glad_debug_impl_glGetVertexAttribdvARB(GLuint arg0, GLenum arg1, GLdouble* arg2) {
    _pre_call_callback("glGetVertexAttribdvARB", (void*)glGetVertexAttribdvARB, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribdvARB(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribdvARB", (void*)glGetVertexAttribdvARB, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBDVARBPROC glad_debug_glGetVertexAttribdvARB = glad_debug_impl_glGetVertexAttribdvARB;
PFNGLGETVERTEXATTRIBFVARBPROC glad_glGetVertexAttribfvARB;
void APIENTRY glad_debug_impl_glGetVertexAttribfvARB(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetVertexAttribfvARB", (void*)glGetVertexAttribfvARB, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribfvARB(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribfvARB", (void*)glGetVertexAttribfvARB, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBFVARBPROC glad_debug_glGetVertexAttribfvARB = glad_debug_impl_glGetVertexAttribfvARB;
PFNGLGETVERTEXATTRIBIVARBPROC glad_glGetVertexAttribivARB;
void APIENTRY glad_debug_impl_glGetVertexAttribivARB(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVertexAttribivARB", (void*)glGetVertexAttribivARB, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribivARB(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribivARB", (void*)glGetVertexAttribivARB, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBIVARBPROC glad_debug_glGetVertexAttribivARB = glad_debug_impl_glGetVertexAttribivARB;
PFNGLGETVERTEXATTRIBPOINTERVARBPROC glad_glGetVertexAttribPointervARB;
void APIENTRY glad_debug_impl_glGetVertexAttribPointervARB(GLuint arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetVertexAttribPointervARB", (void*)glGetVertexAttribPointervARB, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribPointervARB(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribPointervARB", (void*)glGetVertexAttribPointervARB, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBPOINTERVARBPROC glad_debug_glGetVertexAttribPointervARB = glad_debug_impl_glGetVertexAttribPointervARB;
PFNGLISPROGRAMARBPROC glad_glIsProgramARB;
GLboolean APIENTRY glad_debug_impl_glIsProgramARB(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsProgramARB", (void*)glIsProgramARB, 1, arg0);
    ret =  glad_glIsProgramARB(arg0);
    _post_call_callback("glIsProgramARB", (void*)glIsProgramARB, 1, arg0);
    return ret;
}
PFNGLISPROGRAMARBPROC glad_debug_glIsProgramARB = glad_debug_impl_glIsProgramARB;
PFNGLVIEWPORTPOSITIONWSCALENVPROC glad_glViewportPositionWScaleNV;
void APIENTRY glad_debug_impl_glViewportPositionWScaleNV(GLuint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glViewportPositionWScaleNV", (void*)glViewportPositionWScaleNV, 3, arg0, arg1, arg2);
     glad_glViewportPositionWScaleNV(arg0, arg1, arg2);
    _post_call_callback("glViewportPositionWScaleNV", (void*)glViewportPositionWScaleNV, 3, arg0, arg1, arg2);

}
PFNGLVIEWPORTPOSITIONWSCALENVPROC glad_debug_glViewportPositionWScaleNV = glad_debug_impl_glViewportPositionWScaleNV;
PFNGLBINDBUFFERARBPROC glad_glBindBufferARB;
void APIENTRY glad_debug_impl_glBindBufferARB(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindBufferARB", (void*)glBindBufferARB, 2, arg0, arg1);
     glad_glBindBufferARB(arg0, arg1);
    _post_call_callback("glBindBufferARB", (void*)glBindBufferARB, 2, arg0, arg1);

}
PFNGLBINDBUFFERARBPROC glad_debug_glBindBufferARB = glad_debug_impl_glBindBufferARB;
PFNGLDELETEBUFFERSARBPROC glad_glDeleteBuffersARB;
void APIENTRY glad_debug_impl_glDeleteBuffersARB(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteBuffersARB", (void*)glDeleteBuffersARB, 2, arg0, arg1);
     glad_glDeleteBuffersARB(arg0, arg1);
    _post_call_callback("glDeleteBuffersARB", (void*)glDeleteBuffersARB, 2, arg0, arg1);

}
PFNGLDELETEBUFFERSARBPROC glad_debug_glDeleteBuffersARB = glad_debug_impl_glDeleteBuffersARB;
PFNGLGENBUFFERSARBPROC glad_glGenBuffersARB;
void APIENTRY glad_debug_impl_glGenBuffersARB(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenBuffersARB", (void*)glGenBuffersARB, 2, arg0, arg1);
     glad_glGenBuffersARB(arg0, arg1);
    _post_call_callback("glGenBuffersARB", (void*)glGenBuffersARB, 2, arg0, arg1);

}
PFNGLGENBUFFERSARBPROC glad_debug_glGenBuffersARB = glad_debug_impl_glGenBuffersARB;
PFNGLISBUFFERARBPROC glad_glIsBufferARB;
GLboolean APIENTRY glad_debug_impl_glIsBufferARB(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsBufferARB", (void*)glIsBufferARB, 1, arg0);
    ret =  glad_glIsBufferARB(arg0);
    _post_call_callback("glIsBufferARB", (void*)glIsBufferARB, 1, arg0);
    return ret;
}
PFNGLISBUFFERARBPROC glad_debug_glIsBufferARB = glad_debug_impl_glIsBufferARB;
PFNGLBUFFERDATAARBPROC glad_glBufferDataARB;
void APIENTRY glad_debug_impl_glBufferDataARB(GLenum arg0, GLsizeiptrARB arg1, const void* arg2, GLenum arg3) {
    _pre_call_callback("glBufferDataARB", (void*)glBufferDataARB, 4, arg0, arg1, arg2, arg3);
     glad_glBufferDataARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glBufferDataARB", (void*)glBufferDataARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLBUFFERDATAARBPROC glad_debug_glBufferDataARB = glad_debug_impl_glBufferDataARB;
PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB;
void APIENTRY glad_debug_impl_glBufferSubDataARB(GLenum arg0, GLintptrARB arg1, GLsizeiptrARB arg2, const void* arg3) {
    _pre_call_callback("glBufferSubDataARB", (void*)glBufferSubDataARB, 4, arg0, arg1, arg2, arg3);
     glad_glBufferSubDataARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glBufferSubDataARB", (void*)glBufferSubDataARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLBUFFERSUBDATAARBPROC glad_debug_glBufferSubDataARB = glad_debug_impl_glBufferSubDataARB;
PFNGLGETBUFFERSUBDATAARBPROC glad_glGetBufferSubDataARB;
void APIENTRY glad_debug_impl_glGetBufferSubDataARB(GLenum arg0, GLintptrARB arg1, GLsizeiptrARB arg2, void* arg3) {
    _pre_call_callback("glGetBufferSubDataARB", (void*)glGetBufferSubDataARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetBufferSubDataARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetBufferSubDataARB", (void*)glGetBufferSubDataARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETBUFFERSUBDATAARBPROC glad_debug_glGetBufferSubDataARB = glad_debug_impl_glGetBufferSubDataARB;
PFNGLMAPBUFFERARBPROC glad_glMapBufferARB;
void* APIENTRY glad_debug_impl_glMapBufferARB(GLenum arg0, GLenum arg1) {
    void* ret;
    _pre_call_callback("glMapBufferARB", (void*)glMapBufferARB, 2, arg0, arg1);
    ret =  glad_glMapBufferARB(arg0, arg1);
    _post_call_callback("glMapBufferARB", (void*)glMapBufferARB, 2, arg0, arg1);
    return ret;
}
PFNGLMAPBUFFERARBPROC glad_debug_glMapBufferARB = glad_debug_impl_glMapBufferARB;
PFNGLUNMAPBUFFERARBPROC glad_glUnmapBufferARB;
GLboolean APIENTRY glad_debug_impl_glUnmapBufferARB(GLenum arg0) {
    GLboolean ret;
    _pre_call_callback("glUnmapBufferARB", (void*)glUnmapBufferARB, 1, arg0);
    ret =  glad_glUnmapBufferARB(arg0);
    _post_call_callback("glUnmapBufferARB", (void*)glUnmapBufferARB, 1, arg0);
    return ret;
}
PFNGLUNMAPBUFFERARBPROC glad_debug_glUnmapBufferARB = glad_debug_impl_glUnmapBufferARB;
PFNGLGETBUFFERPARAMETERIVARBPROC glad_glGetBufferParameterivARB;
void APIENTRY glad_debug_impl_glGetBufferParameterivARB(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetBufferParameterivARB", (void*)glGetBufferParameterivARB, 3, arg0, arg1, arg2);
     glad_glGetBufferParameterivARB(arg0, arg1, arg2);
    _post_call_callback("glGetBufferParameterivARB", (void*)glGetBufferParameterivARB, 3, arg0, arg1, arg2);

}
PFNGLGETBUFFERPARAMETERIVARBPROC glad_debug_glGetBufferParameterivARB = glad_debug_impl_glGetBufferParameterivARB;
PFNGLGETBUFFERPOINTERVARBPROC glad_glGetBufferPointervARB;
void APIENTRY glad_debug_impl_glGetBufferPointervARB(GLenum arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetBufferPointervARB", (void*)glGetBufferPointervARB, 3, arg0, arg1, arg2);
     glad_glGetBufferPointervARB(arg0, arg1, arg2);
    _post_call_callback("glGetBufferPointervARB", (void*)glGetBufferPointervARB, 3, arg0, arg1, arg2);

}
PFNGLGETBUFFERPOINTERVARBPROC glad_debug_glGetBufferPointervARB = glad_debug_impl_glGetBufferPointervARB;
PFNGLFLUSHVERTEXARRAYRANGENVPROC glad_glFlushVertexArrayRangeNV;
void APIENTRY glad_debug_impl_glFlushVertexArrayRangeNV() {
    _pre_call_callback("glFlushVertexArrayRangeNV", (void*)glFlushVertexArrayRangeNV, 0);
     glad_glFlushVertexArrayRangeNV();
    _post_call_callback("glFlushVertexArrayRangeNV", (void*)glFlushVertexArrayRangeNV, 0);

}
PFNGLFLUSHVERTEXARRAYRANGENVPROC glad_debug_glFlushVertexArrayRangeNV = glad_debug_impl_glFlushVertexArrayRangeNV;
PFNGLVERTEXARRAYRANGENVPROC glad_glVertexArrayRangeNV;
void APIENTRY glad_debug_impl_glVertexArrayRangeNV(GLsizei arg0, const void* arg1) {
    _pre_call_callback("glVertexArrayRangeNV", (void*)glVertexArrayRangeNV, 2, arg0, arg1);
     glad_glVertexArrayRangeNV(arg0, arg1);
    _post_call_callback("glVertexArrayRangeNV", (void*)glVertexArrayRangeNV, 2, arg0, arg1);

}
PFNGLVERTEXARRAYRANGENVPROC glad_debug_glVertexArrayRangeNV = glad_debug_impl_glVertexArrayRangeNV;
PFNGLFRAGMENTCOLORMATERIALSGIXPROC glad_glFragmentColorMaterialSGIX;
void APIENTRY glad_debug_impl_glFragmentColorMaterialSGIX(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glFragmentColorMaterialSGIX", (void*)glFragmentColorMaterialSGIX, 2, arg0, arg1);
     glad_glFragmentColorMaterialSGIX(arg0, arg1);
    _post_call_callback("glFragmentColorMaterialSGIX", (void*)glFragmentColorMaterialSGIX, 2, arg0, arg1);

}
PFNGLFRAGMENTCOLORMATERIALSGIXPROC glad_debug_glFragmentColorMaterialSGIX = glad_debug_impl_glFragmentColorMaterialSGIX;
PFNGLFRAGMENTLIGHTFSGIXPROC glad_glFragmentLightfSGIX;
void APIENTRY glad_debug_impl_glFragmentLightfSGIX(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glFragmentLightfSGIX", (void*)glFragmentLightfSGIX, 3, arg0, arg1, arg2);
     glad_glFragmentLightfSGIX(arg0, arg1, arg2);
    _post_call_callback("glFragmentLightfSGIX", (void*)glFragmentLightfSGIX, 3, arg0, arg1, arg2);

}
PFNGLFRAGMENTLIGHTFSGIXPROC glad_debug_glFragmentLightfSGIX = glad_debug_impl_glFragmentLightfSGIX;
PFNGLFRAGMENTLIGHTFVSGIXPROC glad_glFragmentLightfvSGIX;
void APIENTRY glad_debug_impl_glFragmentLightfvSGIX(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glFragmentLightfvSGIX", (void*)glFragmentLightfvSGIX, 3, arg0, arg1, arg2);
     glad_glFragmentLightfvSGIX(arg0, arg1, arg2);
    _post_call_callback("glFragmentLightfvSGIX", (void*)glFragmentLightfvSGIX, 3, arg0, arg1, arg2);

}
PFNGLFRAGMENTLIGHTFVSGIXPROC glad_debug_glFragmentLightfvSGIX = glad_debug_impl_glFragmentLightfvSGIX;
PFNGLFRAGMENTLIGHTISGIXPROC glad_glFragmentLightiSGIX;
void APIENTRY glad_debug_impl_glFragmentLightiSGIX(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glFragmentLightiSGIX", (void*)glFragmentLightiSGIX, 3, arg0, arg1, arg2);
     glad_glFragmentLightiSGIX(arg0, arg1, arg2);
    _post_call_callback("glFragmentLightiSGIX", (void*)glFragmentLightiSGIX, 3, arg0, arg1, arg2);

}
PFNGLFRAGMENTLIGHTISGIXPROC glad_debug_glFragmentLightiSGIX = glad_debug_impl_glFragmentLightiSGIX;
PFNGLFRAGMENTLIGHTIVSGIXPROC glad_glFragmentLightivSGIX;
void APIENTRY glad_debug_impl_glFragmentLightivSGIX(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glFragmentLightivSGIX", (void*)glFragmentLightivSGIX, 3, arg0, arg1, arg2);
     glad_glFragmentLightivSGIX(arg0, arg1, arg2);
    _post_call_callback("glFragmentLightivSGIX", (void*)glFragmentLightivSGIX, 3, arg0, arg1, arg2);

}
PFNGLFRAGMENTLIGHTIVSGIXPROC glad_debug_glFragmentLightivSGIX = glad_debug_impl_glFragmentLightivSGIX;
PFNGLFRAGMENTLIGHTMODELFSGIXPROC glad_glFragmentLightModelfSGIX;
void APIENTRY glad_debug_impl_glFragmentLightModelfSGIX(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glFragmentLightModelfSGIX", (void*)glFragmentLightModelfSGIX, 2, arg0, arg1);
     glad_glFragmentLightModelfSGIX(arg0, arg1);
    _post_call_callback("glFragmentLightModelfSGIX", (void*)glFragmentLightModelfSGIX, 2, arg0, arg1);

}
PFNGLFRAGMENTLIGHTMODELFSGIXPROC glad_debug_glFragmentLightModelfSGIX = glad_debug_impl_glFragmentLightModelfSGIX;
PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glad_glFragmentLightModelfvSGIX;
void APIENTRY glad_debug_impl_glFragmentLightModelfvSGIX(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glFragmentLightModelfvSGIX", (void*)glFragmentLightModelfvSGIX, 2, arg0, arg1);
     glad_glFragmentLightModelfvSGIX(arg0, arg1);
    _post_call_callback("glFragmentLightModelfvSGIX", (void*)glFragmentLightModelfvSGIX, 2, arg0, arg1);

}
PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glad_debug_glFragmentLightModelfvSGIX = glad_debug_impl_glFragmentLightModelfvSGIX;
PFNGLFRAGMENTLIGHTMODELISGIXPROC glad_glFragmentLightModeliSGIX;
void APIENTRY glad_debug_impl_glFragmentLightModeliSGIX(GLenum arg0, GLint arg1) {
    _pre_call_callback("glFragmentLightModeliSGIX", (void*)glFragmentLightModeliSGIX, 2, arg0, arg1);
     glad_glFragmentLightModeliSGIX(arg0, arg1);
    _post_call_callback("glFragmentLightModeliSGIX", (void*)glFragmentLightModeliSGIX, 2, arg0, arg1);

}
PFNGLFRAGMENTLIGHTMODELISGIXPROC glad_debug_glFragmentLightModeliSGIX = glad_debug_impl_glFragmentLightModeliSGIX;
PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glad_glFragmentLightModelivSGIX;
void APIENTRY glad_debug_impl_glFragmentLightModelivSGIX(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glFragmentLightModelivSGIX", (void*)glFragmentLightModelivSGIX, 2, arg0, arg1);
     glad_glFragmentLightModelivSGIX(arg0, arg1);
    _post_call_callback("glFragmentLightModelivSGIX", (void*)glFragmentLightModelivSGIX, 2, arg0, arg1);

}
PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glad_debug_glFragmentLightModelivSGIX = glad_debug_impl_glFragmentLightModelivSGIX;
PFNGLFRAGMENTMATERIALFSGIXPROC glad_glFragmentMaterialfSGIX;
void APIENTRY glad_debug_impl_glFragmentMaterialfSGIX(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glFragmentMaterialfSGIX", (void*)glFragmentMaterialfSGIX, 3, arg0, arg1, arg2);
     glad_glFragmentMaterialfSGIX(arg0, arg1, arg2);
    _post_call_callback("glFragmentMaterialfSGIX", (void*)glFragmentMaterialfSGIX, 3, arg0, arg1, arg2);

}
PFNGLFRAGMENTMATERIALFSGIXPROC glad_debug_glFragmentMaterialfSGIX = glad_debug_impl_glFragmentMaterialfSGIX;
PFNGLFRAGMENTMATERIALFVSGIXPROC glad_glFragmentMaterialfvSGIX;
void APIENTRY glad_debug_impl_glFragmentMaterialfvSGIX(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glFragmentMaterialfvSGIX", (void*)glFragmentMaterialfvSGIX, 3, arg0, arg1, arg2);
     glad_glFragmentMaterialfvSGIX(arg0, arg1, arg2);
    _post_call_callback("glFragmentMaterialfvSGIX", (void*)glFragmentMaterialfvSGIX, 3, arg0, arg1, arg2);

}
PFNGLFRAGMENTMATERIALFVSGIXPROC glad_debug_glFragmentMaterialfvSGIX = glad_debug_impl_glFragmentMaterialfvSGIX;
PFNGLFRAGMENTMATERIALISGIXPROC glad_glFragmentMaterialiSGIX;
void APIENTRY glad_debug_impl_glFragmentMaterialiSGIX(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glFragmentMaterialiSGIX", (void*)glFragmentMaterialiSGIX, 3, arg0, arg1, arg2);
     glad_glFragmentMaterialiSGIX(arg0, arg1, arg2);
    _post_call_callback("glFragmentMaterialiSGIX", (void*)glFragmentMaterialiSGIX, 3, arg0, arg1, arg2);

}
PFNGLFRAGMENTMATERIALISGIXPROC glad_debug_glFragmentMaterialiSGIX = glad_debug_impl_glFragmentMaterialiSGIX;
PFNGLFRAGMENTMATERIALIVSGIXPROC glad_glFragmentMaterialivSGIX;
void APIENTRY glad_debug_impl_glFragmentMaterialivSGIX(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glFragmentMaterialivSGIX", (void*)glFragmentMaterialivSGIX, 3, arg0, arg1, arg2);
     glad_glFragmentMaterialivSGIX(arg0, arg1, arg2);
    _post_call_callback("glFragmentMaterialivSGIX", (void*)glFragmentMaterialivSGIX, 3, arg0, arg1, arg2);

}
PFNGLFRAGMENTMATERIALIVSGIXPROC glad_debug_glFragmentMaterialivSGIX = glad_debug_impl_glFragmentMaterialivSGIX;
PFNGLGETFRAGMENTLIGHTFVSGIXPROC glad_glGetFragmentLightfvSGIX;
void APIENTRY glad_debug_impl_glGetFragmentLightfvSGIX(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetFragmentLightfvSGIX", (void*)glGetFragmentLightfvSGIX, 3, arg0, arg1, arg2);
     glad_glGetFragmentLightfvSGIX(arg0, arg1, arg2);
    _post_call_callback("glGetFragmentLightfvSGIX", (void*)glGetFragmentLightfvSGIX, 3, arg0, arg1, arg2);

}
PFNGLGETFRAGMENTLIGHTFVSGIXPROC glad_debug_glGetFragmentLightfvSGIX = glad_debug_impl_glGetFragmentLightfvSGIX;
PFNGLGETFRAGMENTLIGHTIVSGIXPROC glad_glGetFragmentLightivSGIX;
void APIENTRY glad_debug_impl_glGetFragmentLightivSGIX(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetFragmentLightivSGIX", (void*)glGetFragmentLightivSGIX, 3, arg0, arg1, arg2);
     glad_glGetFragmentLightivSGIX(arg0, arg1, arg2);
    _post_call_callback("glGetFragmentLightivSGIX", (void*)glGetFragmentLightivSGIX, 3, arg0, arg1, arg2);

}
PFNGLGETFRAGMENTLIGHTIVSGIXPROC glad_debug_glGetFragmentLightivSGIX = glad_debug_impl_glGetFragmentLightivSGIX;
PFNGLGETFRAGMENTMATERIALFVSGIXPROC glad_glGetFragmentMaterialfvSGIX;
void APIENTRY glad_debug_impl_glGetFragmentMaterialfvSGIX(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetFragmentMaterialfvSGIX", (void*)glGetFragmentMaterialfvSGIX, 3, arg0, arg1, arg2);
     glad_glGetFragmentMaterialfvSGIX(arg0, arg1, arg2);
    _post_call_callback("glGetFragmentMaterialfvSGIX", (void*)glGetFragmentMaterialfvSGIX, 3, arg0, arg1, arg2);

}
PFNGLGETFRAGMENTMATERIALFVSGIXPROC glad_debug_glGetFragmentMaterialfvSGIX = glad_debug_impl_glGetFragmentMaterialfvSGIX;
PFNGLGETFRAGMENTMATERIALIVSGIXPROC glad_glGetFragmentMaterialivSGIX;
void APIENTRY glad_debug_impl_glGetFragmentMaterialivSGIX(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetFragmentMaterialivSGIX", (void*)glGetFragmentMaterialivSGIX, 3, arg0, arg1, arg2);
     glad_glGetFragmentMaterialivSGIX(arg0, arg1, arg2);
    _post_call_callback("glGetFragmentMaterialivSGIX", (void*)glGetFragmentMaterialivSGIX, 3, arg0, arg1, arg2);

}
PFNGLGETFRAGMENTMATERIALIVSGIXPROC glad_debug_glGetFragmentMaterialivSGIX = glad_debug_impl_glGetFragmentMaterialivSGIX;
PFNGLLIGHTENVISGIXPROC glad_glLightEnviSGIX;
void APIENTRY glad_debug_impl_glLightEnviSGIX(GLenum arg0, GLint arg1) {
    _pre_call_callback("glLightEnviSGIX", (void*)glLightEnviSGIX, 2, arg0, arg1);
     glad_glLightEnviSGIX(arg0, arg1);
    _post_call_callback("glLightEnviSGIX", (void*)glLightEnviSGIX, 2, arg0, arg1);

}
PFNGLLIGHTENVISGIXPROC glad_debug_glLightEnviSGIX = glad_debug_impl_glLightEnviSGIX;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glad_glRenderbufferStorageMultisampleCoverageNV;
void APIENTRY glad_debug_impl_glRenderbufferStorageMultisampleCoverageNV(GLenum arg0, GLsizei arg1, GLsizei arg2, GLenum arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_callback("glRenderbufferStorageMultisampleCoverageNV", (void*)glRenderbufferStorageMultisampleCoverageNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glRenderbufferStorageMultisampleCoverageNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glRenderbufferStorageMultisampleCoverageNV", (void*)glRenderbufferStorageMultisampleCoverageNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glad_debug_glRenderbufferStorageMultisampleCoverageNV = glad_debug_impl_glRenderbufferStorageMultisampleCoverageNV;
PFNGLGETQUERYOBJECTI64VEXTPROC glad_glGetQueryObjecti64vEXT;
void APIENTRY glad_debug_impl_glGetQueryObjecti64vEXT(GLuint arg0, GLenum arg1, GLint64* arg2) {
    _pre_call_callback("glGetQueryObjecti64vEXT", (void*)glGetQueryObjecti64vEXT, 3, arg0, arg1, arg2);
     glad_glGetQueryObjecti64vEXT(arg0, arg1, arg2);
    _post_call_callback("glGetQueryObjecti64vEXT", (void*)glGetQueryObjecti64vEXT, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYOBJECTI64VEXTPROC glad_debug_glGetQueryObjecti64vEXT = glad_debug_impl_glGetQueryObjecti64vEXT;
PFNGLGETQUERYOBJECTUI64VEXTPROC glad_glGetQueryObjectui64vEXT;
void APIENTRY glad_debug_impl_glGetQueryObjectui64vEXT(GLuint arg0, GLenum arg1, GLuint64* arg2) {
    _pre_call_callback("glGetQueryObjectui64vEXT", (void*)glGetQueryObjectui64vEXT, 3, arg0, arg1, arg2);
     glad_glGetQueryObjectui64vEXT(arg0, arg1, arg2);
    _post_call_callback("glGetQueryObjectui64vEXT", (void*)glGetQueryObjectui64vEXT, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYOBJECTUI64VEXTPROC glad_debug_glGetQueryObjectui64vEXT = glad_debug_impl_glGetQueryObjectui64vEXT;
PFNGLGETTEXTUREHANDLENVPROC glad_glGetTextureHandleNV;
GLuint64 APIENTRY glad_debug_impl_glGetTextureHandleNV(GLuint arg0) {
    GLuint64 ret;
    _pre_call_callback("glGetTextureHandleNV", (void*)glGetTextureHandleNV, 1, arg0);
    ret =  glad_glGetTextureHandleNV(arg0);
    _post_call_callback("glGetTextureHandleNV", (void*)glGetTextureHandleNV, 1, arg0);
    return ret;
}
PFNGLGETTEXTUREHANDLENVPROC glad_debug_glGetTextureHandleNV = glad_debug_impl_glGetTextureHandleNV;
PFNGLGETTEXTURESAMPLERHANDLENVPROC glad_glGetTextureSamplerHandleNV;
GLuint64 APIENTRY glad_debug_impl_glGetTextureSamplerHandleNV(GLuint arg0, GLuint arg1) {
    GLuint64 ret;
    _pre_call_callback("glGetTextureSamplerHandleNV", (void*)glGetTextureSamplerHandleNV, 2, arg0, arg1);
    ret =  glad_glGetTextureSamplerHandleNV(arg0, arg1);
    _post_call_callback("glGetTextureSamplerHandleNV", (void*)glGetTextureSamplerHandleNV, 2, arg0, arg1);
    return ret;
}
PFNGLGETTEXTURESAMPLERHANDLENVPROC glad_debug_glGetTextureSamplerHandleNV = glad_debug_impl_glGetTextureSamplerHandleNV;
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glad_glMakeTextureHandleResidentNV;
void APIENTRY glad_debug_impl_glMakeTextureHandleResidentNV(GLuint64 arg0) {
    _pre_call_callback("glMakeTextureHandleResidentNV", (void*)glMakeTextureHandleResidentNV, 1, arg0);
     glad_glMakeTextureHandleResidentNV(arg0);
    _post_call_callback("glMakeTextureHandleResidentNV", (void*)glMakeTextureHandleResidentNV, 1, arg0);

}
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glad_debug_glMakeTextureHandleResidentNV = glad_debug_impl_glMakeTextureHandleResidentNV;
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glad_glMakeTextureHandleNonResidentNV;
void APIENTRY glad_debug_impl_glMakeTextureHandleNonResidentNV(GLuint64 arg0) {
    _pre_call_callback("glMakeTextureHandleNonResidentNV", (void*)glMakeTextureHandleNonResidentNV, 1, arg0);
     glad_glMakeTextureHandleNonResidentNV(arg0);
    _post_call_callback("glMakeTextureHandleNonResidentNV", (void*)glMakeTextureHandleNonResidentNV, 1, arg0);

}
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glad_debug_glMakeTextureHandleNonResidentNV = glad_debug_impl_glMakeTextureHandleNonResidentNV;
PFNGLGETIMAGEHANDLENVPROC glad_glGetImageHandleNV;
GLuint64 APIENTRY glad_debug_impl_glGetImageHandleNV(GLuint arg0, GLint arg1, GLboolean arg2, GLint arg3, GLenum arg4) {
    GLuint64 ret;
    _pre_call_callback("glGetImageHandleNV", (void*)glGetImageHandleNV, 5, arg0, arg1, arg2, arg3, arg4);
    ret =  glad_glGetImageHandleNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetImageHandleNV", (void*)glGetImageHandleNV, 5, arg0, arg1, arg2, arg3, arg4);
    return ret;
}
PFNGLGETIMAGEHANDLENVPROC glad_debug_glGetImageHandleNV = glad_debug_impl_glGetImageHandleNV;
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glad_glMakeImageHandleResidentNV;
void APIENTRY glad_debug_impl_glMakeImageHandleResidentNV(GLuint64 arg0, GLenum arg1) {
    _pre_call_callback("glMakeImageHandleResidentNV", (void*)glMakeImageHandleResidentNV, 2, arg0, arg1);
     glad_glMakeImageHandleResidentNV(arg0, arg1);
    _post_call_callback("glMakeImageHandleResidentNV", (void*)glMakeImageHandleResidentNV, 2, arg0, arg1);

}
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glad_debug_glMakeImageHandleResidentNV = glad_debug_impl_glMakeImageHandleResidentNV;
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glad_glMakeImageHandleNonResidentNV;
void APIENTRY glad_debug_impl_glMakeImageHandleNonResidentNV(GLuint64 arg0) {
    _pre_call_callback("glMakeImageHandleNonResidentNV", (void*)glMakeImageHandleNonResidentNV, 1, arg0);
     glad_glMakeImageHandleNonResidentNV(arg0);
    _post_call_callback("glMakeImageHandleNonResidentNV", (void*)glMakeImageHandleNonResidentNV, 1, arg0);

}
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glad_debug_glMakeImageHandleNonResidentNV = glad_debug_impl_glMakeImageHandleNonResidentNV;
PFNGLUNIFORMHANDLEUI64NVPROC glad_glUniformHandleui64NV;
void APIENTRY glad_debug_impl_glUniformHandleui64NV(GLint arg0, GLuint64 arg1) {
    _pre_call_callback("glUniformHandleui64NV", (void*)glUniformHandleui64NV, 2, arg0, arg1);
     glad_glUniformHandleui64NV(arg0, arg1);
    _post_call_callback("glUniformHandleui64NV", (void*)glUniformHandleui64NV, 2, arg0, arg1);

}
PFNGLUNIFORMHANDLEUI64NVPROC glad_debug_glUniformHandleui64NV = glad_debug_impl_glUniformHandleui64NV;
PFNGLUNIFORMHANDLEUI64VNVPROC glad_glUniformHandleui64vNV;
void APIENTRY glad_debug_impl_glUniformHandleui64vNV(GLint arg0, GLsizei arg1, const GLuint64* arg2) {
    _pre_call_callback("glUniformHandleui64vNV", (void*)glUniformHandleui64vNV, 3, arg0, arg1, arg2);
     glad_glUniformHandleui64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniformHandleui64vNV", (void*)glUniformHandleui64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORMHANDLEUI64VNVPROC glad_debug_glUniformHandleui64vNV = glad_debug_impl_glUniformHandleui64vNV;
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glad_glProgramUniformHandleui64NV;
void APIENTRY glad_debug_impl_glProgramUniformHandleui64NV(GLuint arg0, GLint arg1, GLuint64 arg2) {
    _pre_call_callback("glProgramUniformHandleui64NV", (void*)glProgramUniformHandleui64NV, 3, arg0, arg1, arg2);
     glad_glProgramUniformHandleui64NV(arg0, arg1, arg2);
    _post_call_callback("glProgramUniformHandleui64NV", (void*)glProgramUniformHandleui64NV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glad_debug_glProgramUniformHandleui64NV = glad_debug_impl_glProgramUniformHandleui64NV;
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glad_glProgramUniformHandleui64vNV;
void APIENTRY glad_debug_impl_glProgramUniformHandleui64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64* arg3) {
    _pre_call_callback("glProgramUniformHandleui64vNV", (void*)glProgramUniformHandleui64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniformHandleui64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniformHandleui64vNV", (void*)glProgramUniformHandleui64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glad_debug_glProgramUniformHandleui64vNV = glad_debug_impl_glProgramUniformHandleui64vNV;
PFNGLISTEXTUREHANDLERESIDENTNVPROC glad_glIsTextureHandleResidentNV;
GLboolean APIENTRY glad_debug_impl_glIsTextureHandleResidentNV(GLuint64 arg0) {
    GLboolean ret;
    _pre_call_callback("glIsTextureHandleResidentNV", (void*)glIsTextureHandleResidentNV, 1, arg0);
    ret =  glad_glIsTextureHandleResidentNV(arg0);
    _post_call_callback("glIsTextureHandleResidentNV", (void*)glIsTextureHandleResidentNV, 1, arg0);
    return ret;
}
PFNGLISTEXTUREHANDLERESIDENTNVPROC glad_debug_glIsTextureHandleResidentNV = glad_debug_impl_glIsTextureHandleResidentNV;
PFNGLISIMAGEHANDLERESIDENTNVPROC glad_glIsImageHandleResidentNV;
GLboolean APIENTRY glad_debug_impl_glIsImageHandleResidentNV(GLuint64 arg0) {
    GLboolean ret;
    _pre_call_callback("glIsImageHandleResidentNV", (void*)glIsImageHandleResidentNV, 1, arg0);
    ret =  glad_glIsImageHandleResidentNV(arg0);
    _post_call_callback("glIsImageHandleResidentNV", (void*)glIsImageHandleResidentNV, 1, arg0);
    return ret;
}
PFNGLISIMAGEHANDLERESIDENTNVPROC glad_debug_glIsImageHandleResidentNV = glad_debug_impl_glIsImageHandleResidentNV;
PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl;
void APIENTRY glad_debug_impl_glDebugMessageControl(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, const GLuint* arg4, GLboolean arg5) {
    _pre_call_callback("glDebugMessageControl", (void*)glDebugMessageControl, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDebugMessageControl(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDebugMessageControl", (void*)glDebugMessageControl, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDEBUGMESSAGECONTROLPROC glad_debug_glDebugMessageControl = glad_debug_impl_glDebugMessageControl;
PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert;
void APIENTRY glad_debug_impl_glDebugMessageInsert(GLenum arg0, GLenum arg1, GLuint arg2, GLenum arg3, GLsizei arg4, const GLchar* arg5) {
    _pre_call_callback("glDebugMessageInsert", (void*)glDebugMessageInsert, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDebugMessageInsert(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDebugMessageInsert", (void*)glDebugMessageInsert, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDEBUGMESSAGEINSERTPROC glad_debug_glDebugMessageInsert = glad_debug_impl_glDebugMessageInsert;
PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback;
void APIENTRY glad_debug_impl_glDebugMessageCallback(GLDEBUGPROC arg0, const void* arg1) {
    _pre_call_callback("glDebugMessageCallback", (void*)glDebugMessageCallback, 2, arg0, arg1);
     glad_glDebugMessageCallback(arg0, arg1);
    _post_call_callback("glDebugMessageCallback", (void*)glDebugMessageCallback, 2, arg0, arg1);

}
PFNGLDEBUGMESSAGECALLBACKPROC glad_debug_glDebugMessageCallback = glad_debug_impl_glDebugMessageCallback;
PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog;
GLuint APIENTRY glad_debug_impl_glGetDebugMessageLog(GLuint arg0, GLsizei arg1, GLenum* arg2, GLenum* arg3, GLuint* arg4, GLenum* arg5, GLsizei* arg6, GLchar* arg7) {
    GLuint ret;
    _pre_call_callback("glGetDebugMessageLog", (void*)glGetDebugMessageLog, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    ret =  glad_glGetDebugMessageLog(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glGetDebugMessageLog", (void*)glGetDebugMessageLog, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    return ret;
}
PFNGLGETDEBUGMESSAGELOGPROC glad_debug_glGetDebugMessageLog = glad_debug_impl_glGetDebugMessageLog;
PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup;
void APIENTRY glad_debug_impl_glPushDebugGroup(GLenum arg0, GLuint arg1, GLsizei arg2, const GLchar* arg3) {
    _pre_call_callback("glPushDebugGroup", (void*)glPushDebugGroup, 4, arg0, arg1, arg2, arg3);
     glad_glPushDebugGroup(arg0, arg1, arg2, arg3);
    _post_call_callback("glPushDebugGroup", (void*)glPushDebugGroup, 4, arg0, arg1, arg2, arg3);

}
PFNGLPUSHDEBUGGROUPPROC glad_debug_glPushDebugGroup = glad_debug_impl_glPushDebugGroup;
PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup;
void APIENTRY glad_debug_impl_glPopDebugGroup() {
    _pre_call_callback("glPopDebugGroup", (void*)glPopDebugGroup, 0);
     glad_glPopDebugGroup();
    _post_call_callback("glPopDebugGroup", (void*)glPopDebugGroup, 0);

}
PFNGLPOPDEBUGGROUPPROC glad_debug_glPopDebugGroup = glad_debug_impl_glPopDebugGroup;
PFNGLOBJECTLABELPROC glad_glObjectLabel;
void APIENTRY glad_debug_impl_glObjectLabel(GLenum arg0, GLuint arg1, GLsizei arg2, const GLchar* arg3) {
    _pre_call_callback("glObjectLabel", (void*)glObjectLabel, 4, arg0, arg1, arg2, arg3);
     glad_glObjectLabel(arg0, arg1, arg2, arg3);
    _post_call_callback("glObjectLabel", (void*)glObjectLabel, 4, arg0, arg1, arg2, arg3);

}
PFNGLOBJECTLABELPROC glad_debug_glObjectLabel = glad_debug_impl_glObjectLabel;
PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel;
void APIENTRY glad_debug_impl_glGetObjectLabel(GLenum arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLchar* arg4) {
    _pre_call_callback("glGetObjectLabel", (void*)glGetObjectLabel, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetObjectLabel(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetObjectLabel", (void*)glGetObjectLabel, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETOBJECTLABELPROC glad_debug_glGetObjectLabel = glad_debug_impl_glGetObjectLabel;
PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel;
void APIENTRY glad_debug_impl_glObjectPtrLabel(const void* arg0, GLsizei arg1, const GLchar* arg2) {
    _pre_call_callback("glObjectPtrLabel", (void*)glObjectPtrLabel, 3, arg0, arg1, arg2);
     glad_glObjectPtrLabel(arg0, arg1, arg2);
    _post_call_callback("glObjectPtrLabel", (void*)glObjectPtrLabel, 3, arg0, arg1, arg2);

}
PFNGLOBJECTPTRLABELPROC glad_debug_glObjectPtrLabel = glad_debug_impl_glObjectPtrLabel;
PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel;
void APIENTRY glad_debug_impl_glGetObjectPtrLabel(const void* arg0, GLsizei arg1, GLsizei* arg2, GLchar* arg3) {
    _pre_call_callback("glGetObjectPtrLabel", (void*)glGetObjectPtrLabel, 4, arg0, arg1, arg2, arg3);
     glad_glGetObjectPtrLabel(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetObjectPtrLabel", (void*)glGetObjectPtrLabel, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETOBJECTPTRLABELPROC glad_debug_glGetObjectPtrLabel = glad_debug_impl_glGetObjectPtrLabel;
PFNGLGETPOINTERVPROC glad_glGetPointerv;
void APIENTRY glad_debug_impl_glGetPointerv(GLenum arg0, void** arg1) {
    _pre_call_callback("glGetPointerv", (void*)glGetPointerv, 2, arg0, arg1);
     glad_glGetPointerv(arg0, arg1);
    _post_call_callback("glGetPointerv", (void*)glGetPointerv, 2, arg0, arg1);

}
PFNGLGETPOINTERVPROC glad_debug_glGetPointerv = glad_debug_impl_glGetPointerv;
PFNGLDEBUGMESSAGECONTROLKHRPROC glad_glDebugMessageControlKHR;
void APIENTRY glad_debug_impl_glDebugMessageControlKHR(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, const GLuint* arg4, GLboolean arg5) {
    _pre_call_callback("glDebugMessageControlKHR", (void*)glDebugMessageControlKHR, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDebugMessageControlKHR(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDebugMessageControlKHR", (void*)glDebugMessageControlKHR, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDEBUGMESSAGECONTROLKHRPROC glad_debug_glDebugMessageControlKHR = glad_debug_impl_glDebugMessageControlKHR;
PFNGLDEBUGMESSAGEINSERTKHRPROC glad_glDebugMessageInsertKHR;
void APIENTRY glad_debug_impl_glDebugMessageInsertKHR(GLenum arg0, GLenum arg1, GLuint arg2, GLenum arg3, GLsizei arg4, const GLchar* arg5) {
    _pre_call_callback("glDebugMessageInsertKHR", (void*)glDebugMessageInsertKHR, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDebugMessageInsertKHR(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDebugMessageInsertKHR", (void*)glDebugMessageInsertKHR, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDEBUGMESSAGEINSERTKHRPROC glad_debug_glDebugMessageInsertKHR = glad_debug_impl_glDebugMessageInsertKHR;
PFNGLDEBUGMESSAGECALLBACKKHRPROC glad_glDebugMessageCallbackKHR;
void APIENTRY glad_debug_impl_glDebugMessageCallbackKHR(GLDEBUGPROCKHR arg0, const void* arg1) {
    _pre_call_callback("glDebugMessageCallbackKHR", (void*)glDebugMessageCallbackKHR, 2, arg0, arg1);
     glad_glDebugMessageCallbackKHR(arg0, arg1);
    _post_call_callback("glDebugMessageCallbackKHR", (void*)glDebugMessageCallbackKHR, 2, arg0, arg1);

}
PFNGLDEBUGMESSAGECALLBACKKHRPROC glad_debug_glDebugMessageCallbackKHR = glad_debug_impl_glDebugMessageCallbackKHR;
PFNGLGETDEBUGMESSAGELOGKHRPROC glad_glGetDebugMessageLogKHR;
GLuint APIENTRY glad_debug_impl_glGetDebugMessageLogKHR(GLuint arg0, GLsizei arg1, GLenum* arg2, GLenum* arg3, GLuint* arg4, GLenum* arg5, GLsizei* arg6, GLchar* arg7) {
    GLuint ret;
    _pre_call_callback("glGetDebugMessageLogKHR", (void*)glGetDebugMessageLogKHR, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    ret =  glad_glGetDebugMessageLogKHR(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glGetDebugMessageLogKHR", (void*)glGetDebugMessageLogKHR, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    return ret;
}
PFNGLGETDEBUGMESSAGELOGKHRPROC glad_debug_glGetDebugMessageLogKHR = glad_debug_impl_glGetDebugMessageLogKHR;
PFNGLPUSHDEBUGGROUPKHRPROC glad_glPushDebugGroupKHR;
void APIENTRY glad_debug_impl_glPushDebugGroupKHR(GLenum arg0, GLuint arg1, GLsizei arg2, const GLchar* arg3) {
    _pre_call_callback("glPushDebugGroupKHR", (void*)glPushDebugGroupKHR, 4, arg0, arg1, arg2, arg3);
     glad_glPushDebugGroupKHR(arg0, arg1, arg2, arg3);
    _post_call_callback("glPushDebugGroupKHR", (void*)glPushDebugGroupKHR, 4, arg0, arg1, arg2, arg3);

}
PFNGLPUSHDEBUGGROUPKHRPROC glad_debug_glPushDebugGroupKHR = glad_debug_impl_glPushDebugGroupKHR;
PFNGLPOPDEBUGGROUPKHRPROC glad_glPopDebugGroupKHR;
void APIENTRY glad_debug_impl_glPopDebugGroupKHR() {
    _pre_call_callback("glPopDebugGroupKHR", (void*)glPopDebugGroupKHR, 0);
     glad_glPopDebugGroupKHR();
    _post_call_callback("glPopDebugGroupKHR", (void*)glPopDebugGroupKHR, 0);

}
PFNGLPOPDEBUGGROUPKHRPROC glad_debug_glPopDebugGroupKHR = glad_debug_impl_glPopDebugGroupKHR;
PFNGLOBJECTLABELKHRPROC glad_glObjectLabelKHR;
void APIENTRY glad_debug_impl_glObjectLabelKHR(GLenum arg0, GLuint arg1, GLsizei arg2, const GLchar* arg3) {
    _pre_call_callback("glObjectLabelKHR", (void*)glObjectLabelKHR, 4, arg0, arg1, arg2, arg3);
     glad_glObjectLabelKHR(arg0, arg1, arg2, arg3);
    _post_call_callback("glObjectLabelKHR", (void*)glObjectLabelKHR, 4, arg0, arg1, arg2, arg3);

}
PFNGLOBJECTLABELKHRPROC glad_debug_glObjectLabelKHR = glad_debug_impl_glObjectLabelKHR;
PFNGLGETOBJECTLABELKHRPROC glad_glGetObjectLabelKHR;
void APIENTRY glad_debug_impl_glGetObjectLabelKHR(GLenum arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLchar* arg4) {
    _pre_call_callback("glGetObjectLabelKHR", (void*)glGetObjectLabelKHR, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetObjectLabelKHR(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetObjectLabelKHR", (void*)glGetObjectLabelKHR, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETOBJECTLABELKHRPROC glad_debug_glGetObjectLabelKHR = glad_debug_impl_glGetObjectLabelKHR;
PFNGLOBJECTPTRLABELKHRPROC glad_glObjectPtrLabelKHR;
void APIENTRY glad_debug_impl_glObjectPtrLabelKHR(const void* arg0, GLsizei arg1, const GLchar* arg2) {
    _pre_call_callback("glObjectPtrLabelKHR", (void*)glObjectPtrLabelKHR, 3, arg0, arg1, arg2);
     glad_glObjectPtrLabelKHR(arg0, arg1, arg2);
    _post_call_callback("glObjectPtrLabelKHR", (void*)glObjectPtrLabelKHR, 3, arg0, arg1, arg2);

}
PFNGLOBJECTPTRLABELKHRPROC glad_debug_glObjectPtrLabelKHR = glad_debug_impl_glObjectPtrLabelKHR;
PFNGLGETOBJECTPTRLABELKHRPROC glad_glGetObjectPtrLabelKHR;
void APIENTRY glad_debug_impl_glGetObjectPtrLabelKHR(const void* arg0, GLsizei arg1, GLsizei* arg2, GLchar* arg3) {
    _pre_call_callback("glGetObjectPtrLabelKHR", (void*)glGetObjectPtrLabelKHR, 4, arg0, arg1, arg2, arg3);
     glad_glGetObjectPtrLabelKHR(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetObjectPtrLabelKHR", (void*)glGetObjectPtrLabelKHR, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETOBJECTPTRLABELKHRPROC glad_debug_glGetObjectPtrLabelKHR = glad_debug_impl_glGetObjectPtrLabelKHR;
PFNGLGETPOINTERVKHRPROC glad_glGetPointervKHR;
void APIENTRY glad_debug_impl_glGetPointervKHR(GLenum arg0, void** arg1) {
    _pre_call_callback("glGetPointervKHR", (void*)glGetPointervKHR, 2, arg0, arg1);
     glad_glGetPointervKHR(arg0, arg1);
    _post_call_callback("glGetPointervKHR", (void*)glGetPointervKHR, 2, arg0, arg1);

}
PFNGLGETPOINTERVKHRPROC glad_debug_glGetPointervKHR = glad_debug_impl_glGetPointervKHR;
PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glad_glVertexAttribArrayObjectATI;
void APIENTRY glad_debug_impl_glVertexAttribArrayObjectATI(GLuint arg0, GLint arg1, GLenum arg2, GLboolean arg3, GLsizei arg4, GLuint arg5, GLuint arg6) {
    _pre_call_callback("glVertexAttribArrayObjectATI", (void*)glVertexAttribArrayObjectATI, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glVertexAttribArrayObjectATI(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glVertexAttribArrayObjectATI", (void*)glVertexAttribArrayObjectATI, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glad_debug_glVertexAttribArrayObjectATI = glad_debug_impl_glVertexAttribArrayObjectATI;
PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glad_glGetVertexAttribArrayObjectfvATI;
void APIENTRY glad_debug_impl_glGetVertexAttribArrayObjectfvATI(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetVertexAttribArrayObjectfvATI", (void*)glGetVertexAttribArrayObjectfvATI, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribArrayObjectfvATI(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribArrayObjectfvATI", (void*)glGetVertexAttribArrayObjectfvATI, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glad_debug_glGetVertexAttribArrayObjectfvATI = glad_debug_impl_glGetVertexAttribArrayObjectfvATI;
PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glad_glGetVertexAttribArrayObjectivATI;
void APIENTRY glad_debug_impl_glGetVertexAttribArrayObjectivATI(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVertexAttribArrayObjectivATI", (void*)glGetVertexAttribArrayObjectivATI, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribArrayObjectivATI(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribArrayObjectivATI", (void*)glGetVertexAttribArrayObjectivATI, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glad_debug_glGetVertexAttribArrayObjectivATI = glad_debug_impl_glGetVertexAttribArrayObjectivATI;
PFNGLUNIFORMBUFFEREXTPROC glad_glUniformBufferEXT;
void APIENTRY glad_debug_impl_glUniformBufferEXT(GLuint arg0, GLint arg1, GLuint arg2) {
    _pre_call_callback("glUniformBufferEXT", (void*)glUniformBufferEXT, 3, arg0, arg1, arg2);
     glad_glUniformBufferEXT(arg0, arg1, arg2);
    _post_call_callback("glUniformBufferEXT", (void*)glUniformBufferEXT, 3, arg0, arg1, arg2);

}
PFNGLUNIFORMBUFFEREXTPROC glad_debug_glUniformBufferEXT = glad_debug_impl_glUniformBufferEXT;
PFNGLGETUNIFORMBUFFERSIZEEXTPROC glad_glGetUniformBufferSizeEXT;
GLint APIENTRY glad_debug_impl_glGetUniformBufferSizeEXT(GLuint arg0, GLint arg1) {
    GLint ret;
    _pre_call_callback("glGetUniformBufferSizeEXT", (void*)glGetUniformBufferSizeEXT, 2, arg0, arg1);
    ret =  glad_glGetUniformBufferSizeEXT(arg0, arg1);
    _post_call_callback("glGetUniformBufferSizeEXT", (void*)glGetUniformBufferSizeEXT, 2, arg0, arg1);
    return ret;
}
PFNGLGETUNIFORMBUFFERSIZEEXTPROC glad_debug_glGetUniformBufferSizeEXT = glad_debug_impl_glGetUniformBufferSizeEXT;
PFNGLGETUNIFORMOFFSETEXTPROC glad_glGetUniformOffsetEXT;
GLintptr APIENTRY glad_debug_impl_glGetUniformOffsetEXT(GLuint arg0, GLint arg1) {
    GLintptr ret;
    _pre_call_callback("glGetUniformOffsetEXT", (void*)glGetUniformOffsetEXT, 2, arg0, arg1);
    ret =  glad_glGetUniformOffsetEXT(arg0, arg1);
    _post_call_callback("glGetUniformOffsetEXT", (void*)glGetUniformOffsetEXT, 2, arg0, arg1);
    return ret;
}
PFNGLGETUNIFORMOFFSETEXTPROC glad_debug_glGetUniformOffsetEXT = glad_debug_impl_glGetUniformOffsetEXT;
PFNGLBLENDBARRIERKHRPROC glad_glBlendBarrierKHR;
void APIENTRY glad_debug_impl_glBlendBarrierKHR() {
    _pre_call_callback("glBlendBarrierKHR", (void*)glBlendBarrierKHR, 0);
     glad_glBlendBarrierKHR();
    _post_call_callback("glBlendBarrierKHR", (void*)glBlendBarrierKHR, 0);

}
PFNGLBLENDBARRIERKHRPROC glad_debug_glBlendBarrierKHR = glad_debug_impl_glBlendBarrierKHR;
PFNGLELEMENTPOINTERATIPROC glad_glElementPointerATI;
void APIENTRY glad_debug_impl_glElementPointerATI(GLenum arg0, const void* arg1) {
    _pre_call_callback("glElementPointerATI", (void*)glElementPointerATI, 2, arg0, arg1);
     glad_glElementPointerATI(arg0, arg1);
    _post_call_callback("glElementPointerATI", (void*)glElementPointerATI, 2, arg0, arg1);

}
PFNGLELEMENTPOINTERATIPROC glad_debug_glElementPointerATI = glad_debug_impl_glElementPointerATI;
PFNGLDRAWELEMENTARRAYATIPROC glad_glDrawElementArrayATI;
void APIENTRY glad_debug_impl_glDrawElementArrayATI(GLenum arg0, GLsizei arg1) {
    _pre_call_callback("glDrawElementArrayATI", (void*)glDrawElementArrayATI, 2, arg0, arg1);
     glad_glDrawElementArrayATI(arg0, arg1);
    _post_call_callback("glDrawElementArrayATI", (void*)glDrawElementArrayATI, 2, arg0, arg1);

}
PFNGLDRAWELEMENTARRAYATIPROC glad_debug_glDrawElementArrayATI = glad_debug_impl_glDrawElementArrayATI;
PFNGLDRAWRANGEELEMENTARRAYATIPROC glad_glDrawRangeElementArrayATI;
void APIENTRY glad_debug_impl_glDrawRangeElementArrayATI(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3) {
    _pre_call_callback("glDrawRangeElementArrayATI", (void*)glDrawRangeElementArrayATI, 4, arg0, arg1, arg2, arg3);
     glad_glDrawRangeElementArrayATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glDrawRangeElementArrayATI", (void*)glDrawRangeElementArrayATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLDRAWRANGEELEMENTARRAYATIPROC glad_debug_glDrawRangeElementArrayATI = glad_debug_impl_glDrawRangeElementArrayATI;
PFNGLREFERENCEPLANESGIXPROC glad_glReferencePlaneSGIX;
void APIENTRY glad_debug_impl_glReferencePlaneSGIX(const GLdouble* arg0) {
    _pre_call_callback("glReferencePlaneSGIX", (void*)glReferencePlaneSGIX, 1, arg0);
     glad_glReferencePlaneSGIX(arg0);
    _post_call_callback("glReferencePlaneSGIX", (void*)glReferencePlaneSGIX, 1, arg0);

}
PFNGLREFERENCEPLANESGIXPROC glad_debug_glReferencePlaneSGIX = glad_debug_impl_glReferencePlaneSGIX;
PFNGLACTIVESTENCILFACEEXTPROC glad_glActiveStencilFaceEXT;
void APIENTRY glad_debug_impl_glActiveStencilFaceEXT(GLenum arg0) {
    _pre_call_callback("glActiveStencilFaceEXT", (void*)glActiveStencilFaceEXT, 1, arg0);
     glad_glActiveStencilFaceEXT(arg0);
    _post_call_callback("glActiveStencilFaceEXT", (void*)glActiveStencilFaceEXT, 1, arg0);

}
PFNGLACTIVESTENCILFACEEXTPROC glad_debug_glActiveStencilFaceEXT = glad_debug_impl_glActiveStencilFaceEXT;
PFNGLGETMULTISAMPLEFVNVPROC glad_glGetMultisamplefvNV;
void APIENTRY glad_debug_impl_glGetMultisamplefvNV(GLenum arg0, GLuint arg1, GLfloat* arg2) {
    _pre_call_callback("glGetMultisamplefvNV", (void*)glGetMultisamplefvNV, 3, arg0, arg1, arg2);
     glad_glGetMultisamplefvNV(arg0, arg1, arg2);
    _post_call_callback("glGetMultisamplefvNV", (void*)glGetMultisamplefvNV, 3, arg0, arg1, arg2);

}
PFNGLGETMULTISAMPLEFVNVPROC glad_debug_glGetMultisamplefvNV = glad_debug_impl_glGetMultisamplefvNV;
PFNGLSAMPLEMASKINDEXEDNVPROC glad_glSampleMaskIndexedNV;
void APIENTRY glad_debug_impl_glSampleMaskIndexedNV(GLuint arg0, GLbitfield arg1) {
    _pre_call_callback("glSampleMaskIndexedNV", (void*)glSampleMaskIndexedNV, 2, arg0, arg1);
     glad_glSampleMaskIndexedNV(arg0, arg1);
    _post_call_callback("glSampleMaskIndexedNV", (void*)glSampleMaskIndexedNV, 2, arg0, arg1);

}
PFNGLSAMPLEMASKINDEXEDNVPROC glad_debug_glSampleMaskIndexedNV = glad_debug_impl_glSampleMaskIndexedNV;
PFNGLTEXRENDERBUFFERNVPROC glad_glTexRenderbufferNV;
void APIENTRY glad_debug_impl_glTexRenderbufferNV(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glTexRenderbufferNV", (void*)glTexRenderbufferNV, 2, arg0, arg1);
     glad_glTexRenderbufferNV(arg0, arg1);
    _post_call_callback("glTexRenderbufferNV", (void*)glTexRenderbufferNV, 2, arg0, arg1);

}
PFNGLTEXRENDERBUFFERNVPROC glad_debug_glTexRenderbufferNV = glad_debug_impl_glTexRenderbufferNV;
PFNGLFLUSHSTATICDATAIBMPROC glad_glFlushStaticDataIBM;
void APIENTRY glad_debug_impl_glFlushStaticDataIBM(GLenum arg0) {
    _pre_call_callback("glFlushStaticDataIBM", (void*)glFlushStaticDataIBM, 1, arg0);
     glad_glFlushStaticDataIBM(arg0);
    _post_call_callback("glFlushStaticDataIBM", (void*)glFlushStaticDataIBM, 1, arg0);

}
PFNGLFLUSHSTATICDATAIBMPROC glad_debug_glFlushStaticDataIBM = glad_debug_impl_glFlushStaticDataIBM;
PFNGLTEXTURENORMALEXTPROC glad_glTextureNormalEXT;
void APIENTRY glad_debug_impl_glTextureNormalEXT(GLenum arg0) {
    _pre_call_callback("glTextureNormalEXT", (void*)glTextureNormalEXT, 1, arg0);
     glad_glTextureNormalEXT(arg0);
    _post_call_callback("glTextureNormalEXT", (void*)glTextureNormalEXT, 1, arg0);

}
PFNGLTEXTURENORMALEXTPROC glad_debug_glTextureNormalEXT = glad_debug_impl_glTextureNormalEXT;
PFNGLPOINTPARAMETERFEXTPROC glad_glPointParameterfEXT;
void APIENTRY glad_debug_impl_glPointParameterfEXT(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glPointParameterfEXT", (void*)glPointParameterfEXT, 2, arg0, arg1);
     glad_glPointParameterfEXT(arg0, arg1);
    _post_call_callback("glPointParameterfEXT", (void*)glPointParameterfEXT, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERFEXTPROC glad_debug_glPointParameterfEXT = glad_debug_impl_glPointParameterfEXT;
PFNGLPOINTPARAMETERFVEXTPROC glad_glPointParameterfvEXT;
void APIENTRY glad_debug_impl_glPointParameterfvEXT(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glPointParameterfvEXT", (void*)glPointParameterfvEXT, 2, arg0, arg1);
     glad_glPointParameterfvEXT(arg0, arg1);
    _post_call_callback("glPointParameterfvEXT", (void*)glPointParameterfvEXT, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERFVEXTPROC glad_debug_glPointParameterfvEXT = glad_debug_impl_glPointParameterfvEXT;
PFNGLHINTPGIPROC glad_glHintPGI;
void APIENTRY glad_debug_impl_glHintPGI(GLenum arg0, GLint arg1) {
    _pre_call_callback("glHintPGI", (void*)glHintPGI, 2, arg0, arg1);
     glad_glHintPGI(arg0, arg1);
    _post_call_callback("glHintPGI", (void*)glHintPGI, 2, arg0, arg1);

}
PFNGLHINTPGIPROC glad_debug_glHintPGI = glad_debug_impl_glHintPGI;
PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB;
void APIENTRY glad_debug_impl_glBindAttribLocationARB(GLhandleARB arg0, GLuint arg1, const GLcharARB* arg2) {
    _pre_call_callback("glBindAttribLocationARB", (void*)glBindAttribLocationARB, 3, arg0, arg1, arg2);
     glad_glBindAttribLocationARB(arg0, arg1, arg2);
    _post_call_callback("glBindAttribLocationARB", (void*)glBindAttribLocationARB, 3, arg0, arg1, arg2);

}
PFNGLBINDATTRIBLOCATIONARBPROC glad_debug_glBindAttribLocationARB = glad_debug_impl_glBindAttribLocationARB;
PFNGLGETACTIVEATTRIBARBPROC glad_glGetActiveAttribARB;
void APIENTRY glad_debug_impl_glGetActiveAttribARB(GLhandleARB arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLint* arg4, GLenum* arg5, GLcharARB* arg6) {
    _pre_call_callback("glGetActiveAttribARB", (void*)glGetActiveAttribARB, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetActiveAttribARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetActiveAttribARB", (void*)glGetActiveAttribARB, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETACTIVEATTRIBARBPROC glad_debug_glGetActiveAttribARB = glad_debug_impl_glGetActiveAttribARB;
PFNGLGETATTRIBLOCATIONARBPROC glad_glGetAttribLocationARB;
GLint APIENTRY glad_debug_impl_glGetAttribLocationARB(GLhandleARB arg0, const GLcharARB* arg1) {
    GLint ret;
    _pre_call_callback("glGetAttribLocationARB", (void*)glGetAttribLocationARB, 2, arg0, arg1);
    ret =  glad_glGetAttribLocationARB(arg0, arg1);
    _post_call_callback("glGetAttribLocationARB", (void*)glGetAttribLocationARB, 2, arg0, arg1);
    return ret;
}
PFNGLGETATTRIBLOCATIONARBPROC glad_debug_glGetAttribLocationARB = glad_debug_impl_glGetAttribLocationARB;
PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
void APIENTRY glad_debug_impl_glPatchParameteri(GLenum arg0, GLint arg1) {
    _pre_call_callback("glPatchParameteri", (void*)glPatchParameteri, 2, arg0, arg1);
     glad_glPatchParameteri(arg0, arg1);
    _post_call_callback("glPatchParameteri", (void*)glPatchParameteri, 2, arg0, arg1);

}
PFNGLPATCHPARAMETERIPROC glad_debug_glPatchParameteri = glad_debug_impl_glPatchParameteri;
PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
void APIENTRY glad_debug_impl_glPatchParameterfv(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glPatchParameterfv", (void*)glPatchParameterfv, 2, arg0, arg1);
     glad_glPatchParameterfv(arg0, arg1);
    _post_call_callback("glPatchParameterfv", (void*)glPatchParameterfv, 2, arg0, arg1);

}
PFNGLPATCHPARAMETERFVPROC glad_debug_glPatchParameterfv = glad_debug_impl_glPatchParameterfv;
PFNGLCOLORMASKINDEXEDEXTPROC glad_glColorMaskIndexedEXT;
void APIENTRY glad_debug_impl_glColorMaskIndexedEXT(GLuint arg0, GLboolean arg1, GLboolean arg2, GLboolean arg3, GLboolean arg4) {
    _pre_call_callback("glColorMaskIndexedEXT", (void*)glColorMaskIndexedEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glColorMaskIndexedEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glColorMaskIndexedEXT", (void*)glColorMaskIndexedEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOLORMASKINDEXEDEXTPROC glad_debug_glColorMaskIndexedEXT = glad_debug_impl_glColorMaskIndexedEXT;
PFNGLGETBOOLEANINDEXEDVEXTPROC glad_glGetBooleanIndexedvEXT;
void APIENTRY glad_debug_impl_glGetBooleanIndexedvEXT(GLenum arg0, GLuint arg1, GLboolean* arg2) {
    _pre_call_callback("glGetBooleanIndexedvEXT", (void*)glGetBooleanIndexedvEXT, 3, arg0, arg1, arg2);
     glad_glGetBooleanIndexedvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetBooleanIndexedvEXT", (void*)glGetBooleanIndexedvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETBOOLEANINDEXEDVEXTPROC glad_debug_glGetBooleanIndexedvEXT = glad_debug_impl_glGetBooleanIndexedvEXT;
PFNGLGETINTEGERINDEXEDVEXTPROC glad_glGetIntegerIndexedvEXT;
void APIENTRY glad_debug_impl_glGetIntegerIndexedvEXT(GLenum arg0, GLuint arg1, GLint* arg2) {
    _pre_call_callback("glGetIntegerIndexedvEXT", (void*)glGetIntegerIndexedvEXT, 3, arg0, arg1, arg2);
     glad_glGetIntegerIndexedvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetIntegerIndexedvEXT", (void*)glGetIntegerIndexedvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETINTEGERINDEXEDVEXTPROC glad_debug_glGetIntegerIndexedvEXT = glad_debug_impl_glGetIntegerIndexedvEXT;
PFNGLENABLEINDEXEDEXTPROC glad_glEnableIndexedEXT;
void APIENTRY glad_debug_impl_glEnableIndexedEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glEnableIndexedEXT", (void*)glEnableIndexedEXT, 2, arg0, arg1);
     glad_glEnableIndexedEXT(arg0, arg1);
    _post_call_callback("glEnableIndexedEXT", (void*)glEnableIndexedEXT, 2, arg0, arg1);

}
PFNGLENABLEINDEXEDEXTPROC glad_debug_glEnableIndexedEXT = glad_debug_impl_glEnableIndexedEXT;
PFNGLDISABLEINDEXEDEXTPROC glad_glDisableIndexedEXT;
void APIENTRY glad_debug_impl_glDisableIndexedEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glDisableIndexedEXT", (void*)glDisableIndexedEXT, 2, arg0, arg1);
     glad_glDisableIndexedEXT(arg0, arg1);
    _post_call_callback("glDisableIndexedEXT", (void*)glDisableIndexedEXT, 2, arg0, arg1);

}
PFNGLDISABLEINDEXEDEXTPROC glad_debug_glDisableIndexedEXT = glad_debug_impl_glDisableIndexedEXT;
PFNGLISENABLEDINDEXEDEXTPROC glad_glIsEnabledIndexedEXT;
GLboolean APIENTRY glad_debug_impl_glIsEnabledIndexedEXT(GLenum arg0, GLuint arg1) {
    GLboolean ret;
    _pre_call_callback("glIsEnabledIndexedEXT", (void*)glIsEnabledIndexedEXT, 2, arg0, arg1);
    ret =  glad_glIsEnabledIndexedEXT(arg0, arg1);
    _post_call_callback("glIsEnabledIndexedEXT", (void*)glIsEnabledIndexedEXT, 2, arg0, arg1);
    return ret;
}
PFNGLISENABLEDINDEXEDEXTPROC glad_debug_glIsEnabledIndexedEXT = glad_debug_impl_glIsEnabledIndexedEXT;
PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
void APIENTRY glad_debug_impl_glVertexAttribL1d(GLuint arg0, GLdouble arg1) {
    _pre_call_callback("glVertexAttribL1d", (void*)glVertexAttribL1d, 2, arg0, arg1);
     glad_glVertexAttribL1d(arg0, arg1);
    _post_call_callback("glVertexAttribL1d", (void*)glVertexAttribL1d, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1DPROC glad_debug_glVertexAttribL1d = glad_debug_impl_glVertexAttribL1d;
PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
void APIENTRY glad_debug_impl_glVertexAttribL2d(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glVertexAttribL2d", (void*)glVertexAttribL2d, 3, arg0, arg1, arg2);
     glad_glVertexAttribL2d(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribL2d", (void*)glVertexAttribL2d, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBL2DPROC glad_debug_glVertexAttribL2d = glad_debug_impl_glVertexAttribL2d;
PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
void APIENTRY glad_debug_impl_glVertexAttribL3d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glVertexAttribL3d", (void*)glVertexAttribL3d, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribL3d(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribL3d", (void*)glVertexAttribL3d, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBL3DPROC glad_debug_glVertexAttribL3d = glad_debug_impl_glVertexAttribL3d;
PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
void APIENTRY glad_debug_impl_glVertexAttribL4d(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glVertexAttribL4d", (void*)glVertexAttribL4d, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribL4d(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribL4d", (void*)glVertexAttribL4d, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBL4DPROC glad_debug_glVertexAttribL4d = glad_debug_impl_glVertexAttribL4d;
PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
void APIENTRY glad_debug_impl_glVertexAttribL1dv(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttribL1dv", (void*)glVertexAttribL1dv, 2, arg0, arg1);
     glad_glVertexAttribL1dv(arg0, arg1);
    _post_call_callback("glVertexAttribL1dv", (void*)glVertexAttribL1dv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1DVPROC glad_debug_glVertexAttribL1dv = glad_debug_impl_glVertexAttribL1dv;
PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
void APIENTRY glad_debug_impl_glVertexAttribL2dv(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttribL2dv", (void*)glVertexAttribL2dv, 2, arg0, arg1);
     glad_glVertexAttribL2dv(arg0, arg1);
    _post_call_callback("glVertexAttribL2dv", (void*)glVertexAttribL2dv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL2DVPROC glad_debug_glVertexAttribL2dv = glad_debug_impl_glVertexAttribL2dv;
PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
void APIENTRY glad_debug_impl_glVertexAttribL3dv(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttribL3dv", (void*)glVertexAttribL3dv, 2, arg0, arg1);
     glad_glVertexAttribL3dv(arg0, arg1);
    _post_call_callback("glVertexAttribL3dv", (void*)glVertexAttribL3dv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL3DVPROC glad_debug_glVertexAttribL3dv = glad_debug_impl_glVertexAttribL3dv;
PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
void APIENTRY glad_debug_impl_glVertexAttribL4dv(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttribL4dv", (void*)glVertexAttribL4dv, 2, arg0, arg1);
     glad_glVertexAttribL4dv(arg0, arg1);
    _post_call_callback("glVertexAttribL4dv", (void*)glVertexAttribL4dv, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL4DVPROC glad_debug_glVertexAttribL4dv = glad_debug_impl_glVertexAttribL4dv;
PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
void APIENTRY glad_debug_impl_glVertexAttribLPointer(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glVertexAttribLPointer", (void*)glVertexAttribLPointer, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribLPointer(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribLPointer", (void*)glVertexAttribLPointer, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBLPOINTERPROC glad_debug_glVertexAttribLPointer = glad_debug_impl_glVertexAttribLPointer;
PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
void APIENTRY glad_debug_impl_glGetVertexAttribLdv(GLuint arg0, GLenum arg1, GLdouble* arg2) {
    _pre_call_callback("glGetVertexAttribLdv", (void*)glGetVertexAttribLdv, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribLdv(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribLdv", (void*)glGetVertexAttribLdv, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBLDVPROC glad_debug_glGetVertexAttribLdv = glad_debug_impl_glGetVertexAttribLdv;
PFNGLRASTERSAMPLESEXTPROC glad_glRasterSamplesEXT;
void APIENTRY glad_debug_impl_glRasterSamplesEXT(GLuint arg0, GLboolean arg1) {
    _pre_call_callback("glRasterSamplesEXT", (void*)glRasterSamplesEXT, 2, arg0, arg1);
     glad_glRasterSamplesEXT(arg0, arg1);
    _post_call_callback("glRasterSamplesEXT", (void*)glRasterSamplesEXT, 2, arg0, arg1);

}
PFNGLRASTERSAMPLESEXTPROC glad_debug_glRasterSamplesEXT = glad_debug_impl_glRasterSamplesEXT;
PFNGLVERTEXATTRIBPARAMETERIAMDPROC glad_glVertexAttribParameteriAMD;
void APIENTRY glad_debug_impl_glVertexAttribParameteriAMD(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glVertexAttribParameteriAMD", (void*)glVertexAttribParameteriAMD, 3, arg0, arg1, arg2);
     glad_glVertexAttribParameteriAMD(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribParameteriAMD", (void*)glVertexAttribParameteriAMD, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBPARAMETERIAMDPROC glad_debug_glVertexAttribParameteriAMD = glad_debug_impl_glVertexAttribParameteriAMD;
PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D;
void APIENTRY glad_debug_impl_glTexStorage1D(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3) {
    _pre_call_callback("glTexStorage1D", (void*)glTexStorage1D, 4, arg0, arg1, arg2, arg3);
     glad_glTexStorage1D(arg0, arg1, arg2, arg3);
    _post_call_callback("glTexStorage1D", (void*)glTexStorage1D, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXSTORAGE1DPROC glad_debug_glTexStorage1D = glad_debug_impl_glTexStorage1D;
PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D;
void APIENTRY glad_debug_impl_glTexStorage2D(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glTexStorage2D", (void*)glTexStorage2D, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTexStorage2D(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTexStorage2D", (void*)glTexStorage2D, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTEXSTORAGE2DPROC glad_debug_glTexStorage2D = glad_debug_impl_glTexStorage2D;
PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D;
void APIENTRY glad_debug_impl_glTexStorage3D(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_callback("glTexStorage3D", (void*)glTexStorage3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glTexStorage3D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glTexStorage3D", (void*)glTexStorage3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLTEXSTORAGE3DPROC glad_debug_glTexStorage3D = glad_debug_impl_glTexStorage3D;
PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData;
void APIENTRY glad_debug_impl_glCopyImageSubData(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLuint arg6, GLenum arg7, GLint arg8, GLint arg9, GLint arg10, GLint arg11, GLsizei arg12, GLsizei arg13, GLsizei arg14) {
    _pre_call_callback("glCopyImageSubData", (void*)glCopyImageSubData, 15, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
     glad_glCopyImageSubData(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    _post_call_callback("glCopyImageSubData", (void*)glCopyImageSubData, 15, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);

}
PFNGLCOPYIMAGESUBDATAPROC glad_debug_glCopyImageSubData = glad_debug_impl_glCopyImageSubData;
PFNGLPIXELTEXGENPARAMETERISGISPROC glad_glPixelTexGenParameteriSGIS;
void APIENTRY glad_debug_impl_glPixelTexGenParameteriSGIS(GLenum arg0, GLint arg1) {
    _pre_call_callback("glPixelTexGenParameteriSGIS", (void*)glPixelTexGenParameteriSGIS, 2, arg0, arg1);
     glad_glPixelTexGenParameteriSGIS(arg0, arg1);
    _post_call_callback("glPixelTexGenParameteriSGIS", (void*)glPixelTexGenParameteriSGIS, 2, arg0, arg1);

}
PFNGLPIXELTEXGENPARAMETERISGISPROC glad_debug_glPixelTexGenParameteriSGIS = glad_debug_impl_glPixelTexGenParameteriSGIS;
PFNGLPIXELTEXGENPARAMETERIVSGISPROC glad_glPixelTexGenParameterivSGIS;
void APIENTRY glad_debug_impl_glPixelTexGenParameterivSGIS(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glPixelTexGenParameterivSGIS", (void*)glPixelTexGenParameterivSGIS, 2, arg0, arg1);
     glad_glPixelTexGenParameterivSGIS(arg0, arg1);
    _post_call_callback("glPixelTexGenParameterivSGIS", (void*)glPixelTexGenParameterivSGIS, 2, arg0, arg1);

}
PFNGLPIXELTEXGENPARAMETERIVSGISPROC glad_debug_glPixelTexGenParameterivSGIS = glad_debug_impl_glPixelTexGenParameterivSGIS;
PFNGLPIXELTEXGENPARAMETERFSGISPROC glad_glPixelTexGenParameterfSGIS;
void APIENTRY glad_debug_impl_glPixelTexGenParameterfSGIS(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glPixelTexGenParameterfSGIS", (void*)glPixelTexGenParameterfSGIS, 2, arg0, arg1);
     glad_glPixelTexGenParameterfSGIS(arg0, arg1);
    _post_call_callback("glPixelTexGenParameterfSGIS", (void*)glPixelTexGenParameterfSGIS, 2, arg0, arg1);

}
PFNGLPIXELTEXGENPARAMETERFSGISPROC glad_debug_glPixelTexGenParameterfSGIS = glad_debug_impl_glPixelTexGenParameterfSGIS;
PFNGLPIXELTEXGENPARAMETERFVSGISPROC glad_glPixelTexGenParameterfvSGIS;
void APIENTRY glad_debug_impl_glPixelTexGenParameterfvSGIS(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glPixelTexGenParameterfvSGIS", (void*)glPixelTexGenParameterfvSGIS, 2, arg0, arg1);
     glad_glPixelTexGenParameterfvSGIS(arg0, arg1);
    _post_call_callback("glPixelTexGenParameterfvSGIS", (void*)glPixelTexGenParameterfvSGIS, 2, arg0, arg1);

}
PFNGLPIXELTEXGENPARAMETERFVSGISPROC glad_debug_glPixelTexGenParameterfvSGIS = glad_debug_impl_glPixelTexGenParameterfvSGIS;
PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glad_glGetPixelTexGenParameterivSGIS;
void APIENTRY glad_debug_impl_glGetPixelTexGenParameterivSGIS(GLenum arg0, GLint* arg1) {
    _pre_call_callback("glGetPixelTexGenParameterivSGIS", (void*)glGetPixelTexGenParameterivSGIS, 2, arg0, arg1);
     glad_glGetPixelTexGenParameterivSGIS(arg0, arg1);
    _post_call_callback("glGetPixelTexGenParameterivSGIS", (void*)glGetPixelTexGenParameterivSGIS, 2, arg0, arg1);

}
PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glad_debug_glGetPixelTexGenParameterivSGIS = glad_debug_impl_glGetPixelTexGenParameterivSGIS;
PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glad_glGetPixelTexGenParameterfvSGIS;
void APIENTRY glad_debug_impl_glGetPixelTexGenParameterfvSGIS(GLenum arg0, GLfloat* arg1) {
    _pre_call_callback("glGetPixelTexGenParameterfvSGIS", (void*)glGetPixelTexGenParameterfvSGIS, 2, arg0, arg1);
     glad_glGetPixelTexGenParameterfvSGIS(arg0, arg1);
    _post_call_callback("glGetPixelTexGenParameterfvSGIS", (void*)glGetPixelTexGenParameterfvSGIS, 2, arg0, arg1);

}
PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glad_debug_glGetPixelTexGenParameterfvSGIS = glad_debug_impl_glGetPixelTexGenParameterfvSGIS;
PFNGLGETINSTRUMENTSSGIXPROC glad_glGetInstrumentsSGIX;
GLint APIENTRY glad_debug_impl_glGetInstrumentsSGIX() {
    GLint ret;
    _pre_call_callback("glGetInstrumentsSGIX", (void*)glGetInstrumentsSGIX, 0);
    ret =  glad_glGetInstrumentsSGIX();
    _post_call_callback("glGetInstrumentsSGIX", (void*)glGetInstrumentsSGIX, 0);
    return ret;
}
PFNGLGETINSTRUMENTSSGIXPROC glad_debug_glGetInstrumentsSGIX = glad_debug_impl_glGetInstrumentsSGIX;
PFNGLINSTRUMENTSBUFFERSGIXPROC glad_glInstrumentsBufferSGIX;
void APIENTRY glad_debug_impl_glInstrumentsBufferSGIX(GLsizei arg0, GLint* arg1) {
    _pre_call_callback("glInstrumentsBufferSGIX", (void*)glInstrumentsBufferSGIX, 2, arg0, arg1);
     glad_glInstrumentsBufferSGIX(arg0, arg1);
    _post_call_callback("glInstrumentsBufferSGIX", (void*)glInstrumentsBufferSGIX, 2, arg0, arg1);

}
PFNGLINSTRUMENTSBUFFERSGIXPROC glad_debug_glInstrumentsBufferSGIX = glad_debug_impl_glInstrumentsBufferSGIX;
PFNGLPOLLINSTRUMENTSSGIXPROC glad_glPollInstrumentsSGIX;
GLint APIENTRY glad_debug_impl_glPollInstrumentsSGIX(GLint* arg0) {
    GLint ret;
    _pre_call_callback("glPollInstrumentsSGIX", (void*)glPollInstrumentsSGIX, 1, arg0);
    ret =  glad_glPollInstrumentsSGIX(arg0);
    _post_call_callback("glPollInstrumentsSGIX", (void*)glPollInstrumentsSGIX, 1, arg0);
    return ret;
}
PFNGLPOLLINSTRUMENTSSGIXPROC glad_debug_glPollInstrumentsSGIX = glad_debug_impl_glPollInstrumentsSGIX;
PFNGLREADINSTRUMENTSSGIXPROC glad_glReadInstrumentsSGIX;
void APIENTRY glad_debug_impl_glReadInstrumentsSGIX(GLint arg0) {
    _pre_call_callback("glReadInstrumentsSGIX", (void*)glReadInstrumentsSGIX, 1, arg0);
     glad_glReadInstrumentsSGIX(arg0);
    _post_call_callback("glReadInstrumentsSGIX", (void*)glReadInstrumentsSGIX, 1, arg0);

}
PFNGLREADINSTRUMENTSSGIXPROC glad_debug_glReadInstrumentsSGIX = glad_debug_impl_glReadInstrumentsSGIX;
PFNGLSTARTINSTRUMENTSSGIXPROC glad_glStartInstrumentsSGIX;
void APIENTRY glad_debug_impl_glStartInstrumentsSGIX() {
    _pre_call_callback("glStartInstrumentsSGIX", (void*)glStartInstrumentsSGIX, 0);
     glad_glStartInstrumentsSGIX();
    _post_call_callback("glStartInstrumentsSGIX", (void*)glStartInstrumentsSGIX, 0);

}
PFNGLSTARTINSTRUMENTSSGIXPROC glad_debug_glStartInstrumentsSGIX = glad_debug_impl_glStartInstrumentsSGIX;
PFNGLSTOPINSTRUMENTSSGIXPROC glad_glStopInstrumentsSGIX;
void APIENTRY glad_debug_impl_glStopInstrumentsSGIX(GLint arg0) {
    _pre_call_callback("glStopInstrumentsSGIX", (void*)glStopInstrumentsSGIX, 1, arg0);
     glad_glStopInstrumentsSGIX(arg0);
    _post_call_callback("glStopInstrumentsSGIX", (void*)glStopInstrumentsSGIX, 1, arg0);

}
PFNGLSTOPINSTRUMENTSSGIXPROC glad_debug_glStopInstrumentsSGIX = glad_debug_impl_glStopInstrumentsSGIX;
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding;
void APIENTRY glad_debug_impl_glShaderStorageBlockBinding(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glShaderStorageBlockBinding", (void*)glShaderStorageBlockBinding, 3, arg0, arg1, arg2);
     glad_glShaderStorageBlockBinding(arg0, arg1, arg2);
    _post_call_callback("glShaderStorageBlockBinding", (void*)glShaderStorageBlockBinding, 3, arg0, arg1, arg2);

}
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_debug_glShaderStorageBlockBinding = glad_debug_impl_glShaderStorageBlockBinding;
PFNGLBLENDEQUATIONEXTPROC glad_glBlendEquationEXT;
void APIENTRY glad_debug_impl_glBlendEquationEXT(GLenum arg0) {
    _pre_call_callback("glBlendEquationEXT", (void*)glBlendEquationEXT, 1, arg0);
     glad_glBlendEquationEXT(arg0);
    _post_call_callback("glBlendEquationEXT", (void*)glBlendEquationEXT, 1, arg0);

}
PFNGLBLENDEQUATIONEXTPROC glad_debug_glBlendEquationEXT = glad_debug_impl_glBlendEquationEXT;
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance;
void APIENTRY glad_debug_impl_glDrawArraysInstancedBaseInstance(GLenum arg0, GLint arg1, GLsizei arg2, GLsizei arg3, GLuint arg4) {
    _pre_call_callback("glDrawArraysInstancedBaseInstance", (void*)glDrawArraysInstancedBaseInstance, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDrawArraysInstancedBaseInstance(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDrawArraysInstancedBaseInstance", (void*)glDrawArraysInstancedBaseInstance, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_debug_glDrawArraysInstancedBaseInstance = glad_debug_impl_glDrawArraysInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance;
void APIENTRY glad_debug_impl_glDrawElementsInstancedBaseInstance(GLenum arg0, GLsizei arg1, GLenum arg2, const void* arg3, GLsizei arg4, GLuint arg5) {
    _pre_call_callback("glDrawElementsInstancedBaseInstance", (void*)glDrawElementsInstancedBaseInstance, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDrawElementsInstancedBaseInstance(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDrawElementsInstancedBaseInstance", (void*)glDrawElementsInstancedBaseInstance, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_debug_glDrawElementsInstancedBaseInstance = glad_debug_impl_glDrawElementsInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance;
void APIENTRY glad_debug_impl_glDrawElementsInstancedBaseVertexBaseInstance(GLenum arg0, GLsizei arg1, GLenum arg2, const void* arg3, GLsizei arg4, GLint arg5, GLuint arg6) {
    _pre_call_callback("glDrawElementsInstancedBaseVertexBaseInstance", (void*)glDrawElementsInstancedBaseVertexBaseInstance, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glDrawElementsInstancedBaseVertexBaseInstance(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glDrawElementsInstancedBaseVertexBaseInstance", (void*)glDrawElementsInstancedBaseVertexBaseInstance, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_debug_glDrawElementsInstancedBaseVertexBaseInstance = glad_debug_impl_glDrawElementsInstancedBaseVertexBaseInstance;
PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion;
void APIENTRY glad_debug_impl_glMemoryBarrierByRegion(GLbitfield arg0) {
    _pre_call_callback("glMemoryBarrierByRegion", (void*)glMemoryBarrierByRegion, 1, arg0);
     glad_glMemoryBarrierByRegion(arg0);
    _post_call_callback("glMemoryBarrierByRegion", (void*)glMemoryBarrierByRegion, 1, arg0);

}
PFNGLMEMORYBARRIERBYREGIONPROC glad_debug_glMemoryBarrierByRegion = glad_debug_impl_glMemoryBarrierByRegion;
PFNGLTEXPARAMETERIIVEXTPROC glad_glTexParameterIivEXT;
void APIENTRY glad_debug_impl_glTexParameterIivEXT(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glTexParameterIivEXT", (void*)glTexParameterIivEXT, 3, arg0, arg1, arg2);
     glad_glTexParameterIivEXT(arg0, arg1, arg2);
    _post_call_callback("glTexParameterIivEXT", (void*)glTexParameterIivEXT, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERIIVEXTPROC glad_debug_glTexParameterIivEXT = glad_debug_impl_glTexParameterIivEXT;
PFNGLTEXPARAMETERIUIVEXTPROC glad_glTexParameterIuivEXT;
void APIENTRY glad_debug_impl_glTexParameterIuivEXT(GLenum arg0, GLenum arg1, const GLuint* arg2) {
    _pre_call_callback("glTexParameterIuivEXT", (void*)glTexParameterIuivEXT, 3, arg0, arg1, arg2);
     glad_glTexParameterIuivEXT(arg0, arg1, arg2);
    _post_call_callback("glTexParameterIuivEXT", (void*)glTexParameterIuivEXT, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERIUIVEXTPROC glad_debug_glTexParameterIuivEXT = glad_debug_impl_glTexParameterIuivEXT;
PFNGLGETTEXPARAMETERIIVEXTPROC glad_glGetTexParameterIivEXT;
void APIENTRY glad_debug_impl_glGetTexParameterIivEXT(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetTexParameterIivEXT", (void*)glGetTexParameterIivEXT, 3, arg0, arg1, arg2);
     glad_glGetTexParameterIivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetTexParameterIivEXT", (void*)glGetTexParameterIivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETTEXPARAMETERIIVEXTPROC glad_debug_glGetTexParameterIivEXT = glad_debug_impl_glGetTexParameterIivEXT;
PFNGLGETTEXPARAMETERIUIVEXTPROC glad_glGetTexParameterIuivEXT;
void APIENTRY glad_debug_impl_glGetTexParameterIuivEXT(GLenum arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetTexParameterIuivEXT", (void*)glGetTexParameterIuivEXT, 3, arg0, arg1, arg2);
     glad_glGetTexParameterIuivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetTexParameterIuivEXT", (void*)glGetTexParameterIuivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETTEXPARAMETERIUIVEXTPROC glad_debug_glGetTexParameterIuivEXT = glad_debug_impl_glGetTexParameterIuivEXT;
PFNGLCLEARCOLORIIEXTPROC glad_glClearColorIiEXT;
void APIENTRY glad_debug_impl_glClearColorIiEXT(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glClearColorIiEXT", (void*)glClearColorIiEXT, 4, arg0, arg1, arg2, arg3);
     glad_glClearColorIiEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glClearColorIiEXT", (void*)glClearColorIiEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLCLEARCOLORIIEXTPROC glad_debug_glClearColorIiEXT = glad_debug_impl_glClearColorIiEXT;
PFNGLCLEARCOLORIUIEXTPROC glad_glClearColorIuiEXT;
void APIENTRY glad_debug_impl_glClearColorIuiEXT(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_callback("glClearColorIuiEXT", (void*)glClearColorIuiEXT, 4, arg0, arg1, arg2, arg3);
     glad_glClearColorIuiEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glClearColorIuiEXT", (void*)glClearColorIuiEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLCLEARCOLORIUIEXTPROC glad_debug_glClearColorIuiEXT = glad_debug_impl_glClearColorIuiEXT;
PFNGLUNIFORM1I64NVPROC glad_glUniform1i64NV;
void APIENTRY glad_debug_impl_glUniform1i64NV(GLint arg0, GLint64EXT arg1) {
    _pre_call_callback("glUniform1i64NV", (void*)glUniform1i64NV, 2, arg0, arg1);
     glad_glUniform1i64NV(arg0, arg1);
    _post_call_callback("glUniform1i64NV", (void*)glUniform1i64NV, 2, arg0, arg1);

}
PFNGLUNIFORM1I64NVPROC glad_debug_glUniform1i64NV = glad_debug_impl_glUniform1i64NV;
PFNGLUNIFORM2I64NVPROC glad_glUniform2i64NV;
void APIENTRY glad_debug_impl_glUniform2i64NV(GLint arg0, GLint64EXT arg1, GLint64EXT arg2) {
    _pre_call_callback("glUniform2i64NV", (void*)glUniform2i64NV, 3, arg0, arg1, arg2);
     glad_glUniform2i64NV(arg0, arg1, arg2);
    _post_call_callback("glUniform2i64NV", (void*)glUniform2i64NV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2I64NVPROC glad_debug_glUniform2i64NV = glad_debug_impl_glUniform2i64NV;
PFNGLUNIFORM3I64NVPROC glad_glUniform3i64NV;
void APIENTRY glad_debug_impl_glUniform3i64NV(GLint arg0, GLint64EXT arg1, GLint64EXT arg2, GLint64EXT arg3) {
    _pre_call_callback("glUniform3i64NV", (void*)glUniform3i64NV, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3i64NV(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3i64NV", (void*)glUniform3i64NV, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3I64NVPROC glad_debug_glUniform3i64NV = glad_debug_impl_glUniform3i64NV;
PFNGLUNIFORM4I64NVPROC glad_glUniform4i64NV;
void APIENTRY glad_debug_impl_glUniform4i64NV(GLint arg0, GLint64EXT arg1, GLint64EXT arg2, GLint64EXT arg3, GLint64EXT arg4) {
    _pre_call_callback("glUniform4i64NV", (void*)glUniform4i64NV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4i64NV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4i64NV", (void*)glUniform4i64NV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4I64NVPROC glad_debug_glUniform4i64NV = glad_debug_impl_glUniform4i64NV;
PFNGLUNIFORM1I64VNVPROC glad_glUniform1i64vNV;
void APIENTRY glad_debug_impl_glUniform1i64vNV(GLint arg0, GLsizei arg1, const GLint64EXT* arg2) {
    _pre_call_callback("glUniform1i64vNV", (void*)glUniform1i64vNV, 3, arg0, arg1, arg2);
     glad_glUniform1i64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniform1i64vNV", (void*)glUniform1i64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1I64VNVPROC glad_debug_glUniform1i64vNV = glad_debug_impl_glUniform1i64vNV;
PFNGLUNIFORM2I64VNVPROC glad_glUniform2i64vNV;
void APIENTRY glad_debug_impl_glUniform2i64vNV(GLint arg0, GLsizei arg1, const GLint64EXT* arg2) {
    _pre_call_callback("glUniform2i64vNV", (void*)glUniform2i64vNV, 3, arg0, arg1, arg2);
     glad_glUniform2i64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniform2i64vNV", (void*)glUniform2i64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2I64VNVPROC glad_debug_glUniform2i64vNV = glad_debug_impl_glUniform2i64vNV;
PFNGLUNIFORM3I64VNVPROC glad_glUniform3i64vNV;
void APIENTRY glad_debug_impl_glUniform3i64vNV(GLint arg0, GLsizei arg1, const GLint64EXT* arg2) {
    _pre_call_callback("glUniform3i64vNV", (void*)glUniform3i64vNV, 3, arg0, arg1, arg2);
     glad_glUniform3i64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniform3i64vNV", (void*)glUniform3i64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3I64VNVPROC glad_debug_glUniform3i64vNV = glad_debug_impl_glUniform3i64vNV;
PFNGLUNIFORM4I64VNVPROC glad_glUniform4i64vNV;
void APIENTRY glad_debug_impl_glUniform4i64vNV(GLint arg0, GLsizei arg1, const GLint64EXT* arg2) {
    _pre_call_callback("glUniform4i64vNV", (void*)glUniform4i64vNV, 3, arg0, arg1, arg2);
     glad_glUniform4i64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniform4i64vNV", (void*)glUniform4i64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4I64VNVPROC glad_debug_glUniform4i64vNV = glad_debug_impl_glUniform4i64vNV;
PFNGLUNIFORM1UI64NVPROC glad_glUniform1ui64NV;
void APIENTRY glad_debug_impl_glUniform1ui64NV(GLint arg0, GLuint64EXT arg1) {
    _pre_call_callback("glUniform1ui64NV", (void*)glUniform1ui64NV, 2, arg0, arg1);
     glad_glUniform1ui64NV(arg0, arg1);
    _post_call_callback("glUniform1ui64NV", (void*)glUniform1ui64NV, 2, arg0, arg1);

}
PFNGLUNIFORM1UI64NVPROC glad_debug_glUniform1ui64NV = glad_debug_impl_glUniform1ui64NV;
PFNGLUNIFORM2UI64NVPROC glad_glUniform2ui64NV;
void APIENTRY glad_debug_impl_glUniform2ui64NV(GLint arg0, GLuint64EXT arg1, GLuint64EXT arg2) {
    _pre_call_callback("glUniform2ui64NV", (void*)glUniform2ui64NV, 3, arg0, arg1, arg2);
     glad_glUniform2ui64NV(arg0, arg1, arg2);
    _post_call_callback("glUniform2ui64NV", (void*)glUniform2ui64NV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2UI64NVPROC glad_debug_glUniform2ui64NV = glad_debug_impl_glUniform2ui64NV;
PFNGLUNIFORM3UI64NVPROC glad_glUniform3ui64NV;
void APIENTRY glad_debug_impl_glUniform3ui64NV(GLint arg0, GLuint64EXT arg1, GLuint64EXT arg2, GLuint64EXT arg3) {
    _pre_call_callback("glUniform3ui64NV", (void*)glUniform3ui64NV, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3ui64NV(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3ui64NV", (void*)glUniform3ui64NV, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3UI64NVPROC glad_debug_glUniform3ui64NV = glad_debug_impl_glUniform3ui64NV;
PFNGLUNIFORM4UI64NVPROC glad_glUniform4ui64NV;
void APIENTRY glad_debug_impl_glUniform4ui64NV(GLint arg0, GLuint64EXT arg1, GLuint64EXT arg2, GLuint64EXT arg3, GLuint64EXT arg4) {
    _pre_call_callback("glUniform4ui64NV", (void*)glUniform4ui64NV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4ui64NV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4ui64NV", (void*)glUniform4ui64NV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4UI64NVPROC glad_debug_glUniform4ui64NV = glad_debug_impl_glUniform4ui64NV;
PFNGLUNIFORM1UI64VNVPROC glad_glUniform1ui64vNV;
void APIENTRY glad_debug_impl_glUniform1ui64vNV(GLint arg0, GLsizei arg1, const GLuint64EXT* arg2) {
    _pre_call_callback("glUniform1ui64vNV", (void*)glUniform1ui64vNV, 3, arg0, arg1, arg2);
     glad_glUniform1ui64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniform1ui64vNV", (void*)glUniform1ui64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1UI64VNVPROC glad_debug_glUniform1ui64vNV = glad_debug_impl_glUniform1ui64vNV;
PFNGLUNIFORM2UI64VNVPROC glad_glUniform2ui64vNV;
void APIENTRY glad_debug_impl_glUniform2ui64vNV(GLint arg0, GLsizei arg1, const GLuint64EXT* arg2) {
    _pre_call_callback("glUniform2ui64vNV", (void*)glUniform2ui64vNV, 3, arg0, arg1, arg2);
     glad_glUniform2ui64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniform2ui64vNV", (void*)glUniform2ui64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2UI64VNVPROC glad_debug_glUniform2ui64vNV = glad_debug_impl_glUniform2ui64vNV;
PFNGLUNIFORM3UI64VNVPROC glad_glUniform3ui64vNV;
void APIENTRY glad_debug_impl_glUniform3ui64vNV(GLint arg0, GLsizei arg1, const GLuint64EXT* arg2) {
    _pre_call_callback("glUniform3ui64vNV", (void*)glUniform3ui64vNV, 3, arg0, arg1, arg2);
     glad_glUniform3ui64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniform3ui64vNV", (void*)glUniform3ui64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3UI64VNVPROC glad_debug_glUniform3ui64vNV = glad_debug_impl_glUniform3ui64vNV;
PFNGLUNIFORM4UI64VNVPROC glad_glUniform4ui64vNV;
void APIENTRY glad_debug_impl_glUniform4ui64vNV(GLint arg0, GLsizei arg1, const GLuint64EXT* arg2) {
    _pre_call_callback("glUniform4ui64vNV", (void*)glUniform4ui64vNV, 3, arg0, arg1, arg2);
     glad_glUniform4ui64vNV(arg0, arg1, arg2);
    _post_call_callback("glUniform4ui64vNV", (void*)glUniform4ui64vNV, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4UI64VNVPROC glad_debug_glUniform4ui64vNV = glad_debug_impl_glUniform4ui64vNV;
PFNGLGETUNIFORMI64VNVPROC glad_glGetUniformi64vNV;
void APIENTRY glad_debug_impl_glGetUniformi64vNV(GLuint arg0, GLint arg1, GLint64EXT* arg2) {
    _pre_call_callback("glGetUniformi64vNV", (void*)glGetUniformi64vNV, 3, arg0, arg1, arg2);
     glad_glGetUniformi64vNV(arg0, arg1, arg2);
    _post_call_callback("glGetUniformi64vNV", (void*)glGetUniformi64vNV, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMI64VNVPROC glad_debug_glGetUniformi64vNV = glad_debug_impl_glGetUniformi64vNV;
PFNGLPROGRAMUNIFORM1I64NVPROC glad_glProgramUniform1i64NV;
void APIENTRY glad_debug_impl_glProgramUniform1i64NV(GLuint arg0, GLint arg1, GLint64EXT arg2) {
    _pre_call_callback("glProgramUniform1i64NV", (void*)glProgramUniform1i64NV, 3, arg0, arg1, arg2);
     glad_glProgramUniform1i64NV(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1i64NV", (void*)glProgramUniform1i64NV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1I64NVPROC glad_debug_glProgramUniform1i64NV = glad_debug_impl_glProgramUniform1i64NV;
PFNGLPROGRAMUNIFORM2I64NVPROC glad_glProgramUniform2i64NV;
void APIENTRY glad_debug_impl_glProgramUniform2i64NV(GLuint arg0, GLint arg1, GLint64EXT arg2, GLint64EXT arg3) {
    _pre_call_callback("glProgramUniform2i64NV", (void*)glProgramUniform2i64NV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2i64NV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2i64NV", (void*)glProgramUniform2i64NV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2I64NVPROC glad_debug_glProgramUniform2i64NV = glad_debug_impl_glProgramUniform2i64NV;
PFNGLPROGRAMUNIFORM3I64NVPROC glad_glProgramUniform3i64NV;
void APIENTRY glad_debug_impl_glProgramUniform3i64NV(GLuint arg0, GLint arg1, GLint64EXT arg2, GLint64EXT arg3, GLint64EXT arg4) {
    _pre_call_callback("glProgramUniform3i64NV", (void*)glProgramUniform3i64NV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3i64NV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3i64NV", (void*)glProgramUniform3i64NV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3I64NVPROC glad_debug_glProgramUniform3i64NV = glad_debug_impl_glProgramUniform3i64NV;
PFNGLPROGRAMUNIFORM4I64NVPROC glad_glProgramUniform4i64NV;
void APIENTRY glad_debug_impl_glProgramUniform4i64NV(GLuint arg0, GLint arg1, GLint64EXT arg2, GLint64EXT arg3, GLint64EXT arg4, GLint64EXT arg5) {
    _pre_call_callback("glProgramUniform4i64NV", (void*)glProgramUniform4i64NV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4i64NV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4i64NV", (void*)glProgramUniform4i64NV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4I64NVPROC glad_debug_glProgramUniform4i64NV = glad_debug_impl_glProgramUniform4i64NV;
PFNGLPROGRAMUNIFORM1I64VNVPROC glad_glProgramUniform1i64vNV;
void APIENTRY glad_debug_impl_glProgramUniform1i64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLint64EXT* arg3) {
    _pre_call_callback("glProgramUniform1i64vNV", (void*)glProgramUniform1i64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1i64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1i64vNV", (void*)glProgramUniform1i64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1I64VNVPROC glad_debug_glProgramUniform1i64vNV = glad_debug_impl_glProgramUniform1i64vNV;
PFNGLPROGRAMUNIFORM2I64VNVPROC glad_glProgramUniform2i64vNV;
void APIENTRY glad_debug_impl_glProgramUniform2i64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLint64EXT* arg3) {
    _pre_call_callback("glProgramUniform2i64vNV", (void*)glProgramUniform2i64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2i64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2i64vNV", (void*)glProgramUniform2i64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2I64VNVPROC glad_debug_glProgramUniform2i64vNV = glad_debug_impl_glProgramUniform2i64vNV;
PFNGLPROGRAMUNIFORM3I64VNVPROC glad_glProgramUniform3i64vNV;
void APIENTRY glad_debug_impl_glProgramUniform3i64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLint64EXT* arg3) {
    _pre_call_callback("glProgramUniform3i64vNV", (void*)glProgramUniform3i64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3i64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3i64vNV", (void*)glProgramUniform3i64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3I64VNVPROC glad_debug_glProgramUniform3i64vNV = glad_debug_impl_glProgramUniform3i64vNV;
PFNGLPROGRAMUNIFORM4I64VNVPROC glad_glProgramUniform4i64vNV;
void APIENTRY glad_debug_impl_glProgramUniform4i64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLint64EXT* arg3) {
    _pre_call_callback("glProgramUniform4i64vNV", (void*)glProgramUniform4i64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4i64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4i64vNV", (void*)glProgramUniform4i64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4I64VNVPROC glad_debug_glProgramUniform4i64vNV = glad_debug_impl_glProgramUniform4i64vNV;
PFNGLPROGRAMUNIFORM1UI64NVPROC glad_glProgramUniform1ui64NV;
void APIENTRY glad_debug_impl_glProgramUniform1ui64NV(GLuint arg0, GLint arg1, GLuint64EXT arg2) {
    _pre_call_callback("glProgramUniform1ui64NV", (void*)glProgramUniform1ui64NV, 3, arg0, arg1, arg2);
     glad_glProgramUniform1ui64NV(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1ui64NV", (void*)glProgramUniform1ui64NV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1UI64NVPROC glad_debug_glProgramUniform1ui64NV = glad_debug_impl_glProgramUniform1ui64NV;
PFNGLPROGRAMUNIFORM2UI64NVPROC glad_glProgramUniform2ui64NV;
void APIENTRY glad_debug_impl_glProgramUniform2ui64NV(GLuint arg0, GLint arg1, GLuint64EXT arg2, GLuint64EXT arg3) {
    _pre_call_callback("glProgramUniform2ui64NV", (void*)glProgramUniform2ui64NV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2ui64NV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2ui64NV", (void*)glProgramUniform2ui64NV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2UI64NVPROC glad_debug_glProgramUniform2ui64NV = glad_debug_impl_glProgramUniform2ui64NV;
PFNGLPROGRAMUNIFORM3UI64NVPROC glad_glProgramUniform3ui64NV;
void APIENTRY glad_debug_impl_glProgramUniform3ui64NV(GLuint arg0, GLint arg1, GLuint64EXT arg2, GLuint64EXT arg3, GLuint64EXT arg4) {
    _pre_call_callback("glProgramUniform3ui64NV", (void*)glProgramUniform3ui64NV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3ui64NV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3ui64NV", (void*)glProgramUniform3ui64NV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3UI64NVPROC glad_debug_glProgramUniform3ui64NV = glad_debug_impl_glProgramUniform3ui64NV;
PFNGLPROGRAMUNIFORM4UI64NVPROC glad_glProgramUniform4ui64NV;
void APIENTRY glad_debug_impl_glProgramUniform4ui64NV(GLuint arg0, GLint arg1, GLuint64EXT arg2, GLuint64EXT arg3, GLuint64EXT arg4, GLuint64EXT arg5) {
    _pre_call_callback("glProgramUniform4ui64NV", (void*)glProgramUniform4ui64NV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4ui64NV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4ui64NV", (void*)glProgramUniform4ui64NV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4UI64NVPROC glad_debug_glProgramUniform4ui64NV = glad_debug_impl_glProgramUniform4ui64NV;
PFNGLPROGRAMUNIFORM1UI64VNVPROC glad_glProgramUniform1ui64vNV;
void APIENTRY glad_debug_impl_glProgramUniform1ui64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64EXT* arg3) {
    _pre_call_callback("glProgramUniform1ui64vNV", (void*)glProgramUniform1ui64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1ui64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1ui64vNV", (void*)glProgramUniform1ui64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1UI64VNVPROC glad_debug_glProgramUniform1ui64vNV = glad_debug_impl_glProgramUniform1ui64vNV;
PFNGLPROGRAMUNIFORM2UI64VNVPROC glad_glProgramUniform2ui64vNV;
void APIENTRY glad_debug_impl_glProgramUniform2ui64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64EXT* arg3) {
    _pre_call_callback("glProgramUniform2ui64vNV", (void*)glProgramUniform2ui64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2ui64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2ui64vNV", (void*)glProgramUniform2ui64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2UI64VNVPROC glad_debug_glProgramUniform2ui64vNV = glad_debug_impl_glProgramUniform2ui64vNV;
PFNGLPROGRAMUNIFORM3UI64VNVPROC glad_glProgramUniform3ui64vNV;
void APIENTRY glad_debug_impl_glProgramUniform3ui64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64EXT* arg3) {
    _pre_call_callback("glProgramUniform3ui64vNV", (void*)glProgramUniform3ui64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3ui64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3ui64vNV", (void*)glProgramUniform3ui64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3UI64VNVPROC glad_debug_glProgramUniform3ui64vNV = glad_debug_impl_glProgramUniform3ui64vNV;
PFNGLPROGRAMUNIFORM4UI64VNVPROC glad_glProgramUniform4ui64vNV;
void APIENTRY glad_debug_impl_glProgramUniform4ui64vNV(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64EXT* arg3) {
    _pre_call_callback("glProgramUniform4ui64vNV", (void*)glProgramUniform4ui64vNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4ui64vNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4ui64vNV", (void*)glProgramUniform4ui64vNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4UI64VNVPROC glad_debug_glProgramUniform4ui64vNV = glad_debug_impl_glProgramUniform4ui64vNV;
PFNGLTESSELLATIONFACTORAMDPROC glad_glTessellationFactorAMD;
void APIENTRY glad_debug_impl_glTessellationFactorAMD(GLfloat arg0) {
    _pre_call_callback("glTessellationFactorAMD", (void*)glTessellationFactorAMD, 1, arg0);
     glad_glTessellationFactorAMD(arg0);
    _post_call_callback("glTessellationFactorAMD", (void*)glTessellationFactorAMD, 1, arg0);

}
PFNGLTESSELLATIONFACTORAMDPROC glad_debug_glTessellationFactorAMD = glad_debug_impl_glTessellationFactorAMD;
PFNGLTESSELLATIONMODEAMDPROC glad_glTessellationModeAMD;
void APIENTRY glad_debug_impl_glTessellationModeAMD(GLenum arg0) {
    _pre_call_callback("glTessellationModeAMD", (void*)glTessellationModeAMD, 1, arg0);
     glad_glTessellationModeAMD(arg0);
    _post_call_callback("glTessellationModeAMD", (void*)glTessellationModeAMD, 1, arg0);

}
PFNGLTESSELLATIONMODEAMDPROC glad_debug_glTessellationModeAMD = glad_debug_impl_glTessellationModeAMD;
PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage;
void APIENTRY glad_debug_impl_glInvalidateTexSubImage(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7) {
    _pre_call_callback("glInvalidateTexSubImage", (void*)glInvalidateTexSubImage, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glInvalidateTexSubImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glInvalidateTexSubImage", (void*)glInvalidateTexSubImage, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLINVALIDATETEXSUBIMAGEPROC glad_debug_glInvalidateTexSubImage = glad_debug_impl_glInvalidateTexSubImage;
PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage;
void APIENTRY glad_debug_impl_glInvalidateTexImage(GLuint arg0, GLint arg1) {
    _pre_call_callback("glInvalidateTexImage", (void*)glInvalidateTexImage, 2, arg0, arg1);
     glad_glInvalidateTexImage(arg0, arg1);
    _post_call_callback("glInvalidateTexImage", (void*)glInvalidateTexImage, 2, arg0, arg1);

}
PFNGLINVALIDATETEXIMAGEPROC glad_debug_glInvalidateTexImage = glad_debug_impl_glInvalidateTexImage;
PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData;
void APIENTRY glad_debug_impl_glInvalidateBufferSubData(GLuint arg0, GLintptr arg1, GLsizeiptr arg2) {
    _pre_call_callback("glInvalidateBufferSubData", (void*)glInvalidateBufferSubData, 3, arg0, arg1, arg2);
     glad_glInvalidateBufferSubData(arg0, arg1, arg2);
    _post_call_callback("glInvalidateBufferSubData", (void*)glInvalidateBufferSubData, 3, arg0, arg1, arg2);

}
PFNGLINVALIDATEBUFFERSUBDATAPROC glad_debug_glInvalidateBufferSubData = glad_debug_impl_glInvalidateBufferSubData;
PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData;
void APIENTRY glad_debug_impl_glInvalidateBufferData(GLuint arg0) {
    _pre_call_callback("glInvalidateBufferData", (void*)glInvalidateBufferData, 1, arg0);
     glad_glInvalidateBufferData(arg0);
    _post_call_callback("glInvalidateBufferData", (void*)glInvalidateBufferData, 1, arg0);

}
PFNGLINVALIDATEBUFFERDATAPROC glad_debug_glInvalidateBufferData = glad_debug_impl_glInvalidateBufferData;
PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer;
void APIENTRY glad_debug_impl_glInvalidateFramebuffer(GLenum arg0, GLsizei arg1, const GLenum* arg2) {
    _pre_call_callback("glInvalidateFramebuffer", (void*)glInvalidateFramebuffer, 3, arg0, arg1, arg2);
     glad_glInvalidateFramebuffer(arg0, arg1, arg2);
    _post_call_callback("glInvalidateFramebuffer", (void*)glInvalidateFramebuffer, 3, arg0, arg1, arg2);

}
PFNGLINVALIDATEFRAMEBUFFERPROC glad_debug_glInvalidateFramebuffer = glad_debug_impl_glInvalidateFramebuffer;
PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer;
void APIENTRY glad_debug_impl_glInvalidateSubFramebuffer(GLenum arg0, GLsizei arg1, const GLenum* arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6) {
    _pre_call_callback("glInvalidateSubFramebuffer", (void*)glInvalidateSubFramebuffer, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glInvalidateSubFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glInvalidateSubFramebuffer", (void*)glInvalidateSubFramebuffer, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_debug_glInvalidateSubFramebuffer = glad_debug_impl_glInvalidateSubFramebuffer;
PFNGLINDEXMATERIALEXTPROC glad_glIndexMaterialEXT;
void APIENTRY glad_debug_impl_glIndexMaterialEXT(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glIndexMaterialEXT", (void*)glIndexMaterialEXT, 2, arg0, arg1);
     glad_glIndexMaterialEXT(arg0, arg1);
    _post_call_callback("glIndexMaterialEXT", (void*)glIndexMaterialEXT, 2, arg0, arg1);

}
PFNGLINDEXMATERIALEXTPROC glad_debug_glIndexMaterialEXT = glad_debug_impl_glIndexMaterialEXT;
PFNGLVERTEXPOINTERVINTELPROC glad_glVertexPointervINTEL;
void APIENTRY glad_debug_impl_glVertexPointervINTEL(GLint arg0, GLenum arg1, const void** arg2) {
    _pre_call_callback("glVertexPointervINTEL", (void*)glVertexPointervINTEL, 3, arg0, arg1, arg2);
     glad_glVertexPointervINTEL(arg0, arg1, arg2);
    _post_call_callback("glVertexPointervINTEL", (void*)glVertexPointervINTEL, 3, arg0, arg1, arg2);

}
PFNGLVERTEXPOINTERVINTELPROC glad_debug_glVertexPointervINTEL = glad_debug_impl_glVertexPointervINTEL;
PFNGLNORMALPOINTERVINTELPROC glad_glNormalPointervINTEL;
void APIENTRY glad_debug_impl_glNormalPointervINTEL(GLenum arg0, const void** arg1) {
    _pre_call_callback("glNormalPointervINTEL", (void*)glNormalPointervINTEL, 2, arg0, arg1);
     glad_glNormalPointervINTEL(arg0, arg1);
    _post_call_callback("glNormalPointervINTEL", (void*)glNormalPointervINTEL, 2, arg0, arg1);

}
PFNGLNORMALPOINTERVINTELPROC glad_debug_glNormalPointervINTEL = glad_debug_impl_glNormalPointervINTEL;
PFNGLCOLORPOINTERVINTELPROC glad_glColorPointervINTEL;
void APIENTRY glad_debug_impl_glColorPointervINTEL(GLint arg0, GLenum arg1, const void** arg2) {
    _pre_call_callback("glColorPointervINTEL", (void*)glColorPointervINTEL, 3, arg0, arg1, arg2);
     glad_glColorPointervINTEL(arg0, arg1, arg2);
    _post_call_callback("glColorPointervINTEL", (void*)glColorPointervINTEL, 3, arg0, arg1, arg2);

}
PFNGLCOLORPOINTERVINTELPROC glad_debug_glColorPointervINTEL = glad_debug_impl_glColorPointervINTEL;
PFNGLTEXCOORDPOINTERVINTELPROC glad_glTexCoordPointervINTEL;
void APIENTRY glad_debug_impl_glTexCoordPointervINTEL(GLint arg0, GLenum arg1, const void** arg2) {
    _pre_call_callback("glTexCoordPointervINTEL", (void*)glTexCoordPointervINTEL, 3, arg0, arg1, arg2);
     glad_glTexCoordPointervINTEL(arg0, arg1, arg2);
    _post_call_callback("glTexCoordPointervINTEL", (void*)glTexCoordPointervINTEL, 3, arg0, arg1, arg2);

}
PFNGLTEXCOORDPOINTERVINTELPROC glad_debug_glTexCoordPointervINTEL = glad_debug_impl_glTexCoordPointervINTEL;
PFNGLDRAWBUFFERSATIPROC glad_glDrawBuffersATI;
void APIENTRY glad_debug_impl_glDrawBuffersATI(GLsizei arg0, const GLenum* arg1) {
    _pre_call_callback("glDrawBuffersATI", (void*)glDrawBuffersATI, 2, arg0, arg1);
     glad_glDrawBuffersATI(arg0, arg1);
    _post_call_callback("glDrawBuffersATI", (void*)glDrawBuffersATI, 2, arg0, arg1);

}
PFNGLDRAWBUFFERSATIPROC glad_debug_glDrawBuffersATI = glad_debug_impl_glDrawBuffersATI;
PFNGLPIXELTEXGENSGIXPROC glad_glPixelTexGenSGIX;
void APIENTRY glad_debug_impl_glPixelTexGenSGIX(GLenum arg0) {
    _pre_call_callback("glPixelTexGenSGIX", (void*)glPixelTexGenSGIX, 1, arg0);
     glad_glPixelTexGenSGIX(arg0);
    _post_call_callback("glPixelTexGenSGIX", (void*)glPixelTexGenSGIX, 1, arg0);

}
PFNGLPIXELTEXGENSGIXPROC glad_debug_glPixelTexGenSGIX = glad_debug_impl_glPixelTexGenSGIX;
PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glad_glProgramBufferParametersfvNV;
void APIENTRY glad_debug_impl_glProgramBufferParametersfvNV(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramBufferParametersfvNV", (void*)glProgramBufferParametersfvNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramBufferParametersfvNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramBufferParametersfvNV", (void*)glProgramBufferParametersfvNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glad_debug_glProgramBufferParametersfvNV = glad_debug_impl_glProgramBufferParametersfvNV;
PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glad_glProgramBufferParametersIivNV;
void APIENTRY glad_debug_impl_glProgramBufferParametersIivNV(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, const GLint* arg4) {
    _pre_call_callback("glProgramBufferParametersIivNV", (void*)glProgramBufferParametersIivNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramBufferParametersIivNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramBufferParametersIivNV", (void*)glProgramBufferParametersIivNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glad_debug_glProgramBufferParametersIivNV = glad_debug_impl_glProgramBufferParametersIivNV;
PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glad_glProgramBufferParametersIuivNV;
void APIENTRY glad_debug_impl_glProgramBufferParametersIuivNV(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, const GLuint* arg4) {
    _pre_call_callback("glProgramBufferParametersIuivNV", (void*)glProgramBufferParametersIuivNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramBufferParametersIuivNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramBufferParametersIuivNV", (void*)glProgramBufferParametersIuivNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glad_debug_glProgramBufferParametersIuivNV = glad_debug_impl_glProgramBufferParametersIuivNV;
PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks;
void APIENTRY glad_debug_impl_glCreateTransformFeedbacks(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glCreateTransformFeedbacks", (void*)glCreateTransformFeedbacks, 2, arg0, arg1);
     glad_glCreateTransformFeedbacks(arg0, arg1);
    _post_call_callback("glCreateTransformFeedbacks", (void*)glCreateTransformFeedbacks, 2, arg0, arg1);

}
PFNGLCREATETRANSFORMFEEDBACKSPROC glad_debug_glCreateTransformFeedbacks = glad_debug_impl_glCreateTransformFeedbacks;
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase;
void APIENTRY glad_debug_impl_glTransformFeedbackBufferBase(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glTransformFeedbackBufferBase", (void*)glTransformFeedbackBufferBase, 3, arg0, arg1, arg2);
     glad_glTransformFeedbackBufferBase(arg0, arg1, arg2);
    _post_call_callback("glTransformFeedbackBufferBase", (void*)glTransformFeedbackBufferBase, 3, arg0, arg1, arg2);

}
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_debug_glTransformFeedbackBufferBase = glad_debug_impl_glTransformFeedbackBufferBase;
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange;
void APIENTRY glad_debug_impl_glTransformFeedbackBufferRange(GLuint arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_callback("glTransformFeedbackBufferRange", (void*)glTransformFeedbackBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTransformFeedbackBufferRange(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTransformFeedbackBufferRange", (void*)glTransformFeedbackBufferRange, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_debug_glTransformFeedbackBufferRange = glad_debug_impl_glTransformFeedbackBufferRange;
PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv;
void APIENTRY glad_debug_impl_glGetTransformFeedbackiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetTransformFeedbackiv", (void*)glGetTransformFeedbackiv, 3, arg0, arg1, arg2);
     glad_glGetTransformFeedbackiv(arg0, arg1, arg2);
    _post_call_callback("glGetTransformFeedbackiv", (void*)glGetTransformFeedbackiv, 3, arg0, arg1, arg2);

}
PFNGLGETTRANSFORMFEEDBACKIVPROC glad_debug_glGetTransformFeedbackiv = glad_debug_impl_glGetTransformFeedbackiv;
PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v;
void APIENTRY glad_debug_impl_glGetTransformFeedbacki_v(GLuint arg0, GLenum arg1, GLuint arg2, GLint* arg3) {
    _pre_call_callback("glGetTransformFeedbacki_v", (void*)glGetTransformFeedbacki_v, 4, arg0, arg1, arg2, arg3);
     glad_glGetTransformFeedbacki_v(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTransformFeedbacki_v", (void*)glGetTransformFeedbacki_v, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_debug_glGetTransformFeedbacki_v = glad_debug_impl_glGetTransformFeedbacki_v;
PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v;
void APIENTRY glad_debug_impl_glGetTransformFeedbacki64_v(GLuint arg0, GLenum arg1, GLuint arg2, GLint64* arg3) {
    _pre_call_callback("glGetTransformFeedbacki64_v", (void*)glGetTransformFeedbacki64_v, 4, arg0, arg1, arg2, arg3);
     glad_glGetTransformFeedbacki64_v(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTransformFeedbacki64_v", (void*)glGetTransformFeedbacki64_v, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_debug_glGetTransformFeedbacki64_v = glad_debug_impl_glGetTransformFeedbacki64_v;
PFNGLCREATEBUFFERSPROC glad_glCreateBuffers;
void APIENTRY glad_debug_impl_glCreateBuffers(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glCreateBuffers", (void*)glCreateBuffers, 2, arg0, arg1);
     glad_glCreateBuffers(arg0, arg1);
    _post_call_callback("glCreateBuffers", (void*)glCreateBuffers, 2, arg0, arg1);

}
PFNGLCREATEBUFFERSPROC glad_debug_glCreateBuffers = glad_debug_impl_glCreateBuffers;
PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage;
void APIENTRY glad_debug_impl_glNamedBufferStorage(GLuint arg0, GLsizeiptr arg1, const void* arg2, GLbitfield arg3) {
    _pre_call_callback("glNamedBufferStorage", (void*)glNamedBufferStorage, 4, arg0, arg1, arg2, arg3);
     glad_glNamedBufferStorage(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedBufferStorage", (void*)glNamedBufferStorage, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDBUFFERSTORAGEPROC glad_debug_glNamedBufferStorage = glad_debug_impl_glNamedBufferStorage;
PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData;
void APIENTRY glad_debug_impl_glNamedBufferData(GLuint arg0, GLsizeiptr arg1, const void* arg2, GLenum arg3) {
    _pre_call_callback("glNamedBufferData", (void*)glNamedBufferData, 4, arg0, arg1, arg2, arg3);
     glad_glNamedBufferData(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedBufferData", (void*)glNamedBufferData, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDBUFFERDATAPROC glad_debug_glNamedBufferData = glad_debug_impl_glNamedBufferData;
PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData;
void APIENTRY glad_debug_impl_glNamedBufferSubData(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, const void* arg3) {
    _pre_call_callback("glNamedBufferSubData", (void*)glNamedBufferSubData, 4, arg0, arg1, arg2, arg3);
     glad_glNamedBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedBufferSubData", (void*)glNamedBufferSubData, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDBUFFERSUBDATAPROC glad_debug_glNamedBufferSubData = glad_debug_impl_glNamedBufferSubData;
PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData;
void APIENTRY glad_debug_impl_glCopyNamedBufferSubData(GLuint arg0, GLuint arg1, GLintptr arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_callback("glCopyNamedBufferSubData", (void*)glCopyNamedBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glCopyNamedBufferSubData(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glCopyNamedBufferSubData", (void*)glCopyNamedBufferSubData, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_debug_glCopyNamedBufferSubData = glad_debug_impl_glCopyNamedBufferSubData;
PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData;
void APIENTRY glad_debug_impl_glClearNamedBufferData(GLuint arg0, GLenum arg1, GLenum arg2, GLenum arg3, const void* arg4) {
    _pre_call_callback("glClearNamedBufferData", (void*)glClearNamedBufferData, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glClearNamedBufferData(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glClearNamedBufferData", (void*)glClearNamedBufferData, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCLEARNAMEDBUFFERDATAPROC glad_debug_glClearNamedBufferData = glad_debug_impl_glClearNamedBufferData;
PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData;
void APIENTRY glad_debug_impl_glClearNamedBufferSubData(GLuint arg0, GLenum arg1, GLintptr arg2, GLsizeiptr arg3, GLenum arg4, GLenum arg5, const void* arg6) {
    _pre_call_callback("glClearNamedBufferSubData", (void*)glClearNamedBufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glClearNamedBufferSubData(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glClearNamedBufferSubData", (void*)glClearNamedBufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_debug_glClearNamedBufferSubData = glad_debug_impl_glClearNamedBufferSubData;
PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer;
void* APIENTRY glad_debug_impl_glMapNamedBuffer(GLuint arg0, GLenum arg1) {
    void* ret;
    _pre_call_callback("glMapNamedBuffer", (void*)glMapNamedBuffer, 2, arg0, arg1);
    ret =  glad_glMapNamedBuffer(arg0, arg1);
    _post_call_callback("glMapNamedBuffer", (void*)glMapNamedBuffer, 2, arg0, arg1);
    return ret;
}
PFNGLMAPNAMEDBUFFERPROC glad_debug_glMapNamedBuffer = glad_debug_impl_glMapNamedBuffer;
PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange;
void* APIENTRY glad_debug_impl_glMapNamedBufferRange(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, GLbitfield arg3) {
    void* ret;
    _pre_call_callback("glMapNamedBufferRange", (void*)glMapNamedBufferRange, 4, arg0, arg1, arg2, arg3);
    ret =  glad_glMapNamedBufferRange(arg0, arg1, arg2, arg3);
    _post_call_callback("glMapNamedBufferRange", (void*)glMapNamedBufferRange, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLMAPNAMEDBUFFERRANGEPROC glad_debug_glMapNamedBufferRange = glad_debug_impl_glMapNamedBufferRange;
PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer;
GLboolean APIENTRY glad_debug_impl_glUnmapNamedBuffer(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glUnmapNamedBuffer", (void*)glUnmapNamedBuffer, 1, arg0);
    ret =  glad_glUnmapNamedBuffer(arg0);
    _post_call_callback("glUnmapNamedBuffer", (void*)glUnmapNamedBuffer, 1, arg0);
    return ret;
}
PFNGLUNMAPNAMEDBUFFERPROC glad_debug_glUnmapNamedBuffer = glad_debug_impl_glUnmapNamedBuffer;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange;
void APIENTRY glad_debug_impl_glFlushMappedNamedBufferRange(GLuint arg0, GLintptr arg1, GLsizeiptr arg2) {
    _pre_call_callback("glFlushMappedNamedBufferRange", (void*)glFlushMappedNamedBufferRange, 3, arg0, arg1, arg2);
     glad_glFlushMappedNamedBufferRange(arg0, arg1, arg2);
    _post_call_callback("glFlushMappedNamedBufferRange", (void*)glFlushMappedNamedBufferRange, 3, arg0, arg1, arg2);

}
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_debug_glFlushMappedNamedBufferRange = glad_debug_impl_glFlushMappedNamedBufferRange;
PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv;
void APIENTRY glad_debug_impl_glGetNamedBufferParameteriv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetNamedBufferParameteriv", (void*)glGetNamedBufferParameteriv, 3, arg0, arg1, arg2);
     glad_glGetNamedBufferParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetNamedBufferParameteriv", (void*)glGetNamedBufferParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_debug_glGetNamedBufferParameteriv = glad_debug_impl_glGetNamedBufferParameteriv;
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v;
void APIENTRY glad_debug_impl_glGetNamedBufferParameteri64v(GLuint arg0, GLenum arg1, GLint64* arg2) {
    _pre_call_callback("glGetNamedBufferParameteri64v", (void*)glGetNamedBufferParameteri64v, 3, arg0, arg1, arg2);
     glad_glGetNamedBufferParameteri64v(arg0, arg1, arg2);
    _post_call_callback("glGetNamedBufferParameteri64v", (void*)glGetNamedBufferParameteri64v, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_debug_glGetNamedBufferParameteri64v = glad_debug_impl_glGetNamedBufferParameteri64v;
PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv;
void APIENTRY glad_debug_impl_glGetNamedBufferPointerv(GLuint arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetNamedBufferPointerv", (void*)glGetNamedBufferPointerv, 3, arg0, arg1, arg2);
     glad_glGetNamedBufferPointerv(arg0, arg1, arg2);
    _post_call_callback("glGetNamedBufferPointerv", (void*)glGetNamedBufferPointerv, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDBUFFERPOINTERVPROC glad_debug_glGetNamedBufferPointerv = glad_debug_impl_glGetNamedBufferPointerv;
PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData;
void APIENTRY glad_debug_impl_glGetNamedBufferSubData(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, void* arg3) {
    _pre_call_callback("glGetNamedBufferSubData", (void*)glGetNamedBufferSubData, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedBufferSubData(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedBufferSubData", (void*)glGetNamedBufferSubData, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDBUFFERSUBDATAPROC glad_debug_glGetNamedBufferSubData = glad_debug_impl_glGetNamedBufferSubData;
PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers;
void APIENTRY glad_debug_impl_glCreateFramebuffers(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glCreateFramebuffers", (void*)glCreateFramebuffers, 2, arg0, arg1);
     glad_glCreateFramebuffers(arg0, arg1);
    _post_call_callback("glCreateFramebuffers", (void*)glCreateFramebuffers, 2, arg0, arg1);

}
PFNGLCREATEFRAMEBUFFERSPROC glad_debug_glCreateFramebuffers = glad_debug_impl_glCreateFramebuffers;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer;
void APIENTRY glad_debug_impl_glNamedFramebufferRenderbuffer(GLuint arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    _pre_call_callback("glNamedFramebufferRenderbuffer", (void*)glNamedFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);
     glad_glNamedFramebufferRenderbuffer(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedFramebufferRenderbuffer", (void*)glNamedFramebufferRenderbuffer, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_debug_glNamedFramebufferRenderbuffer = glad_debug_impl_glNamedFramebufferRenderbuffer;
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri;
void APIENTRY glad_debug_impl_glNamedFramebufferParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glNamedFramebufferParameteri", (void*)glNamedFramebufferParameteri, 3, arg0, arg1, arg2);
     glad_glNamedFramebufferParameteri(arg0, arg1, arg2);
    _post_call_callback("glNamedFramebufferParameteri", (void*)glNamedFramebufferParameteri, 3, arg0, arg1, arg2);

}
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_debug_glNamedFramebufferParameteri = glad_debug_impl_glNamedFramebufferParameteri;
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture;
void APIENTRY glad_debug_impl_glNamedFramebufferTexture(GLuint arg0, GLenum arg1, GLuint arg2, GLint arg3) {
    _pre_call_callback("glNamedFramebufferTexture", (void*)glNamedFramebufferTexture, 4, arg0, arg1, arg2, arg3);
     glad_glNamedFramebufferTexture(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedFramebufferTexture", (void*)glNamedFramebufferTexture, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_debug_glNamedFramebufferTexture = glad_debug_impl_glNamedFramebufferTexture;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer;
void APIENTRY glad_debug_impl_glNamedFramebufferTextureLayer(GLuint arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glNamedFramebufferTextureLayer", (void*)glNamedFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedFramebufferTextureLayer(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedFramebufferTextureLayer", (void*)glNamedFramebufferTextureLayer, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_debug_glNamedFramebufferTextureLayer = glad_debug_impl_glNamedFramebufferTextureLayer;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer;
void APIENTRY glad_debug_impl_glNamedFramebufferDrawBuffer(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glNamedFramebufferDrawBuffer", (void*)glNamedFramebufferDrawBuffer, 2, arg0, arg1);
     glad_glNamedFramebufferDrawBuffer(arg0, arg1);
    _post_call_callback("glNamedFramebufferDrawBuffer", (void*)glNamedFramebufferDrawBuffer, 2, arg0, arg1);

}
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_debug_glNamedFramebufferDrawBuffer = glad_debug_impl_glNamedFramebufferDrawBuffer;
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers;
void APIENTRY glad_debug_impl_glNamedFramebufferDrawBuffers(GLuint arg0, GLsizei arg1, const GLenum* arg2) {
    _pre_call_callback("glNamedFramebufferDrawBuffers", (void*)glNamedFramebufferDrawBuffers, 3, arg0, arg1, arg2);
     glad_glNamedFramebufferDrawBuffers(arg0, arg1, arg2);
    _post_call_callback("glNamedFramebufferDrawBuffers", (void*)glNamedFramebufferDrawBuffers, 3, arg0, arg1, arg2);

}
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_debug_glNamedFramebufferDrawBuffers = glad_debug_impl_glNamedFramebufferDrawBuffers;
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer;
void APIENTRY glad_debug_impl_glNamedFramebufferReadBuffer(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glNamedFramebufferReadBuffer", (void*)glNamedFramebufferReadBuffer, 2, arg0, arg1);
     glad_glNamedFramebufferReadBuffer(arg0, arg1);
    _post_call_callback("glNamedFramebufferReadBuffer", (void*)glNamedFramebufferReadBuffer, 2, arg0, arg1);

}
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_debug_glNamedFramebufferReadBuffer = glad_debug_impl_glNamedFramebufferReadBuffer;
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData;
void APIENTRY glad_debug_impl_glInvalidateNamedFramebufferData(GLuint arg0, GLsizei arg1, const GLenum* arg2) {
    _pre_call_callback("glInvalidateNamedFramebufferData", (void*)glInvalidateNamedFramebufferData, 3, arg0, arg1, arg2);
     glad_glInvalidateNamedFramebufferData(arg0, arg1, arg2);
    _post_call_callback("glInvalidateNamedFramebufferData", (void*)glInvalidateNamedFramebufferData, 3, arg0, arg1, arg2);

}
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_debug_glInvalidateNamedFramebufferData = glad_debug_impl_glInvalidateNamedFramebufferData;
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData;
void APIENTRY glad_debug_impl_glInvalidateNamedFramebufferSubData(GLuint arg0, GLsizei arg1, const GLenum* arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6) {
    _pre_call_callback("glInvalidateNamedFramebufferSubData", (void*)glInvalidateNamedFramebufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glInvalidateNamedFramebufferSubData(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glInvalidateNamedFramebufferSubData", (void*)glInvalidateNamedFramebufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_debug_glInvalidateNamedFramebufferSubData = glad_debug_impl_glInvalidateNamedFramebufferSubData;
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv;
void APIENTRY glad_debug_impl_glClearNamedFramebufferiv(GLuint arg0, GLenum arg1, GLint arg2, const GLint* arg3) {
    _pre_call_callback("glClearNamedFramebufferiv", (void*)glClearNamedFramebufferiv, 4, arg0, arg1, arg2, arg3);
     glad_glClearNamedFramebufferiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glClearNamedFramebufferiv", (void*)glClearNamedFramebufferiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_debug_glClearNamedFramebufferiv = glad_debug_impl_glClearNamedFramebufferiv;
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv;
void APIENTRY glad_debug_impl_glClearNamedFramebufferuiv(GLuint arg0, GLenum arg1, GLint arg2, const GLuint* arg3) {
    _pre_call_callback("glClearNamedFramebufferuiv", (void*)glClearNamedFramebufferuiv, 4, arg0, arg1, arg2, arg3);
     glad_glClearNamedFramebufferuiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glClearNamedFramebufferuiv", (void*)glClearNamedFramebufferuiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_debug_glClearNamedFramebufferuiv = glad_debug_impl_glClearNamedFramebufferuiv;
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv;
void APIENTRY glad_debug_impl_glClearNamedFramebufferfv(GLuint arg0, GLenum arg1, GLint arg2, const GLfloat* arg3) {
    _pre_call_callback("glClearNamedFramebufferfv", (void*)glClearNamedFramebufferfv, 4, arg0, arg1, arg2, arg3);
     glad_glClearNamedFramebufferfv(arg0, arg1, arg2, arg3);
    _post_call_callback("glClearNamedFramebufferfv", (void*)glClearNamedFramebufferfv, 4, arg0, arg1, arg2, arg3);

}
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_debug_glClearNamedFramebufferfv = glad_debug_impl_glClearNamedFramebufferfv;
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi;
void APIENTRY glad_debug_impl_glClearNamedFramebufferfi(GLuint arg0, GLenum arg1, GLint arg2, GLfloat arg3, GLint arg4) {
    _pre_call_callback("glClearNamedFramebufferfi", (void*)glClearNamedFramebufferfi, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glClearNamedFramebufferfi(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glClearNamedFramebufferfi", (void*)glClearNamedFramebufferfi, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_debug_glClearNamedFramebufferfi = glad_debug_impl_glClearNamedFramebufferfi;
PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer;
void APIENTRY glad_debug_impl_glBlitNamedFramebuffer(GLuint arg0, GLuint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLint arg7, GLint arg8, GLint arg9, GLbitfield arg10, GLenum arg11) {
    _pre_call_callback("glBlitNamedFramebuffer", (void*)glBlitNamedFramebuffer, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
     glad_glBlitNamedFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_callback("glBlitNamedFramebuffer", (void*)glBlitNamedFramebuffer, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

}
PFNGLBLITNAMEDFRAMEBUFFERPROC glad_debug_glBlitNamedFramebuffer = glad_debug_impl_glBlitNamedFramebuffer;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus;
GLenum APIENTRY glad_debug_impl_glCheckNamedFramebufferStatus(GLuint arg0, GLenum arg1) {
    GLenum ret;
    _pre_call_callback("glCheckNamedFramebufferStatus", (void*)glCheckNamedFramebufferStatus, 2, arg0, arg1);
    ret =  glad_glCheckNamedFramebufferStatus(arg0, arg1);
    _post_call_callback("glCheckNamedFramebufferStatus", (void*)glCheckNamedFramebufferStatus, 2, arg0, arg1);
    return ret;
}
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_debug_glCheckNamedFramebufferStatus = glad_debug_impl_glCheckNamedFramebufferStatus;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv;
void APIENTRY glad_debug_impl_glGetNamedFramebufferParameteriv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetNamedFramebufferParameteriv", (void*)glGetNamedFramebufferParameteriv, 3, arg0, arg1, arg2);
     glad_glGetNamedFramebufferParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetNamedFramebufferParameteriv", (void*)glGetNamedFramebufferParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_debug_glGetNamedFramebufferParameteriv = glad_debug_impl_glGetNamedFramebufferParameteriv;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv;
void APIENTRY glad_debug_impl_glGetNamedFramebufferAttachmentParameteriv(GLuint arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetNamedFramebufferAttachmentParameteriv", (void*)glGetNamedFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedFramebufferAttachmentParameteriv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedFramebufferAttachmentParameteriv", (void*)glGetNamedFramebufferAttachmentParameteriv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_debug_glGetNamedFramebufferAttachmentParameteriv = glad_debug_impl_glGetNamedFramebufferAttachmentParameteriv;
PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers;
void APIENTRY glad_debug_impl_glCreateRenderbuffers(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glCreateRenderbuffers", (void*)glCreateRenderbuffers, 2, arg0, arg1);
     glad_glCreateRenderbuffers(arg0, arg1);
    _post_call_callback("glCreateRenderbuffers", (void*)glCreateRenderbuffers, 2, arg0, arg1);

}
PFNGLCREATERENDERBUFFERSPROC glad_debug_glCreateRenderbuffers = glad_debug_impl_glCreateRenderbuffers;
PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage;
void APIENTRY glad_debug_impl_glNamedRenderbufferStorage(GLuint arg0, GLenum arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glNamedRenderbufferStorage", (void*)glNamedRenderbufferStorage, 4, arg0, arg1, arg2, arg3);
     glad_glNamedRenderbufferStorage(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedRenderbufferStorage", (void*)glNamedRenderbufferStorage, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_debug_glNamedRenderbufferStorage = glad_debug_impl_glNamedRenderbufferStorage;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample;
void APIENTRY glad_debug_impl_glNamedRenderbufferStorageMultisample(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glNamedRenderbufferStorageMultisample", (void*)glNamedRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedRenderbufferStorageMultisample(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedRenderbufferStorageMultisample", (void*)glNamedRenderbufferStorageMultisample, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_debug_glNamedRenderbufferStorageMultisample = glad_debug_impl_glNamedRenderbufferStorageMultisample;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv;
void APIENTRY glad_debug_impl_glGetNamedRenderbufferParameteriv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetNamedRenderbufferParameteriv", (void*)glGetNamedRenderbufferParameteriv, 3, arg0, arg1, arg2);
     glad_glGetNamedRenderbufferParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetNamedRenderbufferParameteriv", (void*)glGetNamedRenderbufferParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_debug_glGetNamedRenderbufferParameteriv = glad_debug_impl_glGetNamedRenderbufferParameteriv;
PFNGLCREATETEXTURESPROC glad_glCreateTextures;
void APIENTRY glad_debug_impl_glCreateTextures(GLenum arg0, GLsizei arg1, GLuint* arg2) {
    _pre_call_callback("glCreateTextures", (void*)glCreateTextures, 3, arg0, arg1, arg2);
     glad_glCreateTextures(arg0, arg1, arg2);
    _post_call_callback("glCreateTextures", (void*)glCreateTextures, 3, arg0, arg1, arg2);

}
PFNGLCREATETEXTURESPROC glad_debug_glCreateTextures = glad_debug_impl_glCreateTextures;
PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer;
void APIENTRY glad_debug_impl_glTextureBuffer(GLuint arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glTextureBuffer", (void*)glTextureBuffer, 3, arg0, arg1, arg2);
     glad_glTextureBuffer(arg0, arg1, arg2);
    _post_call_callback("glTextureBuffer", (void*)glTextureBuffer, 3, arg0, arg1, arg2);

}
PFNGLTEXTUREBUFFERPROC glad_debug_glTextureBuffer = glad_debug_impl_glTextureBuffer;
PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange;
void APIENTRY glad_debug_impl_glTextureBufferRange(GLuint arg0, GLenum arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_callback("glTextureBufferRange", (void*)glTextureBufferRange, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTextureBufferRange(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTextureBufferRange", (void*)glTextureBufferRange, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTEXTUREBUFFERRANGEPROC glad_debug_glTextureBufferRange = glad_debug_impl_glTextureBufferRange;
PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D;
void APIENTRY glad_debug_impl_glTextureStorage1D(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3) {
    _pre_call_callback("glTextureStorage1D", (void*)glTextureStorage1D, 4, arg0, arg1, arg2, arg3);
     glad_glTextureStorage1D(arg0, arg1, arg2, arg3);
    _post_call_callback("glTextureStorage1D", (void*)glTextureStorage1D, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXTURESTORAGE1DPROC glad_debug_glTextureStorage1D = glad_debug_impl_glTextureStorage1D;
PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D;
void APIENTRY glad_debug_impl_glTextureStorage2D(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glTextureStorage2D", (void*)glTextureStorage2D, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTextureStorage2D(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTextureStorage2D", (void*)glTextureStorage2D, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTEXTURESTORAGE2DPROC glad_debug_glTextureStorage2D = glad_debug_impl_glTextureStorage2D;
PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D;
void APIENTRY glad_debug_impl_glTextureStorage3D(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_callback("glTextureStorage3D", (void*)glTextureStorage3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glTextureStorage3D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glTextureStorage3D", (void*)glTextureStorage3D, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLTEXTURESTORAGE3DPROC glad_debug_glTextureStorage3D = glad_debug_impl_glTextureStorage3D;
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample;
void APIENTRY glad_debug_impl_glTextureStorage2DMultisample(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLboolean arg5) {
    _pre_call_callback("glTextureStorage2DMultisample", (void*)glTextureStorage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glTextureStorage2DMultisample(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glTextureStorage2DMultisample", (void*)glTextureStorage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_debug_glTextureStorage2DMultisample = glad_debug_impl_glTextureStorage2DMultisample;
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample;
void APIENTRY glad_debug_impl_glTextureStorage3DMultisample(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_callback("glTextureStorage3DMultisample", (void*)glTextureStorage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTextureStorage3DMultisample(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTextureStorage3DMultisample", (void*)glTextureStorage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_debug_glTextureStorage3DMultisample = glad_debug_impl_glTextureStorage3DMultisample;
PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D;
void APIENTRY glad_debug_impl_glTextureSubImage1D(GLuint arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void* arg6) {
    _pre_call_callback("glTextureSubImage1D", (void*)glTextureSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTextureSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTextureSubImage1D", (void*)glTextureSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXTURESUBIMAGE1DPROC glad_debug_glTextureSubImage1D = glad_debug_impl_glTextureSubImage1D;
PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D;
void APIENTRY glad_debug_impl_glTextureSubImage2D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLenum arg7, const void* arg8) {
    _pre_call_callback("glTextureSubImage2D", (void*)glTextureSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glTextureSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glTextureSubImage2D", (void*)glTextureSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLTEXTURESUBIMAGE2DPROC glad_debug_glTextureSubImage2D = glad_debug_impl_glTextureSubImage2D;
PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D;
void APIENTRY glad_debug_impl_glTextureSubImage3D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, const void* arg10) {
    _pre_call_callback("glTextureSubImage3D", (void*)glTextureSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glTextureSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glTextureSubImage3D", (void*)glTextureSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLTEXTURESUBIMAGE3DPROC glad_debug_glTextureSubImage3D = glad_debug_impl_glTextureSubImage3D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D;
void APIENTRY glad_debug_impl_glCompressedTextureSubImage1D(GLuint arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLsizei arg5, const void* arg6) {
    _pre_call_callback("glCompressedTextureSubImage1D", (void*)glCompressedTextureSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCompressedTextureSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCompressedTextureSubImage1D", (void*)glCompressedTextureSubImage1D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_debug_glCompressedTextureSubImage1D = glad_debug_impl_glCompressedTextureSubImage1D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D;
void APIENTRY glad_debug_impl_glCompressedTextureSubImage2D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLsizei arg7, const void* arg8) {
    _pre_call_callback("glCompressedTextureSubImage2D", (void*)glCompressedTextureSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCompressedTextureSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCompressedTextureSubImage2D", (void*)glCompressedTextureSubImage2D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_debug_glCompressedTextureSubImage2D = glad_debug_impl_glCompressedTextureSubImage2D;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D;
void APIENTRY glad_debug_impl_glCompressedTextureSubImage3D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLsizei arg9, const void* arg10) {
    _pre_call_callback("glCompressedTextureSubImage3D", (void*)glCompressedTextureSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glCompressedTextureSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glCompressedTextureSubImage3D", (void*)glCompressedTextureSubImage3D, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_debug_glCompressedTextureSubImage3D = glad_debug_impl_glCompressedTextureSubImage3D;
PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D;
void APIENTRY glad_debug_impl_glCopyTextureSubImage1D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5) {
    _pre_call_callback("glCopyTextureSubImage1D", (void*)glCopyTextureSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glCopyTextureSubImage1D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glCopyTextureSubImage1D", (void*)glCopyTextureSubImage1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_debug_glCopyTextureSubImage1D = glad_debug_impl_glCopyTextureSubImage1D;
PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D;
void APIENTRY glad_debug_impl_glCopyTextureSubImage2D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7) {
    _pre_call_callback("glCopyTextureSubImage2D", (void*)glCopyTextureSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCopyTextureSubImage2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCopyTextureSubImage2D", (void*)glCopyTextureSubImage2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_debug_glCopyTextureSubImage2D = glad_debug_impl_glCopyTextureSubImage2D;
PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D;
void APIENTRY glad_debug_impl_glCopyTextureSubImage3D(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLsizei arg7, GLsizei arg8) {
    _pre_call_callback("glCopyTextureSubImage3D", (void*)glCopyTextureSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCopyTextureSubImage3D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCopyTextureSubImage3D", (void*)glCopyTextureSubImage3D, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_debug_glCopyTextureSubImage3D = glad_debug_impl_glCopyTextureSubImage3D;
PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf;
void APIENTRY glad_debug_impl_glTextureParameterf(GLuint arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glTextureParameterf", (void*)glTextureParameterf, 3, arg0, arg1, arg2);
     glad_glTextureParameterf(arg0, arg1, arg2);
    _post_call_callback("glTextureParameterf", (void*)glTextureParameterf, 3, arg0, arg1, arg2);

}
PFNGLTEXTUREPARAMETERFPROC glad_debug_glTextureParameterf = glad_debug_impl_glTextureParameterf;
PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv;
void APIENTRY glad_debug_impl_glTextureParameterfv(GLuint arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glTextureParameterfv", (void*)glTextureParameterfv, 3, arg0, arg1, arg2);
     glad_glTextureParameterfv(arg0, arg1, arg2);
    _post_call_callback("glTextureParameterfv", (void*)glTextureParameterfv, 3, arg0, arg1, arg2);

}
PFNGLTEXTUREPARAMETERFVPROC glad_debug_glTextureParameterfv = glad_debug_impl_glTextureParameterfv;
PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri;
void APIENTRY glad_debug_impl_glTextureParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glTextureParameteri", (void*)glTextureParameteri, 3, arg0, arg1, arg2);
     glad_glTextureParameteri(arg0, arg1, arg2);
    _post_call_callback("glTextureParameteri", (void*)glTextureParameteri, 3, arg0, arg1, arg2);

}
PFNGLTEXTUREPARAMETERIPROC glad_debug_glTextureParameteri = glad_debug_impl_glTextureParameteri;
PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv;
void APIENTRY glad_debug_impl_glTextureParameterIiv(GLuint arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glTextureParameterIiv", (void*)glTextureParameterIiv, 3, arg0, arg1, arg2);
     glad_glTextureParameterIiv(arg0, arg1, arg2);
    _post_call_callback("glTextureParameterIiv", (void*)glTextureParameterIiv, 3, arg0, arg1, arg2);

}
PFNGLTEXTUREPARAMETERIIVPROC glad_debug_glTextureParameterIiv = glad_debug_impl_glTextureParameterIiv;
PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv;
void APIENTRY glad_debug_impl_glTextureParameterIuiv(GLuint arg0, GLenum arg1, const GLuint* arg2) {
    _pre_call_callback("glTextureParameterIuiv", (void*)glTextureParameterIuiv, 3, arg0, arg1, arg2);
     glad_glTextureParameterIuiv(arg0, arg1, arg2);
    _post_call_callback("glTextureParameterIuiv", (void*)glTextureParameterIuiv, 3, arg0, arg1, arg2);

}
PFNGLTEXTUREPARAMETERIUIVPROC glad_debug_glTextureParameterIuiv = glad_debug_impl_glTextureParameterIuiv;
PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv;
void APIENTRY glad_debug_impl_glTextureParameteriv(GLuint arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glTextureParameteriv", (void*)glTextureParameteriv, 3, arg0, arg1, arg2);
     glad_glTextureParameteriv(arg0, arg1, arg2);
    _post_call_callback("glTextureParameteriv", (void*)glTextureParameteriv, 3, arg0, arg1, arg2);

}
PFNGLTEXTUREPARAMETERIVPROC glad_debug_glTextureParameteriv = glad_debug_impl_glTextureParameteriv;
PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap;
void APIENTRY glad_debug_impl_glGenerateTextureMipmap(GLuint arg0) {
    _pre_call_callback("glGenerateTextureMipmap", (void*)glGenerateTextureMipmap, 1, arg0);
     glad_glGenerateTextureMipmap(arg0);
    _post_call_callback("glGenerateTextureMipmap", (void*)glGenerateTextureMipmap, 1, arg0);

}
PFNGLGENERATETEXTUREMIPMAPPROC glad_debug_glGenerateTextureMipmap = glad_debug_impl_glGenerateTextureMipmap;
PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit;
void APIENTRY glad_debug_impl_glBindTextureUnit(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glBindTextureUnit", (void*)glBindTextureUnit, 2, arg0, arg1);
     glad_glBindTextureUnit(arg0, arg1);
    _post_call_callback("glBindTextureUnit", (void*)glBindTextureUnit, 2, arg0, arg1);

}
PFNGLBINDTEXTUREUNITPROC glad_debug_glBindTextureUnit = glad_debug_impl_glBindTextureUnit;
PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage;
void APIENTRY glad_debug_impl_glGetTextureImage(GLuint arg0, GLint arg1, GLenum arg2, GLenum arg3, GLsizei arg4, void* arg5) {
    _pre_call_callback("glGetTextureImage", (void*)glGetTextureImage, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetTextureImage(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetTextureImage", (void*)glGetTextureImage, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETTEXTUREIMAGEPROC glad_debug_glGetTextureImage = glad_debug_impl_glGetTextureImage;
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage;
void APIENTRY glad_debug_impl_glGetCompressedTextureImage(GLuint arg0, GLint arg1, GLsizei arg2, void* arg3) {
    _pre_call_callback("glGetCompressedTextureImage", (void*)glGetCompressedTextureImage, 4, arg0, arg1, arg2, arg3);
     glad_glGetCompressedTextureImage(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetCompressedTextureImage", (void*)glGetCompressedTextureImage, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_debug_glGetCompressedTextureImage = glad_debug_impl_glGetCompressedTextureImage;
PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv;
void APIENTRY glad_debug_impl_glGetTextureLevelParameterfv(GLuint arg0, GLint arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetTextureLevelParameterfv", (void*)glGetTextureLevelParameterfv, 4, arg0, arg1, arg2, arg3);
     glad_glGetTextureLevelParameterfv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTextureLevelParameterfv", (void*)glGetTextureLevelParameterfv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_debug_glGetTextureLevelParameterfv = glad_debug_impl_glGetTextureLevelParameterfv;
PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv;
void APIENTRY glad_debug_impl_glGetTextureLevelParameteriv(GLuint arg0, GLint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetTextureLevelParameteriv", (void*)glGetTextureLevelParameteriv, 4, arg0, arg1, arg2, arg3);
     glad_glGetTextureLevelParameteriv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTextureLevelParameteriv", (void*)glGetTextureLevelParameteriv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_debug_glGetTextureLevelParameteriv = glad_debug_impl_glGetTextureLevelParameteriv;
PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv;
void APIENTRY glad_debug_impl_glGetTextureParameterfv(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetTextureParameterfv", (void*)glGetTextureParameterfv, 3, arg0, arg1, arg2);
     glad_glGetTextureParameterfv(arg0, arg1, arg2);
    _post_call_callback("glGetTextureParameterfv", (void*)glGetTextureParameterfv, 3, arg0, arg1, arg2);

}
PFNGLGETTEXTUREPARAMETERFVPROC glad_debug_glGetTextureParameterfv = glad_debug_impl_glGetTextureParameterfv;
PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv;
void APIENTRY glad_debug_impl_glGetTextureParameterIiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetTextureParameterIiv", (void*)glGetTextureParameterIiv, 3, arg0, arg1, arg2);
     glad_glGetTextureParameterIiv(arg0, arg1, arg2);
    _post_call_callback("glGetTextureParameterIiv", (void*)glGetTextureParameterIiv, 3, arg0, arg1, arg2);

}
PFNGLGETTEXTUREPARAMETERIIVPROC glad_debug_glGetTextureParameterIiv = glad_debug_impl_glGetTextureParameterIiv;
PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv;
void APIENTRY glad_debug_impl_glGetTextureParameterIuiv(GLuint arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetTextureParameterIuiv", (void*)glGetTextureParameterIuiv, 3, arg0, arg1, arg2);
     glad_glGetTextureParameterIuiv(arg0, arg1, arg2);
    _post_call_callback("glGetTextureParameterIuiv", (void*)glGetTextureParameterIuiv, 3, arg0, arg1, arg2);

}
PFNGLGETTEXTUREPARAMETERIUIVPROC glad_debug_glGetTextureParameterIuiv = glad_debug_impl_glGetTextureParameterIuiv;
PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv;
void APIENTRY glad_debug_impl_glGetTextureParameteriv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetTextureParameteriv", (void*)glGetTextureParameteriv, 3, arg0, arg1, arg2);
     glad_glGetTextureParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetTextureParameteriv", (void*)glGetTextureParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETTEXTUREPARAMETERIVPROC glad_debug_glGetTextureParameteriv = glad_debug_impl_glGetTextureParameteriv;
PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays;
void APIENTRY glad_debug_impl_glCreateVertexArrays(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glCreateVertexArrays", (void*)glCreateVertexArrays, 2, arg0, arg1);
     glad_glCreateVertexArrays(arg0, arg1);
    _post_call_callback("glCreateVertexArrays", (void*)glCreateVertexArrays, 2, arg0, arg1);

}
PFNGLCREATEVERTEXARRAYSPROC glad_debug_glCreateVertexArrays = glad_debug_impl_glCreateVertexArrays;
PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib;
void APIENTRY glad_debug_impl_glDisableVertexArrayAttrib(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glDisableVertexArrayAttrib", (void*)glDisableVertexArrayAttrib, 2, arg0, arg1);
     glad_glDisableVertexArrayAttrib(arg0, arg1);
    _post_call_callback("glDisableVertexArrayAttrib", (void*)glDisableVertexArrayAttrib, 2, arg0, arg1);

}
PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_debug_glDisableVertexArrayAttrib = glad_debug_impl_glDisableVertexArrayAttrib;
PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib;
void APIENTRY glad_debug_impl_glEnableVertexArrayAttrib(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glEnableVertexArrayAttrib", (void*)glEnableVertexArrayAttrib, 2, arg0, arg1);
     glad_glEnableVertexArrayAttrib(arg0, arg1);
    _post_call_callback("glEnableVertexArrayAttrib", (void*)glEnableVertexArrayAttrib, 2, arg0, arg1);

}
PFNGLENABLEVERTEXARRAYATTRIBPROC glad_debug_glEnableVertexArrayAttrib = glad_debug_impl_glEnableVertexArrayAttrib;
PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer;
void APIENTRY glad_debug_impl_glVertexArrayElementBuffer(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glVertexArrayElementBuffer", (void*)glVertexArrayElementBuffer, 2, arg0, arg1);
     glad_glVertexArrayElementBuffer(arg0, arg1);
    _post_call_callback("glVertexArrayElementBuffer", (void*)glVertexArrayElementBuffer, 2, arg0, arg1);

}
PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_debug_glVertexArrayElementBuffer = glad_debug_impl_glVertexArrayElementBuffer;
PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer;
void APIENTRY glad_debug_impl_glVertexArrayVertexBuffer(GLuint arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizei arg4) {
    _pre_call_callback("glVertexArrayVertexBuffer", (void*)glVertexArrayVertexBuffer, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexArrayVertexBuffer(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexArrayVertexBuffer", (void*)glVertexArrayVertexBuffer, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_debug_glVertexArrayVertexBuffer = glad_debug_impl_glVertexArrayVertexBuffer;
PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers;
void APIENTRY glad_debug_impl_glVertexArrayVertexBuffers(GLuint arg0, GLuint arg1, GLsizei arg2, const GLuint* arg3, const GLintptr* arg4, const GLsizei* arg5) {
    _pre_call_callback("glVertexArrayVertexBuffers", (void*)glVertexArrayVertexBuffers, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glVertexArrayVertexBuffers(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glVertexArrayVertexBuffers", (void*)glVertexArrayVertexBuffers, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_debug_glVertexArrayVertexBuffers = glad_debug_impl_glVertexArrayVertexBuffers;
PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding;
void APIENTRY glad_debug_impl_glVertexArrayAttribBinding(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glVertexArrayAttribBinding", (void*)glVertexArrayAttribBinding, 3, arg0, arg1, arg2);
     glad_glVertexArrayAttribBinding(arg0, arg1, arg2);
    _post_call_callback("glVertexArrayAttribBinding", (void*)glVertexArrayAttribBinding, 3, arg0, arg1, arg2);

}
PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_debug_glVertexArrayAttribBinding = glad_debug_impl_glVertexArrayAttribBinding;
PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat;
void APIENTRY glad_debug_impl_glVertexArrayAttribFormat(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLboolean arg4, GLuint arg5) {
    _pre_call_callback("glVertexArrayAttribFormat", (void*)glVertexArrayAttribFormat, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glVertexArrayAttribFormat(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glVertexArrayAttribFormat", (void*)glVertexArrayAttribFormat, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLVERTEXARRAYATTRIBFORMATPROC glad_debug_glVertexArrayAttribFormat = glad_debug_impl_glVertexArrayAttribFormat;
PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat;
void APIENTRY glad_debug_impl_glVertexArrayAttribIFormat(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLuint arg4) {
    _pre_call_callback("glVertexArrayAttribIFormat", (void*)glVertexArrayAttribIFormat, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexArrayAttribIFormat(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexArrayAttribIFormat", (void*)glVertexArrayAttribIFormat, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_debug_glVertexArrayAttribIFormat = glad_debug_impl_glVertexArrayAttribIFormat;
PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat;
void APIENTRY glad_debug_impl_glVertexArrayAttribLFormat(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLuint arg4) {
    _pre_call_callback("glVertexArrayAttribLFormat", (void*)glVertexArrayAttribLFormat, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexArrayAttribLFormat(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexArrayAttribLFormat", (void*)glVertexArrayAttribLFormat, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_debug_glVertexArrayAttribLFormat = glad_debug_impl_glVertexArrayAttribLFormat;
PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor;
void APIENTRY glad_debug_impl_glVertexArrayBindingDivisor(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glVertexArrayBindingDivisor", (void*)glVertexArrayBindingDivisor, 3, arg0, arg1, arg2);
     glad_glVertexArrayBindingDivisor(arg0, arg1, arg2);
    _post_call_callback("glVertexArrayBindingDivisor", (void*)glVertexArrayBindingDivisor, 3, arg0, arg1, arg2);

}
PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_debug_glVertexArrayBindingDivisor = glad_debug_impl_glVertexArrayBindingDivisor;
PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv;
void APIENTRY glad_debug_impl_glGetVertexArrayiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVertexArrayiv", (void*)glGetVertexArrayiv, 3, arg0, arg1, arg2);
     glad_glGetVertexArrayiv(arg0, arg1, arg2);
    _post_call_callback("glGetVertexArrayiv", (void*)glGetVertexArrayiv, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXARRAYIVPROC glad_debug_glGetVertexArrayiv = glad_debug_impl_glGetVertexArrayiv;
PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv;
void APIENTRY glad_debug_impl_glGetVertexArrayIndexediv(GLuint arg0, GLuint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetVertexArrayIndexediv", (void*)glGetVertexArrayIndexediv, 4, arg0, arg1, arg2, arg3);
     glad_glGetVertexArrayIndexediv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetVertexArrayIndexediv", (void*)glGetVertexArrayIndexediv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_debug_glGetVertexArrayIndexediv = glad_debug_impl_glGetVertexArrayIndexediv;
PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv;
void APIENTRY glad_debug_impl_glGetVertexArrayIndexed64iv(GLuint arg0, GLuint arg1, GLenum arg2, GLint64* arg3) {
    _pre_call_callback("glGetVertexArrayIndexed64iv", (void*)glGetVertexArrayIndexed64iv, 4, arg0, arg1, arg2, arg3);
     glad_glGetVertexArrayIndexed64iv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetVertexArrayIndexed64iv", (void*)glGetVertexArrayIndexed64iv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_debug_glGetVertexArrayIndexed64iv = glad_debug_impl_glGetVertexArrayIndexed64iv;
PFNGLCREATESAMPLERSPROC glad_glCreateSamplers;
void APIENTRY glad_debug_impl_glCreateSamplers(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glCreateSamplers", (void*)glCreateSamplers, 2, arg0, arg1);
     glad_glCreateSamplers(arg0, arg1);
    _post_call_callback("glCreateSamplers", (void*)glCreateSamplers, 2, arg0, arg1);

}
PFNGLCREATESAMPLERSPROC glad_debug_glCreateSamplers = glad_debug_impl_glCreateSamplers;
PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines;
void APIENTRY glad_debug_impl_glCreateProgramPipelines(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glCreateProgramPipelines", (void*)glCreateProgramPipelines, 2, arg0, arg1);
     glad_glCreateProgramPipelines(arg0, arg1);
    _post_call_callback("glCreateProgramPipelines", (void*)glCreateProgramPipelines, 2, arg0, arg1);

}
PFNGLCREATEPROGRAMPIPELINESPROC glad_debug_glCreateProgramPipelines = glad_debug_impl_glCreateProgramPipelines;
PFNGLCREATEQUERIESPROC glad_glCreateQueries;
void APIENTRY glad_debug_impl_glCreateQueries(GLenum arg0, GLsizei arg1, GLuint* arg2) {
    _pre_call_callback("glCreateQueries", (void*)glCreateQueries, 3, arg0, arg1, arg2);
     glad_glCreateQueries(arg0, arg1, arg2);
    _post_call_callback("glCreateQueries", (void*)glCreateQueries, 3, arg0, arg1, arg2);

}
PFNGLCREATEQUERIESPROC glad_debug_glCreateQueries = glad_debug_impl_glCreateQueries;
PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v;
void APIENTRY glad_debug_impl_glGetQueryBufferObjecti64v(GLuint arg0, GLuint arg1, GLenum arg2, GLintptr arg3) {
    _pre_call_callback("glGetQueryBufferObjecti64v", (void*)glGetQueryBufferObjecti64v, 4, arg0, arg1, arg2, arg3);
     glad_glGetQueryBufferObjecti64v(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetQueryBufferObjecti64v", (void*)glGetQueryBufferObjecti64v, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_debug_glGetQueryBufferObjecti64v = glad_debug_impl_glGetQueryBufferObjecti64v;
PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv;
void APIENTRY glad_debug_impl_glGetQueryBufferObjectiv(GLuint arg0, GLuint arg1, GLenum arg2, GLintptr arg3) {
    _pre_call_callback("glGetQueryBufferObjectiv", (void*)glGetQueryBufferObjectiv, 4, arg0, arg1, arg2, arg3);
     glad_glGetQueryBufferObjectiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetQueryBufferObjectiv", (void*)glGetQueryBufferObjectiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETQUERYBUFFEROBJECTIVPROC glad_debug_glGetQueryBufferObjectiv = glad_debug_impl_glGetQueryBufferObjectiv;
PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v;
void APIENTRY glad_debug_impl_glGetQueryBufferObjectui64v(GLuint arg0, GLuint arg1, GLenum arg2, GLintptr arg3) {
    _pre_call_callback("glGetQueryBufferObjectui64v", (void*)glGetQueryBufferObjectui64v, 4, arg0, arg1, arg2, arg3);
     glad_glGetQueryBufferObjectui64v(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetQueryBufferObjectui64v", (void*)glGetQueryBufferObjectui64v, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_debug_glGetQueryBufferObjectui64v = glad_debug_impl_glGetQueryBufferObjectui64v;
PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv;
void APIENTRY glad_debug_impl_glGetQueryBufferObjectuiv(GLuint arg0, GLuint arg1, GLenum arg2, GLintptr arg3) {
    _pre_call_callback("glGetQueryBufferObjectuiv", (void*)glGetQueryBufferObjectuiv, 4, arg0, arg1, arg2, arg3);
     glad_glGetQueryBufferObjectuiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetQueryBufferObjectuiv", (void*)glGetQueryBufferObjectuiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_debug_glGetQueryBufferObjectuiv = glad_debug_impl_glGetQueryBufferObjectuiv;
PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_glBindTransformFeedbackNV;
void APIENTRY glad_debug_impl_glBindTransformFeedbackNV(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindTransformFeedbackNV", (void*)glBindTransformFeedbackNV, 2, arg0, arg1);
     glad_glBindTransformFeedbackNV(arg0, arg1);
    _post_call_callback("glBindTransformFeedbackNV", (void*)glBindTransformFeedbackNV, 2, arg0, arg1);

}
PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_debug_glBindTransformFeedbackNV = glad_debug_impl_glBindTransformFeedbackNV;
PFNGLDELETETRANSFORMFEEDBACKSNVPROC glad_glDeleteTransformFeedbacksNV;
void APIENTRY glad_debug_impl_glDeleteTransformFeedbacksNV(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteTransformFeedbacksNV", (void*)glDeleteTransformFeedbacksNV, 2, arg0, arg1);
     glad_glDeleteTransformFeedbacksNV(arg0, arg1);
    _post_call_callback("glDeleteTransformFeedbacksNV", (void*)glDeleteTransformFeedbacksNV, 2, arg0, arg1);

}
PFNGLDELETETRANSFORMFEEDBACKSNVPROC glad_debug_glDeleteTransformFeedbacksNV = glad_debug_impl_glDeleteTransformFeedbacksNV;
PFNGLGENTRANSFORMFEEDBACKSNVPROC glad_glGenTransformFeedbacksNV;
void APIENTRY glad_debug_impl_glGenTransformFeedbacksNV(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenTransformFeedbacksNV", (void*)glGenTransformFeedbacksNV, 2, arg0, arg1);
     glad_glGenTransformFeedbacksNV(arg0, arg1);
    _post_call_callback("glGenTransformFeedbacksNV", (void*)glGenTransformFeedbacksNV, 2, arg0, arg1);

}
PFNGLGENTRANSFORMFEEDBACKSNVPROC glad_debug_glGenTransformFeedbacksNV = glad_debug_impl_glGenTransformFeedbacksNV;
PFNGLISTRANSFORMFEEDBACKNVPROC glad_glIsTransformFeedbackNV;
GLboolean APIENTRY glad_debug_impl_glIsTransformFeedbackNV(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsTransformFeedbackNV", (void*)glIsTransformFeedbackNV, 1, arg0);
    ret =  glad_glIsTransformFeedbackNV(arg0);
    _post_call_callback("glIsTransformFeedbackNV", (void*)glIsTransformFeedbackNV, 1, arg0);
    return ret;
}
PFNGLISTRANSFORMFEEDBACKNVPROC glad_debug_glIsTransformFeedbackNV = glad_debug_impl_glIsTransformFeedbackNV;
PFNGLPAUSETRANSFORMFEEDBACKNVPROC glad_glPauseTransformFeedbackNV;
void APIENTRY glad_debug_impl_glPauseTransformFeedbackNV() {
    _pre_call_callback("glPauseTransformFeedbackNV", (void*)glPauseTransformFeedbackNV, 0);
     glad_glPauseTransformFeedbackNV();
    _post_call_callback("glPauseTransformFeedbackNV", (void*)glPauseTransformFeedbackNV, 0);

}
PFNGLPAUSETRANSFORMFEEDBACKNVPROC glad_debug_glPauseTransformFeedbackNV = glad_debug_impl_glPauseTransformFeedbackNV;
PFNGLRESUMETRANSFORMFEEDBACKNVPROC glad_glResumeTransformFeedbackNV;
void APIENTRY glad_debug_impl_glResumeTransformFeedbackNV() {
    _pre_call_callback("glResumeTransformFeedbackNV", (void*)glResumeTransformFeedbackNV, 0);
     glad_glResumeTransformFeedbackNV();
    _post_call_callback("glResumeTransformFeedbackNV", (void*)glResumeTransformFeedbackNV, 0);

}
PFNGLRESUMETRANSFORMFEEDBACKNVPROC glad_debug_glResumeTransformFeedbackNV = glad_debug_impl_glResumeTransformFeedbackNV;
PFNGLDRAWTRANSFORMFEEDBACKNVPROC glad_glDrawTransformFeedbackNV;
void APIENTRY glad_debug_impl_glDrawTransformFeedbackNV(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glDrawTransformFeedbackNV", (void*)glDrawTransformFeedbackNV, 2, arg0, arg1);
     glad_glDrawTransformFeedbackNV(arg0, arg1);
    _post_call_callback("glDrawTransformFeedbackNV", (void*)glDrawTransformFeedbackNV, 2, arg0, arg1);

}
PFNGLDRAWTRANSFORMFEEDBACKNVPROC glad_debug_glDrawTransformFeedbackNV = glad_debug_impl_glDrawTransformFeedbackNV;
PFNGLBLENDCOLOREXTPROC glad_glBlendColorEXT;
void APIENTRY glad_debug_impl_glBlendColorEXT(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glBlendColorEXT", (void*)glBlendColorEXT, 4, arg0, arg1, arg2, arg3);
     glad_glBlendColorEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glBlendColorEXT", (void*)glBlendColorEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLBLENDCOLOREXTPROC glad_debug_glBlendColorEXT = glad_debug_impl_glBlendColorEXT;
PFNGLGETHISTOGRAMEXTPROC glad_glGetHistogramEXT;
void APIENTRY glad_debug_impl_glGetHistogramEXT(GLenum arg0, GLboolean arg1, GLenum arg2, GLenum arg3, void* arg4) {
    _pre_call_callback("glGetHistogramEXT", (void*)glGetHistogramEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetHistogramEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetHistogramEXT", (void*)glGetHistogramEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETHISTOGRAMEXTPROC glad_debug_glGetHistogramEXT = glad_debug_impl_glGetHistogramEXT;
PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glad_glGetHistogramParameterfvEXT;
void APIENTRY glad_debug_impl_glGetHistogramParameterfvEXT(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetHistogramParameterfvEXT", (void*)glGetHistogramParameterfvEXT, 3, arg0, arg1, arg2);
     glad_glGetHistogramParameterfvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetHistogramParameterfvEXT", (void*)glGetHistogramParameterfvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glad_debug_glGetHistogramParameterfvEXT = glad_debug_impl_glGetHistogramParameterfvEXT;
PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glad_glGetHistogramParameterivEXT;
void APIENTRY glad_debug_impl_glGetHistogramParameterivEXT(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetHistogramParameterivEXT", (void*)glGetHistogramParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetHistogramParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetHistogramParameterivEXT", (void*)glGetHistogramParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glad_debug_glGetHistogramParameterivEXT = glad_debug_impl_glGetHistogramParameterivEXT;
PFNGLGETMINMAXEXTPROC glad_glGetMinmaxEXT;
void APIENTRY glad_debug_impl_glGetMinmaxEXT(GLenum arg0, GLboolean arg1, GLenum arg2, GLenum arg3, void* arg4) {
    _pre_call_callback("glGetMinmaxEXT", (void*)glGetMinmaxEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetMinmaxEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetMinmaxEXT", (void*)glGetMinmaxEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETMINMAXEXTPROC glad_debug_glGetMinmaxEXT = glad_debug_impl_glGetMinmaxEXT;
PFNGLGETMINMAXPARAMETERFVEXTPROC glad_glGetMinmaxParameterfvEXT;
void APIENTRY glad_debug_impl_glGetMinmaxParameterfvEXT(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetMinmaxParameterfvEXT", (void*)glGetMinmaxParameterfvEXT, 3, arg0, arg1, arg2);
     glad_glGetMinmaxParameterfvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetMinmaxParameterfvEXT", (void*)glGetMinmaxParameterfvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETMINMAXPARAMETERFVEXTPROC glad_debug_glGetMinmaxParameterfvEXT = glad_debug_impl_glGetMinmaxParameterfvEXT;
PFNGLGETMINMAXPARAMETERIVEXTPROC glad_glGetMinmaxParameterivEXT;
void APIENTRY glad_debug_impl_glGetMinmaxParameterivEXT(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetMinmaxParameterivEXT", (void*)glGetMinmaxParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetMinmaxParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetMinmaxParameterivEXT", (void*)glGetMinmaxParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETMINMAXPARAMETERIVEXTPROC glad_debug_glGetMinmaxParameterivEXT = glad_debug_impl_glGetMinmaxParameterivEXT;
PFNGLHISTOGRAMEXTPROC glad_glHistogramEXT;
void APIENTRY glad_debug_impl_glHistogramEXT(GLenum arg0, GLsizei arg1, GLenum arg2, GLboolean arg3) {
    _pre_call_callback("glHistogramEXT", (void*)glHistogramEXT, 4, arg0, arg1, arg2, arg3);
     glad_glHistogramEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glHistogramEXT", (void*)glHistogramEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLHISTOGRAMEXTPROC glad_debug_glHistogramEXT = glad_debug_impl_glHistogramEXT;
PFNGLMINMAXEXTPROC glad_glMinmaxEXT;
void APIENTRY glad_debug_impl_glMinmaxEXT(GLenum arg0, GLenum arg1, GLboolean arg2) {
    _pre_call_callback("glMinmaxEXT", (void*)glMinmaxEXT, 3, arg0, arg1, arg2);
     glad_glMinmaxEXT(arg0, arg1, arg2);
    _post_call_callback("glMinmaxEXT", (void*)glMinmaxEXT, 3, arg0, arg1, arg2);

}
PFNGLMINMAXEXTPROC glad_debug_glMinmaxEXT = glad_debug_impl_glMinmaxEXT;
PFNGLRESETHISTOGRAMEXTPROC glad_glResetHistogramEXT;
void APIENTRY glad_debug_impl_glResetHistogramEXT(GLenum arg0) {
    _pre_call_callback("glResetHistogramEXT", (void*)glResetHistogramEXT, 1, arg0);
     glad_glResetHistogramEXT(arg0);
    _post_call_callback("glResetHistogramEXT", (void*)glResetHistogramEXT, 1, arg0);

}
PFNGLRESETHISTOGRAMEXTPROC glad_debug_glResetHistogramEXT = glad_debug_impl_glResetHistogramEXT;
PFNGLRESETMINMAXEXTPROC glad_glResetMinmaxEXT;
void APIENTRY glad_debug_impl_glResetMinmaxEXT(GLenum arg0) {
    _pre_call_callback("glResetMinmaxEXT", (void*)glResetMinmaxEXT, 1, arg0);
     glad_glResetMinmaxEXT(arg0);
    _post_call_callback("glResetMinmaxEXT", (void*)glResetMinmaxEXT, 1, arg0);

}
PFNGLRESETMINMAXEXTPROC glad_debug_glResetMinmaxEXT = glad_debug_impl_glResetMinmaxEXT;
PFNGLPOLYGONOFFSETEXTPROC glad_glPolygonOffsetEXT;
void APIENTRY glad_debug_impl_glPolygonOffsetEXT(GLfloat arg0, GLfloat arg1) {
    _pre_call_callback("glPolygonOffsetEXT", (void*)glPolygonOffsetEXT, 2, arg0, arg1);
     glad_glPolygonOffsetEXT(arg0, arg1);
    _post_call_callback("glPolygonOffsetEXT", (void*)glPolygonOffsetEXT, 2, arg0, arg1);

}
PFNGLPOLYGONOFFSETEXTPROC glad_debug_glPolygonOffsetEXT = glad_debug_impl_glPolygonOffsetEXT;
PFNGLPOINTPARAMETERFSGISPROC glad_glPointParameterfSGIS;
void APIENTRY glad_debug_impl_glPointParameterfSGIS(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glPointParameterfSGIS", (void*)glPointParameterfSGIS, 2, arg0, arg1);
     glad_glPointParameterfSGIS(arg0, arg1);
    _post_call_callback("glPointParameterfSGIS", (void*)glPointParameterfSGIS, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERFSGISPROC glad_debug_glPointParameterfSGIS = glad_debug_impl_glPointParameterfSGIS;
PFNGLPOINTPARAMETERFVSGISPROC glad_glPointParameterfvSGIS;
void APIENTRY glad_debug_impl_glPointParameterfvSGIS(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glPointParameterfvSGIS", (void*)glPointParameterfvSGIS, 2, arg0, arg1);
     glad_glPointParameterfvSGIS(arg0, arg1);
    _post_call_callback("glPointParameterfvSGIS", (void*)glPointParameterfvSGIS, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERFVSGISPROC glad_debug_glPointParameterfvSGIS = glad_debug_impl_glPointParameterfvSGIS;
PFNGLMATRIXLOADFEXTPROC glad_glMatrixLoadfEXT;
void APIENTRY glad_debug_impl_glMatrixLoadfEXT(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixLoadfEXT", (void*)glMatrixLoadfEXT, 2, arg0, arg1);
     glad_glMatrixLoadfEXT(arg0, arg1);
    _post_call_callback("glMatrixLoadfEXT", (void*)glMatrixLoadfEXT, 2, arg0, arg1);

}
PFNGLMATRIXLOADFEXTPROC glad_debug_glMatrixLoadfEXT = glad_debug_impl_glMatrixLoadfEXT;
PFNGLMATRIXLOADDEXTPROC glad_glMatrixLoaddEXT;
void APIENTRY glad_debug_impl_glMatrixLoaddEXT(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glMatrixLoaddEXT", (void*)glMatrixLoaddEXT, 2, arg0, arg1);
     glad_glMatrixLoaddEXT(arg0, arg1);
    _post_call_callback("glMatrixLoaddEXT", (void*)glMatrixLoaddEXT, 2, arg0, arg1);

}
PFNGLMATRIXLOADDEXTPROC glad_debug_glMatrixLoaddEXT = glad_debug_impl_glMatrixLoaddEXT;
PFNGLMATRIXMULTFEXTPROC glad_glMatrixMultfEXT;
void APIENTRY glad_debug_impl_glMatrixMultfEXT(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixMultfEXT", (void*)glMatrixMultfEXT, 2, arg0, arg1);
     glad_glMatrixMultfEXT(arg0, arg1);
    _post_call_callback("glMatrixMultfEXT", (void*)glMatrixMultfEXT, 2, arg0, arg1);

}
PFNGLMATRIXMULTFEXTPROC glad_debug_glMatrixMultfEXT = glad_debug_impl_glMatrixMultfEXT;
PFNGLMATRIXMULTDEXTPROC glad_glMatrixMultdEXT;
void APIENTRY glad_debug_impl_glMatrixMultdEXT(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glMatrixMultdEXT", (void*)glMatrixMultdEXT, 2, arg0, arg1);
     glad_glMatrixMultdEXT(arg0, arg1);
    _post_call_callback("glMatrixMultdEXT", (void*)glMatrixMultdEXT, 2, arg0, arg1);

}
PFNGLMATRIXMULTDEXTPROC glad_debug_glMatrixMultdEXT = glad_debug_impl_glMatrixMultdEXT;
PFNGLMATRIXLOADIDENTITYEXTPROC glad_glMatrixLoadIdentityEXT;
void APIENTRY glad_debug_impl_glMatrixLoadIdentityEXT(GLenum arg0) {
    _pre_call_callback("glMatrixLoadIdentityEXT", (void*)glMatrixLoadIdentityEXT, 1, arg0);
     glad_glMatrixLoadIdentityEXT(arg0);
    _post_call_callback("glMatrixLoadIdentityEXT", (void*)glMatrixLoadIdentityEXT, 1, arg0);

}
PFNGLMATRIXLOADIDENTITYEXTPROC glad_debug_glMatrixLoadIdentityEXT = glad_debug_impl_glMatrixLoadIdentityEXT;
PFNGLMATRIXROTATEFEXTPROC glad_glMatrixRotatefEXT;
void APIENTRY glad_debug_impl_glMatrixRotatefEXT(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glMatrixRotatefEXT", (void*)glMatrixRotatefEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMatrixRotatefEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMatrixRotatefEXT", (void*)glMatrixRotatefEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMATRIXROTATEFEXTPROC glad_debug_glMatrixRotatefEXT = glad_debug_impl_glMatrixRotatefEXT;
PFNGLMATRIXROTATEDEXTPROC glad_glMatrixRotatedEXT;
void APIENTRY glad_debug_impl_glMatrixRotatedEXT(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glMatrixRotatedEXT", (void*)glMatrixRotatedEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMatrixRotatedEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMatrixRotatedEXT", (void*)glMatrixRotatedEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMATRIXROTATEDEXTPROC glad_debug_glMatrixRotatedEXT = glad_debug_impl_glMatrixRotatedEXT;
PFNGLMATRIXSCALEFEXTPROC glad_glMatrixScalefEXT;
void APIENTRY glad_debug_impl_glMatrixScalefEXT(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glMatrixScalefEXT", (void*)glMatrixScalefEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMatrixScalefEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMatrixScalefEXT", (void*)glMatrixScalefEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMATRIXSCALEFEXTPROC glad_debug_glMatrixScalefEXT = glad_debug_impl_glMatrixScalefEXT;
PFNGLMATRIXSCALEDEXTPROC glad_glMatrixScaledEXT;
void APIENTRY glad_debug_impl_glMatrixScaledEXT(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glMatrixScaledEXT", (void*)glMatrixScaledEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMatrixScaledEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMatrixScaledEXT", (void*)glMatrixScaledEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMATRIXSCALEDEXTPROC glad_debug_glMatrixScaledEXT = glad_debug_impl_glMatrixScaledEXT;
PFNGLMATRIXTRANSLATEFEXTPROC glad_glMatrixTranslatefEXT;
void APIENTRY glad_debug_impl_glMatrixTranslatefEXT(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glMatrixTranslatefEXT", (void*)glMatrixTranslatefEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMatrixTranslatefEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMatrixTranslatefEXT", (void*)glMatrixTranslatefEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMATRIXTRANSLATEFEXTPROC glad_debug_glMatrixTranslatefEXT = glad_debug_impl_glMatrixTranslatefEXT;
PFNGLMATRIXTRANSLATEDEXTPROC glad_glMatrixTranslatedEXT;
void APIENTRY glad_debug_impl_glMatrixTranslatedEXT(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glMatrixTranslatedEXT", (void*)glMatrixTranslatedEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMatrixTranslatedEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMatrixTranslatedEXT", (void*)glMatrixTranslatedEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMATRIXTRANSLATEDEXTPROC glad_debug_glMatrixTranslatedEXT = glad_debug_impl_glMatrixTranslatedEXT;
PFNGLMATRIXFRUSTUMEXTPROC glad_glMatrixFrustumEXT;
void APIENTRY glad_debug_impl_glMatrixFrustumEXT(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5, GLdouble arg6) {
    _pre_call_callback("glMatrixFrustumEXT", (void*)glMatrixFrustumEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glMatrixFrustumEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glMatrixFrustumEXT", (void*)glMatrixFrustumEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLMATRIXFRUSTUMEXTPROC glad_debug_glMatrixFrustumEXT = glad_debug_impl_glMatrixFrustumEXT;
PFNGLMATRIXORTHOEXTPROC glad_glMatrixOrthoEXT;
void APIENTRY glad_debug_impl_glMatrixOrthoEXT(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5, GLdouble arg6) {
    _pre_call_callback("glMatrixOrthoEXT", (void*)glMatrixOrthoEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glMatrixOrthoEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glMatrixOrthoEXT", (void*)glMatrixOrthoEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLMATRIXORTHOEXTPROC glad_debug_glMatrixOrthoEXT = glad_debug_impl_glMatrixOrthoEXT;
PFNGLMATRIXPOPEXTPROC glad_glMatrixPopEXT;
void APIENTRY glad_debug_impl_glMatrixPopEXT(GLenum arg0) {
    _pre_call_callback("glMatrixPopEXT", (void*)glMatrixPopEXT, 1, arg0);
     glad_glMatrixPopEXT(arg0);
    _post_call_callback("glMatrixPopEXT", (void*)glMatrixPopEXT, 1, arg0);

}
PFNGLMATRIXPOPEXTPROC glad_debug_glMatrixPopEXT = glad_debug_impl_glMatrixPopEXT;
PFNGLMATRIXPUSHEXTPROC glad_glMatrixPushEXT;
void APIENTRY glad_debug_impl_glMatrixPushEXT(GLenum arg0) {
    _pre_call_callback("glMatrixPushEXT", (void*)glMatrixPushEXT, 1, arg0);
     glad_glMatrixPushEXT(arg0);
    _post_call_callback("glMatrixPushEXT", (void*)glMatrixPushEXT, 1, arg0);

}
PFNGLMATRIXPUSHEXTPROC glad_debug_glMatrixPushEXT = glad_debug_impl_glMatrixPushEXT;
PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_glClientAttribDefaultEXT;
void APIENTRY glad_debug_impl_glClientAttribDefaultEXT(GLbitfield arg0) {
    _pre_call_callback("glClientAttribDefaultEXT", (void*)glClientAttribDefaultEXT, 1, arg0);
     glad_glClientAttribDefaultEXT(arg0);
    _post_call_callback("glClientAttribDefaultEXT", (void*)glClientAttribDefaultEXT, 1, arg0);

}
PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_debug_glClientAttribDefaultEXT = glad_debug_impl_glClientAttribDefaultEXT;
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glad_glPushClientAttribDefaultEXT;
void APIENTRY glad_debug_impl_glPushClientAttribDefaultEXT(GLbitfield arg0) {
    _pre_call_callback("glPushClientAttribDefaultEXT", (void*)glPushClientAttribDefaultEXT, 1, arg0);
     glad_glPushClientAttribDefaultEXT(arg0);
    _post_call_callback("glPushClientAttribDefaultEXT", (void*)glPushClientAttribDefaultEXT, 1, arg0);

}
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glad_debug_glPushClientAttribDefaultEXT = glad_debug_impl_glPushClientAttribDefaultEXT;
PFNGLTEXTUREPARAMETERFEXTPROC glad_glTextureParameterfEXT;
void APIENTRY glad_debug_impl_glTextureParameterfEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLfloat arg3) {
    _pre_call_callback("glTextureParameterfEXT", (void*)glTextureParameterfEXT, 4, arg0, arg1, arg2, arg3);
     glad_glTextureParameterfEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glTextureParameterfEXT", (void*)glTextureParameterfEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXTUREPARAMETERFEXTPROC glad_debug_glTextureParameterfEXT = glad_debug_impl_glTextureParameterfEXT;
PFNGLTEXTUREPARAMETERFVEXTPROC glad_glTextureParameterfvEXT;
void APIENTRY glad_debug_impl_glTextureParameterfvEXT(GLuint arg0, GLenum arg1, GLenum arg2, const GLfloat* arg3) {
    _pre_call_callback("glTextureParameterfvEXT", (void*)glTextureParameterfvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glTextureParameterfvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glTextureParameterfvEXT", (void*)glTextureParameterfvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXTUREPARAMETERFVEXTPROC glad_debug_glTextureParameterfvEXT = glad_debug_impl_glTextureParameterfvEXT;
PFNGLTEXTUREPARAMETERIEXTPROC glad_glTextureParameteriEXT;
void APIENTRY glad_debug_impl_glTextureParameteriEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLint arg3) {
    _pre_call_callback("glTextureParameteriEXT", (void*)glTextureParameteriEXT, 4, arg0, arg1, arg2, arg3);
     glad_glTextureParameteriEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glTextureParameteriEXT", (void*)glTextureParameteriEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXTUREPARAMETERIEXTPROC glad_debug_glTextureParameteriEXT = glad_debug_impl_glTextureParameteriEXT;
PFNGLTEXTUREPARAMETERIVEXTPROC glad_glTextureParameterivEXT;
void APIENTRY glad_debug_impl_glTextureParameterivEXT(GLuint arg0, GLenum arg1, GLenum arg2, const GLint* arg3) {
    _pre_call_callback("glTextureParameterivEXT", (void*)glTextureParameterivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glTextureParameterivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glTextureParameterivEXT", (void*)glTextureParameterivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXTUREPARAMETERIVEXTPROC glad_debug_glTextureParameterivEXT = glad_debug_impl_glTextureParameterivEXT;
PFNGLTEXTUREIMAGE1DEXTPROC glad_glTextureImage1DEXT;
void APIENTRY glad_debug_impl_glTextureImage1DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLint arg5, GLenum arg6, GLenum arg7, const void* arg8) {
    _pre_call_callback("glTextureImage1DEXT", (void*)glTextureImage1DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glTextureImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glTextureImage1DEXT", (void*)glTextureImage1DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLTEXTUREIMAGE1DEXTPROC glad_debug_glTextureImage1DEXT = glad_debug_impl_glTextureImage1DEXT;
PFNGLTEXTUREIMAGE2DEXTPROC glad_glTextureImage2DEXT;
void APIENTRY glad_debug_impl_glTextureImage2DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLenum arg7, GLenum arg8, const void* arg9) {
    _pre_call_callback("glTextureImage2DEXT", (void*)glTextureImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glTextureImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glTextureImage2DEXT", (void*)glTextureImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLTEXTUREIMAGE2DEXTPROC glad_debug_glTextureImage2DEXT = glad_debug_impl_glTextureImage2DEXT;
PFNGLTEXTURESUBIMAGE1DEXTPROC glad_glTextureSubImage1DEXT;
void APIENTRY glad_debug_impl_glTextureSubImage1DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLenum arg5, GLenum arg6, const void* arg7) {
    _pre_call_callback("glTextureSubImage1DEXT", (void*)glTextureSubImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTextureSubImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTextureSubImage1DEXT", (void*)glTextureSubImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXTURESUBIMAGE1DEXTPROC glad_debug_glTextureSubImage1DEXT = glad_debug_impl_glTextureSubImage1DEXT;
PFNGLTEXTURESUBIMAGE2DEXTPROC glad_glTextureSubImage2DEXT;
void APIENTRY glad_debug_impl_glTextureSubImage2DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLenum arg7, GLenum arg8, const void* arg9) {
    _pre_call_callback("glTextureSubImage2DEXT", (void*)glTextureSubImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glTextureSubImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glTextureSubImage2DEXT", (void*)glTextureSubImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLTEXTURESUBIMAGE2DEXTPROC glad_debug_glTextureSubImage2DEXT = glad_debug_impl_glTextureSubImage2DEXT;
PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_glCopyTextureImage1DEXT;
void APIENTRY glad_debug_impl_glCopyTextureImage1DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLenum arg3, GLint arg4, GLint arg5, GLsizei arg6, GLint arg7) {
    _pre_call_callback("glCopyTextureImage1DEXT", (void*)glCopyTextureImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCopyTextureImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCopyTextureImage1DEXT", (void*)glCopyTextureImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_debug_glCopyTextureImage1DEXT = glad_debug_impl_glCopyTextureImage1DEXT;
PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_glCopyTextureImage2DEXT;
void APIENTRY glad_debug_impl_glCopyTextureImage2DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLenum arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7, GLint arg8) {
    _pre_call_callback("glCopyTextureImage2DEXT", (void*)glCopyTextureImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCopyTextureImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCopyTextureImage2DEXT", (void*)glCopyTextureImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_debug_glCopyTextureImage2DEXT = glad_debug_impl_glCopyTextureImage2DEXT;
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_glCopyTextureSubImage1DEXT;
void APIENTRY glad_debug_impl_glCopyTextureSubImage1DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6) {
    _pre_call_callback("glCopyTextureSubImage1DEXT", (void*)glCopyTextureSubImage1DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCopyTextureSubImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCopyTextureSubImage1DEXT", (void*)glCopyTextureSubImage1DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_debug_glCopyTextureSubImage1DEXT = glad_debug_impl_glCopyTextureSubImage1DEXT;
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glad_glCopyTextureSubImage2DEXT;
void APIENTRY glad_debug_impl_glCopyTextureSubImage2DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLsizei arg7, GLsizei arg8) {
    _pre_call_callback("glCopyTextureSubImage2DEXT", (void*)glCopyTextureSubImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCopyTextureSubImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCopyTextureSubImage2DEXT", (void*)glCopyTextureSubImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glad_debug_glCopyTextureSubImage2DEXT = glad_debug_impl_glCopyTextureSubImage2DEXT;
PFNGLGETTEXTUREIMAGEEXTPROC glad_glGetTextureImageEXT;
void APIENTRY glad_debug_impl_glGetTextureImageEXT(GLuint arg0, GLenum arg1, GLint arg2, GLenum arg3, GLenum arg4, void* arg5) {
    _pre_call_callback("glGetTextureImageEXT", (void*)glGetTextureImageEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetTextureImageEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetTextureImageEXT", (void*)glGetTextureImageEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETTEXTUREIMAGEEXTPROC glad_debug_glGetTextureImageEXT = glad_debug_impl_glGetTextureImageEXT;
PFNGLGETTEXTUREPARAMETERFVEXTPROC glad_glGetTextureParameterfvEXT;
void APIENTRY glad_debug_impl_glGetTextureParameterfvEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetTextureParameterfvEXT", (void*)glGetTextureParameterfvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetTextureParameterfvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTextureParameterfvEXT", (void*)glGetTextureParameterfvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTEXTUREPARAMETERFVEXTPROC glad_debug_glGetTextureParameterfvEXT = glad_debug_impl_glGetTextureParameterfvEXT;
PFNGLGETTEXTUREPARAMETERIVEXTPROC glad_glGetTextureParameterivEXT;
void APIENTRY glad_debug_impl_glGetTextureParameterivEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetTextureParameterivEXT", (void*)glGetTextureParameterivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetTextureParameterivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTextureParameterivEXT", (void*)glGetTextureParameterivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTEXTUREPARAMETERIVEXTPROC glad_debug_glGetTextureParameterivEXT = glad_debug_impl_glGetTextureParameterivEXT;
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glad_glGetTextureLevelParameterfvEXT;
void APIENTRY glad_debug_impl_glGetTextureLevelParameterfvEXT(GLuint arg0, GLenum arg1, GLint arg2, GLenum arg3, GLfloat* arg4) {
    _pre_call_callback("glGetTextureLevelParameterfvEXT", (void*)glGetTextureLevelParameterfvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetTextureLevelParameterfvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetTextureLevelParameterfvEXT", (void*)glGetTextureLevelParameterfvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glad_debug_glGetTextureLevelParameterfvEXT = glad_debug_impl_glGetTextureLevelParameterfvEXT;
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glad_glGetTextureLevelParameterivEXT;
void APIENTRY glad_debug_impl_glGetTextureLevelParameterivEXT(GLuint arg0, GLenum arg1, GLint arg2, GLenum arg3, GLint* arg4) {
    _pre_call_callback("glGetTextureLevelParameterivEXT", (void*)glGetTextureLevelParameterivEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetTextureLevelParameterivEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetTextureLevelParameterivEXT", (void*)glGetTextureLevelParameterivEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glad_debug_glGetTextureLevelParameterivEXT = glad_debug_impl_glGetTextureLevelParameterivEXT;
PFNGLTEXTUREIMAGE3DEXTPROC glad_glTextureImage3DEXT;
void APIENTRY glad_debug_impl_glTextureImage3DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6, GLint arg7, GLenum arg8, GLenum arg9, const void* arg10) {
    _pre_call_callback("glTextureImage3DEXT", (void*)glTextureImage3DEXT, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glTextureImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glTextureImage3DEXT", (void*)glTextureImage3DEXT, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLTEXTUREIMAGE3DEXTPROC glad_debug_glTextureImage3DEXT = glad_debug_impl_glTextureImage3DEXT;
PFNGLTEXTURESUBIMAGE3DEXTPROC glad_glTextureSubImage3DEXT;
void APIENTRY glad_debug_impl_glTextureSubImage3DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7, GLsizei arg8, GLenum arg9, GLenum arg10, const void* arg11) {
    _pre_call_callback("glTextureSubImage3DEXT", (void*)glTextureSubImage3DEXT, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
     glad_glTextureSubImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_callback("glTextureSubImage3DEXT", (void*)glTextureSubImage3DEXT, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

}
PFNGLTEXTURESUBIMAGE3DEXTPROC glad_debug_glTextureSubImage3DEXT = glad_debug_impl_glTextureSubImage3DEXT;
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glad_glCopyTextureSubImage3DEXT;
void APIENTRY glad_debug_impl_glCopyTextureSubImage3DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLint arg7, GLsizei arg8, GLsizei arg9) {
    _pre_call_callback("glCopyTextureSubImage3DEXT", (void*)glCopyTextureSubImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glCopyTextureSubImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glCopyTextureSubImage3DEXT", (void*)glCopyTextureSubImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glad_debug_glCopyTextureSubImage3DEXT = glad_debug_impl_glCopyTextureSubImage3DEXT;
PFNGLBINDMULTITEXTUREEXTPROC glad_glBindMultiTextureEXT;
void APIENTRY glad_debug_impl_glBindMultiTextureEXT(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glBindMultiTextureEXT", (void*)glBindMultiTextureEXT, 3, arg0, arg1, arg2);
     glad_glBindMultiTextureEXT(arg0, arg1, arg2);
    _post_call_callback("glBindMultiTextureEXT", (void*)glBindMultiTextureEXT, 3, arg0, arg1, arg2);

}
PFNGLBINDMULTITEXTUREEXTPROC glad_debug_glBindMultiTextureEXT = glad_debug_impl_glBindMultiTextureEXT;
PFNGLMULTITEXCOORDPOINTEREXTPROC glad_glMultiTexCoordPointerEXT;
void APIENTRY glad_debug_impl_glMultiTexCoordPointerEXT(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glMultiTexCoordPointerEXT", (void*)glMultiTexCoordPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiTexCoordPointerEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiTexCoordPointerEXT", (void*)glMultiTexCoordPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTITEXCOORDPOINTEREXTPROC glad_debug_glMultiTexCoordPointerEXT = glad_debug_impl_glMultiTexCoordPointerEXT;
PFNGLMULTITEXENVFEXTPROC glad_glMultiTexEnvfEXT;
void APIENTRY glad_debug_impl_glMultiTexEnvfEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLfloat arg3) {
    _pre_call_callback("glMultiTexEnvfEXT", (void*)glMultiTexEnvfEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexEnvfEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexEnvfEXT", (void*)glMultiTexEnvfEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXENVFEXTPROC glad_debug_glMultiTexEnvfEXT = glad_debug_impl_glMultiTexEnvfEXT;
PFNGLMULTITEXENVFVEXTPROC glad_glMultiTexEnvfvEXT;
void APIENTRY glad_debug_impl_glMultiTexEnvfvEXT(GLenum arg0, GLenum arg1, GLenum arg2, const GLfloat* arg3) {
    _pre_call_callback("glMultiTexEnvfvEXT", (void*)glMultiTexEnvfvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexEnvfvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexEnvfvEXT", (void*)glMultiTexEnvfvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXENVFVEXTPROC glad_debug_glMultiTexEnvfvEXT = glad_debug_impl_glMultiTexEnvfvEXT;
PFNGLMULTITEXENVIEXTPROC glad_glMultiTexEnviEXT;
void APIENTRY glad_debug_impl_glMultiTexEnviEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLint arg3) {
    _pre_call_callback("glMultiTexEnviEXT", (void*)glMultiTexEnviEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexEnviEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexEnviEXT", (void*)glMultiTexEnviEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXENVIEXTPROC glad_debug_glMultiTexEnviEXT = glad_debug_impl_glMultiTexEnviEXT;
PFNGLMULTITEXENVIVEXTPROC glad_glMultiTexEnvivEXT;
void APIENTRY glad_debug_impl_glMultiTexEnvivEXT(GLenum arg0, GLenum arg1, GLenum arg2, const GLint* arg3) {
    _pre_call_callback("glMultiTexEnvivEXT", (void*)glMultiTexEnvivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexEnvivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexEnvivEXT", (void*)glMultiTexEnvivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXENVIVEXTPROC glad_debug_glMultiTexEnvivEXT = glad_debug_impl_glMultiTexEnvivEXT;
PFNGLMULTITEXGENDEXTPROC glad_glMultiTexGendEXT;
void APIENTRY glad_debug_impl_glMultiTexGendEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLdouble arg3) {
    _pre_call_callback("glMultiTexGendEXT", (void*)glMultiTexGendEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexGendEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexGendEXT", (void*)glMultiTexGendEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXGENDEXTPROC glad_debug_glMultiTexGendEXT = glad_debug_impl_glMultiTexGendEXT;
PFNGLMULTITEXGENDVEXTPROC glad_glMultiTexGendvEXT;
void APIENTRY glad_debug_impl_glMultiTexGendvEXT(GLenum arg0, GLenum arg1, GLenum arg2, const GLdouble* arg3) {
    _pre_call_callback("glMultiTexGendvEXT", (void*)glMultiTexGendvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexGendvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexGendvEXT", (void*)glMultiTexGendvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXGENDVEXTPROC glad_debug_glMultiTexGendvEXT = glad_debug_impl_glMultiTexGendvEXT;
PFNGLMULTITEXGENFEXTPROC glad_glMultiTexGenfEXT;
void APIENTRY glad_debug_impl_glMultiTexGenfEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLfloat arg3) {
    _pre_call_callback("glMultiTexGenfEXT", (void*)glMultiTexGenfEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexGenfEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexGenfEXT", (void*)glMultiTexGenfEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXGENFEXTPROC glad_debug_glMultiTexGenfEXT = glad_debug_impl_glMultiTexGenfEXT;
PFNGLMULTITEXGENFVEXTPROC glad_glMultiTexGenfvEXT;
void APIENTRY glad_debug_impl_glMultiTexGenfvEXT(GLenum arg0, GLenum arg1, GLenum arg2, const GLfloat* arg3) {
    _pre_call_callback("glMultiTexGenfvEXT", (void*)glMultiTexGenfvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexGenfvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexGenfvEXT", (void*)glMultiTexGenfvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXGENFVEXTPROC glad_debug_glMultiTexGenfvEXT = glad_debug_impl_glMultiTexGenfvEXT;
PFNGLMULTITEXGENIEXTPROC glad_glMultiTexGeniEXT;
void APIENTRY glad_debug_impl_glMultiTexGeniEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLint arg3) {
    _pre_call_callback("glMultiTexGeniEXT", (void*)glMultiTexGeniEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexGeniEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexGeniEXT", (void*)glMultiTexGeniEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXGENIEXTPROC glad_debug_glMultiTexGeniEXT = glad_debug_impl_glMultiTexGeniEXT;
PFNGLMULTITEXGENIVEXTPROC glad_glMultiTexGenivEXT;
void APIENTRY glad_debug_impl_glMultiTexGenivEXT(GLenum arg0, GLenum arg1, GLenum arg2, const GLint* arg3) {
    _pre_call_callback("glMultiTexGenivEXT", (void*)glMultiTexGenivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexGenivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexGenivEXT", (void*)glMultiTexGenivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXGENIVEXTPROC glad_debug_glMultiTexGenivEXT = glad_debug_impl_glMultiTexGenivEXT;
PFNGLGETMULTITEXENVFVEXTPROC glad_glGetMultiTexEnvfvEXT;
void APIENTRY glad_debug_impl_glGetMultiTexEnvfvEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetMultiTexEnvfvEXT", (void*)glGetMultiTexEnvfvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetMultiTexEnvfvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMultiTexEnvfvEXT", (void*)glGetMultiTexEnvfvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMULTITEXENVFVEXTPROC glad_debug_glGetMultiTexEnvfvEXT = glad_debug_impl_glGetMultiTexEnvfvEXT;
PFNGLGETMULTITEXENVIVEXTPROC glad_glGetMultiTexEnvivEXT;
void APIENTRY glad_debug_impl_glGetMultiTexEnvivEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetMultiTexEnvivEXT", (void*)glGetMultiTexEnvivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetMultiTexEnvivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMultiTexEnvivEXT", (void*)glGetMultiTexEnvivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMULTITEXENVIVEXTPROC glad_debug_glGetMultiTexEnvivEXT = glad_debug_impl_glGetMultiTexEnvivEXT;
PFNGLGETMULTITEXGENDVEXTPROC glad_glGetMultiTexGendvEXT;
void APIENTRY glad_debug_impl_glGetMultiTexGendvEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLdouble* arg3) {
    _pre_call_callback("glGetMultiTexGendvEXT", (void*)glGetMultiTexGendvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetMultiTexGendvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMultiTexGendvEXT", (void*)glGetMultiTexGendvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMULTITEXGENDVEXTPROC glad_debug_glGetMultiTexGendvEXT = glad_debug_impl_glGetMultiTexGendvEXT;
PFNGLGETMULTITEXGENFVEXTPROC glad_glGetMultiTexGenfvEXT;
void APIENTRY glad_debug_impl_glGetMultiTexGenfvEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetMultiTexGenfvEXT", (void*)glGetMultiTexGenfvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetMultiTexGenfvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMultiTexGenfvEXT", (void*)glGetMultiTexGenfvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMULTITEXGENFVEXTPROC glad_debug_glGetMultiTexGenfvEXT = glad_debug_impl_glGetMultiTexGenfvEXT;
PFNGLGETMULTITEXGENIVEXTPROC glad_glGetMultiTexGenivEXT;
void APIENTRY glad_debug_impl_glGetMultiTexGenivEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetMultiTexGenivEXT", (void*)glGetMultiTexGenivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetMultiTexGenivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMultiTexGenivEXT", (void*)glGetMultiTexGenivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMULTITEXGENIVEXTPROC glad_debug_glGetMultiTexGenivEXT = glad_debug_impl_glGetMultiTexGenivEXT;
PFNGLMULTITEXPARAMETERIEXTPROC glad_glMultiTexParameteriEXT;
void APIENTRY glad_debug_impl_glMultiTexParameteriEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLint arg3) {
    _pre_call_callback("glMultiTexParameteriEXT", (void*)glMultiTexParameteriEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexParameteriEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexParameteriEXT", (void*)glMultiTexParameteriEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXPARAMETERIEXTPROC glad_debug_glMultiTexParameteriEXT = glad_debug_impl_glMultiTexParameteriEXT;
PFNGLMULTITEXPARAMETERIVEXTPROC glad_glMultiTexParameterivEXT;
void APIENTRY glad_debug_impl_glMultiTexParameterivEXT(GLenum arg0, GLenum arg1, GLenum arg2, const GLint* arg3) {
    _pre_call_callback("glMultiTexParameterivEXT", (void*)glMultiTexParameterivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexParameterivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexParameterivEXT", (void*)glMultiTexParameterivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXPARAMETERIVEXTPROC glad_debug_glMultiTexParameterivEXT = glad_debug_impl_glMultiTexParameterivEXT;
PFNGLMULTITEXPARAMETERFEXTPROC glad_glMultiTexParameterfEXT;
void APIENTRY glad_debug_impl_glMultiTexParameterfEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLfloat arg3) {
    _pre_call_callback("glMultiTexParameterfEXT", (void*)glMultiTexParameterfEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexParameterfEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexParameterfEXT", (void*)glMultiTexParameterfEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXPARAMETERFEXTPROC glad_debug_glMultiTexParameterfEXT = glad_debug_impl_glMultiTexParameterfEXT;
PFNGLMULTITEXPARAMETERFVEXTPROC glad_glMultiTexParameterfvEXT;
void APIENTRY glad_debug_impl_glMultiTexParameterfvEXT(GLenum arg0, GLenum arg1, GLenum arg2, const GLfloat* arg3) {
    _pre_call_callback("glMultiTexParameterfvEXT", (void*)glMultiTexParameterfvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexParameterfvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexParameterfvEXT", (void*)glMultiTexParameterfvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXPARAMETERFVEXTPROC glad_debug_glMultiTexParameterfvEXT = glad_debug_impl_glMultiTexParameterfvEXT;
PFNGLMULTITEXIMAGE1DEXTPROC glad_glMultiTexImage1DEXT;
void APIENTRY glad_debug_impl_glMultiTexImage1DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLint arg5, GLenum arg6, GLenum arg7, const void* arg8) {
    _pre_call_callback("glMultiTexImage1DEXT", (void*)glMultiTexImage1DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glMultiTexImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glMultiTexImage1DEXT", (void*)glMultiTexImage1DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLMULTITEXIMAGE1DEXTPROC glad_debug_glMultiTexImage1DEXT = glad_debug_impl_glMultiTexImage1DEXT;
PFNGLMULTITEXIMAGE2DEXTPROC glad_glMultiTexImage2DEXT;
void APIENTRY glad_debug_impl_glMultiTexImage2DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLenum arg7, GLenum arg8, const void* arg9) {
    _pre_call_callback("glMultiTexImage2DEXT", (void*)glMultiTexImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glMultiTexImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glMultiTexImage2DEXT", (void*)glMultiTexImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLMULTITEXIMAGE2DEXTPROC glad_debug_glMultiTexImage2DEXT = glad_debug_impl_glMultiTexImage2DEXT;
PFNGLMULTITEXSUBIMAGE1DEXTPROC glad_glMultiTexSubImage1DEXT;
void APIENTRY glad_debug_impl_glMultiTexSubImage1DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLenum arg5, GLenum arg6, const void* arg7) {
    _pre_call_callback("glMultiTexSubImage1DEXT", (void*)glMultiTexSubImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glMultiTexSubImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glMultiTexSubImage1DEXT", (void*)glMultiTexSubImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLMULTITEXSUBIMAGE1DEXTPROC glad_debug_glMultiTexSubImage1DEXT = glad_debug_impl_glMultiTexSubImage1DEXT;
PFNGLMULTITEXSUBIMAGE2DEXTPROC glad_glMultiTexSubImage2DEXT;
void APIENTRY glad_debug_impl_glMultiTexSubImage2DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLenum arg7, GLenum arg8, const void* arg9) {
    _pre_call_callback("glMultiTexSubImage2DEXT", (void*)glMultiTexSubImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glMultiTexSubImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glMultiTexSubImage2DEXT", (void*)glMultiTexSubImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLMULTITEXSUBIMAGE2DEXTPROC glad_debug_glMultiTexSubImage2DEXT = glad_debug_impl_glMultiTexSubImage2DEXT;
PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_glCopyMultiTexImage1DEXT;
void APIENTRY glad_debug_impl_glCopyMultiTexImage1DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLenum arg3, GLint arg4, GLint arg5, GLsizei arg6, GLint arg7) {
    _pre_call_callback("glCopyMultiTexImage1DEXT", (void*)glCopyMultiTexImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCopyMultiTexImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCopyMultiTexImage1DEXT", (void*)glCopyMultiTexImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_debug_glCopyMultiTexImage1DEXT = glad_debug_impl_glCopyMultiTexImage1DEXT;
PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_glCopyMultiTexImage2DEXT;
void APIENTRY glad_debug_impl_glCopyMultiTexImage2DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLenum arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7, GLint arg8) {
    _pre_call_callback("glCopyMultiTexImage2DEXT", (void*)glCopyMultiTexImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCopyMultiTexImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCopyMultiTexImage2DEXT", (void*)glCopyMultiTexImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_debug_glCopyMultiTexImage2DEXT = glad_debug_impl_glCopyMultiTexImage2DEXT;
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_glCopyMultiTexSubImage1DEXT;
void APIENTRY glad_debug_impl_glCopyMultiTexSubImage1DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6) {
    _pre_call_callback("glCopyMultiTexSubImage1DEXT", (void*)glCopyMultiTexSubImage1DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCopyMultiTexSubImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCopyMultiTexSubImage1DEXT", (void*)glCopyMultiTexSubImage1DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCopyMultiTexSubImage1DEXT = glad_debug_impl_glCopyMultiTexSubImage1DEXT;
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_glCopyMultiTexSubImage2DEXT;
void APIENTRY glad_debug_impl_glCopyMultiTexSubImage2DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLsizei arg7, GLsizei arg8) {
    _pre_call_callback("glCopyMultiTexSubImage2DEXT", (void*)glCopyMultiTexSubImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCopyMultiTexSubImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCopyMultiTexSubImage2DEXT", (void*)glCopyMultiTexSubImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCopyMultiTexSubImage2DEXT = glad_debug_impl_glCopyMultiTexSubImage2DEXT;
PFNGLGETMULTITEXIMAGEEXTPROC glad_glGetMultiTexImageEXT;
void APIENTRY glad_debug_impl_glGetMultiTexImageEXT(GLenum arg0, GLenum arg1, GLint arg2, GLenum arg3, GLenum arg4, void* arg5) {
    _pre_call_callback("glGetMultiTexImageEXT", (void*)glGetMultiTexImageEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetMultiTexImageEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetMultiTexImageEXT", (void*)glGetMultiTexImageEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETMULTITEXIMAGEEXTPROC glad_debug_glGetMultiTexImageEXT = glad_debug_impl_glGetMultiTexImageEXT;
PFNGLGETMULTITEXPARAMETERFVEXTPROC glad_glGetMultiTexParameterfvEXT;
void APIENTRY glad_debug_impl_glGetMultiTexParameterfvEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetMultiTexParameterfvEXT", (void*)glGetMultiTexParameterfvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetMultiTexParameterfvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMultiTexParameterfvEXT", (void*)glGetMultiTexParameterfvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMULTITEXPARAMETERFVEXTPROC glad_debug_glGetMultiTexParameterfvEXT = glad_debug_impl_glGetMultiTexParameterfvEXT;
PFNGLGETMULTITEXPARAMETERIVEXTPROC glad_glGetMultiTexParameterivEXT;
void APIENTRY glad_debug_impl_glGetMultiTexParameterivEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetMultiTexParameterivEXT", (void*)glGetMultiTexParameterivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetMultiTexParameterivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMultiTexParameterivEXT", (void*)glGetMultiTexParameterivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMULTITEXPARAMETERIVEXTPROC glad_debug_glGetMultiTexParameterivEXT = glad_debug_impl_glGetMultiTexParameterivEXT;
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glad_glGetMultiTexLevelParameterfvEXT;
void APIENTRY glad_debug_impl_glGetMultiTexLevelParameterfvEXT(GLenum arg0, GLenum arg1, GLint arg2, GLenum arg3, GLfloat* arg4) {
    _pre_call_callback("glGetMultiTexLevelParameterfvEXT", (void*)glGetMultiTexLevelParameterfvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetMultiTexLevelParameterfvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetMultiTexLevelParameterfvEXT", (void*)glGetMultiTexLevelParameterfvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glad_debug_glGetMultiTexLevelParameterfvEXT = glad_debug_impl_glGetMultiTexLevelParameterfvEXT;
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glad_glGetMultiTexLevelParameterivEXT;
void APIENTRY glad_debug_impl_glGetMultiTexLevelParameterivEXT(GLenum arg0, GLenum arg1, GLint arg2, GLenum arg3, GLint* arg4) {
    _pre_call_callback("glGetMultiTexLevelParameterivEXT", (void*)glGetMultiTexLevelParameterivEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetMultiTexLevelParameterivEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetMultiTexLevelParameterivEXT", (void*)glGetMultiTexLevelParameterivEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glad_debug_glGetMultiTexLevelParameterivEXT = glad_debug_impl_glGetMultiTexLevelParameterivEXT;
PFNGLMULTITEXIMAGE3DEXTPROC glad_glMultiTexImage3DEXT;
void APIENTRY glad_debug_impl_glMultiTexImage3DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6, GLint arg7, GLenum arg8, GLenum arg9, const void* arg10) {
    _pre_call_callback("glMultiTexImage3DEXT", (void*)glMultiTexImage3DEXT, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glMultiTexImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glMultiTexImage3DEXT", (void*)glMultiTexImage3DEXT, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLMULTITEXIMAGE3DEXTPROC glad_debug_glMultiTexImage3DEXT = glad_debug_impl_glMultiTexImage3DEXT;
PFNGLMULTITEXSUBIMAGE3DEXTPROC glad_glMultiTexSubImage3DEXT;
void APIENTRY glad_debug_impl_glMultiTexSubImage3DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7, GLsizei arg8, GLenum arg9, GLenum arg10, const void* arg11) {
    _pre_call_callback("glMultiTexSubImage3DEXT", (void*)glMultiTexSubImage3DEXT, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
     glad_glMultiTexSubImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_callback("glMultiTexSubImage3DEXT", (void*)glMultiTexSubImage3DEXT, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

}
PFNGLMULTITEXSUBIMAGE3DEXTPROC glad_debug_glMultiTexSubImage3DEXT = glad_debug_impl_glMultiTexSubImage3DEXT;
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_glCopyMultiTexSubImage3DEXT;
void APIENTRY glad_debug_impl_glCopyMultiTexSubImage3DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLint arg7, GLsizei arg8, GLsizei arg9) {
    _pre_call_callback("glCopyMultiTexSubImage3DEXT", (void*)glCopyMultiTexSubImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glCopyMultiTexSubImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glCopyMultiTexSubImage3DEXT", (void*)glCopyMultiTexSubImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCopyMultiTexSubImage3DEXT = glad_debug_impl_glCopyMultiTexSubImage3DEXT;
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glad_glEnableClientStateIndexedEXT;
void APIENTRY glad_debug_impl_glEnableClientStateIndexedEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glEnableClientStateIndexedEXT", (void*)glEnableClientStateIndexedEXT, 2, arg0, arg1);
     glad_glEnableClientStateIndexedEXT(arg0, arg1);
    _post_call_callback("glEnableClientStateIndexedEXT", (void*)glEnableClientStateIndexedEXT, 2, arg0, arg1);

}
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glad_debug_glEnableClientStateIndexedEXT = glad_debug_impl_glEnableClientStateIndexedEXT;
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glad_glDisableClientStateIndexedEXT;
void APIENTRY glad_debug_impl_glDisableClientStateIndexedEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glDisableClientStateIndexedEXT", (void*)glDisableClientStateIndexedEXT, 2, arg0, arg1);
     glad_glDisableClientStateIndexedEXT(arg0, arg1);
    _post_call_callback("glDisableClientStateIndexedEXT", (void*)glDisableClientStateIndexedEXT, 2, arg0, arg1);

}
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glad_debug_glDisableClientStateIndexedEXT = glad_debug_impl_glDisableClientStateIndexedEXT;
PFNGLGETFLOATINDEXEDVEXTPROC glad_glGetFloatIndexedvEXT;
void APIENTRY glad_debug_impl_glGetFloatIndexedvEXT(GLenum arg0, GLuint arg1, GLfloat* arg2) {
    _pre_call_callback("glGetFloatIndexedvEXT", (void*)glGetFloatIndexedvEXT, 3, arg0, arg1, arg2);
     glad_glGetFloatIndexedvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetFloatIndexedvEXT", (void*)glGetFloatIndexedvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETFLOATINDEXEDVEXTPROC glad_debug_glGetFloatIndexedvEXT = glad_debug_impl_glGetFloatIndexedvEXT;
PFNGLGETDOUBLEINDEXEDVEXTPROC glad_glGetDoubleIndexedvEXT;
void APIENTRY glad_debug_impl_glGetDoubleIndexedvEXT(GLenum arg0, GLuint arg1, GLdouble* arg2) {
    _pre_call_callback("glGetDoubleIndexedvEXT", (void*)glGetDoubleIndexedvEXT, 3, arg0, arg1, arg2);
     glad_glGetDoubleIndexedvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetDoubleIndexedvEXT", (void*)glGetDoubleIndexedvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETDOUBLEINDEXEDVEXTPROC glad_debug_glGetDoubleIndexedvEXT = glad_debug_impl_glGetDoubleIndexedvEXT;
PFNGLGETPOINTERINDEXEDVEXTPROC glad_glGetPointerIndexedvEXT;
void APIENTRY glad_debug_impl_glGetPointerIndexedvEXT(GLenum arg0, GLuint arg1, void** arg2) {
    _pre_call_callback("glGetPointerIndexedvEXT", (void*)glGetPointerIndexedvEXT, 3, arg0, arg1, arg2);
     glad_glGetPointerIndexedvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetPointerIndexedvEXT", (void*)glGetPointerIndexedvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETPOINTERINDEXEDVEXTPROC glad_debug_glGetPointerIndexedvEXT = glad_debug_impl_glGetPointerIndexedvEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_glCompressedTextureImage3DEXT;
void APIENTRY glad_debug_impl_glCompressedTextureImage3DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6, GLint arg7, GLsizei arg8, const void* arg9) {
    _pre_call_callback("glCompressedTextureImage3DEXT", (void*)glCompressedTextureImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glCompressedTextureImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glCompressedTextureImage3DEXT", (void*)glCompressedTextureImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_debug_glCompressedTextureImage3DEXT = glad_debug_impl_glCompressedTextureImage3DEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_glCompressedTextureImage2DEXT;
void APIENTRY glad_debug_impl_glCompressedTextureImage2DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLsizei arg7, const void* arg8) {
    _pre_call_callback("glCompressedTextureImage2DEXT", (void*)glCompressedTextureImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCompressedTextureImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCompressedTextureImage2DEXT", (void*)glCompressedTextureImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_debug_glCompressedTextureImage2DEXT = glad_debug_impl_glCompressedTextureImage2DEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_glCompressedTextureImage1DEXT;
void APIENTRY glad_debug_impl_glCompressedTextureImage1DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLint arg5, GLsizei arg6, const void* arg7) {
    _pre_call_callback("glCompressedTextureImage1DEXT", (void*)glCompressedTextureImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCompressedTextureImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCompressedTextureImage1DEXT", (void*)glCompressedTextureImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_debug_glCompressedTextureImage1DEXT = glad_debug_impl_glCompressedTextureImage1DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_glCompressedTextureSubImage3DEXT;
void APIENTRY glad_debug_impl_glCompressedTextureSubImage3DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7, GLsizei arg8, GLenum arg9, GLsizei arg10, const void* arg11) {
    _pre_call_callback("glCompressedTextureSubImage3DEXT", (void*)glCompressedTextureSubImage3DEXT, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
     glad_glCompressedTextureSubImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_callback("glCompressedTextureSubImage3DEXT", (void*)glCompressedTextureSubImage3DEXT, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

}
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_debug_glCompressedTextureSubImage3DEXT = glad_debug_impl_glCompressedTextureSubImage3DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_glCompressedTextureSubImage2DEXT;
void APIENTRY glad_debug_impl_glCompressedTextureSubImage2DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLenum arg7, GLsizei arg8, const void* arg9) {
    _pre_call_callback("glCompressedTextureSubImage2DEXT", (void*)glCompressedTextureSubImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glCompressedTextureSubImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glCompressedTextureSubImage2DEXT", (void*)glCompressedTextureSubImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_debug_glCompressedTextureSubImage2DEXT = glad_debug_impl_glCompressedTextureSubImage2DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_glCompressedTextureSubImage1DEXT;
void APIENTRY glad_debug_impl_glCompressedTextureSubImage1DEXT(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLenum arg5, GLsizei arg6, const void* arg7) {
    _pre_call_callback("glCompressedTextureSubImage1DEXT", (void*)glCompressedTextureSubImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCompressedTextureSubImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCompressedTextureSubImage1DEXT", (void*)glCompressedTextureSubImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_debug_glCompressedTextureSubImage1DEXT = glad_debug_impl_glCompressedTextureSubImage1DEXT;
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glad_glGetCompressedTextureImageEXT;
void APIENTRY glad_debug_impl_glGetCompressedTextureImageEXT(GLuint arg0, GLenum arg1, GLint arg2, void* arg3) {
    _pre_call_callback("glGetCompressedTextureImageEXT", (void*)glGetCompressedTextureImageEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetCompressedTextureImageEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetCompressedTextureImageEXT", (void*)glGetCompressedTextureImageEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glad_debug_glGetCompressedTextureImageEXT = glad_debug_impl_glGetCompressedTextureImageEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_glCompressedMultiTexImage3DEXT;
void APIENTRY glad_debug_impl_glCompressedMultiTexImage3DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6, GLint arg7, GLsizei arg8, const void* arg9) {
    _pre_call_callback("glCompressedMultiTexImage3DEXT", (void*)glCompressedMultiTexImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glCompressedMultiTexImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glCompressedMultiTexImage3DEXT", (void*)glCompressedMultiTexImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_debug_glCompressedMultiTexImage3DEXT = glad_debug_impl_glCompressedMultiTexImage3DEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_glCompressedMultiTexImage2DEXT;
void APIENTRY glad_debug_impl_glCompressedMultiTexImage2DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLsizei arg7, const void* arg8) {
    _pre_call_callback("glCompressedMultiTexImage2DEXT", (void*)glCompressedMultiTexImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCompressedMultiTexImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCompressedMultiTexImage2DEXT", (void*)glCompressedMultiTexImage2DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_debug_glCompressedMultiTexImage2DEXT = glad_debug_impl_glCompressedMultiTexImage2DEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_glCompressedMultiTexImage1DEXT;
void APIENTRY glad_debug_impl_glCompressedMultiTexImage1DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLint arg5, GLsizei arg6, const void* arg7) {
    _pre_call_callback("glCompressedMultiTexImage1DEXT", (void*)glCompressedMultiTexImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCompressedMultiTexImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCompressedMultiTexImage1DEXT", (void*)glCompressedMultiTexImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_debug_glCompressedMultiTexImage1DEXT = glad_debug_impl_glCompressedMultiTexImage1DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_glCompressedMultiTexSubImage3DEXT;
void APIENTRY glad_debug_impl_glCompressedMultiTexSubImage3DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7, GLsizei arg8, GLenum arg9, GLsizei arg10, const void* arg11) {
    _pre_call_callback("glCompressedMultiTexSubImage3DEXT", (void*)glCompressedMultiTexSubImage3DEXT, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
     glad_glCompressedMultiTexSubImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_callback("glCompressedMultiTexSubImage3DEXT", (void*)glCompressedMultiTexSubImage3DEXT, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

}
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_debug_glCompressedMultiTexSubImage3DEXT = glad_debug_impl_glCompressedMultiTexSubImage3DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_glCompressedMultiTexSubImage2DEXT;
void APIENTRY glad_debug_impl_glCompressedMultiTexSubImage2DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLenum arg7, GLsizei arg8, const void* arg9) {
    _pre_call_callback("glCompressedMultiTexSubImage2DEXT", (void*)glCompressedMultiTexSubImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glCompressedMultiTexSubImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glCompressedMultiTexSubImage2DEXT", (void*)glCompressedMultiTexSubImage2DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_debug_glCompressedMultiTexSubImage2DEXT = glad_debug_impl_glCompressedMultiTexSubImage2DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_glCompressedMultiTexSubImage1DEXT;
void APIENTRY glad_debug_impl_glCompressedMultiTexSubImage1DEXT(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLenum arg5, GLsizei arg6, const void* arg7) {
    _pre_call_callback("glCompressedMultiTexSubImage1DEXT", (void*)glCompressedMultiTexSubImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCompressedMultiTexSubImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCompressedMultiTexSubImage1DEXT", (void*)glCompressedMultiTexSubImage1DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_debug_glCompressedMultiTexSubImage1DEXT = glad_debug_impl_glCompressedMultiTexSubImage1DEXT;
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glad_glGetCompressedMultiTexImageEXT;
void APIENTRY glad_debug_impl_glGetCompressedMultiTexImageEXT(GLenum arg0, GLenum arg1, GLint arg2, void* arg3) {
    _pre_call_callback("glGetCompressedMultiTexImageEXT", (void*)glGetCompressedMultiTexImageEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetCompressedMultiTexImageEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetCompressedMultiTexImageEXT", (void*)glGetCompressedMultiTexImageEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glad_debug_glGetCompressedMultiTexImageEXT = glad_debug_impl_glGetCompressedMultiTexImageEXT;
PFNGLMATRIXLOADTRANSPOSEFEXTPROC glad_glMatrixLoadTransposefEXT;
void APIENTRY glad_debug_impl_glMatrixLoadTransposefEXT(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixLoadTransposefEXT", (void*)glMatrixLoadTransposefEXT, 2, arg0, arg1);
     glad_glMatrixLoadTransposefEXT(arg0, arg1);
    _post_call_callback("glMatrixLoadTransposefEXT", (void*)glMatrixLoadTransposefEXT, 2, arg0, arg1);

}
PFNGLMATRIXLOADTRANSPOSEFEXTPROC glad_debug_glMatrixLoadTransposefEXT = glad_debug_impl_glMatrixLoadTransposefEXT;
PFNGLMATRIXLOADTRANSPOSEDEXTPROC glad_glMatrixLoadTransposedEXT;
void APIENTRY glad_debug_impl_glMatrixLoadTransposedEXT(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glMatrixLoadTransposedEXT", (void*)glMatrixLoadTransposedEXT, 2, arg0, arg1);
     glad_glMatrixLoadTransposedEXT(arg0, arg1);
    _post_call_callback("glMatrixLoadTransposedEXT", (void*)glMatrixLoadTransposedEXT, 2, arg0, arg1);

}
PFNGLMATRIXLOADTRANSPOSEDEXTPROC glad_debug_glMatrixLoadTransposedEXT = glad_debug_impl_glMatrixLoadTransposedEXT;
PFNGLMATRIXMULTTRANSPOSEFEXTPROC glad_glMatrixMultTransposefEXT;
void APIENTRY glad_debug_impl_glMatrixMultTransposefEXT(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixMultTransposefEXT", (void*)glMatrixMultTransposefEXT, 2, arg0, arg1);
     glad_glMatrixMultTransposefEXT(arg0, arg1);
    _post_call_callback("glMatrixMultTransposefEXT", (void*)glMatrixMultTransposefEXT, 2, arg0, arg1);

}
PFNGLMATRIXMULTTRANSPOSEFEXTPROC glad_debug_glMatrixMultTransposefEXT = glad_debug_impl_glMatrixMultTransposefEXT;
PFNGLMATRIXMULTTRANSPOSEDEXTPROC glad_glMatrixMultTransposedEXT;
void APIENTRY glad_debug_impl_glMatrixMultTransposedEXT(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glMatrixMultTransposedEXT", (void*)glMatrixMultTransposedEXT, 2, arg0, arg1);
     glad_glMatrixMultTransposedEXT(arg0, arg1);
    _post_call_callback("glMatrixMultTransposedEXT", (void*)glMatrixMultTransposedEXT, 2, arg0, arg1);

}
PFNGLMATRIXMULTTRANSPOSEDEXTPROC glad_debug_glMatrixMultTransposedEXT = glad_debug_impl_glMatrixMultTransposedEXT;
PFNGLNAMEDBUFFERDATAEXTPROC glad_glNamedBufferDataEXT;
void APIENTRY glad_debug_impl_glNamedBufferDataEXT(GLuint arg0, GLsizeiptr arg1, const void* arg2, GLenum arg3) {
    _pre_call_callback("glNamedBufferDataEXT", (void*)glNamedBufferDataEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedBufferDataEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedBufferDataEXT", (void*)glNamedBufferDataEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDBUFFERDATAEXTPROC glad_debug_glNamedBufferDataEXT = glad_debug_impl_glNamedBufferDataEXT;
PFNGLNAMEDBUFFERSUBDATAEXTPROC glad_glNamedBufferSubDataEXT;
void APIENTRY glad_debug_impl_glNamedBufferSubDataEXT(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, const void* arg3) {
    _pre_call_callback("glNamedBufferSubDataEXT", (void*)glNamedBufferSubDataEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedBufferSubDataEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedBufferSubDataEXT", (void*)glNamedBufferSubDataEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDBUFFERSUBDATAEXTPROC glad_debug_glNamedBufferSubDataEXT = glad_debug_impl_glNamedBufferSubDataEXT;
PFNGLMAPNAMEDBUFFEREXTPROC glad_glMapNamedBufferEXT;
void* APIENTRY glad_debug_impl_glMapNamedBufferEXT(GLuint arg0, GLenum arg1) {
    void* ret;
    _pre_call_callback("glMapNamedBufferEXT", (void*)glMapNamedBufferEXT, 2, arg0, arg1);
    ret =  glad_glMapNamedBufferEXT(arg0, arg1);
    _post_call_callback("glMapNamedBufferEXT", (void*)glMapNamedBufferEXT, 2, arg0, arg1);
    return ret;
}
PFNGLMAPNAMEDBUFFEREXTPROC glad_debug_glMapNamedBufferEXT = glad_debug_impl_glMapNamedBufferEXT;
PFNGLUNMAPNAMEDBUFFEREXTPROC glad_glUnmapNamedBufferEXT;
GLboolean APIENTRY glad_debug_impl_glUnmapNamedBufferEXT(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glUnmapNamedBufferEXT", (void*)glUnmapNamedBufferEXT, 1, arg0);
    ret =  glad_glUnmapNamedBufferEXT(arg0);
    _post_call_callback("glUnmapNamedBufferEXT", (void*)glUnmapNamedBufferEXT, 1, arg0);
    return ret;
}
PFNGLUNMAPNAMEDBUFFEREXTPROC glad_debug_glUnmapNamedBufferEXT = glad_debug_impl_glUnmapNamedBufferEXT;
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glad_glGetNamedBufferParameterivEXT;
void APIENTRY glad_debug_impl_glGetNamedBufferParameterivEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetNamedBufferParameterivEXT", (void*)glGetNamedBufferParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetNamedBufferParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetNamedBufferParameterivEXT", (void*)glGetNamedBufferParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glad_debug_glGetNamedBufferParameterivEXT = glad_debug_impl_glGetNamedBufferParameterivEXT;
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glad_glGetNamedBufferPointervEXT;
void APIENTRY glad_debug_impl_glGetNamedBufferPointervEXT(GLuint arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetNamedBufferPointervEXT", (void*)glGetNamedBufferPointervEXT, 3, arg0, arg1, arg2);
     glad_glGetNamedBufferPointervEXT(arg0, arg1, arg2);
    _post_call_callback("glGetNamedBufferPointervEXT", (void*)glGetNamedBufferPointervEXT, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glad_debug_glGetNamedBufferPointervEXT = glad_debug_impl_glGetNamedBufferPointervEXT;
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glad_glGetNamedBufferSubDataEXT;
void APIENTRY glad_debug_impl_glGetNamedBufferSubDataEXT(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, void* arg3) {
    _pre_call_callback("glGetNamedBufferSubDataEXT", (void*)glGetNamedBufferSubDataEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedBufferSubDataEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedBufferSubDataEXT", (void*)glGetNamedBufferSubDataEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glad_debug_glGetNamedBufferSubDataEXT = glad_debug_impl_glGetNamedBufferSubDataEXT;
PFNGLTEXTUREBUFFEREXTPROC glad_glTextureBufferEXT;
void APIENTRY glad_debug_impl_glTextureBufferEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    _pre_call_callback("glTextureBufferEXT", (void*)glTextureBufferEXT, 4, arg0, arg1, arg2, arg3);
     glad_glTextureBufferEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glTextureBufferEXT", (void*)glTextureBufferEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXTUREBUFFEREXTPROC glad_debug_glTextureBufferEXT = glad_debug_impl_glTextureBufferEXT;
PFNGLMULTITEXBUFFEREXTPROC glad_glMultiTexBufferEXT;
void APIENTRY glad_debug_impl_glMultiTexBufferEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    _pre_call_callback("glMultiTexBufferEXT", (void*)glMultiTexBufferEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexBufferEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexBufferEXT", (void*)glMultiTexBufferEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXBUFFEREXTPROC glad_debug_glMultiTexBufferEXT = glad_debug_impl_glMultiTexBufferEXT;
PFNGLTEXTUREPARAMETERIIVEXTPROC glad_glTextureParameterIivEXT;
void APIENTRY glad_debug_impl_glTextureParameterIivEXT(GLuint arg0, GLenum arg1, GLenum arg2, const GLint* arg3) {
    _pre_call_callback("glTextureParameterIivEXT", (void*)glTextureParameterIivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glTextureParameterIivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glTextureParameterIivEXT", (void*)glTextureParameterIivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXTUREPARAMETERIIVEXTPROC glad_debug_glTextureParameterIivEXT = glad_debug_impl_glTextureParameterIivEXT;
PFNGLTEXTUREPARAMETERIUIVEXTPROC glad_glTextureParameterIuivEXT;
void APIENTRY glad_debug_impl_glTextureParameterIuivEXT(GLuint arg0, GLenum arg1, GLenum arg2, const GLuint* arg3) {
    _pre_call_callback("glTextureParameterIuivEXT", (void*)glTextureParameterIuivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glTextureParameterIuivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glTextureParameterIuivEXT", (void*)glTextureParameterIuivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXTUREPARAMETERIUIVEXTPROC glad_debug_glTextureParameterIuivEXT = glad_debug_impl_glTextureParameterIuivEXT;
PFNGLGETTEXTUREPARAMETERIIVEXTPROC glad_glGetTextureParameterIivEXT;
void APIENTRY glad_debug_impl_glGetTextureParameterIivEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetTextureParameterIivEXT", (void*)glGetTextureParameterIivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetTextureParameterIivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTextureParameterIivEXT", (void*)glGetTextureParameterIivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTEXTUREPARAMETERIIVEXTPROC glad_debug_glGetTextureParameterIivEXT = glad_debug_impl_glGetTextureParameterIivEXT;
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glad_glGetTextureParameterIuivEXT;
void APIENTRY glad_debug_impl_glGetTextureParameterIuivEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLuint* arg3) {
    _pre_call_callback("glGetTextureParameterIuivEXT", (void*)glGetTextureParameterIuivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetTextureParameterIuivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTextureParameterIuivEXT", (void*)glGetTextureParameterIuivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glad_debug_glGetTextureParameterIuivEXT = glad_debug_impl_glGetTextureParameterIuivEXT;
PFNGLMULTITEXPARAMETERIIVEXTPROC glad_glMultiTexParameterIivEXT;
void APIENTRY glad_debug_impl_glMultiTexParameterIivEXT(GLenum arg0, GLenum arg1, GLenum arg2, const GLint* arg3) {
    _pre_call_callback("glMultiTexParameterIivEXT", (void*)glMultiTexParameterIivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexParameterIivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexParameterIivEXT", (void*)glMultiTexParameterIivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXPARAMETERIIVEXTPROC glad_debug_glMultiTexParameterIivEXT = glad_debug_impl_glMultiTexParameterIivEXT;
PFNGLMULTITEXPARAMETERIUIVEXTPROC glad_glMultiTexParameterIuivEXT;
void APIENTRY glad_debug_impl_glMultiTexParameterIuivEXT(GLenum arg0, GLenum arg1, GLenum arg2, const GLuint* arg3) {
    _pre_call_callback("glMultiTexParameterIuivEXT", (void*)glMultiTexParameterIuivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexParameterIuivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexParameterIuivEXT", (void*)glMultiTexParameterIuivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXPARAMETERIUIVEXTPROC glad_debug_glMultiTexParameterIuivEXT = glad_debug_impl_glMultiTexParameterIuivEXT;
PFNGLGETMULTITEXPARAMETERIIVEXTPROC glad_glGetMultiTexParameterIivEXT;
void APIENTRY glad_debug_impl_glGetMultiTexParameterIivEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetMultiTexParameterIivEXT", (void*)glGetMultiTexParameterIivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetMultiTexParameterIivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMultiTexParameterIivEXT", (void*)glGetMultiTexParameterIivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMULTITEXPARAMETERIIVEXTPROC glad_debug_glGetMultiTexParameterIivEXT = glad_debug_impl_glGetMultiTexParameterIivEXT;
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glad_glGetMultiTexParameterIuivEXT;
void APIENTRY glad_debug_impl_glGetMultiTexParameterIuivEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLuint* arg3) {
    _pre_call_callback("glGetMultiTexParameterIuivEXT", (void*)glGetMultiTexParameterIuivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetMultiTexParameterIuivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetMultiTexParameterIuivEXT", (void*)glGetMultiTexParameterIuivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glad_debug_glGetMultiTexParameterIuivEXT = glad_debug_impl_glGetMultiTexParameterIuivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glad_glNamedProgramLocalParameters4fvEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParameters4fvEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, const GLfloat* arg4) {
    _pre_call_callback("glNamedProgramLocalParameters4fvEXT", (void*)glNamedProgramLocalParameters4fvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedProgramLocalParameters4fvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedProgramLocalParameters4fvEXT", (void*)glNamedProgramLocalParameters4fvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glad_debug_glNamedProgramLocalParameters4fvEXT = glad_debug_impl_glNamedProgramLocalParameters4fvEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glad_glNamedProgramLocalParameterI4iEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParameterI4iEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6) {
    _pre_call_callback("glNamedProgramLocalParameterI4iEXT", (void*)glNamedProgramLocalParameterI4iEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glNamedProgramLocalParameterI4iEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glNamedProgramLocalParameterI4iEXT", (void*)glNamedProgramLocalParameterI4iEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glad_debug_glNamedProgramLocalParameterI4iEXT = glad_debug_impl_glNamedProgramLocalParameterI4iEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glad_glNamedProgramLocalParameterI4ivEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParameterI4ivEXT(GLuint arg0, GLenum arg1, GLuint arg2, const GLint* arg3) {
    _pre_call_callback("glNamedProgramLocalParameterI4ivEXT", (void*)glNamedProgramLocalParameterI4ivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedProgramLocalParameterI4ivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedProgramLocalParameterI4ivEXT", (void*)glNamedProgramLocalParameterI4ivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glad_debug_glNamedProgramLocalParameterI4ivEXT = glad_debug_impl_glNamedProgramLocalParameterI4ivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glad_glNamedProgramLocalParametersI4ivEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParametersI4ivEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, const GLint* arg4) {
    _pre_call_callback("glNamedProgramLocalParametersI4ivEXT", (void*)glNamedProgramLocalParametersI4ivEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedProgramLocalParametersI4ivEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedProgramLocalParametersI4ivEXT", (void*)glNamedProgramLocalParametersI4ivEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glad_debug_glNamedProgramLocalParametersI4ivEXT = glad_debug_impl_glNamedProgramLocalParametersI4ivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glad_glNamedProgramLocalParameterI4uiEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParameterI4uiEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5, GLuint arg6) {
    _pre_call_callback("glNamedProgramLocalParameterI4uiEXT", (void*)glNamedProgramLocalParameterI4uiEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glNamedProgramLocalParameterI4uiEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glNamedProgramLocalParameterI4uiEXT", (void*)glNamedProgramLocalParameterI4uiEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glad_debug_glNamedProgramLocalParameterI4uiEXT = glad_debug_impl_glNamedProgramLocalParameterI4uiEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glad_glNamedProgramLocalParameterI4uivEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParameterI4uivEXT(GLuint arg0, GLenum arg1, GLuint arg2, const GLuint* arg3) {
    _pre_call_callback("glNamedProgramLocalParameterI4uivEXT", (void*)glNamedProgramLocalParameterI4uivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedProgramLocalParameterI4uivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedProgramLocalParameterI4uivEXT", (void*)glNamedProgramLocalParameterI4uivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glad_debug_glNamedProgramLocalParameterI4uivEXT = glad_debug_impl_glNamedProgramLocalParameterI4uivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glad_glNamedProgramLocalParametersI4uivEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParametersI4uivEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, const GLuint* arg4) {
    _pre_call_callback("glNamedProgramLocalParametersI4uivEXT", (void*)glNamedProgramLocalParametersI4uivEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedProgramLocalParametersI4uivEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedProgramLocalParametersI4uivEXT", (void*)glNamedProgramLocalParametersI4uivEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glad_debug_glNamedProgramLocalParametersI4uivEXT = glad_debug_impl_glNamedProgramLocalParametersI4uivEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glad_glGetNamedProgramLocalParameterIivEXT;
void APIENTRY glad_debug_impl_glGetNamedProgramLocalParameterIivEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLint* arg3) {
    _pre_call_callback("glGetNamedProgramLocalParameterIivEXT", (void*)glGetNamedProgramLocalParameterIivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedProgramLocalParameterIivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedProgramLocalParameterIivEXT", (void*)glGetNamedProgramLocalParameterIivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glad_debug_glGetNamedProgramLocalParameterIivEXT = glad_debug_impl_glGetNamedProgramLocalParameterIivEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glad_glGetNamedProgramLocalParameterIuivEXT;
void APIENTRY glad_debug_impl_glGetNamedProgramLocalParameterIuivEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLuint* arg3) {
    _pre_call_callback("glGetNamedProgramLocalParameterIuivEXT", (void*)glGetNamedProgramLocalParameterIuivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedProgramLocalParameterIuivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedProgramLocalParameterIuivEXT", (void*)glGetNamedProgramLocalParameterIuivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glad_debug_glGetNamedProgramLocalParameterIuivEXT = glad_debug_impl_glGetNamedProgramLocalParameterIuivEXT;
PFNGLENABLECLIENTSTATEIEXTPROC glad_glEnableClientStateiEXT;
void APIENTRY glad_debug_impl_glEnableClientStateiEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glEnableClientStateiEXT", (void*)glEnableClientStateiEXT, 2, arg0, arg1);
     glad_glEnableClientStateiEXT(arg0, arg1);
    _post_call_callback("glEnableClientStateiEXT", (void*)glEnableClientStateiEXT, 2, arg0, arg1);

}
PFNGLENABLECLIENTSTATEIEXTPROC glad_debug_glEnableClientStateiEXT = glad_debug_impl_glEnableClientStateiEXT;
PFNGLDISABLECLIENTSTATEIEXTPROC glad_glDisableClientStateiEXT;
void APIENTRY glad_debug_impl_glDisableClientStateiEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glDisableClientStateiEXT", (void*)glDisableClientStateiEXT, 2, arg0, arg1);
     glad_glDisableClientStateiEXT(arg0, arg1);
    _post_call_callback("glDisableClientStateiEXT", (void*)glDisableClientStateiEXT, 2, arg0, arg1);

}
PFNGLDISABLECLIENTSTATEIEXTPROC glad_debug_glDisableClientStateiEXT = glad_debug_impl_glDisableClientStateiEXT;
PFNGLGETFLOATI_VEXTPROC glad_glGetFloati_vEXT;
void APIENTRY glad_debug_impl_glGetFloati_vEXT(GLenum arg0, GLuint arg1, GLfloat* arg2) {
    _pre_call_callback("glGetFloati_vEXT", (void*)glGetFloati_vEXT, 3, arg0, arg1, arg2);
     glad_glGetFloati_vEXT(arg0, arg1, arg2);
    _post_call_callback("glGetFloati_vEXT", (void*)glGetFloati_vEXT, 3, arg0, arg1, arg2);

}
PFNGLGETFLOATI_VEXTPROC glad_debug_glGetFloati_vEXT = glad_debug_impl_glGetFloati_vEXT;
PFNGLGETDOUBLEI_VEXTPROC glad_glGetDoublei_vEXT;
void APIENTRY glad_debug_impl_glGetDoublei_vEXT(GLenum arg0, GLuint arg1, GLdouble* arg2) {
    _pre_call_callback("glGetDoublei_vEXT", (void*)glGetDoublei_vEXT, 3, arg0, arg1, arg2);
     glad_glGetDoublei_vEXT(arg0, arg1, arg2);
    _post_call_callback("glGetDoublei_vEXT", (void*)glGetDoublei_vEXT, 3, arg0, arg1, arg2);

}
PFNGLGETDOUBLEI_VEXTPROC glad_debug_glGetDoublei_vEXT = glad_debug_impl_glGetDoublei_vEXT;
PFNGLGETPOINTERI_VEXTPROC glad_glGetPointeri_vEXT;
void APIENTRY glad_debug_impl_glGetPointeri_vEXT(GLenum arg0, GLuint arg1, void** arg2) {
    _pre_call_callback("glGetPointeri_vEXT", (void*)glGetPointeri_vEXT, 3, arg0, arg1, arg2);
     glad_glGetPointeri_vEXT(arg0, arg1, arg2);
    _post_call_callback("glGetPointeri_vEXT", (void*)glGetPointeri_vEXT, 3, arg0, arg1, arg2);

}
PFNGLGETPOINTERI_VEXTPROC glad_debug_glGetPointeri_vEXT = glad_debug_impl_glGetPointeri_vEXT;
PFNGLNAMEDPROGRAMSTRINGEXTPROC glad_glNamedProgramStringEXT;
void APIENTRY glad_debug_impl_glNamedProgramStringEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glNamedProgramStringEXT", (void*)glNamedProgramStringEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedProgramStringEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedProgramStringEXT", (void*)glNamedProgramStringEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDPROGRAMSTRINGEXTPROC glad_debug_glNamedProgramStringEXT = glad_debug_impl_glNamedProgramStringEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glad_glNamedProgramLocalParameter4dEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParameter4dEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5, GLdouble arg6) {
    _pre_call_callback("glNamedProgramLocalParameter4dEXT", (void*)glNamedProgramLocalParameter4dEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glNamedProgramLocalParameter4dEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glNamedProgramLocalParameter4dEXT", (void*)glNamedProgramLocalParameter4dEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glad_debug_glNamedProgramLocalParameter4dEXT = glad_debug_impl_glNamedProgramLocalParameter4dEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glad_glNamedProgramLocalParameter4dvEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParameter4dvEXT(GLuint arg0, GLenum arg1, GLuint arg2, const GLdouble* arg3) {
    _pre_call_callback("glNamedProgramLocalParameter4dvEXT", (void*)glNamedProgramLocalParameter4dvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedProgramLocalParameter4dvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedProgramLocalParameter4dvEXT", (void*)glNamedProgramLocalParameter4dvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glad_debug_glNamedProgramLocalParameter4dvEXT = glad_debug_impl_glNamedProgramLocalParameter4dvEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glad_glNamedProgramLocalParameter4fEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParameter4fEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6) {
    _pre_call_callback("glNamedProgramLocalParameter4fEXT", (void*)glNamedProgramLocalParameter4fEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glNamedProgramLocalParameter4fEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glNamedProgramLocalParameter4fEXT", (void*)glNamedProgramLocalParameter4fEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glad_debug_glNamedProgramLocalParameter4fEXT = glad_debug_impl_glNamedProgramLocalParameter4fEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glad_glNamedProgramLocalParameter4fvEXT;
void APIENTRY glad_debug_impl_glNamedProgramLocalParameter4fvEXT(GLuint arg0, GLenum arg1, GLuint arg2, const GLfloat* arg3) {
    _pre_call_callback("glNamedProgramLocalParameter4fvEXT", (void*)glNamedProgramLocalParameter4fvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedProgramLocalParameter4fvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedProgramLocalParameter4fvEXT", (void*)glNamedProgramLocalParameter4fvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glad_debug_glNamedProgramLocalParameter4fvEXT = glad_debug_impl_glNamedProgramLocalParameter4fvEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glad_glGetNamedProgramLocalParameterdvEXT;
void APIENTRY glad_debug_impl_glGetNamedProgramLocalParameterdvEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLdouble* arg3) {
    _pre_call_callback("glGetNamedProgramLocalParameterdvEXT", (void*)glGetNamedProgramLocalParameterdvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedProgramLocalParameterdvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedProgramLocalParameterdvEXT", (void*)glGetNamedProgramLocalParameterdvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glad_debug_glGetNamedProgramLocalParameterdvEXT = glad_debug_impl_glGetNamedProgramLocalParameterdvEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glad_glGetNamedProgramLocalParameterfvEXT;
void APIENTRY glad_debug_impl_glGetNamedProgramLocalParameterfvEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLfloat* arg3) {
    _pre_call_callback("glGetNamedProgramLocalParameterfvEXT", (void*)glGetNamedProgramLocalParameterfvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedProgramLocalParameterfvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedProgramLocalParameterfvEXT", (void*)glGetNamedProgramLocalParameterfvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glad_debug_glGetNamedProgramLocalParameterfvEXT = glad_debug_impl_glGetNamedProgramLocalParameterfvEXT;
PFNGLGETNAMEDPROGRAMIVEXTPROC glad_glGetNamedProgramivEXT;
void APIENTRY glad_debug_impl_glGetNamedProgramivEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetNamedProgramivEXT", (void*)glGetNamedProgramivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedProgramivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedProgramivEXT", (void*)glGetNamedProgramivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDPROGRAMIVEXTPROC glad_debug_glGetNamedProgramivEXT = glad_debug_impl_glGetNamedProgramivEXT;
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glad_glGetNamedProgramStringEXT;
void APIENTRY glad_debug_impl_glGetNamedProgramStringEXT(GLuint arg0, GLenum arg1, GLenum arg2, void* arg3) {
    _pre_call_callback("glGetNamedProgramStringEXT", (void*)glGetNamedProgramStringEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedProgramStringEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedProgramStringEXT", (void*)glGetNamedProgramStringEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glad_debug_glGetNamedProgramStringEXT = glad_debug_impl_glGetNamedProgramStringEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glad_glNamedRenderbufferStorageEXT;
void APIENTRY glad_debug_impl_glNamedRenderbufferStorageEXT(GLuint arg0, GLenum arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glNamedRenderbufferStorageEXT", (void*)glNamedRenderbufferStorageEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedRenderbufferStorageEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedRenderbufferStorageEXT", (void*)glNamedRenderbufferStorageEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glad_debug_glNamedRenderbufferStorageEXT = glad_debug_impl_glNamedRenderbufferStorageEXT;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glad_glGetNamedRenderbufferParameterivEXT;
void APIENTRY glad_debug_impl_glGetNamedRenderbufferParameterivEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetNamedRenderbufferParameterivEXT", (void*)glGetNamedRenderbufferParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetNamedRenderbufferParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetNamedRenderbufferParameterivEXT", (void*)glGetNamedRenderbufferParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glad_debug_glGetNamedRenderbufferParameterivEXT = glad_debug_impl_glGetNamedRenderbufferParameterivEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_glNamedRenderbufferStorageMultisampleEXT;
void APIENTRY glad_debug_impl_glNamedRenderbufferStorageMultisampleEXT(GLuint arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glNamedRenderbufferStorageMultisampleEXT", (void*)glNamedRenderbufferStorageMultisampleEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedRenderbufferStorageMultisampleEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedRenderbufferStorageMultisampleEXT", (void*)glNamedRenderbufferStorageMultisampleEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_debug_glNamedRenderbufferStorageMultisampleEXT = glad_debug_impl_glNamedRenderbufferStorageMultisampleEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glad_glNamedRenderbufferStorageMultisampleCoverageEXT;
void APIENTRY glad_debug_impl_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint arg0, GLsizei arg1, GLsizei arg2, GLenum arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_callback("glNamedRenderbufferStorageMultisampleCoverageEXT", (void*)glNamedRenderbufferStorageMultisampleCoverageEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glNamedRenderbufferStorageMultisampleCoverageEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glNamedRenderbufferStorageMultisampleCoverageEXT", (void*)glNamedRenderbufferStorageMultisampleCoverageEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glad_debug_glNamedRenderbufferStorageMultisampleCoverageEXT = glad_debug_impl_glNamedRenderbufferStorageMultisampleCoverageEXT;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_glCheckNamedFramebufferStatusEXT;
GLenum APIENTRY glad_debug_impl_glCheckNamedFramebufferStatusEXT(GLuint arg0, GLenum arg1) {
    GLenum ret;
    _pre_call_callback("glCheckNamedFramebufferStatusEXT", (void*)glCheckNamedFramebufferStatusEXT, 2, arg0, arg1);
    ret =  glad_glCheckNamedFramebufferStatusEXT(arg0, arg1);
    _post_call_callback("glCheckNamedFramebufferStatusEXT", (void*)glCheckNamedFramebufferStatusEXT, 2, arg0, arg1);
    return ret;
}
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckNamedFramebufferStatusEXT = glad_debug_impl_glCheckNamedFramebufferStatusEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glad_glNamedFramebufferTexture1DEXT;
void APIENTRY glad_debug_impl_glNamedFramebufferTexture1DEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_callback("glNamedFramebufferTexture1DEXT", (void*)glNamedFramebufferTexture1DEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedFramebufferTexture1DEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedFramebufferTexture1DEXT", (void*)glNamedFramebufferTexture1DEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glad_debug_glNamedFramebufferTexture1DEXT = glad_debug_impl_glNamedFramebufferTexture1DEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glad_glNamedFramebufferTexture2DEXT;
void APIENTRY glad_debug_impl_glNamedFramebufferTexture2DEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_callback("glNamedFramebufferTexture2DEXT", (void*)glNamedFramebufferTexture2DEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedFramebufferTexture2DEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedFramebufferTexture2DEXT", (void*)glNamedFramebufferTexture2DEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glad_debug_glNamedFramebufferTexture2DEXT = glad_debug_impl_glNamedFramebufferTexture2DEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glad_glNamedFramebufferTexture3DEXT;
void APIENTRY glad_debug_impl_glNamedFramebufferTexture3DEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4, GLint arg5) {
    _pre_call_callback("glNamedFramebufferTexture3DEXT", (void*)glNamedFramebufferTexture3DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glNamedFramebufferTexture3DEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glNamedFramebufferTexture3DEXT", (void*)glNamedFramebufferTexture3DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glad_debug_glNamedFramebufferTexture3DEXT = glad_debug_impl_glNamedFramebufferTexture3DEXT;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glad_glNamedFramebufferRenderbufferEXT;
void APIENTRY glad_debug_impl_glNamedFramebufferRenderbufferEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    _pre_call_callback("glNamedFramebufferRenderbufferEXT", (void*)glNamedFramebufferRenderbufferEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedFramebufferRenderbufferEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedFramebufferRenderbufferEXT", (void*)glNamedFramebufferRenderbufferEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glad_debug_glNamedFramebufferRenderbufferEXT = glad_debug_impl_glNamedFramebufferRenderbufferEXT;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_glGetNamedFramebufferAttachmentParameterivEXT;
void APIENTRY glad_debug_impl_glGetNamedFramebufferAttachmentParameterivEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetNamedFramebufferAttachmentParameterivEXT", (void*)glGetNamedFramebufferAttachmentParameterivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedFramebufferAttachmentParameterivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedFramebufferAttachmentParameterivEXT", (void*)glGetNamedFramebufferAttachmentParameterivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_debug_glGetNamedFramebufferAttachmentParameterivEXT = glad_debug_impl_glGetNamedFramebufferAttachmentParameterivEXT;
PFNGLGENERATETEXTUREMIPMAPEXTPROC glad_glGenerateTextureMipmapEXT;
void APIENTRY glad_debug_impl_glGenerateTextureMipmapEXT(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glGenerateTextureMipmapEXT", (void*)glGenerateTextureMipmapEXT, 2, arg0, arg1);
     glad_glGenerateTextureMipmapEXT(arg0, arg1);
    _post_call_callback("glGenerateTextureMipmapEXT", (void*)glGenerateTextureMipmapEXT, 2, arg0, arg1);

}
PFNGLGENERATETEXTUREMIPMAPEXTPROC glad_debug_glGenerateTextureMipmapEXT = glad_debug_impl_glGenerateTextureMipmapEXT;
PFNGLGENERATEMULTITEXMIPMAPEXTPROC glad_glGenerateMultiTexMipmapEXT;
void APIENTRY glad_debug_impl_glGenerateMultiTexMipmapEXT(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glGenerateMultiTexMipmapEXT", (void*)glGenerateMultiTexMipmapEXT, 2, arg0, arg1);
     glad_glGenerateMultiTexMipmapEXT(arg0, arg1);
    _post_call_callback("glGenerateMultiTexMipmapEXT", (void*)glGenerateMultiTexMipmapEXT, 2, arg0, arg1);

}
PFNGLGENERATEMULTITEXMIPMAPEXTPROC glad_debug_glGenerateMultiTexMipmapEXT = glad_debug_impl_glGenerateMultiTexMipmapEXT;
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glad_glFramebufferDrawBufferEXT;
void APIENTRY glad_debug_impl_glFramebufferDrawBufferEXT(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glFramebufferDrawBufferEXT", (void*)glFramebufferDrawBufferEXT, 2, arg0, arg1);
     glad_glFramebufferDrawBufferEXT(arg0, arg1);
    _post_call_callback("glFramebufferDrawBufferEXT", (void*)glFramebufferDrawBufferEXT, 2, arg0, arg1);

}
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glad_debug_glFramebufferDrawBufferEXT = glad_debug_impl_glFramebufferDrawBufferEXT;
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glad_glFramebufferDrawBuffersEXT;
void APIENTRY glad_debug_impl_glFramebufferDrawBuffersEXT(GLuint arg0, GLsizei arg1, const GLenum* arg2) {
    _pre_call_callback("glFramebufferDrawBuffersEXT", (void*)glFramebufferDrawBuffersEXT, 3, arg0, arg1, arg2);
     glad_glFramebufferDrawBuffersEXT(arg0, arg1, arg2);
    _post_call_callback("glFramebufferDrawBuffersEXT", (void*)glFramebufferDrawBuffersEXT, 3, arg0, arg1, arg2);

}
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glad_debug_glFramebufferDrawBuffersEXT = glad_debug_impl_glFramebufferDrawBuffersEXT;
PFNGLFRAMEBUFFERREADBUFFEREXTPROC glad_glFramebufferReadBufferEXT;
void APIENTRY glad_debug_impl_glFramebufferReadBufferEXT(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glFramebufferReadBufferEXT", (void*)glFramebufferReadBufferEXT, 2, arg0, arg1);
     glad_glFramebufferReadBufferEXT(arg0, arg1);
    _post_call_callback("glFramebufferReadBufferEXT", (void*)glFramebufferReadBufferEXT, 2, arg0, arg1);

}
PFNGLFRAMEBUFFERREADBUFFEREXTPROC glad_debug_glFramebufferReadBufferEXT = glad_debug_impl_glFramebufferReadBufferEXT;
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glad_glGetFramebufferParameterivEXT;
void APIENTRY glad_debug_impl_glGetFramebufferParameterivEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetFramebufferParameterivEXT", (void*)glGetFramebufferParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetFramebufferParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetFramebufferParameterivEXT", (void*)glGetFramebufferParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glad_debug_glGetFramebufferParameterivEXT = glad_debug_impl_glGetFramebufferParameterivEXT;
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glad_glNamedCopyBufferSubDataEXT;
void APIENTRY glad_debug_impl_glNamedCopyBufferSubDataEXT(GLuint arg0, GLuint arg1, GLintptr arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_callback("glNamedCopyBufferSubDataEXT", (void*)glNamedCopyBufferSubDataEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedCopyBufferSubDataEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedCopyBufferSubDataEXT", (void*)glNamedCopyBufferSubDataEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glad_debug_glNamedCopyBufferSubDataEXT = glad_debug_impl_glNamedCopyBufferSubDataEXT;
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glad_glNamedFramebufferTextureEXT;
void APIENTRY glad_debug_impl_glNamedFramebufferTextureEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLint arg3) {
    _pre_call_callback("glNamedFramebufferTextureEXT", (void*)glNamedFramebufferTextureEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedFramebufferTextureEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedFramebufferTextureEXT", (void*)glNamedFramebufferTextureEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glad_debug_glNamedFramebufferTextureEXT = glad_debug_impl_glNamedFramebufferTextureEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glad_glNamedFramebufferTextureLayerEXT;
void APIENTRY glad_debug_impl_glNamedFramebufferTextureLayerEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glNamedFramebufferTextureLayerEXT", (void*)glNamedFramebufferTextureLayerEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedFramebufferTextureLayerEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedFramebufferTextureLayerEXT", (void*)glNamedFramebufferTextureLayerEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glad_debug_glNamedFramebufferTextureLayerEXT = glad_debug_impl_glNamedFramebufferTextureLayerEXT;
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glad_glNamedFramebufferTextureFaceEXT;
void APIENTRY glad_debug_impl_glNamedFramebufferTextureFaceEXT(GLuint arg0, GLenum arg1, GLuint arg2, GLint arg3, GLenum arg4) {
    _pre_call_callback("glNamedFramebufferTextureFaceEXT", (void*)glNamedFramebufferTextureFaceEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedFramebufferTextureFaceEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedFramebufferTextureFaceEXT", (void*)glNamedFramebufferTextureFaceEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glad_debug_glNamedFramebufferTextureFaceEXT = glad_debug_impl_glNamedFramebufferTextureFaceEXT;
PFNGLTEXTURERENDERBUFFEREXTPROC glad_glTextureRenderbufferEXT;
void APIENTRY glad_debug_impl_glTextureRenderbufferEXT(GLuint arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glTextureRenderbufferEXT", (void*)glTextureRenderbufferEXT, 3, arg0, arg1, arg2);
     glad_glTextureRenderbufferEXT(arg0, arg1, arg2);
    _post_call_callback("glTextureRenderbufferEXT", (void*)glTextureRenderbufferEXT, 3, arg0, arg1, arg2);

}
PFNGLTEXTURERENDERBUFFEREXTPROC glad_debug_glTextureRenderbufferEXT = glad_debug_impl_glTextureRenderbufferEXT;
PFNGLMULTITEXRENDERBUFFEREXTPROC glad_glMultiTexRenderbufferEXT;
void APIENTRY glad_debug_impl_glMultiTexRenderbufferEXT(GLenum arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glMultiTexRenderbufferEXT", (void*)glMultiTexRenderbufferEXT, 3, arg0, arg1, arg2);
     glad_glMultiTexRenderbufferEXT(arg0, arg1, arg2);
    _post_call_callback("glMultiTexRenderbufferEXT", (void*)glMultiTexRenderbufferEXT, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXRENDERBUFFEREXTPROC glad_debug_glMultiTexRenderbufferEXT = glad_debug_impl_glMultiTexRenderbufferEXT;
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glad_glVertexArrayVertexOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexOffsetEXT(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLintptr arg5) {
    _pre_call_callback("glVertexArrayVertexOffsetEXT", (void*)glVertexArrayVertexOffsetEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glVertexArrayVertexOffsetEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glVertexArrayVertexOffsetEXT", (void*)glVertexArrayVertexOffsetEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glad_debug_glVertexArrayVertexOffsetEXT = glad_debug_impl_glVertexArrayVertexOffsetEXT;
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glad_glVertexArrayColorOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayColorOffsetEXT(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLintptr arg5) {
    _pre_call_callback("glVertexArrayColorOffsetEXT", (void*)glVertexArrayColorOffsetEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glVertexArrayColorOffsetEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glVertexArrayColorOffsetEXT", (void*)glVertexArrayColorOffsetEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glad_debug_glVertexArrayColorOffsetEXT = glad_debug_impl_glVertexArrayColorOffsetEXT;
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glad_glVertexArrayEdgeFlagOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayEdgeFlagOffsetEXT(GLuint arg0, GLuint arg1, GLsizei arg2, GLintptr arg3) {
    _pre_call_callback("glVertexArrayEdgeFlagOffsetEXT", (void*)glVertexArrayEdgeFlagOffsetEXT, 4, arg0, arg1, arg2, arg3);
     glad_glVertexArrayEdgeFlagOffsetEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexArrayEdgeFlagOffsetEXT", (void*)glVertexArrayEdgeFlagOffsetEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glad_debug_glVertexArrayEdgeFlagOffsetEXT = glad_debug_impl_glVertexArrayEdgeFlagOffsetEXT;
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glad_glVertexArrayIndexOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayIndexOffsetEXT(GLuint arg0, GLuint arg1, GLenum arg2, GLsizei arg3, GLintptr arg4) {
    _pre_call_callback("glVertexArrayIndexOffsetEXT", (void*)glVertexArrayIndexOffsetEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexArrayIndexOffsetEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexArrayIndexOffsetEXT", (void*)glVertexArrayIndexOffsetEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glad_debug_glVertexArrayIndexOffsetEXT = glad_debug_impl_glVertexArrayIndexOffsetEXT;
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glad_glVertexArrayNormalOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayNormalOffsetEXT(GLuint arg0, GLuint arg1, GLenum arg2, GLsizei arg3, GLintptr arg4) {
    _pre_call_callback("glVertexArrayNormalOffsetEXT", (void*)glVertexArrayNormalOffsetEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexArrayNormalOffsetEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexArrayNormalOffsetEXT", (void*)glVertexArrayNormalOffsetEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glad_debug_glVertexArrayNormalOffsetEXT = glad_debug_impl_glVertexArrayNormalOffsetEXT;
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glad_glVertexArrayTexCoordOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayTexCoordOffsetEXT(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLintptr arg5) {
    _pre_call_callback("glVertexArrayTexCoordOffsetEXT", (void*)glVertexArrayTexCoordOffsetEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glVertexArrayTexCoordOffsetEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glVertexArrayTexCoordOffsetEXT", (void*)glVertexArrayTexCoordOffsetEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glad_debug_glVertexArrayTexCoordOffsetEXT = glad_debug_impl_glVertexArrayTexCoordOffsetEXT;
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glad_glVertexArrayMultiTexCoordOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayMultiTexCoordOffsetEXT(GLuint arg0, GLuint arg1, GLenum arg2, GLint arg3, GLenum arg4, GLsizei arg5, GLintptr arg6) {
    _pre_call_callback("glVertexArrayMultiTexCoordOffsetEXT", (void*)glVertexArrayMultiTexCoordOffsetEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glVertexArrayMultiTexCoordOffsetEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glVertexArrayMultiTexCoordOffsetEXT", (void*)glVertexArrayMultiTexCoordOffsetEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glad_debug_glVertexArrayMultiTexCoordOffsetEXT = glad_debug_impl_glVertexArrayMultiTexCoordOffsetEXT;
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glad_glVertexArrayFogCoordOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayFogCoordOffsetEXT(GLuint arg0, GLuint arg1, GLenum arg2, GLsizei arg3, GLintptr arg4) {
    _pre_call_callback("glVertexArrayFogCoordOffsetEXT", (void*)glVertexArrayFogCoordOffsetEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexArrayFogCoordOffsetEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexArrayFogCoordOffsetEXT", (void*)glVertexArrayFogCoordOffsetEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glad_debug_glVertexArrayFogCoordOffsetEXT = glad_debug_impl_glVertexArrayFogCoordOffsetEXT;
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glad_glVertexArraySecondaryColorOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArraySecondaryColorOffsetEXT(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLsizei arg4, GLintptr arg5) {
    _pre_call_callback("glVertexArraySecondaryColorOffsetEXT", (void*)glVertexArraySecondaryColorOffsetEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glVertexArraySecondaryColorOffsetEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glVertexArraySecondaryColorOffsetEXT", (void*)glVertexArraySecondaryColorOffsetEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glad_debug_glVertexArraySecondaryColorOffsetEXT = glad_debug_impl_glVertexArraySecondaryColorOffsetEXT;
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glad_glVertexArrayVertexAttribOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexAttribOffsetEXT(GLuint arg0, GLuint arg1, GLuint arg2, GLint arg3, GLenum arg4, GLboolean arg5, GLsizei arg6, GLintptr arg7) {
    _pre_call_callback("glVertexArrayVertexAttribOffsetEXT", (void*)glVertexArrayVertexAttribOffsetEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glVertexArrayVertexAttribOffsetEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glVertexArrayVertexAttribOffsetEXT", (void*)glVertexArrayVertexAttribOffsetEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glad_debug_glVertexArrayVertexAttribOffsetEXT = glad_debug_impl_glVertexArrayVertexAttribOffsetEXT;
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glad_glVertexArrayVertexAttribIOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexAttribIOffsetEXT(GLuint arg0, GLuint arg1, GLuint arg2, GLint arg3, GLenum arg4, GLsizei arg5, GLintptr arg6) {
    _pre_call_callback("glVertexArrayVertexAttribIOffsetEXT", (void*)glVertexArrayVertexAttribIOffsetEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glVertexArrayVertexAttribIOffsetEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glVertexArrayVertexAttribIOffsetEXT", (void*)glVertexArrayVertexAttribIOffsetEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glad_debug_glVertexArrayVertexAttribIOffsetEXT = glad_debug_impl_glVertexArrayVertexAttribIOffsetEXT;
PFNGLENABLEVERTEXARRAYEXTPROC glad_glEnableVertexArrayEXT;
void APIENTRY glad_debug_impl_glEnableVertexArrayEXT(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glEnableVertexArrayEXT", (void*)glEnableVertexArrayEXT, 2, arg0, arg1);
     glad_glEnableVertexArrayEXT(arg0, arg1);
    _post_call_callback("glEnableVertexArrayEXT", (void*)glEnableVertexArrayEXT, 2, arg0, arg1);

}
PFNGLENABLEVERTEXARRAYEXTPROC glad_debug_glEnableVertexArrayEXT = glad_debug_impl_glEnableVertexArrayEXT;
PFNGLDISABLEVERTEXARRAYEXTPROC glad_glDisableVertexArrayEXT;
void APIENTRY glad_debug_impl_glDisableVertexArrayEXT(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glDisableVertexArrayEXT", (void*)glDisableVertexArrayEXT, 2, arg0, arg1);
     glad_glDisableVertexArrayEXT(arg0, arg1);
    _post_call_callback("glDisableVertexArrayEXT", (void*)glDisableVertexArrayEXT, 2, arg0, arg1);

}
PFNGLDISABLEVERTEXARRAYEXTPROC glad_debug_glDisableVertexArrayEXT = glad_debug_impl_glDisableVertexArrayEXT;
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glad_glEnableVertexArrayAttribEXT;
void APIENTRY glad_debug_impl_glEnableVertexArrayAttribEXT(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glEnableVertexArrayAttribEXT", (void*)glEnableVertexArrayAttribEXT, 2, arg0, arg1);
     glad_glEnableVertexArrayAttribEXT(arg0, arg1);
    _post_call_callback("glEnableVertexArrayAttribEXT", (void*)glEnableVertexArrayAttribEXT, 2, arg0, arg1);

}
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glad_debug_glEnableVertexArrayAttribEXT = glad_debug_impl_glEnableVertexArrayAttribEXT;
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glad_glDisableVertexArrayAttribEXT;
void APIENTRY glad_debug_impl_glDisableVertexArrayAttribEXT(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glDisableVertexArrayAttribEXT", (void*)glDisableVertexArrayAttribEXT, 2, arg0, arg1);
     glad_glDisableVertexArrayAttribEXT(arg0, arg1);
    _post_call_callback("glDisableVertexArrayAttribEXT", (void*)glDisableVertexArrayAttribEXT, 2, arg0, arg1);

}
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glad_debug_glDisableVertexArrayAttribEXT = glad_debug_impl_glDisableVertexArrayAttribEXT;
PFNGLGETVERTEXARRAYINTEGERVEXTPROC glad_glGetVertexArrayIntegervEXT;
void APIENTRY glad_debug_impl_glGetVertexArrayIntegervEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVertexArrayIntegervEXT", (void*)glGetVertexArrayIntegervEXT, 3, arg0, arg1, arg2);
     glad_glGetVertexArrayIntegervEXT(arg0, arg1, arg2);
    _post_call_callback("glGetVertexArrayIntegervEXT", (void*)glGetVertexArrayIntegervEXT, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXARRAYINTEGERVEXTPROC glad_debug_glGetVertexArrayIntegervEXT = glad_debug_impl_glGetVertexArrayIntegervEXT;
PFNGLGETVERTEXARRAYPOINTERVEXTPROC glad_glGetVertexArrayPointervEXT;
void APIENTRY glad_debug_impl_glGetVertexArrayPointervEXT(GLuint arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetVertexArrayPointervEXT", (void*)glGetVertexArrayPointervEXT, 3, arg0, arg1, arg2);
     glad_glGetVertexArrayPointervEXT(arg0, arg1, arg2);
    _post_call_callback("glGetVertexArrayPointervEXT", (void*)glGetVertexArrayPointervEXT, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXARRAYPOINTERVEXTPROC glad_debug_glGetVertexArrayPointervEXT = glad_debug_impl_glGetVertexArrayPointervEXT;
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glad_glGetVertexArrayIntegeri_vEXT;
void APIENTRY glad_debug_impl_glGetVertexArrayIntegeri_vEXT(GLuint arg0, GLuint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetVertexArrayIntegeri_vEXT", (void*)glGetVertexArrayIntegeri_vEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetVertexArrayIntegeri_vEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetVertexArrayIntegeri_vEXT", (void*)glGetVertexArrayIntegeri_vEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glad_debug_glGetVertexArrayIntegeri_vEXT = glad_debug_impl_glGetVertexArrayIntegeri_vEXT;
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glad_glGetVertexArrayPointeri_vEXT;
void APIENTRY glad_debug_impl_glGetVertexArrayPointeri_vEXT(GLuint arg0, GLuint arg1, GLenum arg2, void** arg3) {
    _pre_call_callback("glGetVertexArrayPointeri_vEXT", (void*)glGetVertexArrayPointeri_vEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetVertexArrayPointeri_vEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetVertexArrayPointeri_vEXT", (void*)glGetVertexArrayPointeri_vEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glad_debug_glGetVertexArrayPointeri_vEXT = glad_debug_impl_glGetVertexArrayPointeri_vEXT;
PFNGLMAPNAMEDBUFFERRANGEEXTPROC glad_glMapNamedBufferRangeEXT;
void* APIENTRY glad_debug_impl_glMapNamedBufferRangeEXT(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, GLbitfield arg3) {
    void* ret;
    _pre_call_callback("glMapNamedBufferRangeEXT", (void*)glMapNamedBufferRangeEXT, 4, arg0, arg1, arg2, arg3);
    ret =  glad_glMapNamedBufferRangeEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glMapNamedBufferRangeEXT", (void*)glMapNamedBufferRangeEXT, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLMAPNAMEDBUFFERRANGEEXTPROC glad_debug_glMapNamedBufferRangeEXT = glad_debug_impl_glMapNamedBufferRangeEXT;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glad_glFlushMappedNamedBufferRangeEXT;
void APIENTRY glad_debug_impl_glFlushMappedNamedBufferRangeEXT(GLuint arg0, GLintptr arg1, GLsizeiptr arg2) {
    _pre_call_callback("glFlushMappedNamedBufferRangeEXT", (void*)glFlushMappedNamedBufferRangeEXT, 3, arg0, arg1, arg2);
     glad_glFlushMappedNamedBufferRangeEXT(arg0, arg1, arg2);
    _post_call_callback("glFlushMappedNamedBufferRangeEXT", (void*)glFlushMappedNamedBufferRangeEXT, 3, arg0, arg1, arg2);

}
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glad_debug_glFlushMappedNamedBufferRangeEXT = glad_debug_impl_glFlushMappedNamedBufferRangeEXT;
PFNGLNAMEDBUFFERSTORAGEEXTPROC glad_glNamedBufferStorageEXT;
void APIENTRY glad_debug_impl_glNamedBufferStorageEXT(GLuint arg0, GLsizeiptr arg1, const void* arg2, GLbitfield arg3) {
    _pre_call_callback("glNamedBufferStorageEXT", (void*)glNamedBufferStorageEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedBufferStorageEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedBufferStorageEXT", (void*)glNamedBufferStorageEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDBUFFERSTORAGEEXTPROC glad_debug_glNamedBufferStorageEXT = glad_debug_impl_glNamedBufferStorageEXT;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_glClearNamedBufferDataEXT;
void APIENTRY glad_debug_impl_glClearNamedBufferDataEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLenum arg3, const void* arg4) {
    _pre_call_callback("glClearNamedBufferDataEXT", (void*)glClearNamedBufferDataEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glClearNamedBufferDataEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glClearNamedBufferDataEXT", (void*)glClearNamedBufferDataEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_debug_glClearNamedBufferDataEXT = glad_debug_impl_glClearNamedBufferDataEXT;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_glClearNamedBufferSubDataEXT;
void APIENTRY glad_debug_impl_glClearNamedBufferSubDataEXT(GLuint arg0, GLenum arg1, GLsizeiptr arg2, GLsizeiptr arg3, GLenum arg4, GLenum arg5, const void* arg6) {
    _pre_call_callback("glClearNamedBufferSubDataEXT", (void*)glClearNamedBufferSubDataEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glClearNamedBufferSubDataEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glClearNamedBufferSubDataEXT", (void*)glClearNamedBufferSubDataEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_debug_glClearNamedBufferSubDataEXT = glad_debug_impl_glClearNamedBufferSubDataEXT;
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glad_glNamedFramebufferParameteriEXT;
void APIENTRY glad_debug_impl_glNamedFramebufferParameteriEXT(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glNamedFramebufferParameteriEXT", (void*)glNamedFramebufferParameteriEXT, 3, arg0, arg1, arg2);
     glad_glNamedFramebufferParameteriEXT(arg0, arg1, arg2);
    _post_call_callback("glNamedFramebufferParameteriEXT", (void*)glNamedFramebufferParameteriEXT, 3, arg0, arg1, arg2);

}
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glad_debug_glNamedFramebufferParameteriEXT = glad_debug_impl_glNamedFramebufferParameteriEXT;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glad_glGetNamedFramebufferParameterivEXT;
void APIENTRY glad_debug_impl_glGetNamedFramebufferParameterivEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetNamedFramebufferParameterivEXT", (void*)glGetNamedFramebufferParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetNamedFramebufferParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetNamedFramebufferParameterivEXT", (void*)glGetNamedFramebufferParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glad_debug_glGetNamedFramebufferParameterivEXT = glad_debug_impl_glGetNamedFramebufferParameterivEXT;
PFNGLPROGRAMUNIFORM1DEXTPROC glad_glProgramUniform1dEXT;
void APIENTRY glad_debug_impl_glProgramUniform1dEXT(GLuint arg0, GLint arg1, GLdouble arg2) {
    _pre_call_callback("glProgramUniform1dEXT", (void*)glProgramUniform1dEXT, 3, arg0, arg1, arg2);
     glad_glProgramUniform1dEXT(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1dEXT", (void*)glProgramUniform1dEXT, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1DEXTPROC glad_debug_glProgramUniform1dEXT = glad_debug_impl_glProgramUniform1dEXT;
PFNGLPROGRAMUNIFORM2DEXTPROC glad_glProgramUniform2dEXT;
void APIENTRY glad_debug_impl_glProgramUniform2dEXT(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glProgramUniform2dEXT", (void*)glProgramUniform2dEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2dEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2dEXT", (void*)glProgramUniform2dEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2DEXTPROC glad_debug_glProgramUniform2dEXT = glad_debug_impl_glProgramUniform2dEXT;
PFNGLPROGRAMUNIFORM3DEXTPROC glad_glProgramUniform3dEXT;
void APIENTRY glad_debug_impl_glProgramUniform3dEXT(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glProgramUniform3dEXT", (void*)glProgramUniform3dEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3dEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3dEXT", (void*)glProgramUniform3dEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3DEXTPROC glad_debug_glProgramUniform3dEXT = glad_debug_impl_glProgramUniform3dEXT;
PFNGLPROGRAMUNIFORM4DEXTPROC glad_glProgramUniform4dEXT;
void APIENTRY glad_debug_impl_glProgramUniform4dEXT(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_callback("glProgramUniform4dEXT", (void*)glProgramUniform4dEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4dEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4dEXT", (void*)glProgramUniform4dEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4DEXTPROC glad_debug_glProgramUniform4dEXT = glad_debug_impl_glProgramUniform4dEXT;
PFNGLPROGRAMUNIFORM1DVEXTPROC glad_glProgramUniform1dvEXT;
void APIENTRY glad_debug_impl_glProgramUniform1dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramUniform1dvEXT", (void*)glProgramUniform1dvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1dvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1dvEXT", (void*)glProgramUniform1dvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1DVEXTPROC glad_debug_glProgramUniform1dvEXT = glad_debug_impl_glProgramUniform1dvEXT;
PFNGLPROGRAMUNIFORM2DVEXTPROC glad_glProgramUniform2dvEXT;
void APIENTRY glad_debug_impl_glProgramUniform2dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramUniform2dvEXT", (void*)glProgramUniform2dvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2dvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2dvEXT", (void*)glProgramUniform2dvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2DVEXTPROC glad_debug_glProgramUniform2dvEXT = glad_debug_impl_glProgramUniform2dvEXT;
PFNGLPROGRAMUNIFORM3DVEXTPROC glad_glProgramUniform3dvEXT;
void APIENTRY glad_debug_impl_glProgramUniform3dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramUniform3dvEXT", (void*)glProgramUniform3dvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3dvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3dvEXT", (void*)glProgramUniform3dvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3DVEXTPROC glad_debug_glProgramUniform3dvEXT = glad_debug_impl_glProgramUniform3dvEXT;
PFNGLPROGRAMUNIFORM4DVEXTPROC glad_glProgramUniform4dvEXT;
void APIENTRY glad_debug_impl_glProgramUniform4dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramUniform4dvEXT", (void*)glProgramUniform4dvEXT, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4dvEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4dvEXT", (void*)glProgramUniform4dvEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4DVEXTPROC glad_debug_glProgramUniform4dvEXT = glad_debug_impl_glProgramUniform4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glad_glProgramUniformMatrix2dvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix2dvEXT", (void*)glProgramUniformMatrix2dvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2dvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2dvEXT", (void*)glProgramUniformMatrix2dvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glad_debug_glProgramUniformMatrix2dvEXT = glad_debug_impl_glProgramUniformMatrix2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glad_glProgramUniformMatrix3dvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix3dvEXT", (void*)glProgramUniformMatrix3dvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3dvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3dvEXT", (void*)glProgramUniformMatrix3dvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glad_debug_glProgramUniformMatrix3dvEXT = glad_debug_impl_glProgramUniformMatrix3dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glad_glProgramUniformMatrix4dvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix4dvEXT", (void*)glProgramUniformMatrix4dvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4dvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4dvEXT", (void*)glProgramUniformMatrix4dvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glad_debug_glProgramUniformMatrix4dvEXT = glad_debug_impl_glProgramUniformMatrix4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glad_glProgramUniformMatrix2x3dvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2x3dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix2x3dvEXT", (void*)glProgramUniformMatrix2x3dvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2x3dvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2x3dvEXT", (void*)glProgramUniformMatrix2x3dvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glad_debug_glProgramUniformMatrix2x3dvEXT = glad_debug_impl_glProgramUniformMatrix2x3dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glad_glProgramUniformMatrix2x4dvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2x4dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix2x4dvEXT", (void*)glProgramUniformMatrix2x4dvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2x4dvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2x4dvEXT", (void*)glProgramUniformMatrix2x4dvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glad_debug_glProgramUniformMatrix2x4dvEXT = glad_debug_impl_glProgramUniformMatrix2x4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glad_glProgramUniformMatrix3x2dvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3x2dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix3x2dvEXT", (void*)glProgramUniformMatrix3x2dvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3x2dvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3x2dvEXT", (void*)glProgramUniformMatrix3x2dvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glad_debug_glProgramUniformMatrix3x2dvEXT = glad_debug_impl_glProgramUniformMatrix3x2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glad_glProgramUniformMatrix3x4dvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3x4dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix3x4dvEXT", (void*)glProgramUniformMatrix3x4dvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3x4dvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3x4dvEXT", (void*)glProgramUniformMatrix3x4dvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glad_debug_glProgramUniformMatrix3x4dvEXT = glad_debug_impl_glProgramUniformMatrix3x4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glad_glProgramUniformMatrix4x2dvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4x2dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix4x2dvEXT", (void*)glProgramUniformMatrix4x2dvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4x2dvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4x2dvEXT", (void*)glProgramUniformMatrix4x2dvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glad_debug_glProgramUniformMatrix4x2dvEXT = glad_debug_impl_glProgramUniformMatrix4x2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glad_glProgramUniformMatrix4x3dvEXT;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4x3dvEXT(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix4x3dvEXT", (void*)glProgramUniformMatrix4x3dvEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4x3dvEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4x3dvEXT", (void*)glProgramUniformMatrix4x3dvEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glad_debug_glProgramUniformMatrix4x3dvEXT = glad_debug_impl_glProgramUniformMatrix4x3dvEXT;
PFNGLTEXTUREBUFFERRANGEEXTPROC glad_glTextureBufferRangeEXT;
void APIENTRY glad_debug_impl_glTextureBufferRangeEXT(GLuint arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLintptr arg4, GLsizeiptr arg5) {
    _pre_call_callback("glTextureBufferRangeEXT", (void*)glTextureBufferRangeEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glTextureBufferRangeEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glTextureBufferRangeEXT", (void*)glTextureBufferRangeEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLTEXTUREBUFFERRANGEEXTPROC glad_debug_glTextureBufferRangeEXT = glad_debug_impl_glTextureBufferRangeEXT;
PFNGLTEXTURESTORAGE1DEXTPROC glad_glTextureStorage1DEXT;
void APIENTRY glad_debug_impl_glTextureStorage1DEXT(GLuint arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLsizei arg4) {
    _pre_call_callback("glTextureStorage1DEXT", (void*)glTextureStorage1DEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTextureStorage1DEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTextureStorage1DEXT", (void*)glTextureStorage1DEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTEXTURESTORAGE1DEXTPROC glad_debug_glTextureStorage1DEXT = glad_debug_impl_glTextureStorage1DEXT;
PFNGLTEXTURESTORAGE2DEXTPROC glad_glTextureStorage2DEXT;
void APIENTRY glad_debug_impl_glTextureStorage2DEXT(GLuint arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_callback("glTextureStorage2DEXT", (void*)glTextureStorage2DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glTextureStorage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glTextureStorage2DEXT", (void*)glTextureStorage2DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLTEXTURESTORAGE2DEXTPROC glad_debug_glTextureStorage2DEXT = glad_debug_impl_glTextureStorage2DEXT;
PFNGLTEXTURESTORAGE3DEXTPROC glad_glTextureStorage3DEXT;
void APIENTRY glad_debug_impl_glTextureStorage3DEXT(GLuint arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6) {
    _pre_call_callback("glTextureStorage3DEXT", (void*)glTextureStorage3DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTextureStorage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTextureStorage3DEXT", (void*)glTextureStorage3DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXTURESTORAGE3DEXTPROC glad_debug_glTextureStorage3DEXT = glad_debug_impl_glTextureStorage3DEXT;
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glad_glTextureStorage2DMultisampleEXT;
void APIENTRY glad_debug_impl_glTextureStorage2DMultisampleEXT(GLuint arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_callback("glTextureStorage2DMultisampleEXT", (void*)glTextureStorage2DMultisampleEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTextureStorage2DMultisampleEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTextureStorage2DMultisampleEXT", (void*)glTextureStorage2DMultisampleEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glad_debug_glTextureStorage2DMultisampleEXT = glad_debug_impl_glTextureStorage2DMultisampleEXT;
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glad_glTextureStorage3DMultisampleEXT;
void APIENTRY glad_debug_impl_glTextureStorage3DMultisampleEXT(GLuint arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6, GLboolean arg7) {
    _pre_call_callback("glTextureStorage3DMultisampleEXT", (void*)glTextureStorage3DMultisampleEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTextureStorage3DMultisampleEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTextureStorage3DMultisampleEXT", (void*)glTextureStorage3DMultisampleEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glad_debug_glTextureStorage3DMultisampleEXT = glad_debug_impl_glTextureStorage3DMultisampleEXT;
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glad_glVertexArrayBindVertexBufferEXT;
void APIENTRY glad_debug_impl_glVertexArrayBindVertexBufferEXT(GLuint arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizei arg4) {
    _pre_call_callback("glVertexArrayBindVertexBufferEXT", (void*)glVertexArrayBindVertexBufferEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexArrayBindVertexBufferEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexArrayBindVertexBufferEXT", (void*)glVertexArrayBindVertexBufferEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glad_debug_glVertexArrayBindVertexBufferEXT = glad_debug_impl_glVertexArrayBindVertexBufferEXT;
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glad_glVertexArrayVertexAttribFormatEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexAttribFormatEXT(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLboolean arg4, GLuint arg5) {
    _pre_call_callback("glVertexArrayVertexAttribFormatEXT", (void*)glVertexArrayVertexAttribFormatEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glVertexArrayVertexAttribFormatEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glVertexArrayVertexAttribFormatEXT", (void*)glVertexArrayVertexAttribFormatEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glad_debug_glVertexArrayVertexAttribFormatEXT = glad_debug_impl_glVertexArrayVertexAttribFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glad_glVertexArrayVertexAttribIFormatEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexAttribIFormatEXT(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLuint arg4) {
    _pre_call_callback("glVertexArrayVertexAttribIFormatEXT", (void*)glVertexArrayVertexAttribIFormatEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexArrayVertexAttribIFormatEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexArrayVertexAttribIFormatEXT", (void*)glVertexArrayVertexAttribIFormatEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glad_debug_glVertexArrayVertexAttribIFormatEXT = glad_debug_impl_glVertexArrayVertexAttribIFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glad_glVertexArrayVertexAttribLFormatEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexAttribLFormatEXT(GLuint arg0, GLuint arg1, GLint arg2, GLenum arg3, GLuint arg4) {
    _pre_call_callback("glVertexArrayVertexAttribLFormatEXT", (void*)glVertexArrayVertexAttribLFormatEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexArrayVertexAttribLFormatEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexArrayVertexAttribLFormatEXT", (void*)glVertexArrayVertexAttribLFormatEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glad_debug_glVertexArrayVertexAttribLFormatEXT = glad_debug_impl_glVertexArrayVertexAttribLFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glad_glVertexArrayVertexAttribBindingEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexAttribBindingEXT(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glVertexArrayVertexAttribBindingEXT", (void*)glVertexArrayVertexAttribBindingEXT, 3, arg0, arg1, arg2);
     glad_glVertexArrayVertexAttribBindingEXT(arg0, arg1, arg2);
    _post_call_callback("glVertexArrayVertexAttribBindingEXT", (void*)glVertexArrayVertexAttribBindingEXT, 3, arg0, arg1, arg2);

}
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glad_debug_glVertexArrayVertexAttribBindingEXT = glad_debug_impl_glVertexArrayVertexAttribBindingEXT;
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glad_glVertexArrayVertexBindingDivisorEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexBindingDivisorEXT(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glVertexArrayVertexBindingDivisorEXT", (void*)glVertexArrayVertexBindingDivisorEXT, 3, arg0, arg1, arg2);
     glad_glVertexArrayVertexBindingDivisorEXT(arg0, arg1, arg2);
    _post_call_callback("glVertexArrayVertexBindingDivisorEXT", (void*)glVertexArrayVertexBindingDivisorEXT, 3, arg0, arg1, arg2);

}
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glad_debug_glVertexArrayVertexBindingDivisorEXT = glad_debug_impl_glVertexArrayVertexBindingDivisorEXT;
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glad_glVertexArrayVertexAttribLOffsetEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexAttribLOffsetEXT(GLuint arg0, GLuint arg1, GLuint arg2, GLint arg3, GLenum arg4, GLsizei arg5, GLintptr arg6) {
    _pre_call_callback("glVertexArrayVertexAttribLOffsetEXT", (void*)glVertexArrayVertexAttribLOffsetEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glVertexArrayVertexAttribLOffsetEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glVertexArrayVertexAttribLOffsetEXT", (void*)glVertexArrayVertexAttribLOffsetEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glad_debug_glVertexArrayVertexAttribLOffsetEXT = glad_debug_impl_glVertexArrayVertexAttribLOffsetEXT;
PFNGLTEXTUREPAGECOMMITMENTEXTPROC glad_glTexturePageCommitmentEXT;
void APIENTRY glad_debug_impl_glTexturePageCommitmentEXT(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLboolean arg8) {
    _pre_call_callback("glTexturePageCommitmentEXT", (void*)glTexturePageCommitmentEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glTexturePageCommitmentEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glTexturePageCommitmentEXT", (void*)glTexturePageCommitmentEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLTEXTUREPAGECOMMITMENTEXTPROC glad_debug_glTexturePageCommitmentEXT = glad_debug_impl_glTexturePageCommitmentEXT;
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glad_glVertexArrayVertexAttribDivisorEXT;
void APIENTRY glad_debug_impl_glVertexArrayVertexAttribDivisorEXT(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glVertexArrayVertexAttribDivisorEXT", (void*)glVertexArrayVertexAttribDivisorEXT, 3, arg0, arg1, arg2);
     glad_glVertexArrayVertexAttribDivisorEXT(arg0, arg1, arg2);
    _post_call_callback("glVertexArrayVertexAttribDivisorEXT", (void*)glVertexArrayVertexAttribDivisorEXT, 3, arg0, arg1, arg2);

}
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glad_debug_glVertexArrayVertexAttribDivisorEXT = glad_debug_impl_glVertexArrayVertexAttribDivisorEXT;
PFNGLSETMULTISAMPLEFVAMDPROC glad_glSetMultisamplefvAMD;
void APIENTRY glad_debug_impl_glSetMultisamplefvAMD(GLenum arg0, GLuint arg1, const GLfloat* arg2) {
    _pre_call_callback("glSetMultisamplefvAMD", (void*)glSetMultisamplefvAMD, 3, arg0, arg1, arg2);
     glad_glSetMultisamplefvAMD(arg0, arg1, arg2);
    _post_call_callback("glSetMultisamplefvAMD", (void*)glSetMultisamplefvAMD, 3, arg0, arg1, arg2);

}
PFNGLSETMULTISAMPLEFVAMDPROC glad_debug_glSetMultisamplefvAMD = glad_debug_impl_glSetMultisamplefvAMD;
PFNGLAREPROGRAMSRESIDENTNVPROC glad_glAreProgramsResidentNV;
GLboolean APIENTRY glad_debug_impl_glAreProgramsResidentNV(GLsizei arg0, const GLuint* arg1, GLboolean* arg2) {
    GLboolean ret;
    _pre_call_callback("glAreProgramsResidentNV", (void*)glAreProgramsResidentNV, 3, arg0, arg1, arg2);
    ret =  glad_glAreProgramsResidentNV(arg0, arg1, arg2);
    _post_call_callback("glAreProgramsResidentNV", (void*)glAreProgramsResidentNV, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLAREPROGRAMSRESIDENTNVPROC glad_debug_glAreProgramsResidentNV = glad_debug_impl_glAreProgramsResidentNV;
PFNGLBINDPROGRAMNVPROC glad_glBindProgramNV;
void APIENTRY glad_debug_impl_glBindProgramNV(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindProgramNV", (void*)glBindProgramNV, 2, arg0, arg1);
     glad_glBindProgramNV(arg0, arg1);
    _post_call_callback("glBindProgramNV", (void*)glBindProgramNV, 2, arg0, arg1);

}
PFNGLBINDPROGRAMNVPROC glad_debug_glBindProgramNV = glad_debug_impl_glBindProgramNV;
PFNGLDELETEPROGRAMSNVPROC glad_glDeleteProgramsNV;
void APIENTRY glad_debug_impl_glDeleteProgramsNV(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteProgramsNV", (void*)glDeleteProgramsNV, 2, arg0, arg1);
     glad_glDeleteProgramsNV(arg0, arg1);
    _post_call_callback("glDeleteProgramsNV", (void*)glDeleteProgramsNV, 2, arg0, arg1);

}
PFNGLDELETEPROGRAMSNVPROC glad_debug_glDeleteProgramsNV = glad_debug_impl_glDeleteProgramsNV;
PFNGLEXECUTEPROGRAMNVPROC glad_glExecuteProgramNV;
void APIENTRY glad_debug_impl_glExecuteProgramNV(GLenum arg0, GLuint arg1, const GLfloat* arg2) {
    _pre_call_callback("glExecuteProgramNV", (void*)glExecuteProgramNV, 3, arg0, arg1, arg2);
     glad_glExecuteProgramNV(arg0, arg1, arg2);
    _post_call_callback("glExecuteProgramNV", (void*)glExecuteProgramNV, 3, arg0, arg1, arg2);

}
PFNGLEXECUTEPROGRAMNVPROC glad_debug_glExecuteProgramNV = glad_debug_impl_glExecuteProgramNV;
PFNGLGENPROGRAMSNVPROC glad_glGenProgramsNV;
void APIENTRY glad_debug_impl_glGenProgramsNV(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenProgramsNV", (void*)glGenProgramsNV, 2, arg0, arg1);
     glad_glGenProgramsNV(arg0, arg1);
    _post_call_callback("glGenProgramsNV", (void*)glGenProgramsNV, 2, arg0, arg1);

}
PFNGLGENPROGRAMSNVPROC glad_debug_glGenProgramsNV = glad_debug_impl_glGenProgramsNV;
PFNGLGETPROGRAMPARAMETERDVNVPROC glad_glGetProgramParameterdvNV;
void APIENTRY glad_debug_impl_glGetProgramParameterdvNV(GLenum arg0, GLuint arg1, GLenum arg2, GLdouble* arg3) {
    _pre_call_callback("glGetProgramParameterdvNV", (void*)glGetProgramParameterdvNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetProgramParameterdvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetProgramParameterdvNV", (void*)glGetProgramParameterdvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPROGRAMPARAMETERDVNVPROC glad_debug_glGetProgramParameterdvNV = glad_debug_impl_glGetProgramParameterdvNV;
PFNGLGETPROGRAMPARAMETERFVNVPROC glad_glGetProgramParameterfvNV;
void APIENTRY glad_debug_impl_glGetProgramParameterfvNV(GLenum arg0, GLuint arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetProgramParameterfvNV", (void*)glGetProgramParameterfvNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetProgramParameterfvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetProgramParameterfvNV", (void*)glGetProgramParameterfvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPROGRAMPARAMETERFVNVPROC glad_debug_glGetProgramParameterfvNV = glad_debug_impl_glGetProgramParameterfvNV;
PFNGLGETPROGRAMIVNVPROC glad_glGetProgramivNV;
void APIENTRY glad_debug_impl_glGetProgramivNV(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetProgramivNV", (void*)glGetProgramivNV, 3, arg0, arg1, arg2);
     glad_glGetProgramivNV(arg0, arg1, arg2);
    _post_call_callback("glGetProgramivNV", (void*)glGetProgramivNV, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMIVNVPROC glad_debug_glGetProgramivNV = glad_debug_impl_glGetProgramivNV;
PFNGLGETPROGRAMSTRINGNVPROC glad_glGetProgramStringNV;
void APIENTRY glad_debug_impl_glGetProgramStringNV(GLuint arg0, GLenum arg1, GLubyte* arg2) {
    _pre_call_callback("glGetProgramStringNV", (void*)glGetProgramStringNV, 3, arg0, arg1, arg2);
     glad_glGetProgramStringNV(arg0, arg1, arg2);
    _post_call_callback("glGetProgramStringNV", (void*)glGetProgramStringNV, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMSTRINGNVPROC glad_debug_glGetProgramStringNV = glad_debug_impl_glGetProgramStringNV;
PFNGLGETTRACKMATRIXIVNVPROC glad_glGetTrackMatrixivNV;
void APIENTRY glad_debug_impl_glGetTrackMatrixivNV(GLenum arg0, GLuint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetTrackMatrixivNV", (void*)glGetTrackMatrixivNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetTrackMatrixivNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTrackMatrixivNV", (void*)glGetTrackMatrixivNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTRACKMATRIXIVNVPROC glad_debug_glGetTrackMatrixivNV = glad_debug_impl_glGetTrackMatrixivNV;
PFNGLGETVERTEXATTRIBDVNVPROC glad_glGetVertexAttribdvNV;
void APIENTRY glad_debug_impl_glGetVertexAttribdvNV(GLuint arg0, GLenum arg1, GLdouble* arg2) {
    _pre_call_callback("glGetVertexAttribdvNV", (void*)glGetVertexAttribdvNV, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribdvNV(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribdvNV", (void*)glGetVertexAttribdvNV, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBDVNVPROC glad_debug_glGetVertexAttribdvNV = glad_debug_impl_glGetVertexAttribdvNV;
PFNGLGETVERTEXATTRIBFVNVPROC glad_glGetVertexAttribfvNV;
void APIENTRY glad_debug_impl_glGetVertexAttribfvNV(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetVertexAttribfvNV", (void*)glGetVertexAttribfvNV, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribfvNV(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribfvNV", (void*)glGetVertexAttribfvNV, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBFVNVPROC glad_debug_glGetVertexAttribfvNV = glad_debug_impl_glGetVertexAttribfvNV;
PFNGLGETVERTEXATTRIBIVNVPROC glad_glGetVertexAttribivNV;
void APIENTRY glad_debug_impl_glGetVertexAttribivNV(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVertexAttribivNV", (void*)glGetVertexAttribivNV, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribivNV(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribivNV", (void*)glGetVertexAttribivNV, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBIVNVPROC glad_debug_glGetVertexAttribivNV = glad_debug_impl_glGetVertexAttribivNV;
PFNGLGETVERTEXATTRIBPOINTERVNVPROC glad_glGetVertexAttribPointervNV;
void APIENTRY glad_debug_impl_glGetVertexAttribPointervNV(GLuint arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetVertexAttribPointervNV", (void*)glGetVertexAttribPointervNV, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribPointervNV(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribPointervNV", (void*)glGetVertexAttribPointervNV, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBPOINTERVNVPROC glad_debug_glGetVertexAttribPointervNV = glad_debug_impl_glGetVertexAttribPointervNV;
PFNGLISPROGRAMNVPROC glad_glIsProgramNV;
GLboolean APIENTRY glad_debug_impl_glIsProgramNV(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsProgramNV", (void*)glIsProgramNV, 1, arg0);
    ret =  glad_glIsProgramNV(arg0);
    _post_call_callback("glIsProgramNV", (void*)glIsProgramNV, 1, arg0);
    return ret;
}
PFNGLISPROGRAMNVPROC glad_debug_glIsProgramNV = glad_debug_impl_glIsProgramNV;
PFNGLLOADPROGRAMNVPROC glad_glLoadProgramNV;
void APIENTRY glad_debug_impl_glLoadProgramNV(GLenum arg0, GLuint arg1, GLsizei arg2, const GLubyte* arg3) {
    _pre_call_callback("glLoadProgramNV", (void*)glLoadProgramNV, 4, arg0, arg1, arg2, arg3);
     glad_glLoadProgramNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glLoadProgramNV", (void*)glLoadProgramNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLLOADPROGRAMNVPROC glad_debug_glLoadProgramNV = glad_debug_impl_glLoadProgramNV;
PFNGLPROGRAMPARAMETER4DNVPROC glad_glProgramParameter4dNV;
void APIENTRY glad_debug_impl_glProgramParameter4dNV(GLenum arg0, GLuint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_callback("glProgramParameter4dNV", (void*)glProgramParameter4dNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramParameter4dNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramParameter4dNV", (void*)glProgramParameter4dNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMPARAMETER4DNVPROC glad_debug_glProgramParameter4dNV = glad_debug_impl_glProgramParameter4dNV;
PFNGLPROGRAMPARAMETER4DVNVPROC glad_glProgramParameter4dvNV;
void APIENTRY glad_debug_impl_glProgramParameter4dvNV(GLenum arg0, GLuint arg1, const GLdouble* arg2) {
    _pre_call_callback("glProgramParameter4dvNV", (void*)glProgramParameter4dvNV, 3, arg0, arg1, arg2);
     glad_glProgramParameter4dvNV(arg0, arg1, arg2);
    _post_call_callback("glProgramParameter4dvNV", (void*)glProgramParameter4dvNV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMPARAMETER4DVNVPROC glad_debug_glProgramParameter4dvNV = glad_debug_impl_glProgramParameter4dvNV;
PFNGLPROGRAMPARAMETER4FNVPROC glad_glProgramParameter4fNV;
void APIENTRY glad_debug_impl_glProgramParameter4fNV(GLenum arg0, GLuint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glProgramParameter4fNV", (void*)glProgramParameter4fNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramParameter4fNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramParameter4fNV", (void*)glProgramParameter4fNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMPARAMETER4FNVPROC glad_debug_glProgramParameter4fNV = glad_debug_impl_glProgramParameter4fNV;
PFNGLPROGRAMPARAMETER4FVNVPROC glad_glProgramParameter4fvNV;
void APIENTRY glad_debug_impl_glProgramParameter4fvNV(GLenum arg0, GLuint arg1, const GLfloat* arg2) {
    _pre_call_callback("glProgramParameter4fvNV", (void*)glProgramParameter4fvNV, 3, arg0, arg1, arg2);
     glad_glProgramParameter4fvNV(arg0, arg1, arg2);
    _post_call_callback("glProgramParameter4fvNV", (void*)glProgramParameter4fvNV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMPARAMETER4FVNVPROC glad_debug_glProgramParameter4fvNV = glad_debug_impl_glProgramParameter4fvNV;
PFNGLPROGRAMPARAMETERS4DVNVPROC glad_glProgramParameters4dvNV;
void APIENTRY glad_debug_impl_glProgramParameters4dvNV(GLenum arg0, GLuint arg1, GLsizei arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramParameters4dvNV", (void*)glProgramParameters4dvNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramParameters4dvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramParameters4dvNV", (void*)glProgramParameters4dvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMPARAMETERS4DVNVPROC glad_debug_glProgramParameters4dvNV = glad_debug_impl_glProgramParameters4dvNV;
PFNGLPROGRAMPARAMETERS4FVNVPROC glad_glProgramParameters4fvNV;
void APIENTRY glad_debug_impl_glProgramParameters4fvNV(GLenum arg0, GLuint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramParameters4fvNV", (void*)glProgramParameters4fvNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramParameters4fvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramParameters4fvNV", (void*)glProgramParameters4fvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMPARAMETERS4FVNVPROC glad_debug_glProgramParameters4fvNV = glad_debug_impl_glProgramParameters4fvNV;
PFNGLREQUESTRESIDENTPROGRAMSNVPROC glad_glRequestResidentProgramsNV;
void APIENTRY glad_debug_impl_glRequestResidentProgramsNV(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glRequestResidentProgramsNV", (void*)glRequestResidentProgramsNV, 2, arg0, arg1);
     glad_glRequestResidentProgramsNV(arg0, arg1);
    _post_call_callback("glRequestResidentProgramsNV", (void*)glRequestResidentProgramsNV, 2, arg0, arg1);

}
PFNGLREQUESTRESIDENTPROGRAMSNVPROC glad_debug_glRequestResidentProgramsNV = glad_debug_impl_glRequestResidentProgramsNV;
PFNGLTRACKMATRIXNVPROC glad_glTrackMatrixNV;
void APIENTRY glad_debug_impl_glTrackMatrixNV(GLenum arg0, GLuint arg1, GLenum arg2, GLenum arg3) {
    _pre_call_callback("glTrackMatrixNV", (void*)glTrackMatrixNV, 4, arg0, arg1, arg2, arg3);
     glad_glTrackMatrixNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glTrackMatrixNV", (void*)glTrackMatrixNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLTRACKMATRIXNVPROC glad_debug_glTrackMatrixNV = glad_debug_impl_glTrackMatrixNV;
PFNGLVERTEXATTRIBPOINTERNVPROC glad_glVertexAttribPointerNV;
void APIENTRY glad_debug_impl_glVertexAttribPointerNV(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glVertexAttribPointerNV", (void*)glVertexAttribPointerNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribPointerNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribPointerNV", (void*)glVertexAttribPointerNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBPOINTERNVPROC glad_debug_glVertexAttribPointerNV = glad_debug_impl_glVertexAttribPointerNV;
PFNGLVERTEXATTRIB1DNVPROC glad_glVertexAttrib1dNV;
void APIENTRY glad_debug_impl_glVertexAttrib1dNV(GLuint arg0, GLdouble arg1) {
    _pre_call_callback("glVertexAttrib1dNV", (void*)glVertexAttrib1dNV, 2, arg0, arg1);
     glad_glVertexAttrib1dNV(arg0, arg1);
    _post_call_callback("glVertexAttrib1dNV", (void*)glVertexAttrib1dNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1DNVPROC glad_debug_glVertexAttrib1dNV = glad_debug_impl_glVertexAttrib1dNV;
PFNGLVERTEXATTRIB1DVNVPROC glad_glVertexAttrib1dvNV;
void APIENTRY glad_debug_impl_glVertexAttrib1dvNV(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib1dvNV", (void*)glVertexAttrib1dvNV, 2, arg0, arg1);
     glad_glVertexAttrib1dvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib1dvNV", (void*)glVertexAttrib1dvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1DVNVPROC glad_debug_glVertexAttrib1dvNV = glad_debug_impl_glVertexAttrib1dvNV;
PFNGLVERTEXATTRIB1FNVPROC glad_glVertexAttrib1fNV;
void APIENTRY glad_debug_impl_glVertexAttrib1fNV(GLuint arg0, GLfloat arg1) {
    _pre_call_callback("glVertexAttrib1fNV", (void*)glVertexAttrib1fNV, 2, arg0, arg1);
     glad_glVertexAttrib1fNV(arg0, arg1);
    _post_call_callback("glVertexAttrib1fNV", (void*)glVertexAttrib1fNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1FNVPROC glad_debug_glVertexAttrib1fNV = glad_debug_impl_glVertexAttrib1fNV;
PFNGLVERTEXATTRIB1FVNVPROC glad_glVertexAttrib1fvNV;
void APIENTRY glad_debug_impl_glVertexAttrib1fvNV(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib1fvNV", (void*)glVertexAttrib1fvNV, 2, arg0, arg1);
     glad_glVertexAttrib1fvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib1fvNV", (void*)glVertexAttrib1fvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1FVNVPROC glad_debug_glVertexAttrib1fvNV = glad_debug_impl_glVertexAttrib1fvNV;
PFNGLVERTEXATTRIB1SNVPROC glad_glVertexAttrib1sNV;
void APIENTRY glad_debug_impl_glVertexAttrib1sNV(GLuint arg0, GLshort arg1) {
    _pre_call_callback("glVertexAttrib1sNV", (void*)glVertexAttrib1sNV, 2, arg0, arg1);
     glad_glVertexAttrib1sNV(arg0, arg1);
    _post_call_callback("glVertexAttrib1sNV", (void*)glVertexAttrib1sNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1SNVPROC glad_debug_glVertexAttrib1sNV = glad_debug_impl_glVertexAttrib1sNV;
PFNGLVERTEXATTRIB1SVNVPROC glad_glVertexAttrib1svNV;
void APIENTRY glad_debug_impl_glVertexAttrib1svNV(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib1svNV", (void*)glVertexAttrib1svNV, 2, arg0, arg1);
     glad_glVertexAttrib1svNV(arg0, arg1);
    _post_call_callback("glVertexAttrib1svNV", (void*)glVertexAttrib1svNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1SVNVPROC glad_debug_glVertexAttrib1svNV = glad_debug_impl_glVertexAttrib1svNV;
PFNGLVERTEXATTRIB2DNVPROC glad_glVertexAttrib2dNV;
void APIENTRY glad_debug_impl_glVertexAttrib2dNV(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glVertexAttrib2dNV", (void*)glVertexAttrib2dNV, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2dNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2dNV", (void*)glVertexAttrib2dNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2DNVPROC glad_debug_glVertexAttrib2dNV = glad_debug_impl_glVertexAttrib2dNV;
PFNGLVERTEXATTRIB2DVNVPROC glad_glVertexAttrib2dvNV;
void APIENTRY glad_debug_impl_glVertexAttrib2dvNV(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib2dvNV", (void*)glVertexAttrib2dvNV, 2, arg0, arg1);
     glad_glVertexAttrib2dvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib2dvNV", (void*)glVertexAttrib2dvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2DVNVPROC glad_debug_glVertexAttrib2dvNV = glad_debug_impl_glVertexAttrib2dvNV;
PFNGLVERTEXATTRIB2FNVPROC glad_glVertexAttrib2fNV;
void APIENTRY glad_debug_impl_glVertexAttrib2fNV(GLuint arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glVertexAttrib2fNV", (void*)glVertexAttrib2fNV, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2fNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2fNV", (void*)glVertexAttrib2fNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2FNVPROC glad_debug_glVertexAttrib2fNV = glad_debug_impl_glVertexAttrib2fNV;
PFNGLVERTEXATTRIB2FVNVPROC glad_glVertexAttrib2fvNV;
void APIENTRY glad_debug_impl_glVertexAttrib2fvNV(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib2fvNV", (void*)glVertexAttrib2fvNV, 2, arg0, arg1);
     glad_glVertexAttrib2fvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib2fvNV", (void*)glVertexAttrib2fvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2FVNVPROC glad_debug_glVertexAttrib2fvNV = glad_debug_impl_glVertexAttrib2fvNV;
PFNGLVERTEXATTRIB2SNVPROC glad_glVertexAttrib2sNV;
void APIENTRY glad_debug_impl_glVertexAttrib2sNV(GLuint arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glVertexAttrib2sNV", (void*)glVertexAttrib2sNV, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2sNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2sNV", (void*)glVertexAttrib2sNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2SNVPROC glad_debug_glVertexAttrib2sNV = glad_debug_impl_glVertexAttrib2sNV;
PFNGLVERTEXATTRIB2SVNVPROC glad_glVertexAttrib2svNV;
void APIENTRY glad_debug_impl_glVertexAttrib2svNV(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib2svNV", (void*)glVertexAttrib2svNV, 2, arg0, arg1);
     glad_glVertexAttrib2svNV(arg0, arg1);
    _post_call_callback("glVertexAttrib2svNV", (void*)glVertexAttrib2svNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2SVNVPROC glad_debug_glVertexAttrib2svNV = glad_debug_impl_glVertexAttrib2svNV;
PFNGLVERTEXATTRIB3DNVPROC glad_glVertexAttrib3dNV;
void APIENTRY glad_debug_impl_glVertexAttrib3dNV(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glVertexAttrib3dNV", (void*)glVertexAttrib3dNV, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3dNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3dNV", (void*)glVertexAttrib3dNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3DNVPROC glad_debug_glVertexAttrib3dNV = glad_debug_impl_glVertexAttrib3dNV;
PFNGLVERTEXATTRIB3DVNVPROC glad_glVertexAttrib3dvNV;
void APIENTRY glad_debug_impl_glVertexAttrib3dvNV(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib3dvNV", (void*)glVertexAttrib3dvNV, 2, arg0, arg1);
     glad_glVertexAttrib3dvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib3dvNV", (void*)glVertexAttrib3dvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3DVNVPROC glad_debug_glVertexAttrib3dvNV = glad_debug_impl_glVertexAttrib3dvNV;
PFNGLVERTEXATTRIB3FNVPROC glad_glVertexAttrib3fNV;
void APIENTRY glad_debug_impl_glVertexAttrib3fNV(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glVertexAttrib3fNV", (void*)glVertexAttrib3fNV, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3fNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3fNV", (void*)glVertexAttrib3fNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3FNVPROC glad_debug_glVertexAttrib3fNV = glad_debug_impl_glVertexAttrib3fNV;
PFNGLVERTEXATTRIB3FVNVPROC glad_glVertexAttrib3fvNV;
void APIENTRY glad_debug_impl_glVertexAttrib3fvNV(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib3fvNV", (void*)glVertexAttrib3fvNV, 2, arg0, arg1);
     glad_glVertexAttrib3fvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib3fvNV", (void*)glVertexAttrib3fvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3FVNVPROC glad_debug_glVertexAttrib3fvNV = glad_debug_impl_glVertexAttrib3fvNV;
PFNGLVERTEXATTRIB3SNVPROC glad_glVertexAttrib3sNV;
void APIENTRY glad_debug_impl_glVertexAttrib3sNV(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_callback("glVertexAttrib3sNV", (void*)glVertexAttrib3sNV, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3sNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3sNV", (void*)glVertexAttrib3sNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3SNVPROC glad_debug_glVertexAttrib3sNV = glad_debug_impl_glVertexAttrib3sNV;
PFNGLVERTEXATTRIB3SVNVPROC glad_glVertexAttrib3svNV;
void APIENTRY glad_debug_impl_glVertexAttrib3svNV(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib3svNV", (void*)glVertexAttrib3svNV, 2, arg0, arg1);
     glad_glVertexAttrib3svNV(arg0, arg1);
    _post_call_callback("glVertexAttrib3svNV", (void*)glVertexAttrib3svNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3SVNVPROC glad_debug_glVertexAttrib3svNV = glad_debug_impl_glVertexAttrib3svNV;
PFNGLVERTEXATTRIB4DNVPROC glad_glVertexAttrib4dNV;
void APIENTRY glad_debug_impl_glVertexAttrib4dNV(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glVertexAttrib4dNV", (void*)glVertexAttrib4dNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4dNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4dNV", (void*)glVertexAttrib4dNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4DNVPROC glad_debug_glVertexAttrib4dNV = glad_debug_impl_glVertexAttrib4dNV;
PFNGLVERTEXATTRIB4DVNVPROC glad_glVertexAttrib4dvNV;
void APIENTRY glad_debug_impl_glVertexAttrib4dvNV(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttrib4dvNV", (void*)glVertexAttrib4dvNV, 2, arg0, arg1);
     glad_glVertexAttrib4dvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib4dvNV", (void*)glVertexAttrib4dvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4DVNVPROC glad_debug_glVertexAttrib4dvNV = glad_debug_impl_glVertexAttrib4dvNV;
PFNGLVERTEXATTRIB4FNVPROC glad_glVertexAttrib4fNV;
void APIENTRY glad_debug_impl_glVertexAttrib4fNV(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glVertexAttrib4fNV", (void*)glVertexAttrib4fNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4fNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4fNV", (void*)glVertexAttrib4fNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4FNVPROC glad_debug_glVertexAttrib4fNV = glad_debug_impl_glVertexAttrib4fNV;
PFNGLVERTEXATTRIB4FVNVPROC glad_glVertexAttrib4fvNV;
void APIENTRY glad_debug_impl_glVertexAttrib4fvNV(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexAttrib4fvNV", (void*)glVertexAttrib4fvNV, 2, arg0, arg1);
     glad_glVertexAttrib4fvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib4fvNV", (void*)glVertexAttrib4fvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4FVNVPROC glad_debug_glVertexAttrib4fvNV = glad_debug_impl_glVertexAttrib4fvNV;
PFNGLVERTEXATTRIB4SNVPROC glad_glVertexAttrib4sNV;
void APIENTRY glad_debug_impl_glVertexAttrib4sNV(GLuint arg0, GLshort arg1, GLshort arg2, GLshort arg3, GLshort arg4) {
    _pre_call_callback("glVertexAttrib4sNV", (void*)glVertexAttrib4sNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4sNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4sNV", (void*)glVertexAttrib4sNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4SNVPROC glad_debug_glVertexAttrib4sNV = glad_debug_impl_glVertexAttrib4sNV;
PFNGLVERTEXATTRIB4SVNVPROC glad_glVertexAttrib4svNV;
void APIENTRY glad_debug_impl_glVertexAttrib4svNV(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttrib4svNV", (void*)glVertexAttrib4svNV, 2, arg0, arg1);
     glad_glVertexAttrib4svNV(arg0, arg1);
    _post_call_callback("glVertexAttrib4svNV", (void*)glVertexAttrib4svNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4SVNVPROC glad_debug_glVertexAttrib4svNV = glad_debug_impl_glVertexAttrib4svNV;
PFNGLVERTEXATTRIB4UBNVPROC glad_glVertexAttrib4ubNV;
void APIENTRY glad_debug_impl_glVertexAttrib4ubNV(GLuint arg0, GLubyte arg1, GLubyte arg2, GLubyte arg3, GLubyte arg4) {
    _pre_call_callback("glVertexAttrib4ubNV", (void*)glVertexAttrib4ubNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4ubNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4ubNV", (void*)glVertexAttrib4ubNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4UBNVPROC glad_debug_glVertexAttrib4ubNV = glad_debug_impl_glVertexAttrib4ubNV;
PFNGLVERTEXATTRIB4UBVNVPROC glad_glVertexAttrib4ubvNV;
void APIENTRY glad_debug_impl_glVertexAttrib4ubvNV(GLuint arg0, const GLubyte* arg1) {
    _pre_call_callback("glVertexAttrib4ubvNV", (void*)glVertexAttrib4ubvNV, 2, arg0, arg1);
     glad_glVertexAttrib4ubvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib4ubvNV", (void*)glVertexAttrib4ubvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4UBVNVPROC glad_debug_glVertexAttrib4ubvNV = glad_debug_impl_glVertexAttrib4ubvNV;
PFNGLVERTEXATTRIBS1DVNVPROC glad_glVertexAttribs1dvNV;
void APIENTRY glad_debug_impl_glVertexAttribs1dvNV(GLuint arg0, GLsizei arg1, const GLdouble* arg2) {
    _pre_call_callback("glVertexAttribs1dvNV", (void*)glVertexAttribs1dvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs1dvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs1dvNV", (void*)glVertexAttribs1dvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS1DVNVPROC glad_debug_glVertexAttribs1dvNV = glad_debug_impl_glVertexAttribs1dvNV;
PFNGLVERTEXATTRIBS1FVNVPROC glad_glVertexAttribs1fvNV;
void APIENTRY glad_debug_impl_glVertexAttribs1fvNV(GLuint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glVertexAttribs1fvNV", (void*)glVertexAttribs1fvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs1fvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs1fvNV", (void*)glVertexAttribs1fvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS1FVNVPROC glad_debug_glVertexAttribs1fvNV = glad_debug_impl_glVertexAttribs1fvNV;
PFNGLVERTEXATTRIBS1SVNVPROC glad_glVertexAttribs1svNV;
void APIENTRY glad_debug_impl_glVertexAttribs1svNV(GLuint arg0, GLsizei arg1, const GLshort* arg2) {
    _pre_call_callback("glVertexAttribs1svNV", (void*)glVertexAttribs1svNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs1svNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs1svNV", (void*)glVertexAttribs1svNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS1SVNVPROC glad_debug_glVertexAttribs1svNV = glad_debug_impl_glVertexAttribs1svNV;
PFNGLVERTEXATTRIBS2DVNVPROC glad_glVertexAttribs2dvNV;
void APIENTRY glad_debug_impl_glVertexAttribs2dvNV(GLuint arg0, GLsizei arg1, const GLdouble* arg2) {
    _pre_call_callback("glVertexAttribs2dvNV", (void*)glVertexAttribs2dvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs2dvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs2dvNV", (void*)glVertexAttribs2dvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS2DVNVPROC glad_debug_glVertexAttribs2dvNV = glad_debug_impl_glVertexAttribs2dvNV;
PFNGLVERTEXATTRIBS2FVNVPROC glad_glVertexAttribs2fvNV;
void APIENTRY glad_debug_impl_glVertexAttribs2fvNV(GLuint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glVertexAttribs2fvNV", (void*)glVertexAttribs2fvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs2fvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs2fvNV", (void*)glVertexAttribs2fvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS2FVNVPROC glad_debug_glVertexAttribs2fvNV = glad_debug_impl_glVertexAttribs2fvNV;
PFNGLVERTEXATTRIBS2SVNVPROC glad_glVertexAttribs2svNV;
void APIENTRY glad_debug_impl_glVertexAttribs2svNV(GLuint arg0, GLsizei arg1, const GLshort* arg2) {
    _pre_call_callback("glVertexAttribs2svNV", (void*)glVertexAttribs2svNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs2svNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs2svNV", (void*)glVertexAttribs2svNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS2SVNVPROC glad_debug_glVertexAttribs2svNV = glad_debug_impl_glVertexAttribs2svNV;
PFNGLVERTEXATTRIBS3DVNVPROC glad_glVertexAttribs3dvNV;
void APIENTRY glad_debug_impl_glVertexAttribs3dvNV(GLuint arg0, GLsizei arg1, const GLdouble* arg2) {
    _pre_call_callback("glVertexAttribs3dvNV", (void*)glVertexAttribs3dvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs3dvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs3dvNV", (void*)glVertexAttribs3dvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS3DVNVPROC glad_debug_glVertexAttribs3dvNV = glad_debug_impl_glVertexAttribs3dvNV;
PFNGLVERTEXATTRIBS3FVNVPROC glad_glVertexAttribs3fvNV;
void APIENTRY glad_debug_impl_glVertexAttribs3fvNV(GLuint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glVertexAttribs3fvNV", (void*)glVertexAttribs3fvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs3fvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs3fvNV", (void*)glVertexAttribs3fvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS3FVNVPROC glad_debug_glVertexAttribs3fvNV = glad_debug_impl_glVertexAttribs3fvNV;
PFNGLVERTEXATTRIBS3SVNVPROC glad_glVertexAttribs3svNV;
void APIENTRY glad_debug_impl_glVertexAttribs3svNV(GLuint arg0, GLsizei arg1, const GLshort* arg2) {
    _pre_call_callback("glVertexAttribs3svNV", (void*)glVertexAttribs3svNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs3svNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs3svNV", (void*)glVertexAttribs3svNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS3SVNVPROC glad_debug_glVertexAttribs3svNV = glad_debug_impl_glVertexAttribs3svNV;
PFNGLVERTEXATTRIBS4DVNVPROC glad_glVertexAttribs4dvNV;
void APIENTRY glad_debug_impl_glVertexAttribs4dvNV(GLuint arg0, GLsizei arg1, const GLdouble* arg2) {
    _pre_call_callback("glVertexAttribs4dvNV", (void*)glVertexAttribs4dvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs4dvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs4dvNV", (void*)glVertexAttribs4dvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS4DVNVPROC glad_debug_glVertexAttribs4dvNV = glad_debug_impl_glVertexAttribs4dvNV;
PFNGLVERTEXATTRIBS4FVNVPROC glad_glVertexAttribs4fvNV;
void APIENTRY glad_debug_impl_glVertexAttribs4fvNV(GLuint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glVertexAttribs4fvNV", (void*)glVertexAttribs4fvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs4fvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs4fvNV", (void*)glVertexAttribs4fvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS4FVNVPROC glad_debug_glVertexAttribs4fvNV = glad_debug_impl_glVertexAttribs4fvNV;
PFNGLVERTEXATTRIBS4SVNVPROC glad_glVertexAttribs4svNV;
void APIENTRY glad_debug_impl_glVertexAttribs4svNV(GLuint arg0, GLsizei arg1, const GLshort* arg2) {
    _pre_call_callback("glVertexAttribs4svNV", (void*)glVertexAttribs4svNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs4svNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs4svNV", (void*)glVertexAttribs4svNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS4SVNVPROC glad_debug_glVertexAttribs4svNV = glad_debug_impl_glVertexAttribs4svNV;
PFNGLVERTEXATTRIBS4UBVNVPROC glad_glVertexAttribs4ubvNV;
void APIENTRY glad_debug_impl_glVertexAttribs4ubvNV(GLuint arg0, GLsizei arg1, const GLubyte* arg2) {
    _pre_call_callback("glVertexAttribs4ubvNV", (void*)glVertexAttribs4ubvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs4ubvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs4ubvNV", (void*)glVertexAttribs4ubvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS4UBVNVPROC glad_debug_glVertexAttribs4ubvNV = glad_debug_impl_glVertexAttribs4ubvNV;
PFNGLBEGINVERTEXSHADEREXTPROC glad_glBeginVertexShaderEXT;
void APIENTRY glad_debug_impl_glBeginVertexShaderEXT() {
    _pre_call_callback("glBeginVertexShaderEXT", (void*)glBeginVertexShaderEXT, 0);
     glad_glBeginVertexShaderEXT();
    _post_call_callback("glBeginVertexShaderEXT", (void*)glBeginVertexShaderEXT, 0);

}
PFNGLBEGINVERTEXSHADEREXTPROC glad_debug_glBeginVertexShaderEXT = glad_debug_impl_glBeginVertexShaderEXT;
PFNGLENDVERTEXSHADEREXTPROC glad_glEndVertexShaderEXT;
void APIENTRY glad_debug_impl_glEndVertexShaderEXT() {
    _pre_call_callback("glEndVertexShaderEXT", (void*)glEndVertexShaderEXT, 0);
     glad_glEndVertexShaderEXT();
    _post_call_callback("glEndVertexShaderEXT", (void*)glEndVertexShaderEXT, 0);

}
PFNGLENDVERTEXSHADEREXTPROC glad_debug_glEndVertexShaderEXT = glad_debug_impl_glEndVertexShaderEXT;
PFNGLBINDVERTEXSHADEREXTPROC glad_glBindVertexShaderEXT;
void APIENTRY glad_debug_impl_glBindVertexShaderEXT(GLuint arg0) {
    _pre_call_callback("glBindVertexShaderEXT", (void*)glBindVertexShaderEXT, 1, arg0);
     glad_glBindVertexShaderEXT(arg0);
    _post_call_callback("glBindVertexShaderEXT", (void*)glBindVertexShaderEXT, 1, arg0);

}
PFNGLBINDVERTEXSHADEREXTPROC glad_debug_glBindVertexShaderEXT = glad_debug_impl_glBindVertexShaderEXT;
PFNGLGENVERTEXSHADERSEXTPROC glad_glGenVertexShadersEXT;
GLuint APIENTRY glad_debug_impl_glGenVertexShadersEXT(GLuint arg0) {
    GLuint ret;
    _pre_call_callback("glGenVertexShadersEXT", (void*)glGenVertexShadersEXT, 1, arg0);
    ret =  glad_glGenVertexShadersEXT(arg0);
    _post_call_callback("glGenVertexShadersEXT", (void*)glGenVertexShadersEXT, 1, arg0);
    return ret;
}
PFNGLGENVERTEXSHADERSEXTPROC glad_debug_glGenVertexShadersEXT = glad_debug_impl_glGenVertexShadersEXT;
PFNGLDELETEVERTEXSHADEREXTPROC glad_glDeleteVertexShaderEXT;
void APIENTRY glad_debug_impl_glDeleteVertexShaderEXT(GLuint arg0) {
    _pre_call_callback("glDeleteVertexShaderEXT", (void*)glDeleteVertexShaderEXT, 1, arg0);
     glad_glDeleteVertexShaderEXT(arg0);
    _post_call_callback("glDeleteVertexShaderEXT", (void*)glDeleteVertexShaderEXT, 1, arg0);

}
PFNGLDELETEVERTEXSHADEREXTPROC glad_debug_glDeleteVertexShaderEXT = glad_debug_impl_glDeleteVertexShaderEXT;
PFNGLSHADEROP1EXTPROC glad_glShaderOp1EXT;
void APIENTRY glad_debug_impl_glShaderOp1EXT(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glShaderOp1EXT", (void*)glShaderOp1EXT, 3, arg0, arg1, arg2);
     glad_glShaderOp1EXT(arg0, arg1, arg2);
    _post_call_callback("glShaderOp1EXT", (void*)glShaderOp1EXT, 3, arg0, arg1, arg2);

}
PFNGLSHADEROP1EXTPROC glad_debug_glShaderOp1EXT = glad_debug_impl_glShaderOp1EXT;
PFNGLSHADEROP2EXTPROC glad_glShaderOp2EXT;
void APIENTRY glad_debug_impl_glShaderOp2EXT(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_callback("glShaderOp2EXT", (void*)glShaderOp2EXT, 4, arg0, arg1, arg2, arg3);
     glad_glShaderOp2EXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glShaderOp2EXT", (void*)glShaderOp2EXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLSHADEROP2EXTPROC glad_debug_glShaderOp2EXT = glad_debug_impl_glShaderOp2EXT;
PFNGLSHADEROP3EXTPROC glad_glShaderOp3EXT;
void APIENTRY glad_debug_impl_glShaderOp3EXT(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_callback("glShaderOp3EXT", (void*)glShaderOp3EXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glShaderOp3EXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glShaderOp3EXT", (void*)glShaderOp3EXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLSHADEROP3EXTPROC glad_debug_glShaderOp3EXT = glad_debug_impl_glShaderOp3EXT;
PFNGLSWIZZLEEXTPROC glad_glSwizzleEXT;
void APIENTRY glad_debug_impl_glSwizzleEXT(GLuint arg0, GLuint arg1, GLenum arg2, GLenum arg3, GLenum arg4, GLenum arg5) {
    _pre_call_callback("glSwizzleEXT", (void*)glSwizzleEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glSwizzleEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glSwizzleEXT", (void*)glSwizzleEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLSWIZZLEEXTPROC glad_debug_glSwizzleEXT = glad_debug_impl_glSwizzleEXT;
PFNGLWRITEMASKEXTPROC glad_glWriteMaskEXT;
void APIENTRY glad_debug_impl_glWriteMaskEXT(GLuint arg0, GLuint arg1, GLenum arg2, GLenum arg3, GLenum arg4, GLenum arg5) {
    _pre_call_callback("glWriteMaskEXT", (void*)glWriteMaskEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glWriteMaskEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glWriteMaskEXT", (void*)glWriteMaskEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLWRITEMASKEXTPROC glad_debug_glWriteMaskEXT = glad_debug_impl_glWriteMaskEXT;
PFNGLINSERTCOMPONENTEXTPROC glad_glInsertComponentEXT;
void APIENTRY glad_debug_impl_glInsertComponentEXT(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glInsertComponentEXT", (void*)glInsertComponentEXT, 3, arg0, arg1, arg2);
     glad_glInsertComponentEXT(arg0, arg1, arg2);
    _post_call_callback("glInsertComponentEXT", (void*)glInsertComponentEXT, 3, arg0, arg1, arg2);

}
PFNGLINSERTCOMPONENTEXTPROC glad_debug_glInsertComponentEXT = glad_debug_impl_glInsertComponentEXT;
PFNGLEXTRACTCOMPONENTEXTPROC glad_glExtractComponentEXT;
void APIENTRY glad_debug_impl_glExtractComponentEXT(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glExtractComponentEXT", (void*)glExtractComponentEXT, 3, arg0, arg1, arg2);
     glad_glExtractComponentEXT(arg0, arg1, arg2);
    _post_call_callback("glExtractComponentEXT", (void*)glExtractComponentEXT, 3, arg0, arg1, arg2);

}
PFNGLEXTRACTCOMPONENTEXTPROC glad_debug_glExtractComponentEXT = glad_debug_impl_glExtractComponentEXT;
PFNGLGENSYMBOLSEXTPROC glad_glGenSymbolsEXT;
GLuint APIENTRY glad_debug_impl_glGenSymbolsEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    GLuint ret;
    _pre_call_callback("glGenSymbolsEXT", (void*)glGenSymbolsEXT, 4, arg0, arg1, arg2, arg3);
    ret =  glad_glGenSymbolsEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGenSymbolsEXT", (void*)glGenSymbolsEXT, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLGENSYMBOLSEXTPROC glad_debug_glGenSymbolsEXT = glad_debug_impl_glGenSymbolsEXT;
PFNGLSETINVARIANTEXTPROC glad_glSetInvariantEXT;
void APIENTRY glad_debug_impl_glSetInvariantEXT(GLuint arg0, GLenum arg1, const void* arg2) {
    _pre_call_callback("glSetInvariantEXT", (void*)glSetInvariantEXT, 3, arg0, arg1, arg2);
     glad_glSetInvariantEXT(arg0, arg1, arg2);
    _post_call_callback("glSetInvariantEXT", (void*)glSetInvariantEXT, 3, arg0, arg1, arg2);

}
PFNGLSETINVARIANTEXTPROC glad_debug_glSetInvariantEXT = glad_debug_impl_glSetInvariantEXT;
PFNGLSETLOCALCONSTANTEXTPROC glad_glSetLocalConstantEXT;
void APIENTRY glad_debug_impl_glSetLocalConstantEXT(GLuint arg0, GLenum arg1, const void* arg2) {
    _pre_call_callback("glSetLocalConstantEXT", (void*)glSetLocalConstantEXT, 3, arg0, arg1, arg2);
     glad_glSetLocalConstantEXT(arg0, arg1, arg2);
    _post_call_callback("glSetLocalConstantEXT", (void*)glSetLocalConstantEXT, 3, arg0, arg1, arg2);

}
PFNGLSETLOCALCONSTANTEXTPROC glad_debug_glSetLocalConstantEXT = glad_debug_impl_glSetLocalConstantEXT;
PFNGLVARIANTBVEXTPROC glad_glVariantbvEXT;
void APIENTRY glad_debug_impl_glVariantbvEXT(GLuint arg0, const GLbyte* arg1) {
    _pre_call_callback("glVariantbvEXT", (void*)glVariantbvEXT, 2, arg0, arg1);
     glad_glVariantbvEXT(arg0, arg1);
    _post_call_callback("glVariantbvEXT", (void*)glVariantbvEXT, 2, arg0, arg1);

}
PFNGLVARIANTBVEXTPROC glad_debug_glVariantbvEXT = glad_debug_impl_glVariantbvEXT;
PFNGLVARIANTSVEXTPROC glad_glVariantsvEXT;
void APIENTRY glad_debug_impl_glVariantsvEXT(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVariantsvEXT", (void*)glVariantsvEXT, 2, arg0, arg1);
     glad_glVariantsvEXT(arg0, arg1);
    _post_call_callback("glVariantsvEXT", (void*)glVariantsvEXT, 2, arg0, arg1);

}
PFNGLVARIANTSVEXTPROC glad_debug_glVariantsvEXT = glad_debug_impl_glVariantsvEXT;
PFNGLVARIANTIVEXTPROC glad_glVariantivEXT;
void APIENTRY glad_debug_impl_glVariantivEXT(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVariantivEXT", (void*)glVariantivEXT, 2, arg0, arg1);
     glad_glVariantivEXT(arg0, arg1);
    _post_call_callback("glVariantivEXT", (void*)glVariantivEXT, 2, arg0, arg1);

}
PFNGLVARIANTIVEXTPROC glad_debug_glVariantivEXT = glad_debug_impl_glVariantivEXT;
PFNGLVARIANTFVEXTPROC glad_glVariantfvEXT;
void APIENTRY glad_debug_impl_glVariantfvEXT(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glVariantfvEXT", (void*)glVariantfvEXT, 2, arg0, arg1);
     glad_glVariantfvEXT(arg0, arg1);
    _post_call_callback("glVariantfvEXT", (void*)glVariantfvEXT, 2, arg0, arg1);

}
PFNGLVARIANTFVEXTPROC glad_debug_glVariantfvEXT = glad_debug_impl_glVariantfvEXT;
PFNGLVARIANTDVEXTPROC glad_glVariantdvEXT;
void APIENTRY glad_debug_impl_glVariantdvEXT(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVariantdvEXT", (void*)glVariantdvEXT, 2, arg0, arg1);
     glad_glVariantdvEXT(arg0, arg1);
    _post_call_callback("glVariantdvEXT", (void*)glVariantdvEXT, 2, arg0, arg1);

}
PFNGLVARIANTDVEXTPROC glad_debug_glVariantdvEXT = glad_debug_impl_glVariantdvEXT;
PFNGLVARIANTUBVEXTPROC glad_glVariantubvEXT;
void APIENTRY glad_debug_impl_glVariantubvEXT(GLuint arg0, const GLubyte* arg1) {
    _pre_call_callback("glVariantubvEXT", (void*)glVariantubvEXT, 2, arg0, arg1);
     glad_glVariantubvEXT(arg0, arg1);
    _post_call_callback("glVariantubvEXT", (void*)glVariantubvEXT, 2, arg0, arg1);

}
PFNGLVARIANTUBVEXTPROC glad_debug_glVariantubvEXT = glad_debug_impl_glVariantubvEXT;
PFNGLVARIANTUSVEXTPROC glad_glVariantusvEXT;
void APIENTRY glad_debug_impl_glVariantusvEXT(GLuint arg0, const GLushort* arg1) {
    _pre_call_callback("glVariantusvEXT", (void*)glVariantusvEXT, 2, arg0, arg1);
     glad_glVariantusvEXT(arg0, arg1);
    _post_call_callback("glVariantusvEXT", (void*)glVariantusvEXT, 2, arg0, arg1);

}
PFNGLVARIANTUSVEXTPROC glad_debug_glVariantusvEXT = glad_debug_impl_glVariantusvEXT;
PFNGLVARIANTUIVEXTPROC glad_glVariantuivEXT;
void APIENTRY glad_debug_impl_glVariantuivEXT(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVariantuivEXT", (void*)glVariantuivEXT, 2, arg0, arg1);
     glad_glVariantuivEXT(arg0, arg1);
    _post_call_callback("glVariantuivEXT", (void*)glVariantuivEXT, 2, arg0, arg1);

}
PFNGLVARIANTUIVEXTPROC glad_debug_glVariantuivEXT = glad_debug_impl_glVariantuivEXT;
PFNGLVARIANTPOINTEREXTPROC glad_glVariantPointerEXT;
void APIENTRY glad_debug_impl_glVariantPointerEXT(GLuint arg0, GLenum arg1, GLuint arg2, const void* arg3) {
    _pre_call_callback("glVariantPointerEXT", (void*)glVariantPointerEXT, 4, arg0, arg1, arg2, arg3);
     glad_glVariantPointerEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glVariantPointerEXT", (void*)glVariantPointerEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLVARIANTPOINTEREXTPROC glad_debug_glVariantPointerEXT = glad_debug_impl_glVariantPointerEXT;
PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glad_glEnableVariantClientStateEXT;
void APIENTRY glad_debug_impl_glEnableVariantClientStateEXT(GLuint arg0) {
    _pre_call_callback("glEnableVariantClientStateEXT", (void*)glEnableVariantClientStateEXT, 1, arg0);
     glad_glEnableVariantClientStateEXT(arg0);
    _post_call_callback("glEnableVariantClientStateEXT", (void*)glEnableVariantClientStateEXT, 1, arg0);

}
PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glad_debug_glEnableVariantClientStateEXT = glad_debug_impl_glEnableVariantClientStateEXT;
PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glad_glDisableVariantClientStateEXT;
void APIENTRY glad_debug_impl_glDisableVariantClientStateEXT(GLuint arg0) {
    _pre_call_callback("glDisableVariantClientStateEXT", (void*)glDisableVariantClientStateEXT, 1, arg0);
     glad_glDisableVariantClientStateEXT(arg0);
    _post_call_callback("glDisableVariantClientStateEXT", (void*)glDisableVariantClientStateEXT, 1, arg0);

}
PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glad_debug_glDisableVariantClientStateEXT = glad_debug_impl_glDisableVariantClientStateEXT;
PFNGLBINDLIGHTPARAMETEREXTPROC glad_glBindLightParameterEXT;
GLuint APIENTRY glad_debug_impl_glBindLightParameterEXT(GLenum arg0, GLenum arg1) {
    GLuint ret;
    _pre_call_callback("glBindLightParameterEXT", (void*)glBindLightParameterEXT, 2, arg0, arg1);
    ret =  glad_glBindLightParameterEXT(arg0, arg1);
    _post_call_callback("glBindLightParameterEXT", (void*)glBindLightParameterEXT, 2, arg0, arg1);
    return ret;
}
PFNGLBINDLIGHTPARAMETEREXTPROC glad_debug_glBindLightParameterEXT = glad_debug_impl_glBindLightParameterEXT;
PFNGLBINDMATERIALPARAMETEREXTPROC glad_glBindMaterialParameterEXT;
GLuint APIENTRY glad_debug_impl_glBindMaterialParameterEXT(GLenum arg0, GLenum arg1) {
    GLuint ret;
    _pre_call_callback("glBindMaterialParameterEXT", (void*)glBindMaterialParameterEXT, 2, arg0, arg1);
    ret =  glad_glBindMaterialParameterEXT(arg0, arg1);
    _post_call_callback("glBindMaterialParameterEXT", (void*)glBindMaterialParameterEXT, 2, arg0, arg1);
    return ret;
}
PFNGLBINDMATERIALPARAMETEREXTPROC glad_debug_glBindMaterialParameterEXT = glad_debug_impl_glBindMaterialParameterEXT;
PFNGLBINDTEXGENPARAMETEREXTPROC glad_glBindTexGenParameterEXT;
GLuint APIENTRY glad_debug_impl_glBindTexGenParameterEXT(GLenum arg0, GLenum arg1, GLenum arg2) {
    GLuint ret;
    _pre_call_callback("glBindTexGenParameterEXT", (void*)glBindTexGenParameterEXT, 3, arg0, arg1, arg2);
    ret =  glad_glBindTexGenParameterEXT(arg0, arg1, arg2);
    _post_call_callback("glBindTexGenParameterEXT", (void*)glBindTexGenParameterEXT, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLBINDTEXGENPARAMETEREXTPROC glad_debug_glBindTexGenParameterEXT = glad_debug_impl_glBindTexGenParameterEXT;
PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glad_glBindTextureUnitParameterEXT;
GLuint APIENTRY glad_debug_impl_glBindTextureUnitParameterEXT(GLenum arg0, GLenum arg1) {
    GLuint ret;
    _pre_call_callback("glBindTextureUnitParameterEXT", (void*)glBindTextureUnitParameterEXT, 2, arg0, arg1);
    ret =  glad_glBindTextureUnitParameterEXT(arg0, arg1);
    _post_call_callback("glBindTextureUnitParameterEXT", (void*)glBindTextureUnitParameterEXT, 2, arg0, arg1);
    return ret;
}
PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glad_debug_glBindTextureUnitParameterEXT = glad_debug_impl_glBindTextureUnitParameterEXT;
PFNGLBINDPARAMETEREXTPROC glad_glBindParameterEXT;
GLuint APIENTRY glad_debug_impl_glBindParameterEXT(GLenum arg0) {
    GLuint ret;
    _pre_call_callback("glBindParameterEXT", (void*)glBindParameterEXT, 1, arg0);
    ret =  glad_glBindParameterEXT(arg0);
    _post_call_callback("glBindParameterEXT", (void*)glBindParameterEXT, 1, arg0);
    return ret;
}
PFNGLBINDPARAMETEREXTPROC glad_debug_glBindParameterEXT = glad_debug_impl_glBindParameterEXT;
PFNGLISVARIANTENABLEDEXTPROC glad_glIsVariantEnabledEXT;
GLboolean APIENTRY glad_debug_impl_glIsVariantEnabledEXT(GLuint arg0, GLenum arg1) {
    GLboolean ret;
    _pre_call_callback("glIsVariantEnabledEXT", (void*)glIsVariantEnabledEXT, 2, arg0, arg1);
    ret =  glad_glIsVariantEnabledEXT(arg0, arg1);
    _post_call_callback("glIsVariantEnabledEXT", (void*)glIsVariantEnabledEXT, 2, arg0, arg1);
    return ret;
}
PFNGLISVARIANTENABLEDEXTPROC glad_debug_glIsVariantEnabledEXT = glad_debug_impl_glIsVariantEnabledEXT;
PFNGLGETVARIANTBOOLEANVEXTPROC glad_glGetVariantBooleanvEXT;
void APIENTRY glad_debug_impl_glGetVariantBooleanvEXT(GLuint arg0, GLenum arg1, GLboolean* arg2) {
    _pre_call_callback("glGetVariantBooleanvEXT", (void*)glGetVariantBooleanvEXT, 3, arg0, arg1, arg2);
     glad_glGetVariantBooleanvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetVariantBooleanvEXT", (void*)glGetVariantBooleanvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETVARIANTBOOLEANVEXTPROC glad_debug_glGetVariantBooleanvEXT = glad_debug_impl_glGetVariantBooleanvEXT;
PFNGLGETVARIANTINTEGERVEXTPROC glad_glGetVariantIntegervEXT;
void APIENTRY glad_debug_impl_glGetVariantIntegervEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVariantIntegervEXT", (void*)glGetVariantIntegervEXT, 3, arg0, arg1, arg2);
     glad_glGetVariantIntegervEXT(arg0, arg1, arg2);
    _post_call_callback("glGetVariantIntegervEXT", (void*)glGetVariantIntegervEXT, 3, arg0, arg1, arg2);

}
PFNGLGETVARIANTINTEGERVEXTPROC glad_debug_glGetVariantIntegervEXT = glad_debug_impl_glGetVariantIntegervEXT;
PFNGLGETVARIANTFLOATVEXTPROC glad_glGetVariantFloatvEXT;
void APIENTRY glad_debug_impl_glGetVariantFloatvEXT(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetVariantFloatvEXT", (void*)glGetVariantFloatvEXT, 3, arg0, arg1, arg2);
     glad_glGetVariantFloatvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetVariantFloatvEXT", (void*)glGetVariantFloatvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETVARIANTFLOATVEXTPROC glad_debug_glGetVariantFloatvEXT = glad_debug_impl_glGetVariantFloatvEXT;
PFNGLGETVARIANTPOINTERVEXTPROC glad_glGetVariantPointervEXT;
void APIENTRY glad_debug_impl_glGetVariantPointervEXT(GLuint arg0, GLenum arg1, void** arg2) {
    _pre_call_callback("glGetVariantPointervEXT", (void*)glGetVariantPointervEXT, 3, arg0, arg1, arg2);
     glad_glGetVariantPointervEXT(arg0, arg1, arg2);
    _post_call_callback("glGetVariantPointervEXT", (void*)glGetVariantPointervEXT, 3, arg0, arg1, arg2);

}
PFNGLGETVARIANTPOINTERVEXTPROC glad_debug_glGetVariantPointervEXT = glad_debug_impl_glGetVariantPointervEXT;
PFNGLGETINVARIANTBOOLEANVEXTPROC glad_glGetInvariantBooleanvEXT;
void APIENTRY glad_debug_impl_glGetInvariantBooleanvEXT(GLuint arg0, GLenum arg1, GLboolean* arg2) {
    _pre_call_callback("glGetInvariantBooleanvEXT", (void*)glGetInvariantBooleanvEXT, 3, arg0, arg1, arg2);
     glad_glGetInvariantBooleanvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetInvariantBooleanvEXT", (void*)glGetInvariantBooleanvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETINVARIANTBOOLEANVEXTPROC glad_debug_glGetInvariantBooleanvEXT = glad_debug_impl_glGetInvariantBooleanvEXT;
PFNGLGETINVARIANTINTEGERVEXTPROC glad_glGetInvariantIntegervEXT;
void APIENTRY glad_debug_impl_glGetInvariantIntegervEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetInvariantIntegervEXT", (void*)glGetInvariantIntegervEXT, 3, arg0, arg1, arg2);
     glad_glGetInvariantIntegervEXT(arg0, arg1, arg2);
    _post_call_callback("glGetInvariantIntegervEXT", (void*)glGetInvariantIntegervEXT, 3, arg0, arg1, arg2);

}
PFNGLGETINVARIANTINTEGERVEXTPROC glad_debug_glGetInvariantIntegervEXT = glad_debug_impl_glGetInvariantIntegervEXT;
PFNGLGETINVARIANTFLOATVEXTPROC glad_glGetInvariantFloatvEXT;
void APIENTRY glad_debug_impl_glGetInvariantFloatvEXT(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetInvariantFloatvEXT", (void*)glGetInvariantFloatvEXT, 3, arg0, arg1, arg2);
     glad_glGetInvariantFloatvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetInvariantFloatvEXT", (void*)glGetInvariantFloatvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETINVARIANTFLOATVEXTPROC glad_debug_glGetInvariantFloatvEXT = glad_debug_impl_glGetInvariantFloatvEXT;
PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glad_glGetLocalConstantBooleanvEXT;
void APIENTRY glad_debug_impl_glGetLocalConstantBooleanvEXT(GLuint arg0, GLenum arg1, GLboolean* arg2) {
    _pre_call_callback("glGetLocalConstantBooleanvEXT", (void*)glGetLocalConstantBooleanvEXT, 3, arg0, arg1, arg2);
     glad_glGetLocalConstantBooleanvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetLocalConstantBooleanvEXT", (void*)glGetLocalConstantBooleanvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glad_debug_glGetLocalConstantBooleanvEXT = glad_debug_impl_glGetLocalConstantBooleanvEXT;
PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glad_glGetLocalConstantIntegervEXT;
void APIENTRY glad_debug_impl_glGetLocalConstantIntegervEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetLocalConstantIntegervEXT", (void*)glGetLocalConstantIntegervEXT, 3, arg0, arg1, arg2);
     glad_glGetLocalConstantIntegervEXT(arg0, arg1, arg2);
    _post_call_callback("glGetLocalConstantIntegervEXT", (void*)glGetLocalConstantIntegervEXT, 3, arg0, arg1, arg2);

}
PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glad_debug_glGetLocalConstantIntegervEXT = glad_debug_impl_glGetLocalConstantIntegervEXT;
PFNGLGETLOCALCONSTANTFLOATVEXTPROC glad_glGetLocalConstantFloatvEXT;
void APIENTRY glad_debug_impl_glGetLocalConstantFloatvEXT(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetLocalConstantFloatvEXT", (void*)glGetLocalConstantFloatvEXT, 3, arg0, arg1, arg2);
     glad_glGetLocalConstantFloatvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetLocalConstantFloatvEXT", (void*)glGetLocalConstantFloatvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETLOCALCONSTANTFLOATVEXTPROC glad_debug_glGetLocalConstantFloatvEXT = glad_debug_impl_glGetLocalConstantFloatvEXT;
PFNGLBLENDFUNCSEPARATEEXTPROC glad_glBlendFuncSeparateEXT;
void APIENTRY glad_debug_impl_glBlendFuncSeparateEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_callback("glBlendFuncSeparateEXT", (void*)glBlendFuncSeparateEXT, 4, arg0, arg1, arg2, arg3);
     glad_glBlendFuncSeparateEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glBlendFuncSeparateEXT", (void*)glBlendFuncSeparateEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLBLENDFUNCSEPARATEEXTPROC glad_debug_glBlendFuncSeparateEXT = glad_debug_impl_glBlendFuncSeparateEXT;
PFNGLGENFENCESAPPLEPROC glad_glGenFencesAPPLE;
void APIENTRY glad_debug_impl_glGenFencesAPPLE(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenFencesAPPLE", (void*)glGenFencesAPPLE, 2, arg0, arg1);
     glad_glGenFencesAPPLE(arg0, arg1);
    _post_call_callback("glGenFencesAPPLE", (void*)glGenFencesAPPLE, 2, arg0, arg1);

}
PFNGLGENFENCESAPPLEPROC glad_debug_glGenFencesAPPLE = glad_debug_impl_glGenFencesAPPLE;
PFNGLDELETEFENCESAPPLEPROC glad_glDeleteFencesAPPLE;
void APIENTRY glad_debug_impl_glDeleteFencesAPPLE(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteFencesAPPLE", (void*)glDeleteFencesAPPLE, 2, arg0, arg1);
     glad_glDeleteFencesAPPLE(arg0, arg1);
    _post_call_callback("glDeleteFencesAPPLE", (void*)glDeleteFencesAPPLE, 2, arg0, arg1);

}
PFNGLDELETEFENCESAPPLEPROC glad_debug_glDeleteFencesAPPLE = glad_debug_impl_glDeleteFencesAPPLE;
PFNGLSETFENCEAPPLEPROC glad_glSetFenceAPPLE;
void APIENTRY glad_debug_impl_glSetFenceAPPLE(GLuint arg0) {
    _pre_call_callback("glSetFenceAPPLE", (void*)glSetFenceAPPLE, 1, arg0);
     glad_glSetFenceAPPLE(arg0);
    _post_call_callback("glSetFenceAPPLE", (void*)glSetFenceAPPLE, 1, arg0);

}
PFNGLSETFENCEAPPLEPROC glad_debug_glSetFenceAPPLE = glad_debug_impl_glSetFenceAPPLE;
PFNGLISFENCEAPPLEPROC glad_glIsFenceAPPLE;
GLboolean APIENTRY glad_debug_impl_glIsFenceAPPLE(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsFenceAPPLE", (void*)glIsFenceAPPLE, 1, arg0);
    ret =  glad_glIsFenceAPPLE(arg0);
    _post_call_callback("glIsFenceAPPLE", (void*)glIsFenceAPPLE, 1, arg0);
    return ret;
}
PFNGLISFENCEAPPLEPROC glad_debug_glIsFenceAPPLE = glad_debug_impl_glIsFenceAPPLE;
PFNGLTESTFENCEAPPLEPROC glad_glTestFenceAPPLE;
GLboolean APIENTRY glad_debug_impl_glTestFenceAPPLE(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glTestFenceAPPLE", (void*)glTestFenceAPPLE, 1, arg0);
    ret =  glad_glTestFenceAPPLE(arg0);
    _post_call_callback("glTestFenceAPPLE", (void*)glTestFenceAPPLE, 1, arg0);
    return ret;
}
PFNGLTESTFENCEAPPLEPROC glad_debug_glTestFenceAPPLE = glad_debug_impl_glTestFenceAPPLE;
PFNGLFINISHFENCEAPPLEPROC glad_glFinishFenceAPPLE;
void APIENTRY glad_debug_impl_glFinishFenceAPPLE(GLuint arg0) {
    _pre_call_callback("glFinishFenceAPPLE", (void*)glFinishFenceAPPLE, 1, arg0);
     glad_glFinishFenceAPPLE(arg0);
    _post_call_callback("glFinishFenceAPPLE", (void*)glFinishFenceAPPLE, 1, arg0);

}
PFNGLFINISHFENCEAPPLEPROC glad_debug_glFinishFenceAPPLE = glad_debug_impl_glFinishFenceAPPLE;
PFNGLTESTOBJECTAPPLEPROC glad_glTestObjectAPPLE;
GLboolean APIENTRY glad_debug_impl_glTestObjectAPPLE(GLenum arg0, GLuint arg1) {
    GLboolean ret;
    _pre_call_callback("glTestObjectAPPLE", (void*)glTestObjectAPPLE, 2, arg0, arg1);
    ret =  glad_glTestObjectAPPLE(arg0, arg1);
    _post_call_callback("glTestObjectAPPLE", (void*)glTestObjectAPPLE, 2, arg0, arg1);
    return ret;
}
PFNGLTESTOBJECTAPPLEPROC glad_debug_glTestObjectAPPLE = glad_debug_impl_glTestObjectAPPLE;
PFNGLFINISHOBJECTAPPLEPROC glad_glFinishObjectAPPLE;
void APIENTRY glad_debug_impl_glFinishObjectAPPLE(GLenum arg0, GLint arg1) {
    _pre_call_callback("glFinishObjectAPPLE", (void*)glFinishObjectAPPLE, 2, arg0, arg1);
     glad_glFinishObjectAPPLE(arg0, arg1);
    _post_call_callback("glFinishObjectAPPLE", (void*)glFinishObjectAPPLE, 2, arg0, arg1);

}
PFNGLFINISHOBJECTAPPLEPROC glad_debug_glFinishObjectAPPLE = glad_debug_impl_glFinishObjectAPPLE;
PFNGLMULTITEXCOORD1BOESPROC glad_glMultiTexCoord1bOES;
void APIENTRY glad_debug_impl_glMultiTexCoord1bOES(GLenum arg0, GLbyte arg1) {
    _pre_call_callback("glMultiTexCoord1bOES", (void*)glMultiTexCoord1bOES, 2, arg0, arg1);
     glad_glMultiTexCoord1bOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord1bOES", (void*)glMultiTexCoord1bOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1BOESPROC glad_debug_glMultiTexCoord1bOES = glad_debug_impl_glMultiTexCoord1bOES;
PFNGLMULTITEXCOORD1BVOESPROC glad_glMultiTexCoord1bvOES;
void APIENTRY glad_debug_impl_glMultiTexCoord1bvOES(GLenum arg0, const GLbyte* arg1) {
    _pre_call_callback("glMultiTexCoord1bvOES", (void*)glMultiTexCoord1bvOES, 2, arg0, arg1);
     glad_glMultiTexCoord1bvOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord1bvOES", (void*)glMultiTexCoord1bvOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1BVOESPROC glad_debug_glMultiTexCoord1bvOES = glad_debug_impl_glMultiTexCoord1bvOES;
PFNGLMULTITEXCOORD2BOESPROC glad_glMultiTexCoord2bOES;
void APIENTRY glad_debug_impl_glMultiTexCoord2bOES(GLenum arg0, GLbyte arg1, GLbyte arg2) {
    _pre_call_callback("glMultiTexCoord2bOES", (void*)glMultiTexCoord2bOES, 3, arg0, arg1, arg2);
     glad_glMultiTexCoord2bOES(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoord2bOES", (void*)glMultiTexCoord2bOES, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORD2BOESPROC glad_debug_glMultiTexCoord2bOES = glad_debug_impl_glMultiTexCoord2bOES;
PFNGLMULTITEXCOORD2BVOESPROC glad_glMultiTexCoord2bvOES;
void APIENTRY glad_debug_impl_glMultiTexCoord2bvOES(GLenum arg0, const GLbyte* arg1) {
    _pre_call_callback("glMultiTexCoord2bvOES", (void*)glMultiTexCoord2bvOES, 2, arg0, arg1);
     glad_glMultiTexCoord2bvOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord2bvOES", (void*)glMultiTexCoord2bvOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD2BVOESPROC glad_debug_glMultiTexCoord2bvOES = glad_debug_impl_glMultiTexCoord2bvOES;
PFNGLMULTITEXCOORD3BOESPROC glad_glMultiTexCoord3bOES;
void APIENTRY glad_debug_impl_glMultiTexCoord3bOES(GLenum arg0, GLbyte arg1, GLbyte arg2, GLbyte arg3) {
    _pre_call_callback("glMultiTexCoord3bOES", (void*)glMultiTexCoord3bOES, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexCoord3bOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexCoord3bOES", (void*)glMultiTexCoord3bOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXCOORD3BOESPROC glad_debug_glMultiTexCoord3bOES = glad_debug_impl_glMultiTexCoord3bOES;
PFNGLMULTITEXCOORD3BVOESPROC glad_glMultiTexCoord3bvOES;
void APIENTRY glad_debug_impl_glMultiTexCoord3bvOES(GLenum arg0, const GLbyte* arg1) {
    _pre_call_callback("glMultiTexCoord3bvOES", (void*)glMultiTexCoord3bvOES, 2, arg0, arg1);
     glad_glMultiTexCoord3bvOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord3bvOES", (void*)glMultiTexCoord3bvOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD3BVOESPROC glad_debug_glMultiTexCoord3bvOES = glad_debug_impl_glMultiTexCoord3bvOES;
PFNGLMULTITEXCOORD4BOESPROC glad_glMultiTexCoord4bOES;
void APIENTRY glad_debug_impl_glMultiTexCoord4bOES(GLenum arg0, GLbyte arg1, GLbyte arg2, GLbyte arg3, GLbyte arg4) {
    _pre_call_callback("glMultiTexCoord4bOES", (void*)glMultiTexCoord4bOES, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiTexCoord4bOES(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiTexCoord4bOES", (void*)glMultiTexCoord4bOES, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTITEXCOORD4BOESPROC glad_debug_glMultiTexCoord4bOES = glad_debug_impl_glMultiTexCoord4bOES;
PFNGLMULTITEXCOORD4BVOESPROC glad_glMultiTexCoord4bvOES;
void APIENTRY glad_debug_impl_glMultiTexCoord4bvOES(GLenum arg0, const GLbyte* arg1) {
    _pre_call_callback("glMultiTexCoord4bvOES", (void*)glMultiTexCoord4bvOES, 2, arg0, arg1);
     glad_glMultiTexCoord4bvOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord4bvOES", (void*)glMultiTexCoord4bvOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD4BVOESPROC glad_debug_glMultiTexCoord4bvOES = glad_debug_impl_glMultiTexCoord4bvOES;
PFNGLTEXCOORD1BOESPROC glad_glTexCoord1bOES;
void APIENTRY glad_debug_impl_glTexCoord1bOES(GLbyte arg0) {
    _pre_call_callback("glTexCoord1bOES", (void*)glTexCoord1bOES, 1, arg0);
     glad_glTexCoord1bOES(arg0);
    _post_call_callback("glTexCoord1bOES", (void*)glTexCoord1bOES, 1, arg0);

}
PFNGLTEXCOORD1BOESPROC glad_debug_glTexCoord1bOES = glad_debug_impl_glTexCoord1bOES;
PFNGLTEXCOORD1BVOESPROC glad_glTexCoord1bvOES;
void APIENTRY glad_debug_impl_glTexCoord1bvOES(const GLbyte* arg0) {
    _pre_call_callback("glTexCoord1bvOES", (void*)glTexCoord1bvOES, 1, arg0);
     glad_glTexCoord1bvOES(arg0);
    _post_call_callback("glTexCoord1bvOES", (void*)glTexCoord1bvOES, 1, arg0);

}
PFNGLTEXCOORD1BVOESPROC glad_debug_glTexCoord1bvOES = glad_debug_impl_glTexCoord1bvOES;
PFNGLTEXCOORD2BOESPROC glad_glTexCoord2bOES;
void APIENTRY glad_debug_impl_glTexCoord2bOES(GLbyte arg0, GLbyte arg1) {
    _pre_call_callback("glTexCoord2bOES", (void*)glTexCoord2bOES, 2, arg0, arg1);
     glad_glTexCoord2bOES(arg0, arg1);
    _post_call_callback("glTexCoord2bOES", (void*)glTexCoord2bOES, 2, arg0, arg1);

}
PFNGLTEXCOORD2BOESPROC glad_debug_glTexCoord2bOES = glad_debug_impl_glTexCoord2bOES;
PFNGLTEXCOORD2BVOESPROC glad_glTexCoord2bvOES;
void APIENTRY glad_debug_impl_glTexCoord2bvOES(const GLbyte* arg0) {
    _pre_call_callback("glTexCoord2bvOES", (void*)glTexCoord2bvOES, 1, arg0);
     glad_glTexCoord2bvOES(arg0);
    _post_call_callback("glTexCoord2bvOES", (void*)glTexCoord2bvOES, 1, arg0);

}
PFNGLTEXCOORD2BVOESPROC glad_debug_glTexCoord2bvOES = glad_debug_impl_glTexCoord2bvOES;
PFNGLTEXCOORD3BOESPROC glad_glTexCoord3bOES;
void APIENTRY glad_debug_impl_glTexCoord3bOES(GLbyte arg0, GLbyte arg1, GLbyte arg2) {
    _pre_call_callback("glTexCoord3bOES", (void*)glTexCoord3bOES, 3, arg0, arg1, arg2);
     glad_glTexCoord3bOES(arg0, arg1, arg2);
    _post_call_callback("glTexCoord3bOES", (void*)glTexCoord3bOES, 3, arg0, arg1, arg2);

}
PFNGLTEXCOORD3BOESPROC glad_debug_glTexCoord3bOES = glad_debug_impl_glTexCoord3bOES;
PFNGLTEXCOORD3BVOESPROC glad_glTexCoord3bvOES;
void APIENTRY glad_debug_impl_glTexCoord3bvOES(const GLbyte* arg0) {
    _pre_call_callback("glTexCoord3bvOES", (void*)glTexCoord3bvOES, 1, arg0);
     glad_glTexCoord3bvOES(arg0);
    _post_call_callback("glTexCoord3bvOES", (void*)glTexCoord3bvOES, 1, arg0);

}
PFNGLTEXCOORD3BVOESPROC glad_debug_glTexCoord3bvOES = glad_debug_impl_glTexCoord3bvOES;
PFNGLTEXCOORD4BOESPROC glad_glTexCoord4bOES;
void APIENTRY glad_debug_impl_glTexCoord4bOES(GLbyte arg0, GLbyte arg1, GLbyte arg2, GLbyte arg3) {
    _pre_call_callback("glTexCoord4bOES", (void*)glTexCoord4bOES, 4, arg0, arg1, arg2, arg3);
     glad_glTexCoord4bOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glTexCoord4bOES", (void*)glTexCoord4bOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXCOORD4BOESPROC glad_debug_glTexCoord4bOES = glad_debug_impl_glTexCoord4bOES;
PFNGLTEXCOORD4BVOESPROC glad_glTexCoord4bvOES;
void APIENTRY glad_debug_impl_glTexCoord4bvOES(const GLbyte* arg0) {
    _pre_call_callback("glTexCoord4bvOES", (void*)glTexCoord4bvOES, 1, arg0);
     glad_glTexCoord4bvOES(arg0);
    _post_call_callback("glTexCoord4bvOES", (void*)glTexCoord4bvOES, 1, arg0);

}
PFNGLTEXCOORD4BVOESPROC glad_debug_glTexCoord4bvOES = glad_debug_impl_glTexCoord4bvOES;
PFNGLVERTEX2BOESPROC glad_glVertex2bOES;
void APIENTRY glad_debug_impl_glVertex2bOES(GLbyte arg0, GLbyte arg1) {
    _pre_call_callback("glVertex2bOES", (void*)glVertex2bOES, 2, arg0, arg1);
     glad_glVertex2bOES(arg0, arg1);
    _post_call_callback("glVertex2bOES", (void*)glVertex2bOES, 2, arg0, arg1);

}
PFNGLVERTEX2BOESPROC glad_debug_glVertex2bOES = glad_debug_impl_glVertex2bOES;
PFNGLVERTEX2BVOESPROC glad_glVertex2bvOES;
void APIENTRY glad_debug_impl_glVertex2bvOES(const GLbyte* arg0) {
    _pre_call_callback("glVertex2bvOES", (void*)glVertex2bvOES, 1, arg0);
     glad_glVertex2bvOES(arg0);
    _post_call_callback("glVertex2bvOES", (void*)glVertex2bvOES, 1, arg0);

}
PFNGLVERTEX2BVOESPROC glad_debug_glVertex2bvOES = glad_debug_impl_glVertex2bvOES;
PFNGLVERTEX3BOESPROC glad_glVertex3bOES;
void APIENTRY glad_debug_impl_glVertex3bOES(GLbyte arg0, GLbyte arg1, GLbyte arg2) {
    _pre_call_callback("glVertex3bOES", (void*)glVertex3bOES, 3, arg0, arg1, arg2);
     glad_glVertex3bOES(arg0, arg1, arg2);
    _post_call_callback("glVertex3bOES", (void*)glVertex3bOES, 3, arg0, arg1, arg2);

}
PFNGLVERTEX3BOESPROC glad_debug_glVertex3bOES = glad_debug_impl_glVertex3bOES;
PFNGLVERTEX3BVOESPROC glad_glVertex3bvOES;
void APIENTRY glad_debug_impl_glVertex3bvOES(const GLbyte* arg0) {
    _pre_call_callback("glVertex3bvOES", (void*)glVertex3bvOES, 1, arg0);
     glad_glVertex3bvOES(arg0);
    _post_call_callback("glVertex3bvOES", (void*)glVertex3bvOES, 1, arg0);

}
PFNGLVERTEX3BVOESPROC glad_debug_glVertex3bvOES = glad_debug_impl_glVertex3bvOES;
PFNGLVERTEX4BOESPROC glad_glVertex4bOES;
void APIENTRY glad_debug_impl_glVertex4bOES(GLbyte arg0, GLbyte arg1, GLbyte arg2, GLbyte arg3) {
    _pre_call_callback("glVertex4bOES", (void*)glVertex4bOES, 4, arg0, arg1, arg2, arg3);
     glad_glVertex4bOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertex4bOES", (void*)glVertex4bOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEX4BOESPROC glad_debug_glVertex4bOES = glad_debug_impl_glVertex4bOES;
PFNGLVERTEX4BVOESPROC glad_glVertex4bvOES;
void APIENTRY glad_debug_impl_glVertex4bvOES(const GLbyte* arg0) {
    _pre_call_callback("glVertex4bvOES", (void*)glVertex4bvOES, 1, arg0);
     glad_glVertex4bvOES(arg0);
    _post_call_callback("glVertex4bvOES", (void*)glVertex4bvOES, 1, arg0);

}
PFNGLVERTEX4BVOESPROC glad_debug_glVertex4bvOES = glad_debug_impl_glVertex4bvOES;
PFNGLLOADTRANSPOSEMATRIXFARBPROC glad_glLoadTransposeMatrixfARB;
void APIENTRY glad_debug_impl_glLoadTransposeMatrixfARB(const GLfloat* arg0) {
    _pre_call_callback("glLoadTransposeMatrixfARB", (void*)glLoadTransposeMatrixfARB, 1, arg0);
     glad_glLoadTransposeMatrixfARB(arg0);
    _post_call_callback("glLoadTransposeMatrixfARB", (void*)glLoadTransposeMatrixfARB, 1, arg0);

}
PFNGLLOADTRANSPOSEMATRIXFARBPROC glad_debug_glLoadTransposeMatrixfARB = glad_debug_impl_glLoadTransposeMatrixfARB;
PFNGLLOADTRANSPOSEMATRIXDARBPROC glad_glLoadTransposeMatrixdARB;
void APIENTRY glad_debug_impl_glLoadTransposeMatrixdARB(const GLdouble* arg0) {
    _pre_call_callback("glLoadTransposeMatrixdARB", (void*)glLoadTransposeMatrixdARB, 1, arg0);
     glad_glLoadTransposeMatrixdARB(arg0);
    _post_call_callback("glLoadTransposeMatrixdARB", (void*)glLoadTransposeMatrixdARB, 1, arg0);

}
PFNGLLOADTRANSPOSEMATRIXDARBPROC glad_debug_glLoadTransposeMatrixdARB = glad_debug_impl_glLoadTransposeMatrixdARB;
PFNGLMULTTRANSPOSEMATRIXFARBPROC glad_glMultTransposeMatrixfARB;
void APIENTRY glad_debug_impl_glMultTransposeMatrixfARB(const GLfloat* arg0) {
    _pre_call_callback("glMultTransposeMatrixfARB", (void*)glMultTransposeMatrixfARB, 1, arg0);
     glad_glMultTransposeMatrixfARB(arg0);
    _post_call_callback("glMultTransposeMatrixfARB", (void*)glMultTransposeMatrixfARB, 1, arg0);

}
PFNGLMULTTRANSPOSEMATRIXFARBPROC glad_debug_glMultTransposeMatrixfARB = glad_debug_impl_glMultTransposeMatrixfARB;
PFNGLMULTTRANSPOSEMATRIXDARBPROC glad_glMultTransposeMatrixdARB;
void APIENTRY glad_debug_impl_glMultTransposeMatrixdARB(const GLdouble* arg0) {
    _pre_call_callback("glMultTransposeMatrixdARB", (void*)glMultTransposeMatrixdARB, 1, arg0);
     glad_glMultTransposeMatrixdARB(arg0);
    _post_call_callback("glMultTransposeMatrixdARB", (void*)glMultTransposeMatrixdARB, 1, arg0);

}
PFNGLMULTTRANSPOSEMATRIXDARBPROC glad_debug_glMultTransposeMatrixdARB = glad_debug_impl_glMultTransposeMatrixdARB;
PFNGLFOGCOORDFEXTPROC glad_glFogCoordfEXT;
void APIENTRY glad_debug_impl_glFogCoordfEXT(GLfloat arg0) {
    _pre_call_callback("glFogCoordfEXT", (void*)glFogCoordfEXT, 1, arg0);
     glad_glFogCoordfEXT(arg0);
    _post_call_callback("glFogCoordfEXT", (void*)glFogCoordfEXT, 1, arg0);

}
PFNGLFOGCOORDFEXTPROC glad_debug_glFogCoordfEXT = glad_debug_impl_glFogCoordfEXT;
PFNGLFOGCOORDFVEXTPROC glad_glFogCoordfvEXT;
void APIENTRY glad_debug_impl_glFogCoordfvEXT(const GLfloat* arg0) {
    _pre_call_callback("glFogCoordfvEXT", (void*)glFogCoordfvEXT, 1, arg0);
     glad_glFogCoordfvEXT(arg0);
    _post_call_callback("glFogCoordfvEXT", (void*)glFogCoordfvEXT, 1, arg0);

}
PFNGLFOGCOORDFVEXTPROC glad_debug_glFogCoordfvEXT = glad_debug_impl_glFogCoordfvEXT;
PFNGLFOGCOORDDEXTPROC glad_glFogCoorddEXT;
void APIENTRY glad_debug_impl_glFogCoorddEXT(GLdouble arg0) {
    _pre_call_callback("glFogCoorddEXT", (void*)glFogCoorddEXT, 1, arg0);
     glad_glFogCoorddEXT(arg0);
    _post_call_callback("glFogCoorddEXT", (void*)glFogCoorddEXT, 1, arg0);

}
PFNGLFOGCOORDDEXTPROC glad_debug_glFogCoorddEXT = glad_debug_impl_glFogCoorddEXT;
PFNGLFOGCOORDDVEXTPROC glad_glFogCoorddvEXT;
void APIENTRY glad_debug_impl_glFogCoorddvEXT(const GLdouble* arg0) {
    _pre_call_callback("glFogCoorddvEXT", (void*)glFogCoorddvEXT, 1, arg0);
     glad_glFogCoorddvEXT(arg0);
    _post_call_callback("glFogCoorddvEXT", (void*)glFogCoorddvEXT, 1, arg0);

}
PFNGLFOGCOORDDVEXTPROC glad_debug_glFogCoorddvEXT = glad_debug_impl_glFogCoorddvEXT;
PFNGLFOGCOORDPOINTEREXTPROC glad_glFogCoordPointerEXT;
void APIENTRY glad_debug_impl_glFogCoordPointerEXT(GLenum arg0, GLsizei arg1, const void* arg2) {
    _pre_call_callback("glFogCoordPointerEXT", (void*)glFogCoordPointerEXT, 3, arg0, arg1, arg2);
     glad_glFogCoordPointerEXT(arg0, arg1, arg2);
    _post_call_callback("glFogCoordPointerEXT", (void*)glFogCoordPointerEXT, 3, arg0, arg1, arg2);

}
PFNGLFOGCOORDPOINTEREXTPROC glad_debug_glFogCoordPointerEXT = glad_debug_impl_glFogCoordPointerEXT;
PFNGLARRAYELEMENTEXTPROC glad_glArrayElementEXT;
void APIENTRY glad_debug_impl_glArrayElementEXT(GLint arg0) {
    _pre_call_callback("glArrayElementEXT", (void*)glArrayElementEXT, 1, arg0);
     glad_glArrayElementEXT(arg0);
    _post_call_callback("glArrayElementEXT", (void*)glArrayElementEXT, 1, arg0);

}
PFNGLARRAYELEMENTEXTPROC glad_debug_glArrayElementEXT = glad_debug_impl_glArrayElementEXT;
PFNGLCOLORPOINTEREXTPROC glad_glColorPointerEXT;
void APIENTRY glad_debug_impl_glColorPointerEXT(GLint arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glColorPointerEXT", (void*)glColorPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glColorPointerEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glColorPointerEXT", (void*)glColorPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOLORPOINTEREXTPROC glad_debug_glColorPointerEXT = glad_debug_impl_glColorPointerEXT;
PFNGLDRAWARRAYSEXTPROC glad_glDrawArraysEXT;
void APIENTRY glad_debug_impl_glDrawArraysEXT(GLenum arg0, GLint arg1, GLsizei arg2) {
    _pre_call_callback("glDrawArraysEXT", (void*)glDrawArraysEXT, 3, arg0, arg1, arg2);
     glad_glDrawArraysEXT(arg0, arg1, arg2);
    _post_call_callback("glDrawArraysEXT", (void*)glDrawArraysEXT, 3, arg0, arg1, arg2);

}
PFNGLDRAWARRAYSEXTPROC glad_debug_glDrawArraysEXT = glad_debug_impl_glDrawArraysEXT;
PFNGLEDGEFLAGPOINTEREXTPROC glad_glEdgeFlagPointerEXT;
void APIENTRY glad_debug_impl_glEdgeFlagPointerEXT(GLsizei arg0, GLsizei arg1, const GLboolean* arg2) {
    _pre_call_callback("glEdgeFlagPointerEXT", (void*)glEdgeFlagPointerEXT, 3, arg0, arg1, arg2);
     glad_glEdgeFlagPointerEXT(arg0, arg1, arg2);
    _post_call_callback("glEdgeFlagPointerEXT", (void*)glEdgeFlagPointerEXT, 3, arg0, arg1, arg2);

}
PFNGLEDGEFLAGPOINTEREXTPROC glad_debug_glEdgeFlagPointerEXT = glad_debug_impl_glEdgeFlagPointerEXT;
PFNGLGETPOINTERVEXTPROC glad_glGetPointervEXT;
void APIENTRY glad_debug_impl_glGetPointervEXT(GLenum arg0, void** arg1) {
    _pre_call_callback("glGetPointervEXT", (void*)glGetPointervEXT, 2, arg0, arg1);
     glad_glGetPointervEXT(arg0, arg1);
    _post_call_callback("glGetPointervEXT", (void*)glGetPointervEXT, 2, arg0, arg1);

}
PFNGLGETPOINTERVEXTPROC glad_debug_glGetPointervEXT = glad_debug_impl_glGetPointervEXT;
PFNGLINDEXPOINTEREXTPROC glad_glIndexPointerEXT;
void APIENTRY glad_debug_impl_glIndexPointerEXT(GLenum arg0, GLsizei arg1, GLsizei arg2, const void* arg3) {
    _pre_call_callback("glIndexPointerEXT", (void*)glIndexPointerEXT, 4, arg0, arg1, arg2, arg3);
     glad_glIndexPointerEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glIndexPointerEXT", (void*)glIndexPointerEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLINDEXPOINTEREXTPROC glad_debug_glIndexPointerEXT = glad_debug_impl_glIndexPointerEXT;
PFNGLNORMALPOINTEREXTPROC glad_glNormalPointerEXT;
void APIENTRY glad_debug_impl_glNormalPointerEXT(GLenum arg0, GLsizei arg1, GLsizei arg2, const void* arg3) {
    _pre_call_callback("glNormalPointerEXT", (void*)glNormalPointerEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNormalPointerEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNormalPointerEXT", (void*)glNormalPointerEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNORMALPOINTEREXTPROC glad_debug_glNormalPointerEXT = glad_debug_impl_glNormalPointerEXT;
PFNGLTEXCOORDPOINTEREXTPROC glad_glTexCoordPointerEXT;
void APIENTRY glad_debug_impl_glTexCoordPointerEXT(GLint arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glTexCoordPointerEXT", (void*)glTexCoordPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTexCoordPointerEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTexCoordPointerEXT", (void*)glTexCoordPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTEXCOORDPOINTEREXTPROC glad_debug_glTexCoordPointerEXT = glad_debug_impl_glTexCoordPointerEXT;
PFNGLVERTEXPOINTEREXTPROC glad_glVertexPointerEXT;
void APIENTRY glad_debug_impl_glVertexPointerEXT(GLint arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glVertexPointerEXT", (void*)glVertexPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexPointerEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexPointerEXT", (void*)glVertexPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXPOINTEREXTPROC glad_debug_glVertexPointerEXT = glad_debug_impl_glVertexPointerEXT;
PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_glBlendEquationSeparateEXT;
void APIENTRY glad_debug_impl_glBlendEquationSeparateEXT(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glBlendEquationSeparateEXT", (void*)glBlendEquationSeparateEXT, 2, arg0, arg1);
     glad_glBlendEquationSeparateEXT(arg0, arg1);
    _post_call_callback("glBlendEquationSeparateEXT", (void*)glBlendEquationSeparateEXT, 2, arg0, arg1);

}
PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_debug_glBlendEquationSeparateEXT = glad_debug_impl_glBlendEquationSeparateEXT;
PFNGLCOVERAGEMODULATIONTABLENVPROC glad_glCoverageModulationTableNV;
void APIENTRY glad_debug_impl_glCoverageModulationTableNV(GLsizei arg0, const GLfloat* arg1) {
    _pre_call_callback("glCoverageModulationTableNV", (void*)glCoverageModulationTableNV, 2, arg0, arg1);
     glad_glCoverageModulationTableNV(arg0, arg1);
    _post_call_callback("glCoverageModulationTableNV", (void*)glCoverageModulationTableNV, 2, arg0, arg1);

}
PFNGLCOVERAGEMODULATIONTABLENVPROC glad_debug_glCoverageModulationTableNV = glad_debug_impl_glCoverageModulationTableNV;
PFNGLGETCOVERAGEMODULATIONTABLENVPROC glad_glGetCoverageModulationTableNV;
void APIENTRY glad_debug_impl_glGetCoverageModulationTableNV(GLsizei arg0, GLfloat* arg1) {
    _pre_call_callback("glGetCoverageModulationTableNV", (void*)glGetCoverageModulationTableNV, 2, arg0, arg1);
     glad_glGetCoverageModulationTableNV(arg0, arg1);
    _post_call_callback("glGetCoverageModulationTableNV", (void*)glGetCoverageModulationTableNV, 2, arg0, arg1);

}
PFNGLGETCOVERAGEMODULATIONTABLENVPROC glad_debug_glGetCoverageModulationTableNV = glad_debug_impl_glGetCoverageModulationTableNV;
PFNGLCOVERAGEMODULATIONNVPROC glad_glCoverageModulationNV;
void APIENTRY glad_debug_impl_glCoverageModulationNV(GLenum arg0) {
    _pre_call_callback("glCoverageModulationNV", (void*)glCoverageModulationNV, 1, arg0);
     glad_glCoverageModulationNV(arg0);
    _post_call_callback("glCoverageModulationNV", (void*)glCoverageModulationNV, 1, arg0);

}
PFNGLCOVERAGEMODULATIONNVPROC glad_debug_glCoverageModulationNV = glad_debug_impl_glCoverageModulationNV;
PFNGLBEGINCONDITIONALRENDERNVXPROC glad_glBeginConditionalRenderNVX;
void APIENTRY glad_debug_impl_glBeginConditionalRenderNVX(GLuint arg0) {
    _pre_call_callback("glBeginConditionalRenderNVX", (void*)glBeginConditionalRenderNVX, 1, arg0);
     glad_glBeginConditionalRenderNVX(arg0);
    _post_call_callback("glBeginConditionalRenderNVX", (void*)glBeginConditionalRenderNVX, 1, arg0);

}
PFNGLBEGINCONDITIONALRENDERNVXPROC glad_debug_glBeginConditionalRenderNVX = glad_debug_impl_glBeginConditionalRenderNVX;
PFNGLENDCONDITIONALRENDERNVXPROC glad_glEndConditionalRenderNVX;
void APIENTRY glad_debug_impl_glEndConditionalRenderNVX() {
    _pre_call_callback("glEndConditionalRenderNVX", (void*)glEndConditionalRenderNVX, 0);
     glad_glEndConditionalRenderNVX();
    _post_call_callback("glEndConditionalRenderNVX", (void*)glEndConditionalRenderNVX, 0);

}
PFNGLENDCONDITIONALRENDERNVXPROC glad_debug_glEndConditionalRenderNVX = glad_debug_impl_glEndConditionalRenderNVX;
PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect;
void APIENTRY glad_debug_impl_glMultiDrawArraysIndirect(GLenum arg0, const void* arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glMultiDrawArraysIndirect", (void*)glMultiDrawArraysIndirect, 4, arg0, arg1, arg2, arg3);
     glad_glMultiDrawArraysIndirect(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiDrawArraysIndirect", (void*)glMultiDrawArraysIndirect, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_debug_glMultiDrawArraysIndirect = glad_debug_impl_glMultiDrawArraysIndirect;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect;
void APIENTRY glad_debug_impl_glMultiDrawElementsIndirect(GLenum arg0, GLenum arg1, const void* arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glMultiDrawElementsIndirect", (void*)glMultiDrawElementsIndirect, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiDrawElementsIndirect(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiDrawElementsIndirect", (void*)glMultiDrawElementsIndirect, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_debug_glMultiDrawElementsIndirect = glad_debug_impl_glMultiDrawElementsIndirect;
PFNGLCOPYIMAGESUBDATANVPROC glad_glCopyImageSubDataNV;
void APIENTRY glad_debug_impl_glCopyImageSubDataNV(GLuint arg0, GLenum arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLuint arg6, GLenum arg7, GLint arg8, GLint arg9, GLint arg10, GLint arg11, GLsizei arg12, GLsizei arg13, GLsizei arg14) {
    _pre_call_callback("glCopyImageSubDataNV", (void*)glCopyImageSubDataNV, 15, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
     glad_glCopyImageSubDataNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    _post_call_callback("glCopyImageSubDataNV", (void*)glCopyImageSubDataNV, 15, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);

}
PFNGLCOPYIMAGESUBDATANVPROC glad_debug_glCopyImageSubDataNV = glad_debug_impl_glCopyImageSubDataNV;
PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC glad_glApplyFramebufferAttachmentCMAAINTEL;
void APIENTRY glad_debug_impl_glApplyFramebufferAttachmentCMAAINTEL() {
    _pre_call_callback("glApplyFramebufferAttachmentCMAAINTEL", (void*)glApplyFramebufferAttachmentCMAAINTEL, 0);
     glad_glApplyFramebufferAttachmentCMAAINTEL();
    _post_call_callback("glApplyFramebufferAttachmentCMAAINTEL", (void*)glApplyFramebufferAttachmentCMAAINTEL, 0);

}
PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC glad_debug_glApplyFramebufferAttachmentCMAAINTEL = glad_debug_impl_glApplyFramebufferAttachmentCMAAINTEL;
PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
void APIENTRY glad_debug_impl_glBindTransformFeedback(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindTransformFeedback", (void*)glBindTransformFeedback, 2, arg0, arg1);
     glad_glBindTransformFeedback(arg0, arg1);
    _post_call_callback("glBindTransformFeedback", (void*)glBindTransformFeedback, 2, arg0, arg1);

}
PFNGLBINDTRANSFORMFEEDBACKPROC glad_debug_glBindTransformFeedback = glad_debug_impl_glBindTransformFeedback;
PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
void APIENTRY glad_debug_impl_glDeleteTransformFeedbacks(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteTransformFeedbacks", (void*)glDeleteTransformFeedbacks, 2, arg0, arg1);
     glad_glDeleteTransformFeedbacks(arg0, arg1);
    _post_call_callback("glDeleteTransformFeedbacks", (void*)glDeleteTransformFeedbacks, 2, arg0, arg1);

}
PFNGLDELETETRANSFORMFEEDBACKSPROC glad_debug_glDeleteTransformFeedbacks = glad_debug_impl_glDeleteTransformFeedbacks;
PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
void APIENTRY glad_debug_impl_glGenTransformFeedbacks(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenTransformFeedbacks", (void*)glGenTransformFeedbacks, 2, arg0, arg1);
     glad_glGenTransformFeedbacks(arg0, arg1);
    _post_call_callback("glGenTransformFeedbacks", (void*)glGenTransformFeedbacks, 2, arg0, arg1);

}
PFNGLGENTRANSFORMFEEDBACKSPROC glad_debug_glGenTransformFeedbacks = glad_debug_impl_glGenTransformFeedbacks;
PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
GLboolean APIENTRY glad_debug_impl_glIsTransformFeedback(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsTransformFeedback", (void*)glIsTransformFeedback, 1, arg0);
    ret =  glad_glIsTransformFeedback(arg0);
    _post_call_callback("glIsTransformFeedback", (void*)glIsTransformFeedback, 1, arg0);
    return ret;
}
PFNGLISTRANSFORMFEEDBACKPROC glad_debug_glIsTransformFeedback = glad_debug_impl_glIsTransformFeedback;
PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
void APIENTRY glad_debug_impl_glPauseTransformFeedback() {
    _pre_call_callback("glPauseTransformFeedback", (void*)glPauseTransformFeedback, 0);
     glad_glPauseTransformFeedback();
    _post_call_callback("glPauseTransformFeedback", (void*)glPauseTransformFeedback, 0);

}
PFNGLPAUSETRANSFORMFEEDBACKPROC glad_debug_glPauseTransformFeedback = glad_debug_impl_glPauseTransformFeedback;
PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
void APIENTRY glad_debug_impl_glResumeTransformFeedback() {
    _pre_call_callback("glResumeTransformFeedback", (void*)glResumeTransformFeedback, 0);
     glad_glResumeTransformFeedback();
    _post_call_callback("glResumeTransformFeedback", (void*)glResumeTransformFeedback, 0);

}
PFNGLRESUMETRANSFORMFEEDBACKPROC glad_debug_glResumeTransformFeedback = glad_debug_impl_glResumeTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
void APIENTRY glad_debug_impl_glDrawTransformFeedback(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glDrawTransformFeedback", (void*)glDrawTransformFeedback, 2, arg0, arg1);
     glad_glDrawTransformFeedback(arg0, arg1);
    _post_call_callback("glDrawTransformFeedback", (void*)glDrawTransformFeedback, 2, arg0, arg1);

}
PFNGLDRAWTRANSFORMFEEDBACKPROC glad_debug_glDrawTransformFeedback = glad_debug_impl_glDrawTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
void APIENTRY glad_debug_impl_glDrawTransformFeedbackStream(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glDrawTransformFeedbackStream", (void*)glDrawTransformFeedbackStream, 3, arg0, arg1, arg2);
     glad_glDrawTransformFeedbackStream(arg0, arg1, arg2);
    _post_call_callback("glDrawTransformFeedbackStream", (void*)glDrawTransformFeedbackStream, 3, arg0, arg1, arg2);

}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_debug_glDrawTransformFeedbackStream = glad_debug_impl_glDrawTransformFeedbackStream;
PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
void APIENTRY glad_debug_impl_glBeginQueryIndexed(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glBeginQueryIndexed", (void*)glBeginQueryIndexed, 3, arg0, arg1, arg2);
     glad_glBeginQueryIndexed(arg0, arg1, arg2);
    _post_call_callback("glBeginQueryIndexed", (void*)glBeginQueryIndexed, 3, arg0, arg1, arg2);

}
PFNGLBEGINQUERYINDEXEDPROC glad_debug_glBeginQueryIndexed = glad_debug_impl_glBeginQueryIndexed;
PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
void APIENTRY glad_debug_impl_glEndQueryIndexed(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glEndQueryIndexed", (void*)glEndQueryIndexed, 2, arg0, arg1);
     glad_glEndQueryIndexed(arg0, arg1);
    _post_call_callback("glEndQueryIndexed", (void*)glEndQueryIndexed, 2, arg0, arg1);

}
PFNGLENDQUERYINDEXEDPROC glad_debug_glEndQueryIndexed = glad_debug_impl_glEndQueryIndexed;
PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
void APIENTRY glad_debug_impl_glGetQueryIndexediv(GLenum arg0, GLuint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetQueryIndexediv", (void*)glGetQueryIndexediv, 4, arg0, arg1, arg2, arg3);
     glad_glGetQueryIndexediv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetQueryIndexediv", (void*)glGetQueryIndexediv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETQUERYINDEXEDIVPROC glad_debug_glGetQueryIndexediv = glad_debug_impl_glGetQueryIndexediv;
PFNGLINSERTEVENTMARKEREXTPROC glad_glInsertEventMarkerEXT;
void APIENTRY glad_debug_impl_glInsertEventMarkerEXT(GLsizei arg0, const GLchar* arg1) {
    _pre_call_callback("glInsertEventMarkerEXT", (void*)glInsertEventMarkerEXT, 2, arg0, arg1);
     glad_glInsertEventMarkerEXT(arg0, arg1);
    _post_call_callback("glInsertEventMarkerEXT", (void*)glInsertEventMarkerEXT, 2, arg0, arg1);

}
PFNGLINSERTEVENTMARKEREXTPROC glad_debug_glInsertEventMarkerEXT = glad_debug_impl_glInsertEventMarkerEXT;
PFNGLPUSHGROUPMARKEREXTPROC glad_glPushGroupMarkerEXT;
void APIENTRY glad_debug_impl_glPushGroupMarkerEXT(GLsizei arg0, const GLchar* arg1) {
    _pre_call_callback("glPushGroupMarkerEXT", (void*)glPushGroupMarkerEXT, 2, arg0, arg1);
     glad_glPushGroupMarkerEXT(arg0, arg1);
    _post_call_callback("glPushGroupMarkerEXT", (void*)glPushGroupMarkerEXT, 2, arg0, arg1);

}
PFNGLPUSHGROUPMARKEREXTPROC glad_debug_glPushGroupMarkerEXT = glad_debug_impl_glPushGroupMarkerEXT;
PFNGLPOPGROUPMARKEREXTPROC glad_glPopGroupMarkerEXT;
void APIENTRY glad_debug_impl_glPopGroupMarkerEXT() {
    _pre_call_callback("glPopGroupMarkerEXT", (void*)glPopGroupMarkerEXT, 0);
     glad_glPopGroupMarkerEXT();
    _post_call_callback("glPopGroupMarkerEXT", (void*)glPopGroupMarkerEXT, 0);

}
PFNGLPOPGROUPMARKEREXTPROC glad_debug_glPopGroupMarkerEXT = glad_debug_impl_glPopGroupMarkerEXT;
PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glad_glPixelTransformParameteriEXT;
void APIENTRY glad_debug_impl_glPixelTransformParameteriEXT(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glPixelTransformParameteriEXT", (void*)glPixelTransformParameteriEXT, 3, arg0, arg1, arg2);
     glad_glPixelTransformParameteriEXT(arg0, arg1, arg2);
    _post_call_callback("glPixelTransformParameteriEXT", (void*)glPixelTransformParameteriEXT, 3, arg0, arg1, arg2);

}
PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glad_debug_glPixelTransformParameteriEXT = glad_debug_impl_glPixelTransformParameteriEXT;
PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glad_glPixelTransformParameterfEXT;
void APIENTRY glad_debug_impl_glPixelTransformParameterfEXT(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glPixelTransformParameterfEXT", (void*)glPixelTransformParameterfEXT, 3, arg0, arg1, arg2);
     glad_glPixelTransformParameterfEXT(arg0, arg1, arg2);
    _post_call_callback("glPixelTransformParameterfEXT", (void*)glPixelTransformParameterfEXT, 3, arg0, arg1, arg2);

}
PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glad_debug_glPixelTransformParameterfEXT = glad_debug_impl_glPixelTransformParameterfEXT;
PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glad_glPixelTransformParameterivEXT;
void APIENTRY glad_debug_impl_glPixelTransformParameterivEXT(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glPixelTransformParameterivEXT", (void*)glPixelTransformParameterivEXT, 3, arg0, arg1, arg2);
     glad_glPixelTransformParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glPixelTransformParameterivEXT", (void*)glPixelTransformParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glad_debug_glPixelTransformParameterivEXT = glad_debug_impl_glPixelTransformParameterivEXT;
PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glad_glPixelTransformParameterfvEXT;
void APIENTRY glad_debug_impl_glPixelTransformParameterfvEXT(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glPixelTransformParameterfvEXT", (void*)glPixelTransformParameterfvEXT, 3, arg0, arg1, arg2);
     glad_glPixelTransformParameterfvEXT(arg0, arg1, arg2);
    _post_call_callback("glPixelTransformParameterfvEXT", (void*)glPixelTransformParameterfvEXT, 3, arg0, arg1, arg2);

}
PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glad_debug_glPixelTransformParameterfvEXT = glad_debug_impl_glPixelTransformParameterfvEXT;
PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glad_glGetPixelTransformParameterivEXT;
void APIENTRY glad_debug_impl_glGetPixelTransformParameterivEXT(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetPixelTransformParameterivEXT", (void*)glGetPixelTransformParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetPixelTransformParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetPixelTransformParameterivEXT", (void*)glGetPixelTransformParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glad_debug_glGetPixelTransformParameterivEXT = glad_debug_impl_glGetPixelTransformParameterivEXT;
PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glad_glGetPixelTransformParameterfvEXT;
void APIENTRY glad_debug_impl_glGetPixelTransformParameterfvEXT(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetPixelTransformParameterfvEXT", (void*)glGetPixelTransformParameterfvEXT, 3, arg0, arg1, arg2);
     glad_glGetPixelTransformParameterfvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetPixelTransformParameterfvEXT", (void*)glGetPixelTransformParameterfvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glad_debug_glGetPixelTransformParameterfvEXT = glad_debug_impl_glGetPixelTransformParameterfvEXT;
PFNGLGENFRAGMENTSHADERSATIPROC glad_glGenFragmentShadersATI;
GLuint APIENTRY glad_debug_impl_glGenFragmentShadersATI(GLuint arg0) {
    GLuint ret;
    _pre_call_callback("glGenFragmentShadersATI", (void*)glGenFragmentShadersATI, 1, arg0);
    ret =  glad_glGenFragmentShadersATI(arg0);
    _post_call_callback("glGenFragmentShadersATI", (void*)glGenFragmentShadersATI, 1, arg0);
    return ret;
}
PFNGLGENFRAGMENTSHADERSATIPROC glad_debug_glGenFragmentShadersATI = glad_debug_impl_glGenFragmentShadersATI;
PFNGLBINDFRAGMENTSHADERATIPROC glad_glBindFragmentShaderATI;
void APIENTRY glad_debug_impl_glBindFragmentShaderATI(GLuint arg0) {
    _pre_call_callback("glBindFragmentShaderATI", (void*)glBindFragmentShaderATI, 1, arg0);
     glad_glBindFragmentShaderATI(arg0);
    _post_call_callback("glBindFragmentShaderATI", (void*)glBindFragmentShaderATI, 1, arg0);

}
PFNGLBINDFRAGMENTSHADERATIPROC glad_debug_glBindFragmentShaderATI = glad_debug_impl_glBindFragmentShaderATI;
PFNGLDELETEFRAGMENTSHADERATIPROC glad_glDeleteFragmentShaderATI;
void APIENTRY glad_debug_impl_glDeleteFragmentShaderATI(GLuint arg0) {
    _pre_call_callback("glDeleteFragmentShaderATI", (void*)glDeleteFragmentShaderATI, 1, arg0);
     glad_glDeleteFragmentShaderATI(arg0);
    _post_call_callback("glDeleteFragmentShaderATI", (void*)glDeleteFragmentShaderATI, 1, arg0);

}
PFNGLDELETEFRAGMENTSHADERATIPROC glad_debug_glDeleteFragmentShaderATI = glad_debug_impl_glDeleteFragmentShaderATI;
PFNGLBEGINFRAGMENTSHADERATIPROC glad_glBeginFragmentShaderATI;
void APIENTRY glad_debug_impl_glBeginFragmentShaderATI() {
    _pre_call_callback("glBeginFragmentShaderATI", (void*)glBeginFragmentShaderATI, 0);
     glad_glBeginFragmentShaderATI();
    _post_call_callback("glBeginFragmentShaderATI", (void*)glBeginFragmentShaderATI, 0);

}
PFNGLBEGINFRAGMENTSHADERATIPROC glad_debug_glBeginFragmentShaderATI = glad_debug_impl_glBeginFragmentShaderATI;
PFNGLENDFRAGMENTSHADERATIPROC glad_glEndFragmentShaderATI;
void APIENTRY glad_debug_impl_glEndFragmentShaderATI() {
    _pre_call_callback("glEndFragmentShaderATI", (void*)glEndFragmentShaderATI, 0);
     glad_glEndFragmentShaderATI();
    _post_call_callback("glEndFragmentShaderATI", (void*)glEndFragmentShaderATI, 0);

}
PFNGLENDFRAGMENTSHADERATIPROC glad_debug_glEndFragmentShaderATI = glad_debug_impl_glEndFragmentShaderATI;
PFNGLPASSTEXCOORDATIPROC glad_glPassTexCoordATI;
void APIENTRY glad_debug_impl_glPassTexCoordATI(GLuint arg0, GLuint arg1, GLenum arg2) {
    _pre_call_callback("glPassTexCoordATI", (void*)glPassTexCoordATI, 3, arg0, arg1, arg2);
     glad_glPassTexCoordATI(arg0, arg1, arg2);
    _post_call_callback("glPassTexCoordATI", (void*)glPassTexCoordATI, 3, arg0, arg1, arg2);

}
PFNGLPASSTEXCOORDATIPROC glad_debug_glPassTexCoordATI = glad_debug_impl_glPassTexCoordATI;
PFNGLSAMPLEMAPATIPROC glad_glSampleMapATI;
void APIENTRY glad_debug_impl_glSampleMapATI(GLuint arg0, GLuint arg1, GLenum arg2) {
    _pre_call_callback("glSampleMapATI", (void*)glSampleMapATI, 3, arg0, arg1, arg2);
     glad_glSampleMapATI(arg0, arg1, arg2);
    _post_call_callback("glSampleMapATI", (void*)glSampleMapATI, 3, arg0, arg1, arg2);

}
PFNGLSAMPLEMAPATIPROC glad_debug_glSampleMapATI = glad_debug_impl_glSampleMapATI;
PFNGLCOLORFRAGMENTOP1ATIPROC glad_glColorFragmentOp1ATI;
void APIENTRY glad_debug_impl_glColorFragmentOp1ATI(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5, GLuint arg6) {
    _pre_call_callback("glColorFragmentOp1ATI", (void*)glColorFragmentOp1ATI, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glColorFragmentOp1ATI(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glColorFragmentOp1ATI", (void*)glColorFragmentOp1ATI, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOLORFRAGMENTOP1ATIPROC glad_debug_glColorFragmentOp1ATI = glad_debug_impl_glColorFragmentOp1ATI;
PFNGLCOLORFRAGMENTOP2ATIPROC glad_glColorFragmentOp2ATI;
void APIENTRY glad_debug_impl_glColorFragmentOp2ATI(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5, GLuint arg6, GLuint arg7, GLuint arg8, GLuint arg9) {
    _pre_call_callback("glColorFragmentOp2ATI", (void*)glColorFragmentOp2ATI, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glColorFragmentOp2ATI(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glColorFragmentOp2ATI", (void*)glColorFragmentOp2ATI, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLCOLORFRAGMENTOP2ATIPROC glad_debug_glColorFragmentOp2ATI = glad_debug_impl_glColorFragmentOp2ATI;
PFNGLCOLORFRAGMENTOP3ATIPROC glad_glColorFragmentOp3ATI;
void APIENTRY glad_debug_impl_glColorFragmentOp3ATI(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5, GLuint arg6, GLuint arg7, GLuint arg8, GLuint arg9, GLuint arg10, GLuint arg11, GLuint arg12) {
    _pre_call_callback("glColorFragmentOp3ATI", (void*)glColorFragmentOp3ATI, 13, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
     glad_glColorFragmentOp3ATI(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    _post_call_callback("glColorFragmentOp3ATI", (void*)glColorFragmentOp3ATI, 13, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

}
PFNGLCOLORFRAGMENTOP3ATIPROC glad_debug_glColorFragmentOp3ATI = glad_debug_impl_glColorFragmentOp3ATI;
PFNGLALPHAFRAGMENTOP1ATIPROC glad_glAlphaFragmentOp1ATI;
void APIENTRY glad_debug_impl_glAlphaFragmentOp1ATI(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5) {
    _pre_call_callback("glAlphaFragmentOp1ATI", (void*)glAlphaFragmentOp1ATI, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glAlphaFragmentOp1ATI(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glAlphaFragmentOp1ATI", (void*)glAlphaFragmentOp1ATI, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLALPHAFRAGMENTOP1ATIPROC glad_debug_glAlphaFragmentOp1ATI = glad_debug_impl_glAlphaFragmentOp1ATI;
PFNGLALPHAFRAGMENTOP2ATIPROC glad_glAlphaFragmentOp2ATI;
void APIENTRY glad_debug_impl_glAlphaFragmentOp2ATI(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5, GLuint arg6, GLuint arg7, GLuint arg8) {
    _pre_call_callback("glAlphaFragmentOp2ATI", (void*)glAlphaFragmentOp2ATI, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glAlphaFragmentOp2ATI(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glAlphaFragmentOp2ATI", (void*)glAlphaFragmentOp2ATI, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLALPHAFRAGMENTOP2ATIPROC glad_debug_glAlphaFragmentOp2ATI = glad_debug_impl_glAlphaFragmentOp2ATI;
PFNGLALPHAFRAGMENTOP3ATIPROC glad_glAlphaFragmentOp3ATI;
void APIENTRY glad_debug_impl_glAlphaFragmentOp3ATI(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5, GLuint arg6, GLuint arg7, GLuint arg8, GLuint arg9, GLuint arg10, GLuint arg11) {
    _pre_call_callback("glAlphaFragmentOp3ATI", (void*)glAlphaFragmentOp3ATI, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
     glad_glAlphaFragmentOp3ATI(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_callback("glAlphaFragmentOp3ATI", (void*)glAlphaFragmentOp3ATI, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

}
PFNGLALPHAFRAGMENTOP3ATIPROC glad_debug_glAlphaFragmentOp3ATI = glad_debug_impl_glAlphaFragmentOp3ATI;
PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glad_glSetFragmentShaderConstantATI;
void APIENTRY glad_debug_impl_glSetFragmentShaderConstantATI(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glSetFragmentShaderConstantATI", (void*)glSetFragmentShaderConstantATI, 2, arg0, arg1);
     glad_glSetFragmentShaderConstantATI(arg0, arg1);
    _post_call_callback("glSetFragmentShaderConstantATI", (void*)glSetFragmentShaderConstantATI, 2, arg0, arg1);

}
PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glad_debug_glSetFragmentShaderConstantATI = glad_debug_impl_glSetFragmentShaderConstantATI;
PFNGLREPLACEMENTCODEUISUNPROC glad_glReplacementCodeuiSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiSUN(GLuint arg0) {
    _pre_call_callback("glReplacementCodeuiSUN", (void*)glReplacementCodeuiSUN, 1, arg0);
     glad_glReplacementCodeuiSUN(arg0);
    _post_call_callback("glReplacementCodeuiSUN", (void*)glReplacementCodeuiSUN, 1, arg0);

}
PFNGLREPLACEMENTCODEUISUNPROC glad_debug_glReplacementCodeuiSUN = glad_debug_impl_glReplacementCodeuiSUN;
PFNGLREPLACEMENTCODEUSSUNPROC glad_glReplacementCodeusSUN;
void APIENTRY glad_debug_impl_glReplacementCodeusSUN(GLushort arg0) {
    _pre_call_callback("glReplacementCodeusSUN", (void*)glReplacementCodeusSUN, 1, arg0);
     glad_glReplacementCodeusSUN(arg0);
    _post_call_callback("glReplacementCodeusSUN", (void*)glReplacementCodeusSUN, 1, arg0);

}
PFNGLREPLACEMENTCODEUSSUNPROC glad_debug_glReplacementCodeusSUN = glad_debug_impl_glReplacementCodeusSUN;
PFNGLREPLACEMENTCODEUBSUNPROC glad_glReplacementCodeubSUN;
void APIENTRY glad_debug_impl_glReplacementCodeubSUN(GLubyte arg0) {
    _pre_call_callback("glReplacementCodeubSUN", (void*)glReplacementCodeubSUN, 1, arg0);
     glad_glReplacementCodeubSUN(arg0);
    _post_call_callback("glReplacementCodeubSUN", (void*)glReplacementCodeubSUN, 1, arg0);

}
PFNGLREPLACEMENTCODEUBSUNPROC glad_debug_glReplacementCodeubSUN = glad_debug_impl_glReplacementCodeubSUN;
PFNGLREPLACEMENTCODEUIVSUNPROC glad_glReplacementCodeuivSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuivSUN(const GLuint* arg0) {
    _pre_call_callback("glReplacementCodeuivSUN", (void*)glReplacementCodeuivSUN, 1, arg0);
     glad_glReplacementCodeuivSUN(arg0);
    _post_call_callback("glReplacementCodeuivSUN", (void*)glReplacementCodeuivSUN, 1, arg0);

}
PFNGLREPLACEMENTCODEUIVSUNPROC glad_debug_glReplacementCodeuivSUN = glad_debug_impl_glReplacementCodeuivSUN;
PFNGLREPLACEMENTCODEUSVSUNPROC glad_glReplacementCodeusvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeusvSUN(const GLushort* arg0) {
    _pre_call_callback("glReplacementCodeusvSUN", (void*)glReplacementCodeusvSUN, 1, arg0);
     glad_glReplacementCodeusvSUN(arg0);
    _post_call_callback("glReplacementCodeusvSUN", (void*)glReplacementCodeusvSUN, 1, arg0);

}
PFNGLREPLACEMENTCODEUSVSUNPROC glad_debug_glReplacementCodeusvSUN = glad_debug_impl_glReplacementCodeusvSUN;
PFNGLREPLACEMENTCODEUBVSUNPROC glad_glReplacementCodeubvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeubvSUN(const GLubyte* arg0) {
    _pre_call_callback("glReplacementCodeubvSUN", (void*)glReplacementCodeubvSUN, 1, arg0);
     glad_glReplacementCodeubvSUN(arg0);
    _post_call_callback("glReplacementCodeubvSUN", (void*)glReplacementCodeubvSUN, 1, arg0);

}
PFNGLREPLACEMENTCODEUBVSUNPROC glad_debug_glReplacementCodeubvSUN = glad_debug_impl_glReplacementCodeubvSUN;
PFNGLREPLACEMENTCODEPOINTERSUNPROC glad_glReplacementCodePointerSUN;
void APIENTRY glad_debug_impl_glReplacementCodePointerSUN(GLenum arg0, GLsizei arg1, const void** arg2) {
    _pre_call_callback("glReplacementCodePointerSUN", (void*)glReplacementCodePointerSUN, 3, arg0, arg1, arg2);
     glad_glReplacementCodePointerSUN(arg0, arg1, arg2);
    _post_call_callback("glReplacementCodePointerSUN", (void*)glReplacementCodePointerSUN, 3, arg0, arg1, arg2);

}
PFNGLREPLACEMENTCODEPOINTERSUNPROC glad_debug_glReplacementCodePointerSUN = glad_debug_impl_glReplacementCodePointerSUN;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced;
void APIENTRY glad_debug_impl_glDrawTransformFeedbackInstanced(GLenum arg0, GLuint arg1, GLsizei arg2) {
    _pre_call_callback("glDrawTransformFeedbackInstanced", (void*)glDrawTransformFeedbackInstanced, 3, arg0, arg1, arg2);
     glad_glDrawTransformFeedbackInstanced(arg0, arg1, arg2);
    _post_call_callback("glDrawTransformFeedbackInstanced", (void*)glDrawTransformFeedbackInstanced, 3, arg0, arg1, arg2);

}
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_debug_glDrawTransformFeedbackInstanced = glad_debug_impl_glDrawTransformFeedbackInstanced;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced;
void APIENTRY glad_debug_impl_glDrawTransformFeedbackStreamInstanced(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3) {
    _pre_call_callback("glDrawTransformFeedbackStreamInstanced", (void*)glDrawTransformFeedbackStreamInstanced, 4, arg0, arg1, arg2, arg3);
     glad_glDrawTransformFeedbackStreamInstanced(arg0, arg1, arg2, arg3);
    _post_call_callback("glDrawTransformFeedbackStreamInstanced", (void*)glDrawTransformFeedbackStreamInstanced, 4, arg0, arg1, arg2, arg3);

}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_debug_glDrawTransformFeedbackStreamInstanced = glad_debug_impl_glDrawTransformFeedbackStreamInstanced;
PFNGLASYNCMARKERSGIXPROC glad_glAsyncMarkerSGIX;
void APIENTRY glad_debug_impl_glAsyncMarkerSGIX(GLuint arg0) {
    _pre_call_callback("glAsyncMarkerSGIX", (void*)glAsyncMarkerSGIX, 1, arg0);
     glad_glAsyncMarkerSGIX(arg0);
    _post_call_callback("glAsyncMarkerSGIX", (void*)glAsyncMarkerSGIX, 1, arg0);

}
PFNGLASYNCMARKERSGIXPROC glad_debug_glAsyncMarkerSGIX = glad_debug_impl_glAsyncMarkerSGIX;
PFNGLFINISHASYNCSGIXPROC glad_glFinishAsyncSGIX;
GLint APIENTRY glad_debug_impl_glFinishAsyncSGIX(GLuint* arg0) {
    GLint ret;
    _pre_call_callback("glFinishAsyncSGIX", (void*)glFinishAsyncSGIX, 1, arg0);
    ret =  glad_glFinishAsyncSGIX(arg0);
    _post_call_callback("glFinishAsyncSGIX", (void*)glFinishAsyncSGIX, 1, arg0);
    return ret;
}
PFNGLFINISHASYNCSGIXPROC glad_debug_glFinishAsyncSGIX = glad_debug_impl_glFinishAsyncSGIX;
PFNGLPOLLASYNCSGIXPROC glad_glPollAsyncSGIX;
GLint APIENTRY glad_debug_impl_glPollAsyncSGIX(GLuint* arg0) {
    GLint ret;
    _pre_call_callback("glPollAsyncSGIX", (void*)glPollAsyncSGIX, 1, arg0);
    ret =  glad_glPollAsyncSGIX(arg0);
    _post_call_callback("glPollAsyncSGIX", (void*)glPollAsyncSGIX, 1, arg0);
    return ret;
}
PFNGLPOLLASYNCSGIXPROC glad_debug_glPollAsyncSGIX = glad_debug_impl_glPollAsyncSGIX;
PFNGLGENASYNCMARKERSSGIXPROC glad_glGenAsyncMarkersSGIX;
GLuint APIENTRY glad_debug_impl_glGenAsyncMarkersSGIX(GLsizei arg0) {
    GLuint ret;
    _pre_call_callback("glGenAsyncMarkersSGIX", (void*)glGenAsyncMarkersSGIX, 1, arg0);
    ret =  glad_glGenAsyncMarkersSGIX(arg0);
    _post_call_callback("glGenAsyncMarkersSGIX", (void*)glGenAsyncMarkersSGIX, 1, arg0);
    return ret;
}
PFNGLGENASYNCMARKERSSGIXPROC glad_debug_glGenAsyncMarkersSGIX = glad_debug_impl_glGenAsyncMarkersSGIX;
PFNGLDELETEASYNCMARKERSSGIXPROC glad_glDeleteAsyncMarkersSGIX;
void APIENTRY glad_debug_impl_glDeleteAsyncMarkersSGIX(GLuint arg0, GLsizei arg1) {
    _pre_call_callback("glDeleteAsyncMarkersSGIX", (void*)glDeleteAsyncMarkersSGIX, 2, arg0, arg1);
     glad_glDeleteAsyncMarkersSGIX(arg0, arg1);
    _post_call_callback("glDeleteAsyncMarkersSGIX", (void*)glDeleteAsyncMarkersSGIX, 2, arg0, arg1);

}
PFNGLDELETEASYNCMARKERSSGIXPROC glad_debug_glDeleteAsyncMarkersSGIX = glad_debug_impl_glDeleteAsyncMarkersSGIX;
PFNGLISASYNCMARKERSGIXPROC glad_glIsAsyncMarkerSGIX;
GLboolean APIENTRY glad_debug_impl_glIsAsyncMarkerSGIX(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsAsyncMarkerSGIX", (void*)glIsAsyncMarkerSGIX, 1, arg0);
    ret =  glad_glIsAsyncMarkerSGIX(arg0);
    _post_call_callback("glIsAsyncMarkerSGIX", (void*)glIsAsyncMarkerSGIX, 1, arg0);
    return ret;
}
PFNGLISASYNCMARKERSGIXPROC glad_debug_glIsAsyncMarkerSGIX = glad_debug_impl_glIsAsyncMarkerSGIX;
PFNGLBEGINPERFQUERYINTELPROC glad_glBeginPerfQueryINTEL;
void APIENTRY glad_debug_impl_glBeginPerfQueryINTEL(GLuint arg0) {
    _pre_call_callback("glBeginPerfQueryINTEL", (void*)glBeginPerfQueryINTEL, 1, arg0);
     glad_glBeginPerfQueryINTEL(arg0);
    _post_call_callback("glBeginPerfQueryINTEL", (void*)glBeginPerfQueryINTEL, 1, arg0);

}
PFNGLBEGINPERFQUERYINTELPROC glad_debug_glBeginPerfQueryINTEL = glad_debug_impl_glBeginPerfQueryINTEL;
PFNGLCREATEPERFQUERYINTELPROC glad_glCreatePerfQueryINTEL;
void APIENTRY glad_debug_impl_glCreatePerfQueryINTEL(GLuint arg0, GLuint* arg1) {
    _pre_call_callback("glCreatePerfQueryINTEL", (void*)glCreatePerfQueryINTEL, 2, arg0, arg1);
     glad_glCreatePerfQueryINTEL(arg0, arg1);
    _post_call_callback("glCreatePerfQueryINTEL", (void*)glCreatePerfQueryINTEL, 2, arg0, arg1);

}
PFNGLCREATEPERFQUERYINTELPROC glad_debug_glCreatePerfQueryINTEL = glad_debug_impl_glCreatePerfQueryINTEL;
PFNGLDELETEPERFQUERYINTELPROC glad_glDeletePerfQueryINTEL;
void APIENTRY glad_debug_impl_glDeletePerfQueryINTEL(GLuint arg0) {
    _pre_call_callback("glDeletePerfQueryINTEL", (void*)glDeletePerfQueryINTEL, 1, arg0);
     glad_glDeletePerfQueryINTEL(arg0);
    _post_call_callback("glDeletePerfQueryINTEL", (void*)glDeletePerfQueryINTEL, 1, arg0);

}
PFNGLDELETEPERFQUERYINTELPROC glad_debug_glDeletePerfQueryINTEL = glad_debug_impl_glDeletePerfQueryINTEL;
PFNGLENDPERFQUERYINTELPROC glad_glEndPerfQueryINTEL;
void APIENTRY glad_debug_impl_glEndPerfQueryINTEL(GLuint arg0) {
    _pre_call_callback("glEndPerfQueryINTEL", (void*)glEndPerfQueryINTEL, 1, arg0);
     glad_glEndPerfQueryINTEL(arg0);
    _post_call_callback("glEndPerfQueryINTEL", (void*)glEndPerfQueryINTEL, 1, arg0);

}
PFNGLENDPERFQUERYINTELPROC glad_debug_glEndPerfQueryINTEL = glad_debug_impl_glEndPerfQueryINTEL;
PFNGLGETFIRSTPERFQUERYIDINTELPROC glad_glGetFirstPerfQueryIdINTEL;
void APIENTRY glad_debug_impl_glGetFirstPerfQueryIdINTEL(GLuint* arg0) {
    _pre_call_callback("glGetFirstPerfQueryIdINTEL", (void*)glGetFirstPerfQueryIdINTEL, 1, arg0);
     glad_glGetFirstPerfQueryIdINTEL(arg0);
    _post_call_callback("glGetFirstPerfQueryIdINTEL", (void*)glGetFirstPerfQueryIdINTEL, 1, arg0);

}
PFNGLGETFIRSTPERFQUERYIDINTELPROC glad_debug_glGetFirstPerfQueryIdINTEL = glad_debug_impl_glGetFirstPerfQueryIdINTEL;
PFNGLGETNEXTPERFQUERYIDINTELPROC glad_glGetNextPerfQueryIdINTEL;
void APIENTRY glad_debug_impl_glGetNextPerfQueryIdINTEL(GLuint arg0, GLuint* arg1) {
    _pre_call_callback("glGetNextPerfQueryIdINTEL", (void*)glGetNextPerfQueryIdINTEL, 2, arg0, arg1);
     glad_glGetNextPerfQueryIdINTEL(arg0, arg1);
    _post_call_callback("glGetNextPerfQueryIdINTEL", (void*)glGetNextPerfQueryIdINTEL, 2, arg0, arg1);

}
PFNGLGETNEXTPERFQUERYIDINTELPROC glad_debug_glGetNextPerfQueryIdINTEL = glad_debug_impl_glGetNextPerfQueryIdINTEL;
PFNGLGETPERFCOUNTERINFOINTELPROC glad_glGetPerfCounterInfoINTEL;
void APIENTRY glad_debug_impl_glGetPerfCounterInfoINTEL(GLuint arg0, GLuint arg1, GLuint arg2, GLchar* arg3, GLuint arg4, GLchar* arg5, GLuint* arg6, GLuint* arg7, GLuint* arg8, GLuint* arg9, GLuint64* arg10) {
    _pre_call_callback("glGetPerfCounterInfoINTEL", (void*)glGetPerfCounterInfoINTEL, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glGetPerfCounterInfoINTEL(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glGetPerfCounterInfoINTEL", (void*)glGetPerfCounterInfoINTEL, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLGETPERFCOUNTERINFOINTELPROC glad_debug_glGetPerfCounterInfoINTEL = glad_debug_impl_glGetPerfCounterInfoINTEL;
PFNGLGETPERFQUERYDATAINTELPROC glad_glGetPerfQueryDataINTEL;
void APIENTRY glad_debug_impl_glGetPerfQueryDataINTEL(GLuint arg0, GLuint arg1, GLsizei arg2, GLvoid* arg3, GLuint* arg4) {
    _pre_call_callback("glGetPerfQueryDataINTEL", (void*)glGetPerfQueryDataINTEL, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetPerfQueryDataINTEL(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetPerfQueryDataINTEL", (void*)glGetPerfQueryDataINTEL, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETPERFQUERYDATAINTELPROC glad_debug_glGetPerfQueryDataINTEL = glad_debug_impl_glGetPerfQueryDataINTEL;
PFNGLGETPERFQUERYIDBYNAMEINTELPROC glad_glGetPerfQueryIdByNameINTEL;
void APIENTRY glad_debug_impl_glGetPerfQueryIdByNameINTEL(GLchar* arg0, GLuint* arg1) {
    _pre_call_callback("glGetPerfQueryIdByNameINTEL", (void*)glGetPerfQueryIdByNameINTEL, 2, arg0, arg1);
     glad_glGetPerfQueryIdByNameINTEL(arg0, arg1);
    _post_call_callback("glGetPerfQueryIdByNameINTEL", (void*)glGetPerfQueryIdByNameINTEL, 2, arg0, arg1);

}
PFNGLGETPERFQUERYIDBYNAMEINTELPROC glad_debug_glGetPerfQueryIdByNameINTEL = glad_debug_impl_glGetPerfQueryIdByNameINTEL;
PFNGLGETPERFQUERYINFOINTELPROC glad_glGetPerfQueryInfoINTEL;
void APIENTRY glad_debug_impl_glGetPerfQueryInfoINTEL(GLuint arg0, GLuint arg1, GLchar* arg2, GLuint* arg3, GLuint* arg4, GLuint* arg5, GLuint* arg6) {
    _pre_call_callback("glGetPerfQueryInfoINTEL", (void*)glGetPerfQueryInfoINTEL, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetPerfQueryInfoINTEL(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetPerfQueryInfoINTEL", (void*)glGetPerfQueryInfoINTEL, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETPERFQUERYINFOINTELPROC glad_debug_glGetPerfQueryInfoINTEL = glad_debug_impl_glGetPerfQueryInfoINTEL;
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC glad_glMultiDrawArraysIndirectBindlessCountNV;
void APIENTRY glad_debug_impl_glMultiDrawArraysIndirectBindlessCountNV(GLenum arg0, const void* arg1, GLsizei arg2, GLsizei arg3, GLsizei arg4, GLint arg5) {
    _pre_call_callback("glMultiDrawArraysIndirectBindlessCountNV", (void*)glMultiDrawArraysIndirectBindlessCountNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glMultiDrawArraysIndirectBindlessCountNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glMultiDrawArraysIndirectBindlessCountNV", (void*)glMultiDrawArraysIndirectBindlessCountNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC glad_debug_glMultiDrawArraysIndirectBindlessCountNV = glad_debug_impl_glMultiDrawArraysIndirectBindlessCountNV;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC glad_glMultiDrawElementsIndirectBindlessCountNV;
void APIENTRY glad_debug_impl_glMultiDrawElementsIndirectBindlessCountNV(GLenum arg0, GLenum arg1, const void* arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLint arg6) {
    _pre_call_callback("glMultiDrawElementsIndirectBindlessCountNV", (void*)glMultiDrawElementsIndirectBindlessCountNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glMultiDrawElementsIndirectBindlessCountNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glMultiDrawElementsIndirectBindlessCountNV", (void*)glMultiDrawElementsIndirectBindlessCountNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC glad_debug_glMultiDrawElementsIndirectBindlessCountNV = glad_debug_impl_glMultiDrawElementsIndirectBindlessCountNV;
PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
void APIENTRY glad_debug_impl_glReleaseShaderCompiler() {
    _pre_call_callback("glReleaseShaderCompiler", (void*)glReleaseShaderCompiler, 0);
     glad_glReleaseShaderCompiler();
    _post_call_callback("glReleaseShaderCompiler", (void*)glReleaseShaderCompiler, 0);

}
PFNGLRELEASESHADERCOMPILERPROC glad_debug_glReleaseShaderCompiler = glad_debug_impl_glReleaseShaderCompiler;
PFNGLSHADERBINARYPROC glad_glShaderBinary;
void APIENTRY glad_debug_impl_glShaderBinary(GLsizei arg0, const GLuint* arg1, GLenum arg2, const void* arg3, GLsizei arg4) {
    _pre_call_callback("glShaderBinary", (void*)glShaderBinary, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glShaderBinary(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glShaderBinary", (void*)glShaderBinary, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLSHADERBINARYPROC glad_debug_glShaderBinary = glad_debug_impl_glShaderBinary;
PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
void APIENTRY glad_debug_impl_glGetShaderPrecisionFormat(GLenum arg0, GLenum arg1, GLint* arg2, GLint* arg3) {
    _pre_call_callback("glGetShaderPrecisionFormat", (void*)glGetShaderPrecisionFormat, 4, arg0, arg1, arg2, arg3);
     glad_glGetShaderPrecisionFormat(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetShaderPrecisionFormat", (void*)glGetShaderPrecisionFormat, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETSHADERPRECISIONFORMATPROC glad_debug_glGetShaderPrecisionFormat = glad_debug_impl_glGetShaderPrecisionFormat;
PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
void APIENTRY glad_debug_impl_glDepthRangef(GLfloat arg0, GLfloat arg1) {
    _pre_call_callback("glDepthRangef", (void*)glDepthRangef, 2, arg0, arg1);
     glad_glDepthRangef(arg0, arg1);
    _post_call_callback("glDepthRangef", (void*)glDepthRangef, 2, arg0, arg1);

}
PFNGLDEPTHRANGEFPROC glad_debug_glDepthRangef = glad_debug_impl_glDepthRangef;
PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
void APIENTRY glad_debug_impl_glClearDepthf(GLfloat arg0) {
    _pre_call_callback("glClearDepthf", (void*)glClearDepthf, 1, arg0);
     glad_glClearDepthf(arg0);
    _post_call_callback("glClearDepthf", (void*)glClearDepthf, 1, arg0);

}
PFNGLCLEARDEPTHFPROC glad_debug_glClearDepthf = glad_debug_impl_glClearDepthf;
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glad_glMultiDrawArraysIndirectCountARB;
void APIENTRY glad_debug_impl_glMultiDrawArraysIndirectCountARB(GLenum arg0, GLintptr arg1, GLintptr arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glMultiDrawArraysIndirectCountARB", (void*)glMultiDrawArraysIndirectCountARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiDrawArraysIndirectCountARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiDrawArraysIndirectCountARB", (void*)glMultiDrawArraysIndirectCountARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glad_debug_glMultiDrawArraysIndirectCountARB = glad_debug_impl_glMultiDrawArraysIndirectCountARB;
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glad_glMultiDrawElementsIndirectCountARB;
void APIENTRY glad_debug_impl_glMultiDrawElementsIndirectCountARB(GLenum arg0, GLenum arg1, GLintptr arg2, GLintptr arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_callback("glMultiDrawElementsIndirectCountARB", (void*)glMultiDrawElementsIndirectCountARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glMultiDrawElementsIndirectCountARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glMultiDrawElementsIndirectCountARB", (void*)glMultiDrawElementsIndirectCountARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glad_debug_glMultiDrawElementsIndirectCountARB = glad_debug_impl_glMultiDrawElementsIndirectCountARB;
PFNGLWINDOWRECTANGLESEXTPROC glad_glWindowRectanglesEXT;
void APIENTRY glad_debug_impl_glWindowRectanglesEXT(GLenum arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glWindowRectanglesEXT", (void*)glWindowRectanglesEXT, 3, arg0, arg1, arg2);
     glad_glWindowRectanglesEXT(arg0, arg1, arg2);
    _post_call_callback("glWindowRectanglesEXT", (void*)glWindowRectanglesEXT, 3, arg0, arg1, arg2);

}
PFNGLWINDOWRECTANGLESEXTPROC glad_debug_glWindowRectanglesEXT = glad_debug_impl_glWindowRectanglesEXT;
PFNGLVERTEX2HNVPROC glad_glVertex2hNV;
void APIENTRY glad_debug_impl_glVertex2hNV(GLhalfNV arg0, GLhalfNV arg1) {
    _pre_call_callback("glVertex2hNV", (void*)glVertex2hNV, 2, arg0, arg1);
     glad_glVertex2hNV(arg0, arg1);
    _post_call_callback("glVertex2hNV", (void*)glVertex2hNV, 2, arg0, arg1);

}
PFNGLVERTEX2HNVPROC glad_debug_glVertex2hNV = glad_debug_impl_glVertex2hNV;
PFNGLVERTEX2HVNVPROC glad_glVertex2hvNV;
void APIENTRY glad_debug_impl_glVertex2hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glVertex2hvNV", (void*)glVertex2hvNV, 1, arg0);
     glad_glVertex2hvNV(arg0);
    _post_call_callback("glVertex2hvNV", (void*)glVertex2hvNV, 1, arg0);

}
PFNGLVERTEX2HVNVPROC glad_debug_glVertex2hvNV = glad_debug_impl_glVertex2hvNV;
PFNGLVERTEX3HNVPROC glad_glVertex3hNV;
void APIENTRY glad_debug_impl_glVertex3hNV(GLhalfNV arg0, GLhalfNV arg1, GLhalfNV arg2) {
    _pre_call_callback("glVertex3hNV", (void*)glVertex3hNV, 3, arg0, arg1, arg2);
     glad_glVertex3hNV(arg0, arg1, arg2);
    _post_call_callback("glVertex3hNV", (void*)glVertex3hNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEX3HNVPROC glad_debug_glVertex3hNV = glad_debug_impl_glVertex3hNV;
PFNGLVERTEX3HVNVPROC glad_glVertex3hvNV;
void APIENTRY glad_debug_impl_glVertex3hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glVertex3hvNV", (void*)glVertex3hvNV, 1, arg0);
     glad_glVertex3hvNV(arg0);
    _post_call_callback("glVertex3hvNV", (void*)glVertex3hvNV, 1, arg0);

}
PFNGLVERTEX3HVNVPROC glad_debug_glVertex3hvNV = glad_debug_impl_glVertex3hvNV;
PFNGLVERTEX4HNVPROC glad_glVertex4hNV;
void APIENTRY glad_debug_impl_glVertex4hNV(GLhalfNV arg0, GLhalfNV arg1, GLhalfNV arg2, GLhalfNV arg3) {
    _pre_call_callback("glVertex4hNV", (void*)glVertex4hNV, 4, arg0, arg1, arg2, arg3);
     glad_glVertex4hNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertex4hNV", (void*)glVertex4hNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEX4HNVPROC glad_debug_glVertex4hNV = glad_debug_impl_glVertex4hNV;
PFNGLVERTEX4HVNVPROC glad_glVertex4hvNV;
void APIENTRY glad_debug_impl_glVertex4hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glVertex4hvNV", (void*)glVertex4hvNV, 1, arg0);
     glad_glVertex4hvNV(arg0);
    _post_call_callback("glVertex4hvNV", (void*)glVertex4hvNV, 1, arg0);

}
PFNGLVERTEX4HVNVPROC glad_debug_glVertex4hvNV = glad_debug_impl_glVertex4hvNV;
PFNGLNORMAL3HNVPROC glad_glNormal3hNV;
void APIENTRY glad_debug_impl_glNormal3hNV(GLhalfNV arg0, GLhalfNV arg1, GLhalfNV arg2) {
    _pre_call_callback("glNormal3hNV", (void*)glNormal3hNV, 3, arg0, arg1, arg2);
     glad_glNormal3hNV(arg0, arg1, arg2);
    _post_call_callback("glNormal3hNV", (void*)glNormal3hNV, 3, arg0, arg1, arg2);

}
PFNGLNORMAL3HNVPROC glad_debug_glNormal3hNV = glad_debug_impl_glNormal3hNV;
PFNGLNORMAL3HVNVPROC glad_glNormal3hvNV;
void APIENTRY glad_debug_impl_glNormal3hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glNormal3hvNV", (void*)glNormal3hvNV, 1, arg0);
     glad_glNormal3hvNV(arg0);
    _post_call_callback("glNormal3hvNV", (void*)glNormal3hvNV, 1, arg0);

}
PFNGLNORMAL3HVNVPROC glad_debug_glNormal3hvNV = glad_debug_impl_glNormal3hvNV;
PFNGLCOLOR3HNVPROC glad_glColor3hNV;
void APIENTRY glad_debug_impl_glColor3hNV(GLhalfNV arg0, GLhalfNV arg1, GLhalfNV arg2) {
    _pre_call_callback("glColor3hNV", (void*)glColor3hNV, 3, arg0, arg1, arg2);
     glad_glColor3hNV(arg0, arg1, arg2);
    _post_call_callback("glColor3hNV", (void*)glColor3hNV, 3, arg0, arg1, arg2);

}
PFNGLCOLOR3HNVPROC glad_debug_glColor3hNV = glad_debug_impl_glColor3hNV;
PFNGLCOLOR3HVNVPROC glad_glColor3hvNV;
void APIENTRY glad_debug_impl_glColor3hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glColor3hvNV", (void*)glColor3hvNV, 1, arg0);
     glad_glColor3hvNV(arg0);
    _post_call_callback("glColor3hvNV", (void*)glColor3hvNV, 1, arg0);

}
PFNGLCOLOR3HVNVPROC glad_debug_glColor3hvNV = glad_debug_impl_glColor3hvNV;
PFNGLCOLOR4HNVPROC glad_glColor4hNV;
void APIENTRY glad_debug_impl_glColor4hNV(GLhalfNV arg0, GLhalfNV arg1, GLhalfNV arg2, GLhalfNV arg3) {
    _pre_call_callback("glColor4hNV", (void*)glColor4hNV, 4, arg0, arg1, arg2, arg3);
     glad_glColor4hNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glColor4hNV", (void*)glColor4hNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLCOLOR4HNVPROC glad_debug_glColor4hNV = glad_debug_impl_glColor4hNV;
PFNGLCOLOR4HVNVPROC glad_glColor4hvNV;
void APIENTRY glad_debug_impl_glColor4hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glColor4hvNV", (void*)glColor4hvNV, 1, arg0);
     glad_glColor4hvNV(arg0);
    _post_call_callback("glColor4hvNV", (void*)glColor4hvNV, 1, arg0);

}
PFNGLCOLOR4HVNVPROC glad_debug_glColor4hvNV = glad_debug_impl_glColor4hvNV;
PFNGLTEXCOORD1HNVPROC glad_glTexCoord1hNV;
void APIENTRY glad_debug_impl_glTexCoord1hNV(GLhalfNV arg0) {
    _pre_call_callback("glTexCoord1hNV", (void*)glTexCoord1hNV, 1, arg0);
     glad_glTexCoord1hNV(arg0);
    _post_call_callback("glTexCoord1hNV", (void*)glTexCoord1hNV, 1, arg0);

}
PFNGLTEXCOORD1HNVPROC glad_debug_glTexCoord1hNV = glad_debug_impl_glTexCoord1hNV;
PFNGLTEXCOORD1HVNVPROC glad_glTexCoord1hvNV;
void APIENTRY glad_debug_impl_glTexCoord1hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glTexCoord1hvNV", (void*)glTexCoord1hvNV, 1, arg0);
     glad_glTexCoord1hvNV(arg0);
    _post_call_callback("glTexCoord1hvNV", (void*)glTexCoord1hvNV, 1, arg0);

}
PFNGLTEXCOORD1HVNVPROC glad_debug_glTexCoord1hvNV = glad_debug_impl_glTexCoord1hvNV;
PFNGLTEXCOORD2HNVPROC glad_glTexCoord2hNV;
void APIENTRY glad_debug_impl_glTexCoord2hNV(GLhalfNV arg0, GLhalfNV arg1) {
    _pre_call_callback("glTexCoord2hNV", (void*)glTexCoord2hNV, 2, arg0, arg1);
     glad_glTexCoord2hNV(arg0, arg1);
    _post_call_callback("glTexCoord2hNV", (void*)glTexCoord2hNV, 2, arg0, arg1);

}
PFNGLTEXCOORD2HNVPROC glad_debug_glTexCoord2hNV = glad_debug_impl_glTexCoord2hNV;
PFNGLTEXCOORD2HVNVPROC glad_glTexCoord2hvNV;
void APIENTRY glad_debug_impl_glTexCoord2hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glTexCoord2hvNV", (void*)glTexCoord2hvNV, 1, arg0);
     glad_glTexCoord2hvNV(arg0);
    _post_call_callback("glTexCoord2hvNV", (void*)glTexCoord2hvNV, 1, arg0);

}
PFNGLTEXCOORD2HVNVPROC glad_debug_glTexCoord2hvNV = glad_debug_impl_glTexCoord2hvNV;
PFNGLTEXCOORD3HNVPROC glad_glTexCoord3hNV;
void APIENTRY glad_debug_impl_glTexCoord3hNV(GLhalfNV arg0, GLhalfNV arg1, GLhalfNV arg2) {
    _pre_call_callback("glTexCoord3hNV", (void*)glTexCoord3hNV, 3, arg0, arg1, arg2);
     glad_glTexCoord3hNV(arg0, arg1, arg2);
    _post_call_callback("glTexCoord3hNV", (void*)glTexCoord3hNV, 3, arg0, arg1, arg2);

}
PFNGLTEXCOORD3HNVPROC glad_debug_glTexCoord3hNV = glad_debug_impl_glTexCoord3hNV;
PFNGLTEXCOORD3HVNVPROC glad_glTexCoord3hvNV;
void APIENTRY glad_debug_impl_glTexCoord3hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glTexCoord3hvNV", (void*)glTexCoord3hvNV, 1, arg0);
     glad_glTexCoord3hvNV(arg0);
    _post_call_callback("glTexCoord3hvNV", (void*)glTexCoord3hvNV, 1, arg0);

}
PFNGLTEXCOORD3HVNVPROC glad_debug_glTexCoord3hvNV = glad_debug_impl_glTexCoord3hvNV;
PFNGLTEXCOORD4HNVPROC glad_glTexCoord4hNV;
void APIENTRY glad_debug_impl_glTexCoord4hNV(GLhalfNV arg0, GLhalfNV arg1, GLhalfNV arg2, GLhalfNV arg3) {
    _pre_call_callback("glTexCoord4hNV", (void*)glTexCoord4hNV, 4, arg0, arg1, arg2, arg3);
     glad_glTexCoord4hNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glTexCoord4hNV", (void*)glTexCoord4hNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXCOORD4HNVPROC glad_debug_glTexCoord4hNV = glad_debug_impl_glTexCoord4hNV;
PFNGLTEXCOORD4HVNVPROC glad_glTexCoord4hvNV;
void APIENTRY glad_debug_impl_glTexCoord4hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glTexCoord4hvNV", (void*)glTexCoord4hvNV, 1, arg0);
     glad_glTexCoord4hvNV(arg0);
    _post_call_callback("glTexCoord4hvNV", (void*)glTexCoord4hvNV, 1, arg0);

}
PFNGLTEXCOORD4HVNVPROC glad_debug_glTexCoord4hvNV = glad_debug_impl_glTexCoord4hvNV;
PFNGLMULTITEXCOORD1HNVPROC glad_glMultiTexCoord1hNV;
void APIENTRY glad_debug_impl_glMultiTexCoord1hNV(GLenum arg0, GLhalfNV arg1) {
    _pre_call_callback("glMultiTexCoord1hNV", (void*)glMultiTexCoord1hNV, 2, arg0, arg1);
     glad_glMultiTexCoord1hNV(arg0, arg1);
    _post_call_callback("glMultiTexCoord1hNV", (void*)glMultiTexCoord1hNV, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1HNVPROC glad_debug_glMultiTexCoord1hNV = glad_debug_impl_glMultiTexCoord1hNV;
PFNGLMULTITEXCOORD1HVNVPROC glad_glMultiTexCoord1hvNV;
void APIENTRY glad_debug_impl_glMultiTexCoord1hvNV(GLenum arg0, const GLhalfNV* arg1) {
    _pre_call_callback("glMultiTexCoord1hvNV", (void*)glMultiTexCoord1hvNV, 2, arg0, arg1);
     glad_glMultiTexCoord1hvNV(arg0, arg1);
    _post_call_callback("glMultiTexCoord1hvNV", (void*)glMultiTexCoord1hvNV, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1HVNVPROC glad_debug_glMultiTexCoord1hvNV = glad_debug_impl_glMultiTexCoord1hvNV;
PFNGLMULTITEXCOORD2HNVPROC glad_glMultiTexCoord2hNV;
void APIENTRY glad_debug_impl_glMultiTexCoord2hNV(GLenum arg0, GLhalfNV arg1, GLhalfNV arg2) {
    _pre_call_callback("glMultiTexCoord2hNV", (void*)glMultiTexCoord2hNV, 3, arg0, arg1, arg2);
     glad_glMultiTexCoord2hNV(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoord2hNV", (void*)glMultiTexCoord2hNV, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORD2HNVPROC glad_debug_glMultiTexCoord2hNV = glad_debug_impl_glMultiTexCoord2hNV;
PFNGLMULTITEXCOORD2HVNVPROC glad_glMultiTexCoord2hvNV;
void APIENTRY glad_debug_impl_glMultiTexCoord2hvNV(GLenum arg0, const GLhalfNV* arg1) {
    _pre_call_callback("glMultiTexCoord2hvNV", (void*)glMultiTexCoord2hvNV, 2, arg0, arg1);
     glad_glMultiTexCoord2hvNV(arg0, arg1);
    _post_call_callback("glMultiTexCoord2hvNV", (void*)glMultiTexCoord2hvNV, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD2HVNVPROC glad_debug_glMultiTexCoord2hvNV = glad_debug_impl_glMultiTexCoord2hvNV;
PFNGLMULTITEXCOORD3HNVPROC glad_glMultiTexCoord3hNV;
void APIENTRY glad_debug_impl_glMultiTexCoord3hNV(GLenum arg0, GLhalfNV arg1, GLhalfNV arg2, GLhalfNV arg3) {
    _pre_call_callback("glMultiTexCoord3hNV", (void*)glMultiTexCoord3hNV, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexCoord3hNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexCoord3hNV", (void*)glMultiTexCoord3hNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXCOORD3HNVPROC glad_debug_glMultiTexCoord3hNV = glad_debug_impl_glMultiTexCoord3hNV;
PFNGLMULTITEXCOORD3HVNVPROC glad_glMultiTexCoord3hvNV;
void APIENTRY glad_debug_impl_glMultiTexCoord3hvNV(GLenum arg0, const GLhalfNV* arg1) {
    _pre_call_callback("glMultiTexCoord3hvNV", (void*)glMultiTexCoord3hvNV, 2, arg0, arg1);
     glad_glMultiTexCoord3hvNV(arg0, arg1);
    _post_call_callback("glMultiTexCoord3hvNV", (void*)glMultiTexCoord3hvNV, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD3HVNVPROC glad_debug_glMultiTexCoord3hvNV = glad_debug_impl_glMultiTexCoord3hvNV;
PFNGLMULTITEXCOORD4HNVPROC glad_glMultiTexCoord4hNV;
void APIENTRY glad_debug_impl_glMultiTexCoord4hNV(GLenum arg0, GLhalfNV arg1, GLhalfNV arg2, GLhalfNV arg3, GLhalfNV arg4) {
    _pre_call_callback("glMultiTexCoord4hNV", (void*)glMultiTexCoord4hNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiTexCoord4hNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiTexCoord4hNV", (void*)glMultiTexCoord4hNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTITEXCOORD4HNVPROC glad_debug_glMultiTexCoord4hNV = glad_debug_impl_glMultiTexCoord4hNV;
PFNGLMULTITEXCOORD4HVNVPROC glad_glMultiTexCoord4hvNV;
void APIENTRY glad_debug_impl_glMultiTexCoord4hvNV(GLenum arg0, const GLhalfNV* arg1) {
    _pre_call_callback("glMultiTexCoord4hvNV", (void*)glMultiTexCoord4hvNV, 2, arg0, arg1);
     glad_glMultiTexCoord4hvNV(arg0, arg1);
    _post_call_callback("glMultiTexCoord4hvNV", (void*)glMultiTexCoord4hvNV, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD4HVNVPROC glad_debug_glMultiTexCoord4hvNV = glad_debug_impl_glMultiTexCoord4hvNV;
PFNGLFOGCOORDHNVPROC glad_glFogCoordhNV;
void APIENTRY glad_debug_impl_glFogCoordhNV(GLhalfNV arg0) {
    _pre_call_callback("glFogCoordhNV", (void*)glFogCoordhNV, 1, arg0);
     glad_glFogCoordhNV(arg0);
    _post_call_callback("glFogCoordhNV", (void*)glFogCoordhNV, 1, arg0);

}
PFNGLFOGCOORDHNVPROC glad_debug_glFogCoordhNV = glad_debug_impl_glFogCoordhNV;
PFNGLFOGCOORDHVNVPROC glad_glFogCoordhvNV;
void APIENTRY glad_debug_impl_glFogCoordhvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glFogCoordhvNV", (void*)glFogCoordhvNV, 1, arg0);
     glad_glFogCoordhvNV(arg0);
    _post_call_callback("glFogCoordhvNV", (void*)glFogCoordhvNV, 1, arg0);

}
PFNGLFOGCOORDHVNVPROC glad_debug_glFogCoordhvNV = glad_debug_impl_glFogCoordhvNV;
PFNGLSECONDARYCOLOR3HNVPROC glad_glSecondaryColor3hNV;
void APIENTRY glad_debug_impl_glSecondaryColor3hNV(GLhalfNV arg0, GLhalfNV arg1, GLhalfNV arg2) {
    _pre_call_callback("glSecondaryColor3hNV", (void*)glSecondaryColor3hNV, 3, arg0, arg1, arg2);
     glad_glSecondaryColor3hNV(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColor3hNV", (void*)glSecondaryColor3hNV, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLOR3HNVPROC glad_debug_glSecondaryColor3hNV = glad_debug_impl_glSecondaryColor3hNV;
PFNGLSECONDARYCOLOR3HVNVPROC glad_glSecondaryColor3hvNV;
void APIENTRY glad_debug_impl_glSecondaryColor3hvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glSecondaryColor3hvNV", (void*)glSecondaryColor3hvNV, 1, arg0);
     glad_glSecondaryColor3hvNV(arg0);
    _post_call_callback("glSecondaryColor3hvNV", (void*)glSecondaryColor3hvNV, 1, arg0);

}
PFNGLSECONDARYCOLOR3HVNVPROC glad_debug_glSecondaryColor3hvNV = glad_debug_impl_glSecondaryColor3hvNV;
PFNGLVERTEXWEIGHTHNVPROC glad_glVertexWeighthNV;
void APIENTRY glad_debug_impl_glVertexWeighthNV(GLhalfNV arg0) {
    _pre_call_callback("glVertexWeighthNV", (void*)glVertexWeighthNV, 1, arg0);
     glad_glVertexWeighthNV(arg0);
    _post_call_callback("glVertexWeighthNV", (void*)glVertexWeighthNV, 1, arg0);

}
PFNGLVERTEXWEIGHTHNVPROC glad_debug_glVertexWeighthNV = glad_debug_impl_glVertexWeighthNV;
PFNGLVERTEXWEIGHTHVNVPROC glad_glVertexWeighthvNV;
void APIENTRY glad_debug_impl_glVertexWeighthvNV(const GLhalfNV* arg0) {
    _pre_call_callback("glVertexWeighthvNV", (void*)glVertexWeighthvNV, 1, arg0);
     glad_glVertexWeighthvNV(arg0);
    _post_call_callback("glVertexWeighthvNV", (void*)glVertexWeighthvNV, 1, arg0);

}
PFNGLVERTEXWEIGHTHVNVPROC glad_debug_glVertexWeighthvNV = glad_debug_impl_glVertexWeighthvNV;
PFNGLVERTEXATTRIB1HNVPROC glad_glVertexAttrib1hNV;
void APIENTRY glad_debug_impl_glVertexAttrib1hNV(GLuint arg0, GLhalfNV arg1) {
    _pre_call_callback("glVertexAttrib1hNV", (void*)glVertexAttrib1hNV, 2, arg0, arg1);
     glad_glVertexAttrib1hNV(arg0, arg1);
    _post_call_callback("glVertexAttrib1hNV", (void*)glVertexAttrib1hNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1HNVPROC glad_debug_glVertexAttrib1hNV = glad_debug_impl_glVertexAttrib1hNV;
PFNGLVERTEXATTRIB1HVNVPROC glad_glVertexAttrib1hvNV;
void APIENTRY glad_debug_impl_glVertexAttrib1hvNV(GLuint arg0, const GLhalfNV* arg1) {
    _pre_call_callback("glVertexAttrib1hvNV", (void*)glVertexAttrib1hvNV, 2, arg0, arg1);
     glad_glVertexAttrib1hvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib1hvNV", (void*)glVertexAttrib1hvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB1HVNVPROC glad_debug_glVertexAttrib1hvNV = glad_debug_impl_glVertexAttrib1hvNV;
PFNGLVERTEXATTRIB2HNVPROC glad_glVertexAttrib2hNV;
void APIENTRY glad_debug_impl_glVertexAttrib2hNV(GLuint arg0, GLhalfNV arg1, GLhalfNV arg2) {
    _pre_call_callback("glVertexAttrib2hNV", (void*)glVertexAttrib2hNV, 3, arg0, arg1, arg2);
     glad_glVertexAttrib2hNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttrib2hNV", (void*)glVertexAttrib2hNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIB2HNVPROC glad_debug_glVertexAttrib2hNV = glad_debug_impl_glVertexAttrib2hNV;
PFNGLVERTEXATTRIB2HVNVPROC glad_glVertexAttrib2hvNV;
void APIENTRY glad_debug_impl_glVertexAttrib2hvNV(GLuint arg0, const GLhalfNV* arg1) {
    _pre_call_callback("glVertexAttrib2hvNV", (void*)glVertexAttrib2hvNV, 2, arg0, arg1);
     glad_glVertexAttrib2hvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib2hvNV", (void*)glVertexAttrib2hvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB2HVNVPROC glad_debug_glVertexAttrib2hvNV = glad_debug_impl_glVertexAttrib2hvNV;
PFNGLVERTEXATTRIB3HNVPROC glad_glVertexAttrib3hNV;
void APIENTRY glad_debug_impl_glVertexAttrib3hNV(GLuint arg0, GLhalfNV arg1, GLhalfNV arg2, GLhalfNV arg3) {
    _pre_call_callback("glVertexAttrib3hNV", (void*)glVertexAttrib3hNV, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttrib3hNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttrib3hNV", (void*)glVertexAttrib3hNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIB3HNVPROC glad_debug_glVertexAttrib3hNV = glad_debug_impl_glVertexAttrib3hNV;
PFNGLVERTEXATTRIB3HVNVPROC glad_glVertexAttrib3hvNV;
void APIENTRY glad_debug_impl_glVertexAttrib3hvNV(GLuint arg0, const GLhalfNV* arg1) {
    _pre_call_callback("glVertexAttrib3hvNV", (void*)glVertexAttrib3hvNV, 2, arg0, arg1);
     glad_glVertexAttrib3hvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib3hvNV", (void*)glVertexAttrib3hvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB3HVNVPROC glad_debug_glVertexAttrib3hvNV = glad_debug_impl_glVertexAttrib3hvNV;
PFNGLVERTEXATTRIB4HNVPROC glad_glVertexAttrib4hNV;
void APIENTRY glad_debug_impl_glVertexAttrib4hNV(GLuint arg0, GLhalfNV arg1, GLhalfNV arg2, GLhalfNV arg3, GLhalfNV arg4) {
    _pre_call_callback("glVertexAttrib4hNV", (void*)glVertexAttrib4hNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttrib4hNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttrib4hNV", (void*)glVertexAttrib4hNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIB4HNVPROC glad_debug_glVertexAttrib4hNV = glad_debug_impl_glVertexAttrib4hNV;
PFNGLVERTEXATTRIB4HVNVPROC glad_glVertexAttrib4hvNV;
void APIENTRY glad_debug_impl_glVertexAttrib4hvNV(GLuint arg0, const GLhalfNV* arg1) {
    _pre_call_callback("glVertexAttrib4hvNV", (void*)glVertexAttrib4hvNV, 2, arg0, arg1);
     glad_glVertexAttrib4hvNV(arg0, arg1);
    _post_call_callback("glVertexAttrib4hvNV", (void*)glVertexAttrib4hvNV, 2, arg0, arg1);

}
PFNGLVERTEXATTRIB4HVNVPROC glad_debug_glVertexAttrib4hvNV = glad_debug_impl_glVertexAttrib4hvNV;
PFNGLVERTEXATTRIBS1HVNVPROC glad_glVertexAttribs1hvNV;
void APIENTRY glad_debug_impl_glVertexAttribs1hvNV(GLuint arg0, GLsizei arg1, const GLhalfNV* arg2) {
    _pre_call_callback("glVertexAttribs1hvNV", (void*)glVertexAttribs1hvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs1hvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs1hvNV", (void*)glVertexAttribs1hvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS1HVNVPROC glad_debug_glVertexAttribs1hvNV = glad_debug_impl_glVertexAttribs1hvNV;
PFNGLVERTEXATTRIBS2HVNVPROC glad_glVertexAttribs2hvNV;
void APIENTRY glad_debug_impl_glVertexAttribs2hvNV(GLuint arg0, GLsizei arg1, const GLhalfNV* arg2) {
    _pre_call_callback("glVertexAttribs2hvNV", (void*)glVertexAttribs2hvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs2hvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs2hvNV", (void*)glVertexAttribs2hvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS2HVNVPROC glad_debug_glVertexAttribs2hvNV = glad_debug_impl_glVertexAttribs2hvNV;
PFNGLVERTEXATTRIBS3HVNVPROC glad_glVertexAttribs3hvNV;
void APIENTRY glad_debug_impl_glVertexAttribs3hvNV(GLuint arg0, GLsizei arg1, const GLhalfNV* arg2) {
    _pre_call_callback("glVertexAttribs3hvNV", (void*)glVertexAttribs3hvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs3hvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs3hvNV", (void*)glVertexAttribs3hvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS3HVNVPROC glad_debug_glVertexAttribs3hvNV = glad_debug_impl_glVertexAttribs3hvNV;
PFNGLVERTEXATTRIBS4HVNVPROC glad_glVertexAttribs4hvNV;
void APIENTRY glad_debug_impl_glVertexAttribs4hvNV(GLuint arg0, GLsizei arg1, const GLhalfNV* arg2) {
    _pre_call_callback("glVertexAttribs4hvNV", (void*)glVertexAttribs4hvNV, 3, arg0, arg1, arg2);
     glad_glVertexAttribs4hvNV(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribs4hvNV", (void*)glVertexAttribs4hvNV, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBS4HVNVPROC glad_debug_glVertexAttribs4hvNV = glad_debug_impl_glVertexAttribs4hvNV;
PFNGLPRIMITIVEBOUNDINGBOXARBPROC glad_glPrimitiveBoundingBoxARB;
void APIENTRY glad_debug_impl_glPrimitiveBoundingBoxARB(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7) {
    _pre_call_callback("glPrimitiveBoundingBoxARB", (void*)glPrimitiveBoundingBoxARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glPrimitiveBoundingBoxARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glPrimitiveBoundingBoxARB", (void*)glPrimitiveBoundingBoxARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLPRIMITIVEBOUNDINGBOXARBPROC glad_debug_glPrimitiveBoundingBoxARB = glad_debug_impl_glPrimitiveBoundingBoxARB;
PFNGLPOLYGONOFFSETCLAMPEXTPROC glad_glPolygonOffsetClampEXT;
void APIENTRY glad_debug_impl_glPolygonOffsetClampEXT(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glPolygonOffsetClampEXT", (void*)glPolygonOffsetClampEXT, 3, arg0, arg1, arg2);
     glad_glPolygonOffsetClampEXT(arg0, arg1, arg2);
    _post_call_callback("glPolygonOffsetClampEXT", (void*)glPolygonOffsetClampEXT, 3, arg0, arg1, arg2);

}
PFNGLPOLYGONOFFSETCLAMPEXTPROC glad_debug_glPolygonOffsetClampEXT = glad_debug_impl_glPolygonOffsetClampEXT;
PFNGLLOCKARRAYSEXTPROC glad_glLockArraysEXT;
void APIENTRY glad_debug_impl_glLockArraysEXT(GLint arg0, GLsizei arg1) {
    _pre_call_callback("glLockArraysEXT", (void*)glLockArraysEXT, 2, arg0, arg1);
     glad_glLockArraysEXT(arg0, arg1);
    _post_call_callback("glLockArraysEXT", (void*)glLockArraysEXT, 2, arg0, arg1);

}
PFNGLLOCKARRAYSEXTPROC glad_debug_glLockArraysEXT = glad_debug_impl_glLockArraysEXT;
PFNGLUNLOCKARRAYSEXTPROC glad_glUnlockArraysEXT;
void APIENTRY glad_debug_impl_glUnlockArraysEXT() {
    _pre_call_callback("glUnlockArraysEXT", (void*)glUnlockArraysEXT, 0);
     glad_glUnlockArraysEXT();
    _post_call_callback("glUnlockArraysEXT", (void*)glUnlockArraysEXT, 0);

}
PFNGLUNLOCKARRAYSEXTPROC glad_debug_glUnlockArraysEXT = glad_debug_impl_glUnlockArraysEXT;
PFNGLDEPTHRANGEDNVPROC glad_glDepthRangedNV;
void APIENTRY glad_debug_impl_glDepthRangedNV(GLdouble arg0, GLdouble arg1) {
    _pre_call_callback("glDepthRangedNV", (void*)glDepthRangedNV, 2, arg0, arg1);
     glad_glDepthRangedNV(arg0, arg1);
    _post_call_callback("glDepthRangedNV", (void*)glDepthRangedNV, 2, arg0, arg1);

}
PFNGLDEPTHRANGEDNVPROC glad_debug_glDepthRangedNV = glad_debug_impl_glDepthRangedNV;
PFNGLCLEARDEPTHDNVPROC glad_glClearDepthdNV;
void APIENTRY glad_debug_impl_glClearDepthdNV(GLdouble arg0) {
    _pre_call_callback("glClearDepthdNV", (void*)glClearDepthdNV, 1, arg0);
     glad_glClearDepthdNV(arg0);
    _post_call_callback("glClearDepthdNV", (void*)glClearDepthdNV, 1, arg0);

}
PFNGLCLEARDEPTHDNVPROC glad_debug_glClearDepthdNV = glad_debug_impl_glClearDepthdNV;
PFNGLDEPTHBOUNDSDNVPROC glad_glDepthBoundsdNV;
void APIENTRY glad_debug_impl_glDepthBoundsdNV(GLdouble arg0, GLdouble arg1) {
    _pre_call_callback("glDepthBoundsdNV", (void*)glDepthBoundsdNV, 2, arg0, arg1);
     glad_glDepthBoundsdNV(arg0, arg1);
    _post_call_callback("glDepthBoundsdNV", (void*)glDepthBoundsdNV, 2, arg0, arg1);

}
PFNGLDEPTHBOUNDSDNVPROC glad_debug_glDepthBoundsdNV = glad_debug_impl_glDepthBoundsdNV;
PFNGLGENOCCLUSIONQUERIESNVPROC glad_glGenOcclusionQueriesNV;
void APIENTRY glad_debug_impl_glGenOcclusionQueriesNV(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenOcclusionQueriesNV", (void*)glGenOcclusionQueriesNV, 2, arg0, arg1);
     glad_glGenOcclusionQueriesNV(arg0, arg1);
    _post_call_callback("glGenOcclusionQueriesNV", (void*)glGenOcclusionQueriesNV, 2, arg0, arg1);

}
PFNGLGENOCCLUSIONQUERIESNVPROC glad_debug_glGenOcclusionQueriesNV = glad_debug_impl_glGenOcclusionQueriesNV;
PFNGLDELETEOCCLUSIONQUERIESNVPROC glad_glDeleteOcclusionQueriesNV;
void APIENTRY glad_debug_impl_glDeleteOcclusionQueriesNV(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteOcclusionQueriesNV", (void*)glDeleteOcclusionQueriesNV, 2, arg0, arg1);
     glad_glDeleteOcclusionQueriesNV(arg0, arg1);
    _post_call_callback("glDeleteOcclusionQueriesNV", (void*)glDeleteOcclusionQueriesNV, 2, arg0, arg1);

}
PFNGLDELETEOCCLUSIONQUERIESNVPROC glad_debug_glDeleteOcclusionQueriesNV = glad_debug_impl_glDeleteOcclusionQueriesNV;
PFNGLISOCCLUSIONQUERYNVPROC glad_glIsOcclusionQueryNV;
GLboolean APIENTRY glad_debug_impl_glIsOcclusionQueryNV(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsOcclusionQueryNV", (void*)glIsOcclusionQueryNV, 1, arg0);
    ret =  glad_glIsOcclusionQueryNV(arg0);
    _post_call_callback("glIsOcclusionQueryNV", (void*)glIsOcclusionQueryNV, 1, arg0);
    return ret;
}
PFNGLISOCCLUSIONQUERYNVPROC glad_debug_glIsOcclusionQueryNV = glad_debug_impl_glIsOcclusionQueryNV;
PFNGLBEGINOCCLUSIONQUERYNVPROC glad_glBeginOcclusionQueryNV;
void APIENTRY glad_debug_impl_glBeginOcclusionQueryNV(GLuint arg0) {
    _pre_call_callback("glBeginOcclusionQueryNV", (void*)glBeginOcclusionQueryNV, 1, arg0);
     glad_glBeginOcclusionQueryNV(arg0);
    _post_call_callback("glBeginOcclusionQueryNV", (void*)glBeginOcclusionQueryNV, 1, arg0);

}
PFNGLBEGINOCCLUSIONQUERYNVPROC glad_debug_glBeginOcclusionQueryNV = glad_debug_impl_glBeginOcclusionQueryNV;
PFNGLENDOCCLUSIONQUERYNVPROC glad_glEndOcclusionQueryNV;
void APIENTRY glad_debug_impl_glEndOcclusionQueryNV() {
    _pre_call_callback("glEndOcclusionQueryNV", (void*)glEndOcclusionQueryNV, 0);
     glad_glEndOcclusionQueryNV();
    _post_call_callback("glEndOcclusionQueryNV", (void*)glEndOcclusionQueryNV, 0);

}
PFNGLENDOCCLUSIONQUERYNVPROC glad_debug_glEndOcclusionQueryNV = glad_debug_impl_glEndOcclusionQueryNV;
PFNGLGETOCCLUSIONQUERYIVNVPROC glad_glGetOcclusionQueryivNV;
void APIENTRY glad_debug_impl_glGetOcclusionQueryivNV(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetOcclusionQueryivNV", (void*)glGetOcclusionQueryivNV, 3, arg0, arg1, arg2);
     glad_glGetOcclusionQueryivNV(arg0, arg1, arg2);
    _post_call_callback("glGetOcclusionQueryivNV", (void*)glGetOcclusionQueryivNV, 3, arg0, arg1, arg2);

}
PFNGLGETOCCLUSIONQUERYIVNVPROC glad_debug_glGetOcclusionQueryivNV = glad_debug_impl_glGetOcclusionQueryivNV;
PFNGLGETOCCLUSIONQUERYUIVNVPROC glad_glGetOcclusionQueryuivNV;
void APIENTRY glad_debug_impl_glGetOcclusionQueryuivNV(GLuint arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetOcclusionQueryuivNV", (void*)glGetOcclusionQueryuivNV, 3, arg0, arg1, arg2);
     glad_glGetOcclusionQueryuivNV(arg0, arg1, arg2);
    _post_call_callback("glGetOcclusionQueryuivNV", (void*)glGetOcclusionQueryuivNV, 3, arg0, arg1, arg2);

}
PFNGLGETOCCLUSIONQUERYUIVNVPROC glad_debug_glGetOcclusionQueryuivNV = glad_debug_impl_glGetOcclusionQueryuivNV;
PFNGLBUFFERPARAMETERIAPPLEPROC glad_glBufferParameteriAPPLE;
void APIENTRY glad_debug_impl_glBufferParameteriAPPLE(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glBufferParameteriAPPLE", (void*)glBufferParameteriAPPLE, 3, arg0, arg1, arg2);
     glad_glBufferParameteriAPPLE(arg0, arg1, arg2);
    _post_call_callback("glBufferParameteriAPPLE", (void*)glBufferParameteriAPPLE, 3, arg0, arg1, arg2);

}
PFNGLBUFFERPARAMETERIAPPLEPROC glad_debug_glBufferParameteriAPPLE = glad_debug_impl_glBufferParameteriAPPLE;
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glad_glFlushMappedBufferRangeAPPLE;
void APIENTRY glad_debug_impl_glFlushMappedBufferRangeAPPLE(GLenum arg0, GLintptr arg1, GLsizeiptr arg2) {
    _pre_call_callback("glFlushMappedBufferRangeAPPLE", (void*)glFlushMappedBufferRangeAPPLE, 3, arg0, arg1, arg2);
     glad_glFlushMappedBufferRangeAPPLE(arg0, arg1, arg2);
    _post_call_callback("glFlushMappedBufferRangeAPPLE", (void*)glFlushMappedBufferRangeAPPLE, 3, arg0, arg1, arg2);

}
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glad_debug_glFlushMappedBufferRangeAPPLE = glad_debug_impl_glFlushMappedBufferRangeAPPLE;
PFNGLCOLORTABLEPROC glad_glColorTable;
void APIENTRY glad_debug_impl_glColorTable(GLenum arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glColorTable", (void*)glColorTable, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glColorTable(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glColorTable", (void*)glColorTable, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOLORTABLEPROC glad_debug_glColorTable = glad_debug_impl_glColorTable;
PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv;
void APIENTRY glad_debug_impl_glColorTableParameterfv(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glColorTableParameterfv", (void*)glColorTableParameterfv, 3, arg0, arg1, arg2);
     glad_glColorTableParameterfv(arg0, arg1, arg2);
    _post_call_callback("glColorTableParameterfv", (void*)glColorTableParameterfv, 3, arg0, arg1, arg2);

}
PFNGLCOLORTABLEPARAMETERFVPROC glad_debug_glColorTableParameterfv = glad_debug_impl_glColorTableParameterfv;
PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv;
void APIENTRY glad_debug_impl_glColorTableParameteriv(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glColorTableParameteriv", (void*)glColorTableParameteriv, 3, arg0, arg1, arg2);
     glad_glColorTableParameteriv(arg0, arg1, arg2);
    _post_call_callback("glColorTableParameteriv", (void*)glColorTableParameteriv, 3, arg0, arg1, arg2);

}
PFNGLCOLORTABLEPARAMETERIVPROC glad_debug_glColorTableParameteriv = glad_debug_impl_glColorTableParameteriv;
PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable;
void APIENTRY glad_debug_impl_glCopyColorTable(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4) {
    _pre_call_callback("glCopyColorTable", (void*)glCopyColorTable, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glCopyColorTable(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glCopyColorTable", (void*)glCopyColorTable, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOPYCOLORTABLEPROC glad_debug_glCopyColorTable = glad_debug_impl_glCopyColorTable;
PFNGLGETCOLORTABLEPROC glad_glGetColorTable;
void APIENTRY glad_debug_impl_glGetColorTable(GLenum arg0, GLenum arg1, GLenum arg2, void* arg3) {
    _pre_call_callback("glGetColorTable", (void*)glGetColorTable, 4, arg0, arg1, arg2, arg3);
     glad_glGetColorTable(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetColorTable", (void*)glGetColorTable, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCOLORTABLEPROC glad_debug_glGetColorTable = glad_debug_impl_glGetColorTable;
PFNGLGETCOLORTABLEPARAMETERFVPROC glad_glGetColorTableParameterfv;
void APIENTRY glad_debug_impl_glGetColorTableParameterfv(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetColorTableParameterfv", (void*)glGetColorTableParameterfv, 3, arg0, arg1, arg2);
     glad_glGetColorTableParameterfv(arg0, arg1, arg2);
    _post_call_callback("glGetColorTableParameterfv", (void*)glGetColorTableParameterfv, 3, arg0, arg1, arg2);

}
PFNGLGETCOLORTABLEPARAMETERFVPROC glad_debug_glGetColorTableParameterfv = glad_debug_impl_glGetColorTableParameterfv;
PFNGLGETCOLORTABLEPARAMETERIVPROC glad_glGetColorTableParameteriv;
void APIENTRY glad_debug_impl_glGetColorTableParameteriv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetColorTableParameteriv", (void*)glGetColorTableParameteriv, 3, arg0, arg1, arg2);
     glad_glGetColorTableParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetColorTableParameteriv", (void*)glGetColorTableParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETCOLORTABLEPARAMETERIVPROC glad_debug_glGetColorTableParameteriv = glad_debug_impl_glGetColorTableParameteriv;
PFNGLCOLORSUBTABLEPROC glad_glColorSubTable;
void APIENTRY glad_debug_impl_glColorSubTable(GLenum arg0, GLsizei arg1, GLsizei arg2, GLenum arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glColorSubTable", (void*)glColorSubTable, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glColorSubTable(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glColorSubTable", (void*)glColorSubTable, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOLORSUBTABLEPROC glad_debug_glColorSubTable = glad_debug_impl_glColorSubTable;
PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable;
void APIENTRY glad_debug_impl_glCopyColorSubTable(GLenum arg0, GLsizei arg1, GLint arg2, GLint arg3, GLsizei arg4) {
    _pre_call_callback("glCopyColorSubTable", (void*)glCopyColorSubTable, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glCopyColorSubTable(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glCopyColorSubTable", (void*)glCopyColorSubTable, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOPYCOLORSUBTABLEPROC glad_debug_glCopyColorSubTable = glad_debug_impl_glCopyColorSubTable;
PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D;
void APIENTRY glad_debug_impl_glConvolutionFilter1D(GLenum arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glConvolutionFilter1D", (void*)glConvolutionFilter1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glConvolutionFilter1D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glConvolutionFilter1D", (void*)glConvolutionFilter1D, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCONVOLUTIONFILTER1DPROC glad_debug_glConvolutionFilter1D = glad_debug_impl_glConvolutionFilter1D;
PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D;
void APIENTRY glad_debug_impl_glConvolutionFilter2D(GLenum arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void* arg6) {
    _pre_call_callback("glConvolutionFilter2D", (void*)glConvolutionFilter2D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glConvolutionFilter2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glConvolutionFilter2D", (void*)glConvolutionFilter2D, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCONVOLUTIONFILTER2DPROC glad_debug_glConvolutionFilter2D = glad_debug_impl_glConvolutionFilter2D;
PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf;
void APIENTRY glad_debug_impl_glConvolutionParameterf(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glConvolutionParameterf", (void*)glConvolutionParameterf, 3, arg0, arg1, arg2);
     glad_glConvolutionParameterf(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameterf", (void*)glConvolutionParameterf, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERFPROC glad_debug_glConvolutionParameterf = glad_debug_impl_glConvolutionParameterf;
PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv;
void APIENTRY glad_debug_impl_glConvolutionParameterfv(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glConvolutionParameterfv", (void*)glConvolutionParameterfv, 3, arg0, arg1, arg2);
     glad_glConvolutionParameterfv(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameterfv", (void*)glConvolutionParameterfv, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERFVPROC glad_debug_glConvolutionParameterfv = glad_debug_impl_glConvolutionParameterfv;
PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri;
void APIENTRY glad_debug_impl_glConvolutionParameteri(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glConvolutionParameteri", (void*)glConvolutionParameteri, 3, arg0, arg1, arg2);
     glad_glConvolutionParameteri(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameteri", (void*)glConvolutionParameteri, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERIPROC glad_debug_glConvolutionParameteri = glad_debug_impl_glConvolutionParameteri;
PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv;
void APIENTRY glad_debug_impl_glConvolutionParameteriv(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glConvolutionParameteriv", (void*)glConvolutionParameteriv, 3, arg0, arg1, arg2);
     glad_glConvolutionParameteriv(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameteriv", (void*)glConvolutionParameteriv, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERIVPROC glad_debug_glConvolutionParameteriv = glad_debug_impl_glConvolutionParameteriv;
PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D;
void APIENTRY glad_debug_impl_glCopyConvolutionFilter1D(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4) {
    _pre_call_callback("glCopyConvolutionFilter1D", (void*)glCopyConvolutionFilter1D, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glCopyConvolutionFilter1D(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glCopyConvolutionFilter1D", (void*)glCopyConvolutionFilter1D, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_debug_glCopyConvolutionFilter1D = glad_debug_impl_glCopyConvolutionFilter1D;
PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D;
void APIENTRY glad_debug_impl_glCopyConvolutionFilter2D(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5) {
    _pre_call_callback("glCopyConvolutionFilter2D", (void*)glCopyConvolutionFilter2D, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glCopyConvolutionFilter2D(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glCopyConvolutionFilter2D", (void*)glCopyConvolutionFilter2D, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_debug_glCopyConvolutionFilter2D = glad_debug_impl_glCopyConvolutionFilter2D;
PFNGLGETCONVOLUTIONFILTERPROC glad_glGetConvolutionFilter;
void APIENTRY glad_debug_impl_glGetConvolutionFilter(GLenum arg0, GLenum arg1, GLenum arg2, void* arg3) {
    _pre_call_callback("glGetConvolutionFilter", (void*)glGetConvolutionFilter, 4, arg0, arg1, arg2, arg3);
     glad_glGetConvolutionFilter(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetConvolutionFilter", (void*)glGetConvolutionFilter, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCONVOLUTIONFILTERPROC glad_debug_glGetConvolutionFilter = glad_debug_impl_glGetConvolutionFilter;
PFNGLGETCONVOLUTIONPARAMETERFVPROC glad_glGetConvolutionParameterfv;
void APIENTRY glad_debug_impl_glGetConvolutionParameterfv(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetConvolutionParameterfv", (void*)glGetConvolutionParameterfv, 3, arg0, arg1, arg2);
     glad_glGetConvolutionParameterfv(arg0, arg1, arg2);
    _post_call_callback("glGetConvolutionParameterfv", (void*)glGetConvolutionParameterfv, 3, arg0, arg1, arg2);

}
PFNGLGETCONVOLUTIONPARAMETERFVPROC glad_debug_glGetConvolutionParameterfv = glad_debug_impl_glGetConvolutionParameterfv;
PFNGLGETCONVOLUTIONPARAMETERIVPROC glad_glGetConvolutionParameteriv;
void APIENTRY glad_debug_impl_glGetConvolutionParameteriv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetConvolutionParameteriv", (void*)glGetConvolutionParameteriv, 3, arg0, arg1, arg2);
     glad_glGetConvolutionParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetConvolutionParameteriv", (void*)glGetConvolutionParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETCONVOLUTIONPARAMETERIVPROC glad_debug_glGetConvolutionParameteriv = glad_debug_impl_glGetConvolutionParameteriv;
PFNGLGETSEPARABLEFILTERPROC glad_glGetSeparableFilter;
void APIENTRY glad_debug_impl_glGetSeparableFilter(GLenum arg0, GLenum arg1, GLenum arg2, void* arg3, void* arg4, void* arg5) {
    _pre_call_callback("glGetSeparableFilter", (void*)glGetSeparableFilter, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetSeparableFilter(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetSeparableFilter", (void*)glGetSeparableFilter, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETSEPARABLEFILTERPROC glad_debug_glGetSeparableFilter = glad_debug_impl_glGetSeparableFilter;
PFNGLSEPARABLEFILTER2DPROC glad_glSeparableFilter2D;
void APIENTRY glad_debug_impl_glSeparableFilter2D(GLenum arg0, GLenum arg1, GLsizei arg2, GLsizei arg3, GLenum arg4, GLenum arg5, const void* arg6, const void* arg7) {
    _pre_call_callback("glSeparableFilter2D", (void*)glSeparableFilter2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glSeparableFilter2D(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glSeparableFilter2D", (void*)glSeparableFilter2D, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLSEPARABLEFILTER2DPROC glad_debug_glSeparableFilter2D = glad_debug_impl_glSeparableFilter2D;
PFNGLGETHISTOGRAMPROC glad_glGetHistogram;
void APIENTRY glad_debug_impl_glGetHistogram(GLenum arg0, GLboolean arg1, GLenum arg2, GLenum arg3, void* arg4) {
    _pre_call_callback("glGetHistogram", (void*)glGetHistogram, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetHistogram(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetHistogram", (void*)glGetHistogram, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETHISTOGRAMPROC glad_debug_glGetHistogram = glad_debug_impl_glGetHistogram;
PFNGLGETHISTOGRAMPARAMETERFVPROC glad_glGetHistogramParameterfv;
void APIENTRY glad_debug_impl_glGetHistogramParameterfv(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetHistogramParameterfv", (void*)glGetHistogramParameterfv, 3, arg0, arg1, arg2);
     glad_glGetHistogramParameterfv(arg0, arg1, arg2);
    _post_call_callback("glGetHistogramParameterfv", (void*)glGetHistogramParameterfv, 3, arg0, arg1, arg2);

}
PFNGLGETHISTOGRAMPARAMETERFVPROC glad_debug_glGetHistogramParameterfv = glad_debug_impl_glGetHistogramParameterfv;
PFNGLGETHISTOGRAMPARAMETERIVPROC glad_glGetHistogramParameteriv;
void APIENTRY glad_debug_impl_glGetHistogramParameteriv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetHistogramParameteriv", (void*)glGetHistogramParameteriv, 3, arg0, arg1, arg2);
     glad_glGetHistogramParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetHistogramParameteriv", (void*)glGetHistogramParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETHISTOGRAMPARAMETERIVPROC glad_debug_glGetHistogramParameteriv = glad_debug_impl_glGetHistogramParameteriv;
PFNGLGETMINMAXPROC glad_glGetMinmax;
void APIENTRY glad_debug_impl_glGetMinmax(GLenum arg0, GLboolean arg1, GLenum arg2, GLenum arg3, void* arg4) {
    _pre_call_callback("glGetMinmax", (void*)glGetMinmax, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetMinmax(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetMinmax", (void*)glGetMinmax, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETMINMAXPROC glad_debug_glGetMinmax = glad_debug_impl_glGetMinmax;
PFNGLGETMINMAXPARAMETERFVPROC glad_glGetMinmaxParameterfv;
void APIENTRY glad_debug_impl_glGetMinmaxParameterfv(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetMinmaxParameterfv", (void*)glGetMinmaxParameterfv, 3, arg0, arg1, arg2);
     glad_glGetMinmaxParameterfv(arg0, arg1, arg2);
    _post_call_callback("glGetMinmaxParameterfv", (void*)glGetMinmaxParameterfv, 3, arg0, arg1, arg2);

}
PFNGLGETMINMAXPARAMETERFVPROC glad_debug_glGetMinmaxParameterfv = glad_debug_impl_glGetMinmaxParameterfv;
PFNGLGETMINMAXPARAMETERIVPROC glad_glGetMinmaxParameteriv;
void APIENTRY glad_debug_impl_glGetMinmaxParameteriv(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetMinmaxParameteriv", (void*)glGetMinmaxParameteriv, 3, arg0, arg1, arg2);
     glad_glGetMinmaxParameteriv(arg0, arg1, arg2);
    _post_call_callback("glGetMinmaxParameteriv", (void*)glGetMinmaxParameteriv, 3, arg0, arg1, arg2);

}
PFNGLGETMINMAXPARAMETERIVPROC glad_debug_glGetMinmaxParameteriv = glad_debug_impl_glGetMinmaxParameteriv;
PFNGLHISTOGRAMPROC glad_glHistogram;
void APIENTRY glad_debug_impl_glHistogram(GLenum arg0, GLsizei arg1, GLenum arg2, GLboolean arg3) {
    _pre_call_callback("glHistogram", (void*)glHistogram, 4, arg0, arg1, arg2, arg3);
     glad_glHistogram(arg0, arg1, arg2, arg3);
    _post_call_callback("glHistogram", (void*)glHistogram, 4, arg0, arg1, arg2, arg3);

}
PFNGLHISTOGRAMPROC glad_debug_glHistogram = glad_debug_impl_glHistogram;
PFNGLMINMAXPROC glad_glMinmax;
void APIENTRY glad_debug_impl_glMinmax(GLenum arg0, GLenum arg1, GLboolean arg2) {
    _pre_call_callback("glMinmax", (void*)glMinmax, 3, arg0, arg1, arg2);
     glad_glMinmax(arg0, arg1, arg2);
    _post_call_callback("glMinmax", (void*)glMinmax, 3, arg0, arg1, arg2);

}
PFNGLMINMAXPROC glad_debug_glMinmax = glad_debug_impl_glMinmax;
PFNGLRESETHISTOGRAMPROC glad_glResetHistogram;
void APIENTRY glad_debug_impl_glResetHistogram(GLenum arg0) {
    _pre_call_callback("glResetHistogram", (void*)glResetHistogram, 1, arg0);
     glad_glResetHistogram(arg0);
    _post_call_callback("glResetHistogram", (void*)glResetHistogram, 1, arg0);

}
PFNGLRESETHISTOGRAMPROC glad_debug_glResetHistogram = glad_debug_impl_glResetHistogram;
PFNGLRESETMINMAXPROC glad_glResetMinmax;
void APIENTRY glad_debug_impl_glResetMinmax(GLenum arg0) {
    _pre_call_callback("glResetMinmax", (void*)glResetMinmax, 1, arg0);
     glad_glResetMinmax(arg0);
    _post_call_callback("glResetMinmax", (void*)glResetMinmax, 1, arg0);

}
PFNGLRESETMINMAXPROC glad_debug_glResetMinmax = glad_debug_impl_glResetMinmax;
PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB;
void APIENTRY glad_debug_impl_glBlendEquationiARB(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glBlendEquationiARB", (void*)glBlendEquationiARB, 2, arg0, arg1);
     glad_glBlendEquationiARB(arg0, arg1);
    _post_call_callback("glBlendEquationiARB", (void*)glBlendEquationiARB, 2, arg0, arg1);

}
PFNGLBLENDEQUATIONIARBPROC glad_debug_glBlendEquationiARB = glad_debug_impl_glBlendEquationiARB;
PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB;
void APIENTRY glad_debug_impl_glBlendEquationSeparateiARB(GLuint arg0, GLenum arg1, GLenum arg2) {
    _pre_call_callback("glBlendEquationSeparateiARB", (void*)glBlendEquationSeparateiARB, 3, arg0, arg1, arg2);
     glad_glBlendEquationSeparateiARB(arg0, arg1, arg2);
    _post_call_callback("glBlendEquationSeparateiARB", (void*)glBlendEquationSeparateiARB, 3, arg0, arg1, arg2);

}
PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_debug_glBlendEquationSeparateiARB = glad_debug_impl_glBlendEquationSeparateiARB;
PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB;
void APIENTRY glad_debug_impl_glBlendFunciARB(GLuint arg0, GLenum arg1, GLenum arg2) {
    _pre_call_callback("glBlendFunciARB", (void*)glBlendFunciARB, 3, arg0, arg1, arg2);
     glad_glBlendFunciARB(arg0, arg1, arg2);
    _post_call_callback("glBlendFunciARB", (void*)glBlendFunciARB, 3, arg0, arg1, arg2);

}
PFNGLBLENDFUNCIARBPROC glad_debug_glBlendFunciARB = glad_debug_impl_glBlendFunciARB;
PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB;
void APIENTRY glad_debug_impl_glBlendFuncSeparateiARB(GLuint arg0, GLenum arg1, GLenum arg2, GLenum arg3, GLenum arg4) {
    _pre_call_callback("glBlendFuncSeparateiARB", (void*)glBlendFuncSeparateiARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glBlendFuncSeparateiARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glBlendFuncSeparateiARB", (void*)glBlendFuncSeparateiARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLBLENDFUNCSEPARATEIARBPROC glad_debug_glBlendFuncSeparateiARB = glad_debug_impl_glBlendFuncSeparateiARB;
PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData;
void APIENTRY glad_debug_impl_glClearBufferData(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3, const void* arg4) {
    _pre_call_callback("glClearBufferData", (void*)glClearBufferData, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glClearBufferData(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glClearBufferData", (void*)glClearBufferData, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCLEARBUFFERDATAPROC glad_debug_glClearBufferData = glad_debug_impl_glClearBufferData;
PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData;
void APIENTRY glad_debug_impl_glClearBufferSubData(GLenum arg0, GLenum arg1, GLintptr arg2, GLsizeiptr arg3, GLenum arg4, GLenum arg5, const void* arg6) {
    _pre_call_callback("glClearBufferSubData", (void*)glClearBufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glClearBufferSubData(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glClearBufferSubData", (void*)glClearBufferSubData, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCLEARBUFFERSUBDATAPROC glad_debug_glClearBufferSubData = glad_debug_impl_glClearBufferSubData;
PFNGLSAMPLECOVERAGEARBPROC glad_glSampleCoverageARB;
void APIENTRY glad_debug_impl_glSampleCoverageARB(GLfloat arg0, GLboolean arg1) {
    _pre_call_callback("glSampleCoverageARB", (void*)glSampleCoverageARB, 2, arg0, arg1);
     glad_glSampleCoverageARB(arg0, arg1);
    _post_call_callback("glSampleCoverageARB", (void*)glSampleCoverageARB, 2, arg0, arg1);

}
PFNGLSAMPLECOVERAGEARBPROC glad_debug_glSampleCoverageARB = glad_debug_impl_glSampleCoverageARB;
PFNGLLABELOBJECTEXTPROC glad_glLabelObjectEXT;
void APIENTRY glad_debug_impl_glLabelObjectEXT(GLenum arg0, GLuint arg1, GLsizei arg2, const GLchar* arg3) {
    _pre_call_callback("glLabelObjectEXT", (void*)glLabelObjectEXT, 4, arg0, arg1, arg2, arg3);
     glad_glLabelObjectEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glLabelObjectEXT", (void*)glLabelObjectEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLLABELOBJECTEXTPROC glad_debug_glLabelObjectEXT = glad_debug_impl_glLabelObjectEXT;
PFNGLGETOBJECTLABELEXTPROC glad_glGetObjectLabelEXT;
void APIENTRY glad_debug_impl_glGetObjectLabelEXT(GLenum arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLchar* arg4) {
    _pre_call_callback("glGetObjectLabelEXT", (void*)glGetObjectLabelEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetObjectLabelEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetObjectLabelEXT", (void*)glGetObjectLabelEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETOBJECTLABELEXTPROC glad_debug_glGetObjectLabelEXT = glad_debug_impl_glGetObjectLabelEXT;
PFNGLMINSAMPLESHADINGARBPROC glad_glMinSampleShadingARB;
void APIENTRY glad_debug_impl_glMinSampleShadingARB(GLfloat arg0) {
    _pre_call_callback("glMinSampleShadingARB", (void*)glMinSampleShadingARB, 1, arg0);
     glad_glMinSampleShadingARB(arg0);
    _post_call_callback("glMinSampleShadingARB", (void*)glMinSampleShadingARB, 1, arg0);

}
PFNGLMINSAMPLESHADINGARBPROC glad_debug_glMinSampleShadingARB = glad_debug_impl_glMinSampleShadingARB;
PFNGLGETINTERNALFORMATSAMPLEIVNVPROC glad_glGetInternalformatSampleivNV;
void APIENTRY glad_debug_impl_glGetInternalformatSampleivNV(GLenum arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLsizei arg4, GLint* arg5) {
    _pre_call_callback("glGetInternalformatSampleivNV", (void*)glGetInternalformatSampleivNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetInternalformatSampleivNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetInternalformatSampleivNV", (void*)glGetInternalformatSampleivNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETINTERNALFORMATSAMPLEIVNVPROC glad_debug_glGetInternalformatSampleivNV = glad_debug_impl_glGetInternalformatSampleivNV;
PFNGLSYNCTEXTUREINTELPROC glad_glSyncTextureINTEL;
void APIENTRY glad_debug_impl_glSyncTextureINTEL(GLuint arg0) {
    _pre_call_callback("glSyncTextureINTEL", (void*)glSyncTextureINTEL, 1, arg0);
     glad_glSyncTextureINTEL(arg0);
    _post_call_callback("glSyncTextureINTEL", (void*)glSyncTextureINTEL, 1, arg0);

}
PFNGLSYNCTEXTUREINTELPROC glad_debug_glSyncTextureINTEL = glad_debug_impl_glSyncTextureINTEL;
PFNGLUNMAPTEXTURE2DINTELPROC glad_glUnmapTexture2DINTEL;
void APIENTRY glad_debug_impl_glUnmapTexture2DINTEL(GLuint arg0, GLint arg1) {
    _pre_call_callback("glUnmapTexture2DINTEL", (void*)glUnmapTexture2DINTEL, 2, arg0, arg1);
     glad_glUnmapTexture2DINTEL(arg0, arg1);
    _post_call_callback("glUnmapTexture2DINTEL", (void*)glUnmapTexture2DINTEL, 2, arg0, arg1);

}
PFNGLUNMAPTEXTURE2DINTELPROC glad_debug_glUnmapTexture2DINTEL = glad_debug_impl_glUnmapTexture2DINTEL;
PFNGLMAPTEXTURE2DINTELPROC glad_glMapTexture2DINTEL;
void* APIENTRY glad_debug_impl_glMapTexture2DINTEL(GLuint arg0, GLint arg1, GLbitfield arg2, GLint* arg3, GLenum* arg4) {
    void* ret;
    _pre_call_callback("glMapTexture2DINTEL", (void*)glMapTexture2DINTEL, 5, arg0, arg1, arg2, arg3, arg4);
    ret =  glad_glMapTexture2DINTEL(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMapTexture2DINTEL", (void*)glMapTexture2DINTEL, 5, arg0, arg1, arg2, arg3, arg4);
    return ret;
}
PFNGLMAPTEXTURE2DINTELPROC glad_debug_glMapTexture2DINTEL = glad_debug_impl_glMapTexture2DINTEL;
PFNGLCONSERVATIVERASTERPARAMETERINVPROC glad_glConservativeRasterParameteriNV;
void APIENTRY glad_debug_impl_glConservativeRasterParameteriNV(GLenum arg0, GLint arg1) {
    _pre_call_callback("glConservativeRasterParameteriNV", (void*)glConservativeRasterParameteriNV, 2, arg0, arg1);
     glad_glConservativeRasterParameteriNV(arg0, arg1);
    _post_call_callback("glConservativeRasterParameteriNV", (void*)glConservativeRasterParameteriNV, 2, arg0, arg1);

}
PFNGLCONSERVATIVERASTERPARAMETERINVPROC glad_debug_glConservativeRasterParameteriNV = glad_debug_impl_glConservativeRasterParameteriNV;
PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute;
void APIENTRY glad_debug_impl_glDispatchCompute(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glDispatchCompute", (void*)glDispatchCompute, 3, arg0, arg1, arg2);
     glad_glDispatchCompute(arg0, arg1, arg2);
    _post_call_callback("glDispatchCompute", (void*)glDispatchCompute, 3, arg0, arg1, arg2);

}
PFNGLDISPATCHCOMPUTEPROC glad_debug_glDispatchCompute = glad_debug_impl_glDispatchCompute;
PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect;
void APIENTRY glad_debug_impl_glDispatchComputeIndirect(GLintptr arg0) {
    _pre_call_callback("glDispatchComputeIndirect", (void*)glDispatchComputeIndirect, 1, arg0);
     glad_glDispatchComputeIndirect(arg0);
    _post_call_callback("glDispatchComputeIndirect", (void*)glDispatchComputeIndirect, 1, arg0);

}
PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_debug_glDispatchComputeIndirect = glad_debug_impl_glDispatchComputeIndirect;
PFNGLCOLORPOINTERLISTIBMPROC glad_glColorPointerListIBM;
void APIENTRY glad_debug_impl_glColorPointerListIBM(GLint arg0, GLenum arg1, GLint arg2, const void** arg3, GLint arg4) {
    _pre_call_callback("glColorPointerListIBM", (void*)glColorPointerListIBM, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glColorPointerListIBM(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glColorPointerListIBM", (void*)glColorPointerListIBM, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOLORPOINTERLISTIBMPROC glad_debug_glColorPointerListIBM = glad_debug_impl_glColorPointerListIBM;
PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glad_glSecondaryColorPointerListIBM;
void APIENTRY glad_debug_impl_glSecondaryColorPointerListIBM(GLint arg0, GLenum arg1, GLint arg2, const void** arg3, GLint arg4) {
    _pre_call_callback("glSecondaryColorPointerListIBM", (void*)glSecondaryColorPointerListIBM, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glSecondaryColorPointerListIBM(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glSecondaryColorPointerListIBM", (void*)glSecondaryColorPointerListIBM, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glad_debug_glSecondaryColorPointerListIBM = glad_debug_impl_glSecondaryColorPointerListIBM;
PFNGLEDGEFLAGPOINTERLISTIBMPROC glad_glEdgeFlagPointerListIBM;
void APIENTRY glad_debug_impl_glEdgeFlagPointerListIBM(GLint arg0, const GLboolean** arg1, GLint arg2) {
    _pre_call_callback("glEdgeFlagPointerListIBM", (void*)glEdgeFlagPointerListIBM, 3, arg0, arg1, arg2);
     glad_glEdgeFlagPointerListIBM(arg0, arg1, arg2);
    _post_call_callback("glEdgeFlagPointerListIBM", (void*)glEdgeFlagPointerListIBM, 3, arg0, arg1, arg2);

}
PFNGLEDGEFLAGPOINTERLISTIBMPROC glad_debug_glEdgeFlagPointerListIBM = glad_debug_impl_glEdgeFlagPointerListIBM;
PFNGLFOGCOORDPOINTERLISTIBMPROC glad_glFogCoordPointerListIBM;
void APIENTRY glad_debug_impl_glFogCoordPointerListIBM(GLenum arg0, GLint arg1, const void** arg2, GLint arg3) {
    _pre_call_callback("glFogCoordPointerListIBM", (void*)glFogCoordPointerListIBM, 4, arg0, arg1, arg2, arg3);
     glad_glFogCoordPointerListIBM(arg0, arg1, arg2, arg3);
    _post_call_callback("glFogCoordPointerListIBM", (void*)glFogCoordPointerListIBM, 4, arg0, arg1, arg2, arg3);

}
PFNGLFOGCOORDPOINTERLISTIBMPROC glad_debug_glFogCoordPointerListIBM = glad_debug_impl_glFogCoordPointerListIBM;
PFNGLINDEXPOINTERLISTIBMPROC glad_glIndexPointerListIBM;
void APIENTRY glad_debug_impl_glIndexPointerListIBM(GLenum arg0, GLint arg1, const void** arg2, GLint arg3) {
    _pre_call_callback("glIndexPointerListIBM", (void*)glIndexPointerListIBM, 4, arg0, arg1, arg2, arg3);
     glad_glIndexPointerListIBM(arg0, arg1, arg2, arg3);
    _post_call_callback("glIndexPointerListIBM", (void*)glIndexPointerListIBM, 4, arg0, arg1, arg2, arg3);

}
PFNGLINDEXPOINTERLISTIBMPROC glad_debug_glIndexPointerListIBM = glad_debug_impl_glIndexPointerListIBM;
PFNGLNORMALPOINTERLISTIBMPROC glad_glNormalPointerListIBM;
void APIENTRY glad_debug_impl_glNormalPointerListIBM(GLenum arg0, GLint arg1, const void** arg2, GLint arg3) {
    _pre_call_callback("glNormalPointerListIBM", (void*)glNormalPointerListIBM, 4, arg0, arg1, arg2, arg3);
     glad_glNormalPointerListIBM(arg0, arg1, arg2, arg3);
    _post_call_callback("glNormalPointerListIBM", (void*)glNormalPointerListIBM, 4, arg0, arg1, arg2, arg3);

}
PFNGLNORMALPOINTERLISTIBMPROC glad_debug_glNormalPointerListIBM = glad_debug_impl_glNormalPointerListIBM;
PFNGLTEXCOORDPOINTERLISTIBMPROC glad_glTexCoordPointerListIBM;
void APIENTRY glad_debug_impl_glTexCoordPointerListIBM(GLint arg0, GLenum arg1, GLint arg2, const void** arg3, GLint arg4) {
    _pre_call_callback("glTexCoordPointerListIBM", (void*)glTexCoordPointerListIBM, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTexCoordPointerListIBM(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTexCoordPointerListIBM", (void*)glTexCoordPointerListIBM, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTEXCOORDPOINTERLISTIBMPROC glad_debug_glTexCoordPointerListIBM = glad_debug_impl_glTexCoordPointerListIBM;
PFNGLVERTEXPOINTERLISTIBMPROC glad_glVertexPointerListIBM;
void APIENTRY glad_debug_impl_glVertexPointerListIBM(GLint arg0, GLenum arg1, GLint arg2, const void** arg3, GLint arg4) {
    _pre_call_callback("glVertexPointerListIBM", (void*)glVertexPointerListIBM, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexPointerListIBM(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexPointerListIBM", (void*)glVertexPointerListIBM, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXPOINTERLISTIBMPROC glad_debug_glVertexPointerListIBM = glad_debug_impl_glVertexPointerListIBM;
PFNGLCLAMPCOLORARBPROC glad_glClampColorARB;
void APIENTRY glad_debug_impl_glClampColorARB(GLenum arg0, GLenum arg1) {
    _pre_call_callback("glClampColorARB", (void*)glClampColorARB, 2, arg0, arg1);
     glad_glClampColorARB(arg0, arg1);
    _post_call_callback("glClampColorARB", (void*)glClampColorARB, 2, arg0, arg1);

}
PFNGLCLAMPCOLORARBPROC glad_debug_glClampColorARB = glad_debug_impl_glClampColorARB;
PFNGLGETTEXTUREHANDLEARBPROC glad_glGetTextureHandleARB;
GLuint64 APIENTRY glad_debug_impl_glGetTextureHandleARB(GLuint arg0) {
    GLuint64 ret;
    _pre_call_callback("glGetTextureHandleARB", (void*)glGetTextureHandleARB, 1, arg0);
    ret =  glad_glGetTextureHandleARB(arg0);
    _post_call_callback("glGetTextureHandleARB", (void*)glGetTextureHandleARB, 1, arg0);
    return ret;
}
PFNGLGETTEXTUREHANDLEARBPROC glad_debug_glGetTextureHandleARB = glad_debug_impl_glGetTextureHandleARB;
PFNGLGETTEXTURESAMPLERHANDLEARBPROC glad_glGetTextureSamplerHandleARB;
GLuint64 APIENTRY glad_debug_impl_glGetTextureSamplerHandleARB(GLuint arg0, GLuint arg1) {
    GLuint64 ret;
    _pre_call_callback("glGetTextureSamplerHandleARB", (void*)glGetTextureSamplerHandleARB, 2, arg0, arg1);
    ret =  glad_glGetTextureSamplerHandleARB(arg0, arg1);
    _post_call_callback("glGetTextureSamplerHandleARB", (void*)glGetTextureSamplerHandleARB, 2, arg0, arg1);
    return ret;
}
PFNGLGETTEXTURESAMPLERHANDLEARBPROC glad_debug_glGetTextureSamplerHandleARB = glad_debug_impl_glGetTextureSamplerHandleARB;
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glad_glMakeTextureHandleResidentARB;
void APIENTRY glad_debug_impl_glMakeTextureHandleResidentARB(GLuint64 arg0) {
    _pre_call_callback("glMakeTextureHandleResidentARB", (void*)glMakeTextureHandleResidentARB, 1, arg0);
     glad_glMakeTextureHandleResidentARB(arg0);
    _post_call_callback("glMakeTextureHandleResidentARB", (void*)glMakeTextureHandleResidentARB, 1, arg0);

}
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC glad_debug_glMakeTextureHandleResidentARB = glad_debug_impl_glMakeTextureHandleResidentARB;
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glad_glMakeTextureHandleNonResidentARB;
void APIENTRY glad_debug_impl_glMakeTextureHandleNonResidentARB(GLuint64 arg0) {
    _pre_call_callback("glMakeTextureHandleNonResidentARB", (void*)glMakeTextureHandleNonResidentARB, 1, arg0);
     glad_glMakeTextureHandleNonResidentARB(arg0);
    _post_call_callback("glMakeTextureHandleNonResidentARB", (void*)glMakeTextureHandleNonResidentARB, 1, arg0);

}
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC glad_debug_glMakeTextureHandleNonResidentARB = glad_debug_impl_glMakeTextureHandleNonResidentARB;
PFNGLGETIMAGEHANDLEARBPROC glad_glGetImageHandleARB;
GLuint64 APIENTRY glad_debug_impl_glGetImageHandleARB(GLuint arg0, GLint arg1, GLboolean arg2, GLint arg3, GLenum arg4) {
    GLuint64 ret;
    _pre_call_callback("glGetImageHandleARB", (void*)glGetImageHandleARB, 5, arg0, arg1, arg2, arg3, arg4);
    ret =  glad_glGetImageHandleARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetImageHandleARB", (void*)glGetImageHandleARB, 5, arg0, arg1, arg2, arg3, arg4);
    return ret;
}
PFNGLGETIMAGEHANDLEARBPROC glad_debug_glGetImageHandleARB = glad_debug_impl_glGetImageHandleARB;
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glad_glMakeImageHandleResidentARB;
void APIENTRY glad_debug_impl_glMakeImageHandleResidentARB(GLuint64 arg0, GLenum arg1) {
    _pre_call_callback("glMakeImageHandleResidentARB", (void*)glMakeImageHandleResidentARB, 2, arg0, arg1);
     glad_glMakeImageHandleResidentARB(arg0, arg1);
    _post_call_callback("glMakeImageHandleResidentARB", (void*)glMakeImageHandleResidentARB, 2, arg0, arg1);

}
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC glad_debug_glMakeImageHandleResidentARB = glad_debug_impl_glMakeImageHandleResidentARB;
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glad_glMakeImageHandleNonResidentARB;
void APIENTRY glad_debug_impl_glMakeImageHandleNonResidentARB(GLuint64 arg0) {
    _pre_call_callback("glMakeImageHandleNonResidentARB", (void*)glMakeImageHandleNonResidentARB, 1, arg0);
     glad_glMakeImageHandleNonResidentARB(arg0);
    _post_call_callback("glMakeImageHandleNonResidentARB", (void*)glMakeImageHandleNonResidentARB, 1, arg0);

}
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC glad_debug_glMakeImageHandleNonResidentARB = glad_debug_impl_glMakeImageHandleNonResidentARB;
PFNGLUNIFORMHANDLEUI64ARBPROC glad_glUniformHandleui64ARB;
void APIENTRY glad_debug_impl_glUniformHandleui64ARB(GLint arg0, GLuint64 arg1) {
    _pre_call_callback("glUniformHandleui64ARB", (void*)glUniformHandleui64ARB, 2, arg0, arg1);
     glad_glUniformHandleui64ARB(arg0, arg1);
    _post_call_callback("glUniformHandleui64ARB", (void*)glUniformHandleui64ARB, 2, arg0, arg1);

}
PFNGLUNIFORMHANDLEUI64ARBPROC glad_debug_glUniformHandleui64ARB = glad_debug_impl_glUniformHandleui64ARB;
PFNGLUNIFORMHANDLEUI64VARBPROC glad_glUniformHandleui64vARB;
void APIENTRY glad_debug_impl_glUniformHandleui64vARB(GLint arg0, GLsizei arg1, const GLuint64* arg2) {
    _pre_call_callback("glUniformHandleui64vARB", (void*)glUniformHandleui64vARB, 3, arg0, arg1, arg2);
     glad_glUniformHandleui64vARB(arg0, arg1, arg2);
    _post_call_callback("glUniformHandleui64vARB", (void*)glUniformHandleui64vARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORMHANDLEUI64VARBPROC glad_debug_glUniformHandleui64vARB = glad_debug_impl_glUniformHandleui64vARB;
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glad_glProgramUniformHandleui64ARB;
void APIENTRY glad_debug_impl_glProgramUniformHandleui64ARB(GLuint arg0, GLint arg1, GLuint64 arg2) {
    _pre_call_callback("glProgramUniformHandleui64ARB", (void*)glProgramUniformHandleui64ARB, 3, arg0, arg1, arg2);
     glad_glProgramUniformHandleui64ARB(arg0, arg1, arg2);
    _post_call_callback("glProgramUniformHandleui64ARB", (void*)glProgramUniformHandleui64ARB, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC glad_debug_glProgramUniformHandleui64ARB = glad_debug_impl_glProgramUniformHandleui64ARB;
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glad_glProgramUniformHandleui64vARB;
void APIENTRY glad_debug_impl_glProgramUniformHandleui64vARB(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64* arg3) {
    _pre_call_callback("glProgramUniformHandleui64vARB", (void*)glProgramUniformHandleui64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniformHandleui64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniformHandleui64vARB", (void*)glProgramUniformHandleui64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC glad_debug_glProgramUniformHandleui64vARB = glad_debug_impl_glProgramUniformHandleui64vARB;
PFNGLISTEXTUREHANDLERESIDENTARBPROC glad_glIsTextureHandleResidentARB;
GLboolean APIENTRY glad_debug_impl_glIsTextureHandleResidentARB(GLuint64 arg0) {
    GLboolean ret;
    _pre_call_callback("glIsTextureHandleResidentARB", (void*)glIsTextureHandleResidentARB, 1, arg0);
    ret =  glad_glIsTextureHandleResidentARB(arg0);
    _post_call_callback("glIsTextureHandleResidentARB", (void*)glIsTextureHandleResidentARB, 1, arg0);
    return ret;
}
PFNGLISTEXTUREHANDLERESIDENTARBPROC glad_debug_glIsTextureHandleResidentARB = glad_debug_impl_glIsTextureHandleResidentARB;
PFNGLISIMAGEHANDLERESIDENTARBPROC glad_glIsImageHandleResidentARB;
GLboolean APIENTRY glad_debug_impl_glIsImageHandleResidentARB(GLuint64 arg0) {
    GLboolean ret;
    _pre_call_callback("glIsImageHandleResidentARB", (void*)glIsImageHandleResidentARB, 1, arg0);
    ret =  glad_glIsImageHandleResidentARB(arg0);
    _post_call_callback("glIsImageHandleResidentARB", (void*)glIsImageHandleResidentARB, 1, arg0);
    return ret;
}
PFNGLISIMAGEHANDLERESIDENTARBPROC glad_debug_glIsImageHandleResidentARB = glad_debug_impl_glIsImageHandleResidentARB;
PFNGLVERTEXATTRIBL1UI64ARBPROC glad_glVertexAttribL1ui64ARB;
void APIENTRY glad_debug_impl_glVertexAttribL1ui64ARB(GLuint arg0, GLuint64EXT arg1) {
    _pre_call_callback("glVertexAttribL1ui64ARB", (void*)glVertexAttribL1ui64ARB, 2, arg0, arg1);
     glad_glVertexAttribL1ui64ARB(arg0, arg1);
    _post_call_callback("glVertexAttribL1ui64ARB", (void*)glVertexAttribL1ui64ARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1UI64ARBPROC glad_debug_glVertexAttribL1ui64ARB = glad_debug_impl_glVertexAttribL1ui64ARB;
PFNGLVERTEXATTRIBL1UI64VARBPROC glad_glVertexAttribL1ui64vARB;
void APIENTRY glad_debug_impl_glVertexAttribL1ui64vARB(GLuint arg0, const GLuint64EXT* arg1) {
    _pre_call_callback("glVertexAttribL1ui64vARB", (void*)glVertexAttribL1ui64vARB, 2, arg0, arg1);
     glad_glVertexAttribL1ui64vARB(arg0, arg1);
    _post_call_callback("glVertexAttribL1ui64vARB", (void*)glVertexAttribL1ui64vARB, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1UI64VARBPROC glad_debug_glVertexAttribL1ui64vARB = glad_debug_impl_glVertexAttribL1ui64vARB;
PFNGLGETVERTEXATTRIBLUI64VARBPROC glad_glGetVertexAttribLui64vARB;
void APIENTRY glad_debug_impl_glGetVertexAttribLui64vARB(GLuint arg0, GLenum arg1, GLuint64EXT* arg2) {
    _pre_call_callback("glGetVertexAttribLui64vARB", (void*)glGetVertexAttribLui64vARB, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribLui64vARB(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribLui64vARB", (void*)glGetVertexAttribLui64vARB, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBLUI64VARBPROC glad_debug_glGetVertexAttribLui64vARB = glad_debug_impl_glGetVertexAttribLui64vARB;
PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB;
void APIENTRY glad_debug_impl_glWindowPos2dARB(GLdouble arg0, GLdouble arg1) {
    _pre_call_callback("glWindowPos2dARB", (void*)glWindowPos2dARB, 2, arg0, arg1);
     glad_glWindowPos2dARB(arg0, arg1);
    _post_call_callback("glWindowPos2dARB", (void*)glWindowPos2dARB, 2, arg0, arg1);

}
PFNGLWINDOWPOS2DARBPROC glad_debug_glWindowPos2dARB = glad_debug_impl_glWindowPos2dARB;
PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB;
void APIENTRY glad_debug_impl_glWindowPos2dvARB(const GLdouble* arg0) {
    _pre_call_callback("glWindowPos2dvARB", (void*)glWindowPos2dvARB, 1, arg0);
     glad_glWindowPos2dvARB(arg0);
    _post_call_callback("glWindowPos2dvARB", (void*)glWindowPos2dvARB, 1, arg0);

}
PFNGLWINDOWPOS2DVARBPROC glad_debug_glWindowPos2dvARB = glad_debug_impl_glWindowPos2dvARB;
PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB;
void APIENTRY glad_debug_impl_glWindowPos2fARB(GLfloat arg0, GLfloat arg1) {
    _pre_call_callback("glWindowPos2fARB", (void*)glWindowPos2fARB, 2, arg0, arg1);
     glad_glWindowPos2fARB(arg0, arg1);
    _post_call_callback("glWindowPos2fARB", (void*)glWindowPos2fARB, 2, arg0, arg1);

}
PFNGLWINDOWPOS2FARBPROC glad_debug_glWindowPos2fARB = glad_debug_impl_glWindowPos2fARB;
PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB;
void APIENTRY glad_debug_impl_glWindowPos2fvARB(const GLfloat* arg0) {
    _pre_call_callback("glWindowPos2fvARB", (void*)glWindowPos2fvARB, 1, arg0);
     glad_glWindowPos2fvARB(arg0);
    _post_call_callback("glWindowPos2fvARB", (void*)glWindowPos2fvARB, 1, arg0);

}
PFNGLWINDOWPOS2FVARBPROC glad_debug_glWindowPos2fvARB = glad_debug_impl_glWindowPos2fvARB;
PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB;
void APIENTRY glad_debug_impl_glWindowPos2iARB(GLint arg0, GLint arg1) {
    _pre_call_callback("glWindowPos2iARB", (void*)glWindowPos2iARB, 2, arg0, arg1);
     glad_glWindowPos2iARB(arg0, arg1);
    _post_call_callback("glWindowPos2iARB", (void*)glWindowPos2iARB, 2, arg0, arg1);

}
PFNGLWINDOWPOS2IARBPROC glad_debug_glWindowPos2iARB = glad_debug_impl_glWindowPos2iARB;
PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB;
void APIENTRY glad_debug_impl_glWindowPos2ivARB(const GLint* arg0) {
    _pre_call_callback("glWindowPos2ivARB", (void*)glWindowPos2ivARB, 1, arg0);
     glad_glWindowPos2ivARB(arg0);
    _post_call_callback("glWindowPos2ivARB", (void*)glWindowPos2ivARB, 1, arg0);

}
PFNGLWINDOWPOS2IVARBPROC glad_debug_glWindowPos2ivARB = glad_debug_impl_glWindowPos2ivARB;
PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB;
void APIENTRY glad_debug_impl_glWindowPos2sARB(GLshort arg0, GLshort arg1) {
    _pre_call_callback("glWindowPos2sARB", (void*)glWindowPos2sARB, 2, arg0, arg1);
     glad_glWindowPos2sARB(arg0, arg1);
    _post_call_callback("glWindowPos2sARB", (void*)glWindowPos2sARB, 2, arg0, arg1);

}
PFNGLWINDOWPOS2SARBPROC glad_debug_glWindowPos2sARB = glad_debug_impl_glWindowPos2sARB;
PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB;
void APIENTRY glad_debug_impl_glWindowPos2svARB(const GLshort* arg0) {
    _pre_call_callback("glWindowPos2svARB", (void*)glWindowPos2svARB, 1, arg0);
     glad_glWindowPos2svARB(arg0);
    _post_call_callback("glWindowPos2svARB", (void*)glWindowPos2svARB, 1, arg0);

}
PFNGLWINDOWPOS2SVARBPROC glad_debug_glWindowPos2svARB = glad_debug_impl_glWindowPos2svARB;
PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB;
void APIENTRY glad_debug_impl_glWindowPos3dARB(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glWindowPos3dARB", (void*)glWindowPos3dARB, 3, arg0, arg1, arg2);
     glad_glWindowPos3dARB(arg0, arg1, arg2);
    _post_call_callback("glWindowPos3dARB", (void*)glWindowPos3dARB, 3, arg0, arg1, arg2);

}
PFNGLWINDOWPOS3DARBPROC glad_debug_glWindowPos3dARB = glad_debug_impl_glWindowPos3dARB;
PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB;
void APIENTRY glad_debug_impl_glWindowPos3dvARB(const GLdouble* arg0) {
    _pre_call_callback("glWindowPos3dvARB", (void*)glWindowPos3dvARB, 1, arg0);
     glad_glWindowPos3dvARB(arg0);
    _post_call_callback("glWindowPos3dvARB", (void*)glWindowPos3dvARB, 1, arg0);

}
PFNGLWINDOWPOS3DVARBPROC glad_debug_glWindowPos3dvARB = glad_debug_impl_glWindowPos3dvARB;
PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB;
void APIENTRY glad_debug_impl_glWindowPos3fARB(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glWindowPos3fARB", (void*)glWindowPos3fARB, 3, arg0, arg1, arg2);
     glad_glWindowPos3fARB(arg0, arg1, arg2);
    _post_call_callback("glWindowPos3fARB", (void*)glWindowPos3fARB, 3, arg0, arg1, arg2);

}
PFNGLWINDOWPOS3FARBPROC glad_debug_glWindowPos3fARB = glad_debug_impl_glWindowPos3fARB;
PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB;
void APIENTRY glad_debug_impl_glWindowPos3fvARB(const GLfloat* arg0) {
    _pre_call_callback("glWindowPos3fvARB", (void*)glWindowPos3fvARB, 1, arg0);
     glad_glWindowPos3fvARB(arg0);
    _post_call_callback("glWindowPos3fvARB", (void*)glWindowPos3fvARB, 1, arg0);

}
PFNGLWINDOWPOS3FVARBPROC glad_debug_glWindowPos3fvARB = glad_debug_impl_glWindowPos3fvARB;
PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB;
void APIENTRY glad_debug_impl_glWindowPos3iARB(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glWindowPos3iARB", (void*)glWindowPos3iARB, 3, arg0, arg1, arg2);
     glad_glWindowPos3iARB(arg0, arg1, arg2);
    _post_call_callback("glWindowPos3iARB", (void*)glWindowPos3iARB, 3, arg0, arg1, arg2);

}
PFNGLWINDOWPOS3IARBPROC glad_debug_glWindowPos3iARB = glad_debug_impl_glWindowPos3iARB;
PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB;
void APIENTRY glad_debug_impl_glWindowPos3ivARB(const GLint* arg0) {
    _pre_call_callback("glWindowPos3ivARB", (void*)glWindowPos3ivARB, 1, arg0);
     glad_glWindowPos3ivARB(arg0);
    _post_call_callback("glWindowPos3ivARB", (void*)glWindowPos3ivARB, 1, arg0);

}
PFNGLWINDOWPOS3IVARBPROC glad_debug_glWindowPos3ivARB = glad_debug_impl_glWindowPos3ivARB;
PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB;
void APIENTRY glad_debug_impl_glWindowPos3sARB(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glWindowPos3sARB", (void*)glWindowPos3sARB, 3, arg0, arg1, arg2);
     glad_glWindowPos3sARB(arg0, arg1, arg2);
    _post_call_callback("glWindowPos3sARB", (void*)glWindowPos3sARB, 3, arg0, arg1, arg2);

}
PFNGLWINDOWPOS3SARBPROC glad_debug_glWindowPos3sARB = glad_debug_impl_glWindowPos3sARB;
PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB;
void APIENTRY glad_debug_impl_glWindowPos3svARB(const GLshort* arg0) {
    _pre_call_callback("glWindowPos3svARB", (void*)glWindowPos3svARB, 1, arg0);
     glad_glWindowPos3svARB(arg0);
    _post_call_callback("glWindowPos3svARB", (void*)glWindowPos3svARB, 1, arg0);

}
PFNGLWINDOWPOS3SVARBPROC glad_debug_glWindowPos3svARB = glad_debug_impl_glWindowPos3svARB;
PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ;
void APIENTRY glad_debug_impl_glGetInternalformativ(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, GLint* arg4) {
    _pre_call_callback("glGetInternalformativ", (void*)glGetInternalformativ, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetInternalformativ(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetInternalformativ", (void*)glGetInternalformativ, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETINTERNALFORMATIVPROC glad_debug_glGetInternalformativ = glad_debug_impl_glGetInternalformativ;
PFNGLBINDIMAGETEXTUREEXTPROC glad_glBindImageTextureEXT;
void APIENTRY glad_debug_impl_glBindImageTextureEXT(GLuint arg0, GLuint arg1, GLint arg2, GLboolean arg3, GLint arg4, GLenum arg5, GLint arg6) {
    _pre_call_callback("glBindImageTextureEXT", (void*)glBindImageTextureEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glBindImageTextureEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glBindImageTextureEXT", (void*)glBindImageTextureEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLBINDIMAGETEXTUREEXTPROC glad_debug_glBindImageTextureEXT = glad_debug_impl_glBindImageTextureEXT;
PFNGLMEMORYBARRIEREXTPROC glad_glMemoryBarrierEXT;
void APIENTRY glad_debug_impl_glMemoryBarrierEXT(GLbitfield arg0) {
    _pre_call_callback("glMemoryBarrierEXT", (void*)glMemoryBarrierEXT, 1, arg0);
     glad_glMemoryBarrierEXT(arg0);
    _post_call_callback("glMemoryBarrierEXT", (void*)glMemoryBarrierEXT, 1, arg0);

}
PFNGLMEMORYBARRIEREXTPROC glad_debug_glMemoryBarrierEXT = glad_debug_impl_glMemoryBarrierEXT;
PFNGLCOPYTEXIMAGE1DEXTPROC glad_glCopyTexImage1DEXT;
void APIENTRY glad_debug_impl_glCopyTexImage1DEXT(GLenum arg0, GLint arg1, GLenum arg2, GLint arg3, GLint arg4, GLsizei arg5, GLint arg6) {
    _pre_call_callback("glCopyTexImage1DEXT", (void*)glCopyTexImage1DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCopyTexImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCopyTexImage1DEXT", (void*)glCopyTexImage1DEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOPYTEXIMAGE1DEXTPROC glad_debug_glCopyTexImage1DEXT = glad_debug_impl_glCopyTexImage1DEXT;
PFNGLCOPYTEXIMAGE2DEXTPROC glad_glCopyTexImage2DEXT;
void APIENTRY glad_debug_impl_glCopyTexImage2DEXT(GLenum arg0, GLint arg1, GLenum arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLint arg7) {
    _pre_call_callback("glCopyTexImage2DEXT", (void*)glCopyTexImage2DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCopyTexImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCopyTexImage2DEXT", (void*)glCopyTexImage2DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOPYTEXIMAGE2DEXTPROC glad_debug_glCopyTexImage2DEXT = glad_debug_impl_glCopyTexImage2DEXT;
PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_glCopyTexSubImage1DEXT;
void APIENTRY glad_debug_impl_glCopyTexSubImage1DEXT(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5) {
    _pre_call_callback("glCopyTexSubImage1DEXT", (void*)glCopyTexSubImage1DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glCopyTexSubImage1DEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glCopyTexSubImage1DEXT", (void*)glCopyTexSubImage1DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_debug_glCopyTexSubImage1DEXT = glad_debug_impl_glCopyTexSubImage1DEXT;
PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_glCopyTexSubImage2DEXT;
void APIENTRY glad_debug_impl_glCopyTexSubImage2DEXT(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7) {
    _pre_call_callback("glCopyTexSubImage2DEXT", (void*)glCopyTexSubImage2DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCopyTexSubImage2DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCopyTexSubImage2DEXT", (void*)glCopyTexSubImage2DEXT, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_debug_glCopyTexSubImage2DEXT = glad_debug_impl_glCopyTexSubImage2DEXT;
PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_glCopyTexSubImage3DEXT;
void APIENTRY glad_debug_impl_glCopyTexSubImage3DEXT(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLint arg6, GLsizei arg7, GLsizei arg8) {
    _pre_call_callback("glCopyTexSubImage3DEXT", (void*)glCopyTexSubImage3DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCopyTexSubImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCopyTexSubImage3DEXT", (void*)glCopyTexSubImage3DEXT, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_debug_glCopyTexSubImage3DEXT = glad_debug_impl_glCopyTexSubImage3DEXT;
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glad_glCombinerStageParameterfvNV;
void APIENTRY glad_debug_impl_glCombinerStageParameterfvNV(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glCombinerStageParameterfvNV", (void*)glCombinerStageParameterfvNV, 3, arg0, arg1, arg2);
     glad_glCombinerStageParameterfvNV(arg0, arg1, arg2);
    _post_call_callback("glCombinerStageParameterfvNV", (void*)glCombinerStageParameterfvNV, 3, arg0, arg1, arg2);

}
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glad_debug_glCombinerStageParameterfvNV = glad_debug_impl_glCombinerStageParameterfvNV;
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glad_glGetCombinerStageParameterfvNV;
void APIENTRY glad_debug_impl_glGetCombinerStageParameterfvNV(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetCombinerStageParameterfvNV", (void*)glGetCombinerStageParameterfvNV, 3, arg0, arg1, arg2);
     glad_glGetCombinerStageParameterfvNV(arg0, arg1, arg2);
    _post_call_callback("glGetCombinerStageParameterfvNV", (void*)glGetCombinerStageParameterfvNV, 3, arg0, arg1, arg2);

}
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glad_debug_glGetCombinerStageParameterfvNV = glad_debug_impl_glGetCombinerStageParameterfvNV;
PFNGLDRAWTEXTURENVPROC glad_glDrawTextureNV;
void APIENTRY glad_debug_impl_glDrawTextureNV(GLuint arg0, GLuint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7, GLfloat arg8, GLfloat arg9, GLfloat arg10) {
    _pre_call_callback("glDrawTextureNV", (void*)glDrawTextureNV, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glDrawTextureNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glDrawTextureNV", (void*)glDrawTextureNV, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLDRAWTEXTURENVPROC glad_debug_glDrawTextureNV = glad_debug_impl_glDrawTextureNV;
PFNGLDRAWARRAYSINSTANCEDEXTPROC glad_glDrawArraysInstancedEXT;
void APIENTRY glad_debug_impl_glDrawArraysInstancedEXT(GLenum arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glDrawArraysInstancedEXT", (void*)glDrawArraysInstancedEXT, 4, arg0, arg1, arg2, arg3);
     glad_glDrawArraysInstancedEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glDrawArraysInstancedEXT", (void*)glDrawArraysInstancedEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLDRAWARRAYSINSTANCEDEXTPROC glad_debug_glDrawArraysInstancedEXT = glad_debug_impl_glDrawArraysInstancedEXT;
PFNGLDRAWELEMENTSINSTANCEDEXTPROC glad_glDrawElementsInstancedEXT;
void APIENTRY glad_debug_impl_glDrawElementsInstancedEXT(GLenum arg0, GLsizei arg1, GLenum arg2, const void* arg3, GLsizei arg4) {
    _pre_call_callback("glDrawElementsInstancedEXT", (void*)glDrawElementsInstancedEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDrawElementsInstancedEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDrawElementsInstancedEXT", (void*)glDrawElementsInstancedEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDRAWELEMENTSINSTANCEDEXTPROC glad_debug_glDrawElementsInstancedEXT = glad_debug_impl_glDrawElementsInstancedEXT;
PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
void APIENTRY glad_debug_impl_glViewportArrayv(GLuint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glViewportArrayv", (void*)glViewportArrayv, 3, arg0, arg1, arg2);
     glad_glViewportArrayv(arg0, arg1, arg2);
    _post_call_callback("glViewportArrayv", (void*)glViewportArrayv, 3, arg0, arg1, arg2);

}
PFNGLVIEWPORTARRAYVPROC glad_debug_glViewportArrayv = glad_debug_impl_glViewportArrayv;
PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
void APIENTRY glad_debug_impl_glViewportIndexedf(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glViewportIndexedf", (void*)glViewportIndexedf, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glViewportIndexedf(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glViewportIndexedf", (void*)glViewportIndexedf, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVIEWPORTINDEXEDFPROC glad_debug_glViewportIndexedf = glad_debug_impl_glViewportIndexedf;
PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
void APIENTRY glad_debug_impl_glViewportIndexedfv(GLuint arg0, const GLfloat* arg1) {
    _pre_call_callback("glViewportIndexedfv", (void*)glViewportIndexedfv, 2, arg0, arg1);
     glad_glViewportIndexedfv(arg0, arg1);
    _post_call_callback("glViewportIndexedfv", (void*)glViewportIndexedfv, 2, arg0, arg1);

}
PFNGLVIEWPORTINDEXEDFVPROC glad_debug_glViewportIndexedfv = glad_debug_impl_glViewportIndexedfv;
PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
void APIENTRY glad_debug_impl_glScissorArrayv(GLuint arg0, GLsizei arg1, const GLint* arg2) {
    _pre_call_callback("glScissorArrayv", (void*)glScissorArrayv, 3, arg0, arg1, arg2);
     glad_glScissorArrayv(arg0, arg1, arg2);
    _post_call_callback("glScissorArrayv", (void*)glScissorArrayv, 3, arg0, arg1, arg2);

}
PFNGLSCISSORARRAYVPROC glad_debug_glScissorArrayv = glad_debug_impl_glScissorArrayv;
PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
void APIENTRY glad_debug_impl_glScissorIndexed(GLuint arg0, GLint arg1, GLint arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glScissorIndexed", (void*)glScissorIndexed, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glScissorIndexed(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glScissorIndexed", (void*)glScissorIndexed, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLSCISSORINDEXEDPROC glad_debug_glScissorIndexed = glad_debug_impl_glScissorIndexed;
PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
void APIENTRY glad_debug_impl_glScissorIndexedv(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glScissorIndexedv", (void*)glScissorIndexedv, 2, arg0, arg1);
     glad_glScissorIndexedv(arg0, arg1);
    _post_call_callback("glScissorIndexedv", (void*)glScissorIndexedv, 2, arg0, arg1);

}
PFNGLSCISSORINDEXEDVPROC glad_debug_glScissorIndexedv = glad_debug_impl_glScissorIndexedv;
PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
void APIENTRY glad_debug_impl_glDepthRangeArrayv(GLuint arg0, GLsizei arg1, const GLdouble* arg2) {
    _pre_call_callback("glDepthRangeArrayv", (void*)glDepthRangeArrayv, 3, arg0, arg1, arg2);
     glad_glDepthRangeArrayv(arg0, arg1, arg2);
    _post_call_callback("glDepthRangeArrayv", (void*)glDepthRangeArrayv, 3, arg0, arg1, arg2);

}
PFNGLDEPTHRANGEARRAYVPROC glad_debug_glDepthRangeArrayv = glad_debug_impl_glDepthRangeArrayv;
PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
void APIENTRY glad_debug_impl_glDepthRangeIndexed(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glDepthRangeIndexed", (void*)glDepthRangeIndexed, 3, arg0, arg1, arg2);
     glad_glDepthRangeIndexed(arg0, arg1, arg2);
    _post_call_callback("glDepthRangeIndexed", (void*)glDepthRangeIndexed, 3, arg0, arg1, arg2);

}
PFNGLDEPTHRANGEINDEXEDPROC glad_debug_glDepthRangeIndexed = glad_debug_impl_glDepthRangeIndexed;
PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
void APIENTRY glad_debug_impl_glGetFloati_v(GLenum arg0, GLuint arg1, GLfloat* arg2) {
    _pre_call_callback("glGetFloati_v", (void*)glGetFloati_v, 3, arg0, arg1, arg2);
     glad_glGetFloati_v(arg0, arg1, arg2);
    _post_call_callback("glGetFloati_v", (void*)glGetFloati_v, 3, arg0, arg1, arg2);

}
PFNGLGETFLOATI_VPROC glad_debug_glGetFloati_v = glad_debug_impl_glGetFloati_v;
PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
void APIENTRY glad_debug_impl_glGetDoublei_v(GLenum arg0, GLuint arg1, GLdouble* arg2) {
    _pre_call_callback("glGetDoublei_v", (void*)glGetDoublei_v, 3, arg0, arg1, arg2);
     glad_glGetDoublei_v(arg0, arg1, arg2);
    _post_call_callback("glGetDoublei_v", (void*)glGetDoublei_v, 3, arg0, arg1, arg2);

}
PFNGLGETDOUBLEI_VPROC glad_debug_glGetDoublei_v = glad_debug_impl_glGetDoublei_v;
PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
void APIENTRY glad_debug_impl_glUseProgramStages(GLuint arg0, GLbitfield arg1, GLuint arg2) {
    _pre_call_callback("glUseProgramStages", (void*)glUseProgramStages, 3, arg0, arg1, arg2);
     glad_glUseProgramStages(arg0, arg1, arg2);
    _post_call_callback("glUseProgramStages", (void*)glUseProgramStages, 3, arg0, arg1, arg2);

}
PFNGLUSEPROGRAMSTAGESPROC glad_debug_glUseProgramStages = glad_debug_impl_glUseProgramStages;
PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
void APIENTRY glad_debug_impl_glActiveShaderProgram(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glActiveShaderProgram", (void*)glActiveShaderProgram, 2, arg0, arg1);
     glad_glActiveShaderProgram(arg0, arg1);
    _post_call_callback("glActiveShaderProgram", (void*)glActiveShaderProgram, 2, arg0, arg1);

}
PFNGLACTIVESHADERPROGRAMPROC glad_debug_glActiveShaderProgram = glad_debug_impl_glActiveShaderProgram;
PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
GLuint APIENTRY glad_debug_impl_glCreateShaderProgramv(GLenum arg0, GLsizei arg1, const GLchar** arg2) {
    GLuint ret;
    _pre_call_callback("glCreateShaderProgramv", (void*)glCreateShaderProgramv, 3, arg0, arg1, arg2);
    ret =  glad_glCreateShaderProgramv(arg0, arg1, arg2);
    _post_call_callback("glCreateShaderProgramv", (void*)glCreateShaderProgramv, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLCREATESHADERPROGRAMVPROC glad_debug_glCreateShaderProgramv = glad_debug_impl_glCreateShaderProgramv;
PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
void APIENTRY glad_debug_impl_glBindProgramPipeline(GLuint arg0) {
    _pre_call_callback("glBindProgramPipeline", (void*)glBindProgramPipeline, 1, arg0);
     glad_glBindProgramPipeline(arg0);
    _post_call_callback("glBindProgramPipeline", (void*)glBindProgramPipeline, 1, arg0);

}
PFNGLBINDPROGRAMPIPELINEPROC glad_debug_glBindProgramPipeline = glad_debug_impl_glBindProgramPipeline;
PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
void APIENTRY glad_debug_impl_glDeleteProgramPipelines(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteProgramPipelines", (void*)glDeleteProgramPipelines, 2, arg0, arg1);
     glad_glDeleteProgramPipelines(arg0, arg1);
    _post_call_callback("glDeleteProgramPipelines", (void*)glDeleteProgramPipelines, 2, arg0, arg1);

}
PFNGLDELETEPROGRAMPIPELINESPROC glad_debug_glDeleteProgramPipelines = glad_debug_impl_glDeleteProgramPipelines;
PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
void APIENTRY glad_debug_impl_glGenProgramPipelines(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenProgramPipelines", (void*)glGenProgramPipelines, 2, arg0, arg1);
     glad_glGenProgramPipelines(arg0, arg1);
    _post_call_callback("glGenProgramPipelines", (void*)glGenProgramPipelines, 2, arg0, arg1);

}
PFNGLGENPROGRAMPIPELINESPROC glad_debug_glGenProgramPipelines = glad_debug_impl_glGenProgramPipelines;
PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
GLboolean APIENTRY glad_debug_impl_glIsProgramPipeline(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsProgramPipeline", (void*)glIsProgramPipeline, 1, arg0);
    ret =  glad_glIsProgramPipeline(arg0);
    _post_call_callback("glIsProgramPipeline", (void*)glIsProgramPipeline, 1, arg0);
    return ret;
}
PFNGLISPROGRAMPIPELINEPROC glad_debug_glIsProgramPipeline = glad_debug_impl_glIsProgramPipeline;
PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
void APIENTRY glad_debug_impl_glGetProgramPipelineiv(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetProgramPipelineiv", (void*)glGetProgramPipelineiv, 3, arg0, arg1, arg2);
     glad_glGetProgramPipelineiv(arg0, arg1, arg2);
    _post_call_callback("glGetProgramPipelineiv", (void*)glGetProgramPipelineiv, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMPIPELINEIVPROC glad_debug_glGetProgramPipelineiv = glad_debug_impl_glGetProgramPipelineiv;
PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
void APIENTRY glad_debug_impl_glProgramUniform1i(GLuint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glProgramUniform1i", (void*)glProgramUniform1i, 3, arg0, arg1, arg2);
     glad_glProgramUniform1i(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1i", (void*)glProgramUniform1i, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1IPROC glad_debug_glProgramUniform1i = glad_debug_impl_glProgramUniform1i;
PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
void APIENTRY glad_debug_impl_glProgramUniform1iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramUniform1iv", (void*)glProgramUniform1iv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1iv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1iv", (void*)glProgramUniform1iv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1IVPROC glad_debug_glProgramUniform1iv = glad_debug_impl_glProgramUniform1iv;
PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
void APIENTRY glad_debug_impl_glProgramUniform1f(GLuint arg0, GLint arg1, GLfloat arg2) {
    _pre_call_callback("glProgramUniform1f", (void*)glProgramUniform1f, 3, arg0, arg1, arg2);
     glad_glProgramUniform1f(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1f", (void*)glProgramUniform1f, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1FPROC glad_debug_glProgramUniform1f = glad_debug_impl_glProgramUniform1f;
PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
void APIENTRY glad_debug_impl_glProgramUniform1fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramUniform1fv", (void*)glProgramUniform1fv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1fv", (void*)glProgramUniform1fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1FVPROC glad_debug_glProgramUniform1fv = glad_debug_impl_glProgramUniform1fv;
PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
void APIENTRY glad_debug_impl_glProgramUniform1d(GLuint arg0, GLint arg1, GLdouble arg2) {
    _pre_call_callback("glProgramUniform1d", (void*)glProgramUniform1d, 3, arg0, arg1, arg2);
     glad_glProgramUniform1d(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1d", (void*)glProgramUniform1d, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1DPROC glad_debug_glProgramUniform1d = glad_debug_impl_glProgramUniform1d;
PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
void APIENTRY glad_debug_impl_glProgramUniform1dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramUniform1dv", (void*)glProgramUniform1dv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1dv", (void*)glProgramUniform1dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1DVPROC glad_debug_glProgramUniform1dv = glad_debug_impl_glProgramUniform1dv;
PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
void APIENTRY glad_debug_impl_glProgramUniform1ui(GLuint arg0, GLint arg1, GLuint arg2) {
    _pre_call_callback("glProgramUniform1ui", (void*)glProgramUniform1ui, 3, arg0, arg1, arg2);
     glad_glProgramUniform1ui(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1ui", (void*)glProgramUniform1ui, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1UIPROC glad_debug_glProgramUniform1ui = glad_debug_impl_glProgramUniform1ui;
PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
void APIENTRY glad_debug_impl_glProgramUniform1uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramUniform1uiv", (void*)glProgramUniform1uiv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1uiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1uiv", (void*)glProgramUniform1uiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1UIVPROC glad_debug_glProgramUniform1uiv = glad_debug_impl_glProgramUniform1uiv;
PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
void APIENTRY glad_debug_impl_glProgramUniform2i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glProgramUniform2i", (void*)glProgramUniform2i, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2i(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2i", (void*)glProgramUniform2i, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2IPROC glad_debug_glProgramUniform2i = glad_debug_impl_glProgramUniform2i;
PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
void APIENTRY glad_debug_impl_glProgramUniform2iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramUniform2iv", (void*)glProgramUniform2iv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2iv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2iv", (void*)glProgramUniform2iv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2IVPROC glad_debug_glProgramUniform2iv = glad_debug_impl_glProgramUniform2iv;
PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
void APIENTRY glad_debug_impl_glProgramUniform2f(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glProgramUniform2f", (void*)glProgramUniform2f, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2f(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2f", (void*)glProgramUniform2f, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2FPROC glad_debug_glProgramUniform2f = glad_debug_impl_glProgramUniform2f;
PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
void APIENTRY glad_debug_impl_glProgramUniform2fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramUniform2fv", (void*)glProgramUniform2fv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2fv", (void*)glProgramUniform2fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2FVPROC glad_debug_glProgramUniform2fv = glad_debug_impl_glProgramUniform2fv;
PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
void APIENTRY glad_debug_impl_glProgramUniform2d(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glProgramUniform2d", (void*)glProgramUniform2d, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2d(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2d", (void*)glProgramUniform2d, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2DPROC glad_debug_glProgramUniform2d = glad_debug_impl_glProgramUniform2d;
PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
void APIENTRY glad_debug_impl_glProgramUniform2dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramUniform2dv", (void*)glProgramUniform2dv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2dv", (void*)glProgramUniform2dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2DVPROC glad_debug_glProgramUniform2dv = glad_debug_impl_glProgramUniform2dv;
PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
void APIENTRY glad_debug_impl_glProgramUniform2ui(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_callback("glProgramUniform2ui", (void*)glProgramUniform2ui, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2ui(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2ui", (void*)glProgramUniform2ui, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2UIPROC glad_debug_glProgramUniform2ui = glad_debug_impl_glProgramUniform2ui;
PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
void APIENTRY glad_debug_impl_glProgramUniform2uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramUniform2uiv", (void*)glProgramUniform2uiv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2uiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2uiv", (void*)glProgramUniform2uiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2UIVPROC glad_debug_glProgramUniform2uiv = glad_debug_impl_glProgramUniform2uiv;
PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
void APIENTRY glad_debug_impl_glProgramUniform3i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glProgramUniform3i", (void*)glProgramUniform3i, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3i(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3i", (void*)glProgramUniform3i, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3IPROC glad_debug_glProgramUniform3i = glad_debug_impl_glProgramUniform3i;
PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
void APIENTRY glad_debug_impl_glProgramUniform3iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramUniform3iv", (void*)glProgramUniform3iv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3iv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3iv", (void*)glProgramUniform3iv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3IVPROC glad_debug_glProgramUniform3iv = glad_debug_impl_glProgramUniform3iv;
PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
void APIENTRY glad_debug_impl_glProgramUniform3f(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glProgramUniform3f", (void*)glProgramUniform3f, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3f(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3f", (void*)glProgramUniform3f, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3FPROC glad_debug_glProgramUniform3f = glad_debug_impl_glProgramUniform3f;
PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
void APIENTRY glad_debug_impl_glProgramUniform3fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramUniform3fv", (void*)glProgramUniform3fv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3fv", (void*)glProgramUniform3fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3FVPROC glad_debug_glProgramUniform3fv = glad_debug_impl_glProgramUniform3fv;
PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
void APIENTRY glad_debug_impl_glProgramUniform3d(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glProgramUniform3d", (void*)glProgramUniform3d, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3d(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3d", (void*)glProgramUniform3d, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3DPROC glad_debug_glProgramUniform3d = glad_debug_impl_glProgramUniform3d;
PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
void APIENTRY glad_debug_impl_glProgramUniform3dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramUniform3dv", (void*)glProgramUniform3dv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3dv", (void*)glProgramUniform3dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3DVPROC glad_debug_glProgramUniform3dv = glad_debug_impl_glProgramUniform3dv;
PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
void APIENTRY glad_debug_impl_glProgramUniform3ui(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_callback("glProgramUniform3ui", (void*)glProgramUniform3ui, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3ui(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3ui", (void*)glProgramUniform3ui, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3UIPROC glad_debug_glProgramUniform3ui = glad_debug_impl_glProgramUniform3ui;
PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
void APIENTRY glad_debug_impl_glProgramUniform3uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramUniform3uiv", (void*)glProgramUniform3uiv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3uiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3uiv", (void*)glProgramUniform3uiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3UIVPROC glad_debug_glProgramUniform3uiv = glad_debug_impl_glProgramUniform3uiv;
PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
void APIENTRY glad_debug_impl_glProgramUniform4i(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5) {
    _pre_call_callback("glProgramUniform4i", (void*)glProgramUniform4i, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4i(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4i", (void*)glProgramUniform4i, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4IPROC glad_debug_glProgramUniform4i = glad_debug_impl_glProgramUniform4i;
PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
void APIENTRY glad_debug_impl_glProgramUniform4iv(GLuint arg0, GLint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramUniform4iv", (void*)glProgramUniform4iv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4iv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4iv", (void*)glProgramUniform4iv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4IVPROC glad_debug_glProgramUniform4iv = glad_debug_impl_glProgramUniform4iv;
PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
void APIENTRY glad_debug_impl_glProgramUniform4f(GLuint arg0, GLint arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glProgramUniform4f", (void*)glProgramUniform4f, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4f(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4f", (void*)glProgramUniform4f, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4FPROC glad_debug_glProgramUniform4f = glad_debug_impl_glProgramUniform4f;
PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
void APIENTRY glad_debug_impl_glProgramUniform4fv(GLuint arg0, GLint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glProgramUniform4fv", (void*)glProgramUniform4fv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4fv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4fv", (void*)glProgramUniform4fv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4FVPROC glad_debug_glProgramUniform4fv = glad_debug_impl_glProgramUniform4fv;
PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
void APIENTRY glad_debug_impl_glProgramUniform4d(GLuint arg0, GLint arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4, GLdouble arg5) {
    _pre_call_callback("glProgramUniform4d", (void*)glProgramUniform4d, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4d(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4d", (void*)glProgramUniform4d, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4DPROC glad_debug_glProgramUniform4d = glad_debug_impl_glProgramUniform4d;
PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
void APIENTRY glad_debug_impl_glProgramUniform4dv(GLuint arg0, GLint arg1, GLsizei arg2, const GLdouble* arg3) {
    _pre_call_callback("glProgramUniform4dv", (void*)glProgramUniform4dv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4dv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4dv", (void*)glProgramUniform4dv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4DVPROC glad_debug_glProgramUniform4dv = glad_debug_impl_glProgramUniform4dv;
PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
void APIENTRY glad_debug_impl_glProgramUniform4ui(GLuint arg0, GLint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5) {
    _pre_call_callback("glProgramUniform4ui", (void*)glProgramUniform4ui, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4ui(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4ui", (void*)glProgramUniform4ui, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4UIPROC glad_debug_glProgramUniform4ui = glad_debug_impl_glProgramUniform4ui;
PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
void APIENTRY glad_debug_impl_glProgramUniform4uiv(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramUniform4uiv", (void*)glProgramUniform4uiv, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4uiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4uiv", (void*)glProgramUniform4uiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4UIVPROC glad_debug_glProgramUniform4uiv = glad_debug_impl_glProgramUniform4uiv;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix2fv", (void*)glProgramUniformMatrix2fv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2fv", (void*)glProgramUniformMatrix2fv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_debug_glProgramUniformMatrix2fv = glad_debug_impl_glProgramUniformMatrix2fv;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix3fv", (void*)glProgramUniformMatrix3fv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3fv", (void*)glProgramUniformMatrix3fv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_debug_glProgramUniformMatrix3fv = glad_debug_impl_glProgramUniformMatrix3fv;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix4fv", (void*)glProgramUniformMatrix4fv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4fv", (void*)glProgramUniformMatrix4fv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_debug_glProgramUniformMatrix4fv = glad_debug_impl_glProgramUniformMatrix4fv;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix2dv", (void*)glProgramUniformMatrix2dv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2dv", (void*)glProgramUniformMatrix2dv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_debug_glProgramUniformMatrix2dv = glad_debug_impl_glProgramUniformMatrix2dv;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix3dv", (void*)glProgramUniformMatrix3dv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3dv", (void*)glProgramUniformMatrix3dv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_debug_glProgramUniformMatrix3dv = glad_debug_impl_glProgramUniformMatrix3dv;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix4dv", (void*)glProgramUniformMatrix4dv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4dv", (void*)glProgramUniformMatrix4dv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_debug_glProgramUniformMatrix4dv = glad_debug_impl_glProgramUniformMatrix4dv;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2x3fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix2x3fv", (void*)glProgramUniformMatrix2x3fv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2x3fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2x3fv", (void*)glProgramUniformMatrix2x3fv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_debug_glProgramUniformMatrix2x3fv = glad_debug_impl_glProgramUniformMatrix2x3fv;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3x2fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix3x2fv", (void*)glProgramUniformMatrix3x2fv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3x2fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3x2fv", (void*)glProgramUniformMatrix3x2fv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_debug_glProgramUniformMatrix3x2fv = glad_debug_impl_glProgramUniformMatrix3x2fv;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2x4fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix2x4fv", (void*)glProgramUniformMatrix2x4fv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2x4fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2x4fv", (void*)glProgramUniformMatrix2x4fv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_debug_glProgramUniformMatrix2x4fv = glad_debug_impl_glProgramUniformMatrix2x4fv;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4x2fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix4x2fv", (void*)glProgramUniformMatrix4x2fv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4x2fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4x2fv", (void*)glProgramUniformMatrix4x2fv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_debug_glProgramUniformMatrix4x2fv = glad_debug_impl_glProgramUniformMatrix4x2fv;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3x4fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix3x4fv", (void*)glProgramUniformMatrix3x4fv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3x4fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3x4fv", (void*)glProgramUniformMatrix3x4fv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_debug_glProgramUniformMatrix3x4fv = glad_debug_impl_glProgramUniformMatrix3x4fv;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4x3fv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramUniformMatrix4x3fv", (void*)glProgramUniformMatrix4x3fv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4x3fv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4x3fv", (void*)glProgramUniformMatrix4x3fv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_debug_glProgramUniformMatrix4x3fv = glad_debug_impl_glProgramUniformMatrix4x3fv;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2x3dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix2x3dv", (void*)glProgramUniformMatrix2x3dv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2x3dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2x3dv", (void*)glProgramUniformMatrix2x3dv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_debug_glProgramUniformMatrix2x3dv = glad_debug_impl_glProgramUniformMatrix2x3dv;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3x2dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix3x2dv", (void*)glProgramUniformMatrix3x2dv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3x2dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3x2dv", (void*)glProgramUniformMatrix3x2dv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_debug_glProgramUniformMatrix3x2dv = glad_debug_impl_glProgramUniformMatrix3x2dv;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix2x4dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix2x4dv", (void*)glProgramUniformMatrix2x4dv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix2x4dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix2x4dv", (void*)glProgramUniformMatrix2x4dv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_debug_glProgramUniformMatrix2x4dv = glad_debug_impl_glProgramUniformMatrix2x4dv;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4x2dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix4x2dv", (void*)glProgramUniformMatrix4x2dv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4x2dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4x2dv", (void*)glProgramUniformMatrix4x2dv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_debug_glProgramUniformMatrix4x2dv = glad_debug_impl_glProgramUniformMatrix4x2dv;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix3x4dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix3x4dv", (void*)glProgramUniformMatrix3x4dv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix3x4dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix3x4dv", (void*)glProgramUniformMatrix3x4dv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_debug_glProgramUniformMatrix3x4dv = glad_debug_impl_glProgramUniformMatrix3x4dv;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
void APIENTRY glad_debug_impl_glProgramUniformMatrix4x3dv(GLuint arg0, GLint arg1, GLsizei arg2, GLboolean arg3, const GLdouble* arg4) {
    _pre_call_callback("glProgramUniformMatrix4x3dv", (void*)glProgramUniformMatrix4x3dv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniformMatrix4x3dv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniformMatrix4x3dv", (void*)glProgramUniformMatrix4x3dv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_debug_glProgramUniformMatrix4x3dv = glad_debug_impl_glProgramUniformMatrix4x3dv;
PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
void APIENTRY glad_debug_impl_glValidateProgramPipeline(GLuint arg0) {
    _pre_call_callback("glValidateProgramPipeline", (void*)glValidateProgramPipeline, 1, arg0);
     glad_glValidateProgramPipeline(arg0);
    _post_call_callback("glValidateProgramPipeline", (void*)glValidateProgramPipeline, 1, arg0);

}
PFNGLVALIDATEPROGRAMPIPELINEPROC glad_debug_glValidateProgramPipeline = glad_debug_impl_glValidateProgramPipeline;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
void APIENTRY glad_debug_impl_glGetProgramPipelineInfoLog(GLuint arg0, GLsizei arg1, GLsizei* arg2, GLchar* arg3) {
    _pre_call_callback("glGetProgramPipelineInfoLog", (void*)glGetProgramPipelineInfoLog, 4, arg0, arg1, arg2, arg3);
     glad_glGetProgramPipelineInfoLog(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetProgramPipelineInfoLog", (void*)glGetProgramPipelineInfoLog, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_debug_glGetProgramPipelineInfoLog = glad_debug_impl_glGetProgramPipelineInfoLog;
PFNGLDEPTHBOUNDSEXTPROC glad_glDepthBoundsEXT;
void APIENTRY glad_debug_impl_glDepthBoundsEXT(GLclampd arg0, GLclampd arg1) {
    _pre_call_callback("glDepthBoundsEXT", (void*)glDepthBoundsEXT, 2, arg0, arg1);
     glad_glDepthBoundsEXT(arg0, arg1);
    _post_call_callback("glDepthBoundsEXT", (void*)glDepthBoundsEXT, 2, arg0, arg1);

}
PFNGLDEPTHBOUNDSEXTPROC glad_debug_glDepthBoundsEXT = glad_debug_impl_glDepthBoundsEXT;
PFNGLIMAGETRANSFORMPARAMETERIHPPROC glad_glImageTransformParameteriHP;
void APIENTRY glad_debug_impl_glImageTransformParameteriHP(GLenum arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glImageTransformParameteriHP", (void*)glImageTransformParameteriHP, 3, arg0, arg1, arg2);
     glad_glImageTransformParameteriHP(arg0, arg1, arg2);
    _post_call_callback("glImageTransformParameteriHP", (void*)glImageTransformParameteriHP, 3, arg0, arg1, arg2);

}
PFNGLIMAGETRANSFORMPARAMETERIHPPROC glad_debug_glImageTransformParameteriHP = glad_debug_impl_glImageTransformParameteriHP;
PFNGLIMAGETRANSFORMPARAMETERFHPPROC glad_glImageTransformParameterfHP;
void APIENTRY glad_debug_impl_glImageTransformParameterfHP(GLenum arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glImageTransformParameterfHP", (void*)glImageTransformParameterfHP, 3, arg0, arg1, arg2);
     glad_glImageTransformParameterfHP(arg0, arg1, arg2);
    _post_call_callback("glImageTransformParameterfHP", (void*)glImageTransformParameterfHP, 3, arg0, arg1, arg2);

}
PFNGLIMAGETRANSFORMPARAMETERFHPPROC glad_debug_glImageTransformParameterfHP = glad_debug_impl_glImageTransformParameterfHP;
PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glad_glImageTransformParameterivHP;
void APIENTRY glad_debug_impl_glImageTransformParameterivHP(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glImageTransformParameterivHP", (void*)glImageTransformParameterivHP, 3, arg0, arg1, arg2);
     glad_glImageTransformParameterivHP(arg0, arg1, arg2);
    _post_call_callback("glImageTransformParameterivHP", (void*)glImageTransformParameterivHP, 3, arg0, arg1, arg2);

}
PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glad_debug_glImageTransformParameterivHP = glad_debug_impl_glImageTransformParameterivHP;
PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glad_glImageTransformParameterfvHP;
void APIENTRY glad_debug_impl_glImageTransformParameterfvHP(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glImageTransformParameterfvHP", (void*)glImageTransformParameterfvHP, 3, arg0, arg1, arg2);
     glad_glImageTransformParameterfvHP(arg0, arg1, arg2);
    _post_call_callback("glImageTransformParameterfvHP", (void*)glImageTransformParameterfvHP, 3, arg0, arg1, arg2);

}
PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glad_debug_glImageTransformParameterfvHP = glad_debug_impl_glImageTransformParameterfvHP;
PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glad_glGetImageTransformParameterivHP;
void APIENTRY glad_debug_impl_glGetImageTransformParameterivHP(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetImageTransformParameterivHP", (void*)glGetImageTransformParameterivHP, 3, arg0, arg1, arg2);
     glad_glGetImageTransformParameterivHP(arg0, arg1, arg2);
    _post_call_callback("glGetImageTransformParameterivHP", (void*)glGetImageTransformParameterivHP, 3, arg0, arg1, arg2);

}
PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glad_debug_glGetImageTransformParameterivHP = glad_debug_impl_glGetImageTransformParameterivHP;
PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glad_glGetImageTransformParameterfvHP;
void APIENTRY glad_debug_impl_glGetImageTransformParameterfvHP(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetImageTransformParameterfvHP", (void*)glGetImageTransformParameterfvHP, 3, arg0, arg1, arg2);
     glad_glGetImageTransformParameterfvHP(arg0, arg1, arg2);
    _post_call_callback("glGetImageTransformParameterfvHP", (void*)glGetImageTransformParameterfvHP, 3, arg0, arg1, arg2);

}
PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glad_debug_glGetImageTransformParameterfvHP = glad_debug_impl_glGetImageTransformParameterfvHP;
PFNGLBEGINVIDEOCAPTURENVPROC glad_glBeginVideoCaptureNV;
void APIENTRY glad_debug_impl_glBeginVideoCaptureNV(GLuint arg0) {
    _pre_call_callback("glBeginVideoCaptureNV", (void*)glBeginVideoCaptureNV, 1, arg0);
     glad_glBeginVideoCaptureNV(arg0);
    _post_call_callback("glBeginVideoCaptureNV", (void*)glBeginVideoCaptureNV, 1, arg0);

}
PFNGLBEGINVIDEOCAPTURENVPROC glad_debug_glBeginVideoCaptureNV = glad_debug_impl_glBeginVideoCaptureNV;
PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glad_glBindVideoCaptureStreamBufferNV;
void APIENTRY glad_debug_impl_glBindVideoCaptureStreamBufferNV(GLuint arg0, GLuint arg1, GLenum arg2, GLintptrARB arg3) {
    _pre_call_callback("glBindVideoCaptureStreamBufferNV", (void*)glBindVideoCaptureStreamBufferNV, 4, arg0, arg1, arg2, arg3);
     glad_glBindVideoCaptureStreamBufferNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glBindVideoCaptureStreamBufferNV", (void*)glBindVideoCaptureStreamBufferNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glad_debug_glBindVideoCaptureStreamBufferNV = glad_debug_impl_glBindVideoCaptureStreamBufferNV;
PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glad_glBindVideoCaptureStreamTextureNV;
void APIENTRY glad_debug_impl_glBindVideoCaptureStreamTextureNV(GLuint arg0, GLuint arg1, GLenum arg2, GLenum arg3, GLuint arg4) {
    _pre_call_callback("glBindVideoCaptureStreamTextureNV", (void*)glBindVideoCaptureStreamTextureNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glBindVideoCaptureStreamTextureNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glBindVideoCaptureStreamTextureNV", (void*)glBindVideoCaptureStreamTextureNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glad_debug_glBindVideoCaptureStreamTextureNV = glad_debug_impl_glBindVideoCaptureStreamTextureNV;
PFNGLENDVIDEOCAPTURENVPROC glad_glEndVideoCaptureNV;
void APIENTRY glad_debug_impl_glEndVideoCaptureNV(GLuint arg0) {
    _pre_call_callback("glEndVideoCaptureNV", (void*)glEndVideoCaptureNV, 1, arg0);
     glad_glEndVideoCaptureNV(arg0);
    _post_call_callback("glEndVideoCaptureNV", (void*)glEndVideoCaptureNV, 1, arg0);

}
PFNGLENDVIDEOCAPTURENVPROC glad_debug_glEndVideoCaptureNV = glad_debug_impl_glEndVideoCaptureNV;
PFNGLGETVIDEOCAPTUREIVNVPROC glad_glGetVideoCaptureivNV;
void APIENTRY glad_debug_impl_glGetVideoCaptureivNV(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVideoCaptureivNV", (void*)glGetVideoCaptureivNV, 3, arg0, arg1, arg2);
     glad_glGetVideoCaptureivNV(arg0, arg1, arg2);
    _post_call_callback("glGetVideoCaptureivNV", (void*)glGetVideoCaptureivNV, 3, arg0, arg1, arg2);

}
PFNGLGETVIDEOCAPTUREIVNVPROC glad_debug_glGetVideoCaptureivNV = glad_debug_impl_glGetVideoCaptureivNV;
PFNGLGETVIDEOCAPTURESTREAMIVNVPROC glad_glGetVideoCaptureStreamivNV;
void APIENTRY glad_debug_impl_glGetVideoCaptureStreamivNV(GLuint arg0, GLuint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetVideoCaptureStreamivNV", (void*)glGetVideoCaptureStreamivNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetVideoCaptureStreamivNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetVideoCaptureStreamivNV", (void*)glGetVideoCaptureStreamivNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETVIDEOCAPTURESTREAMIVNVPROC glad_debug_glGetVideoCaptureStreamivNV = glad_debug_impl_glGetVideoCaptureStreamivNV;
PFNGLGETVIDEOCAPTURESTREAMFVNVPROC glad_glGetVideoCaptureStreamfvNV;
void APIENTRY glad_debug_impl_glGetVideoCaptureStreamfvNV(GLuint arg0, GLuint arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetVideoCaptureStreamfvNV", (void*)glGetVideoCaptureStreamfvNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetVideoCaptureStreamfvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetVideoCaptureStreamfvNV", (void*)glGetVideoCaptureStreamfvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETVIDEOCAPTURESTREAMFVNVPROC glad_debug_glGetVideoCaptureStreamfvNV = glad_debug_impl_glGetVideoCaptureStreamfvNV;
PFNGLGETVIDEOCAPTURESTREAMDVNVPROC glad_glGetVideoCaptureStreamdvNV;
void APIENTRY glad_debug_impl_glGetVideoCaptureStreamdvNV(GLuint arg0, GLuint arg1, GLenum arg2, GLdouble* arg3) {
    _pre_call_callback("glGetVideoCaptureStreamdvNV", (void*)glGetVideoCaptureStreamdvNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetVideoCaptureStreamdvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetVideoCaptureStreamdvNV", (void*)glGetVideoCaptureStreamdvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETVIDEOCAPTURESTREAMDVNVPROC glad_debug_glGetVideoCaptureStreamdvNV = glad_debug_impl_glGetVideoCaptureStreamdvNV;
PFNGLVIDEOCAPTURENVPROC glad_glVideoCaptureNV;
GLenum APIENTRY glad_debug_impl_glVideoCaptureNV(GLuint arg0, GLuint* arg1, GLuint64EXT* arg2) {
    GLenum ret;
    _pre_call_callback("glVideoCaptureNV", (void*)glVideoCaptureNV, 3, arg0, arg1, arg2);
    ret =  glad_glVideoCaptureNV(arg0, arg1, arg2);
    _post_call_callback("glVideoCaptureNV", (void*)glVideoCaptureNV, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLVIDEOCAPTURENVPROC glad_debug_glVideoCaptureNV = glad_debug_impl_glVideoCaptureNV;
PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC glad_glVideoCaptureStreamParameterivNV;
void APIENTRY glad_debug_impl_glVideoCaptureStreamParameterivNV(GLuint arg0, GLuint arg1, GLenum arg2, const GLint* arg3) {
    _pre_call_callback("glVideoCaptureStreamParameterivNV", (void*)glVideoCaptureStreamParameterivNV, 4, arg0, arg1, arg2, arg3);
     glad_glVideoCaptureStreamParameterivNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVideoCaptureStreamParameterivNV", (void*)glVideoCaptureStreamParameterivNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC glad_debug_glVideoCaptureStreamParameterivNV = glad_debug_impl_glVideoCaptureStreamParameterivNV;
PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC glad_glVideoCaptureStreamParameterfvNV;
void APIENTRY glad_debug_impl_glVideoCaptureStreamParameterfvNV(GLuint arg0, GLuint arg1, GLenum arg2, const GLfloat* arg3) {
    _pre_call_callback("glVideoCaptureStreamParameterfvNV", (void*)glVideoCaptureStreamParameterfvNV, 4, arg0, arg1, arg2, arg3);
     glad_glVideoCaptureStreamParameterfvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVideoCaptureStreamParameterfvNV", (void*)glVideoCaptureStreamParameterfvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC glad_debug_glVideoCaptureStreamParameterfvNV = glad_debug_impl_glVideoCaptureStreamParameterfvNV;
PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC glad_glVideoCaptureStreamParameterdvNV;
void APIENTRY glad_debug_impl_glVideoCaptureStreamParameterdvNV(GLuint arg0, GLuint arg1, GLenum arg2, const GLdouble* arg3) {
    _pre_call_callback("glVideoCaptureStreamParameterdvNV", (void*)glVideoCaptureStreamParameterdvNV, 4, arg0, arg1, arg2, arg3);
     glad_glVideoCaptureStreamParameterdvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVideoCaptureStreamParameterdvNV", (void*)glVideoCaptureStreamParameterdvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC glad_debug_glVideoCaptureStreamParameterdvNV = glad_debug_impl_glVideoCaptureStreamParameterdvNV;
PFNGLCURRENTPALETTEMATRIXARBPROC glad_glCurrentPaletteMatrixARB;
void APIENTRY glad_debug_impl_glCurrentPaletteMatrixARB(GLint arg0) {
    _pre_call_callback("glCurrentPaletteMatrixARB", (void*)glCurrentPaletteMatrixARB, 1, arg0);
     glad_glCurrentPaletteMatrixARB(arg0);
    _post_call_callback("glCurrentPaletteMatrixARB", (void*)glCurrentPaletteMatrixARB, 1, arg0);

}
PFNGLCURRENTPALETTEMATRIXARBPROC glad_debug_glCurrentPaletteMatrixARB = glad_debug_impl_glCurrentPaletteMatrixARB;
PFNGLMATRIXINDEXUBVARBPROC glad_glMatrixIndexubvARB;
void APIENTRY glad_debug_impl_glMatrixIndexubvARB(GLint arg0, const GLubyte* arg1) {
    _pre_call_callback("glMatrixIndexubvARB", (void*)glMatrixIndexubvARB, 2, arg0, arg1);
     glad_glMatrixIndexubvARB(arg0, arg1);
    _post_call_callback("glMatrixIndexubvARB", (void*)glMatrixIndexubvARB, 2, arg0, arg1);

}
PFNGLMATRIXINDEXUBVARBPROC glad_debug_glMatrixIndexubvARB = glad_debug_impl_glMatrixIndexubvARB;
PFNGLMATRIXINDEXUSVARBPROC glad_glMatrixIndexusvARB;
void APIENTRY glad_debug_impl_glMatrixIndexusvARB(GLint arg0, const GLushort* arg1) {
    _pre_call_callback("glMatrixIndexusvARB", (void*)glMatrixIndexusvARB, 2, arg0, arg1);
     glad_glMatrixIndexusvARB(arg0, arg1);
    _post_call_callback("glMatrixIndexusvARB", (void*)glMatrixIndexusvARB, 2, arg0, arg1);

}
PFNGLMATRIXINDEXUSVARBPROC glad_debug_glMatrixIndexusvARB = glad_debug_impl_glMatrixIndexusvARB;
PFNGLMATRIXINDEXUIVARBPROC glad_glMatrixIndexuivARB;
void APIENTRY glad_debug_impl_glMatrixIndexuivARB(GLint arg0, const GLuint* arg1) {
    _pre_call_callback("glMatrixIndexuivARB", (void*)glMatrixIndexuivARB, 2, arg0, arg1);
     glad_glMatrixIndexuivARB(arg0, arg1);
    _post_call_callback("glMatrixIndexuivARB", (void*)glMatrixIndexuivARB, 2, arg0, arg1);

}
PFNGLMATRIXINDEXUIVARBPROC glad_debug_glMatrixIndexuivARB = glad_debug_impl_glMatrixIndexuivARB;
PFNGLMATRIXINDEXPOINTERARBPROC glad_glMatrixIndexPointerARB;
void APIENTRY glad_debug_impl_glMatrixIndexPointerARB(GLint arg0, GLenum arg1, GLsizei arg2, const void* arg3) {
    _pre_call_callback("glMatrixIndexPointerARB", (void*)glMatrixIndexPointerARB, 4, arg0, arg1, arg2, arg3);
     glad_glMatrixIndexPointerARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glMatrixIndexPointerARB", (void*)glMatrixIndexPointerARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLMATRIXINDEXPOINTERARBPROC glad_debug_glMatrixIndexPointerARB = glad_debug_impl_glMatrixIndexPointerARB;
PFNGLTEXTURECOLORMASKSGISPROC glad_glTextureColorMaskSGIS;
void APIENTRY glad_debug_impl_glTextureColorMaskSGIS(GLboolean arg0, GLboolean arg1, GLboolean arg2, GLboolean arg3) {
    _pre_call_callback("glTextureColorMaskSGIS", (void*)glTextureColorMaskSGIS, 4, arg0, arg1, arg2, arg3);
     glad_glTextureColorMaskSGIS(arg0, arg1, arg2, arg3);
    _post_call_callback("glTextureColorMaskSGIS", (void*)glTextureColorMaskSGIS, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXTURECOLORMASKSGISPROC glad_debug_glTextureColorMaskSGIS = glad_debug_impl_glTextureColorMaskSGIS;
PFNGLTANGENT3BEXTPROC glad_glTangent3bEXT;
void APIENTRY glad_debug_impl_glTangent3bEXT(GLbyte arg0, GLbyte arg1, GLbyte arg2) {
    _pre_call_callback("glTangent3bEXT", (void*)glTangent3bEXT, 3, arg0, arg1, arg2);
     glad_glTangent3bEXT(arg0, arg1, arg2);
    _post_call_callback("glTangent3bEXT", (void*)glTangent3bEXT, 3, arg0, arg1, arg2);

}
PFNGLTANGENT3BEXTPROC glad_debug_glTangent3bEXT = glad_debug_impl_glTangent3bEXT;
PFNGLTANGENT3BVEXTPROC glad_glTangent3bvEXT;
void APIENTRY glad_debug_impl_glTangent3bvEXT(const GLbyte* arg0) {
    _pre_call_callback("glTangent3bvEXT", (void*)glTangent3bvEXT, 1, arg0);
     glad_glTangent3bvEXT(arg0);
    _post_call_callback("glTangent3bvEXT", (void*)glTangent3bvEXT, 1, arg0);

}
PFNGLTANGENT3BVEXTPROC glad_debug_glTangent3bvEXT = glad_debug_impl_glTangent3bvEXT;
PFNGLTANGENT3DEXTPROC glad_glTangent3dEXT;
void APIENTRY glad_debug_impl_glTangent3dEXT(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glTangent3dEXT", (void*)glTangent3dEXT, 3, arg0, arg1, arg2);
     glad_glTangent3dEXT(arg0, arg1, arg2);
    _post_call_callback("glTangent3dEXT", (void*)glTangent3dEXT, 3, arg0, arg1, arg2);

}
PFNGLTANGENT3DEXTPROC glad_debug_glTangent3dEXT = glad_debug_impl_glTangent3dEXT;
PFNGLTANGENT3DVEXTPROC glad_glTangent3dvEXT;
void APIENTRY glad_debug_impl_glTangent3dvEXT(const GLdouble* arg0) {
    _pre_call_callback("glTangent3dvEXT", (void*)glTangent3dvEXT, 1, arg0);
     glad_glTangent3dvEXT(arg0);
    _post_call_callback("glTangent3dvEXT", (void*)glTangent3dvEXT, 1, arg0);

}
PFNGLTANGENT3DVEXTPROC glad_debug_glTangent3dvEXT = glad_debug_impl_glTangent3dvEXT;
PFNGLTANGENT3FEXTPROC glad_glTangent3fEXT;
void APIENTRY glad_debug_impl_glTangent3fEXT(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glTangent3fEXT", (void*)glTangent3fEXT, 3, arg0, arg1, arg2);
     glad_glTangent3fEXT(arg0, arg1, arg2);
    _post_call_callback("glTangent3fEXT", (void*)glTangent3fEXT, 3, arg0, arg1, arg2);

}
PFNGLTANGENT3FEXTPROC glad_debug_glTangent3fEXT = glad_debug_impl_glTangent3fEXT;
PFNGLTANGENT3FVEXTPROC glad_glTangent3fvEXT;
void APIENTRY glad_debug_impl_glTangent3fvEXT(const GLfloat* arg0) {
    _pre_call_callback("glTangent3fvEXT", (void*)glTangent3fvEXT, 1, arg0);
     glad_glTangent3fvEXT(arg0);
    _post_call_callback("glTangent3fvEXT", (void*)glTangent3fvEXT, 1, arg0);

}
PFNGLTANGENT3FVEXTPROC glad_debug_glTangent3fvEXT = glad_debug_impl_glTangent3fvEXT;
PFNGLTANGENT3IEXTPROC glad_glTangent3iEXT;
void APIENTRY glad_debug_impl_glTangent3iEXT(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glTangent3iEXT", (void*)glTangent3iEXT, 3, arg0, arg1, arg2);
     glad_glTangent3iEXT(arg0, arg1, arg2);
    _post_call_callback("glTangent3iEXT", (void*)glTangent3iEXT, 3, arg0, arg1, arg2);

}
PFNGLTANGENT3IEXTPROC glad_debug_glTangent3iEXT = glad_debug_impl_glTangent3iEXT;
PFNGLTANGENT3IVEXTPROC glad_glTangent3ivEXT;
void APIENTRY glad_debug_impl_glTangent3ivEXT(const GLint* arg0) {
    _pre_call_callback("glTangent3ivEXT", (void*)glTangent3ivEXT, 1, arg0);
     glad_glTangent3ivEXT(arg0);
    _post_call_callback("glTangent3ivEXT", (void*)glTangent3ivEXT, 1, arg0);

}
PFNGLTANGENT3IVEXTPROC glad_debug_glTangent3ivEXT = glad_debug_impl_glTangent3ivEXT;
PFNGLTANGENT3SEXTPROC glad_glTangent3sEXT;
void APIENTRY glad_debug_impl_glTangent3sEXT(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glTangent3sEXT", (void*)glTangent3sEXT, 3, arg0, arg1, arg2);
     glad_glTangent3sEXT(arg0, arg1, arg2);
    _post_call_callback("glTangent3sEXT", (void*)glTangent3sEXT, 3, arg0, arg1, arg2);

}
PFNGLTANGENT3SEXTPROC glad_debug_glTangent3sEXT = glad_debug_impl_glTangent3sEXT;
PFNGLTANGENT3SVEXTPROC glad_glTangent3svEXT;
void APIENTRY glad_debug_impl_glTangent3svEXT(const GLshort* arg0) {
    _pre_call_callback("glTangent3svEXT", (void*)glTangent3svEXT, 1, arg0);
     glad_glTangent3svEXT(arg0);
    _post_call_callback("glTangent3svEXT", (void*)glTangent3svEXT, 1, arg0);

}
PFNGLTANGENT3SVEXTPROC glad_debug_glTangent3svEXT = glad_debug_impl_glTangent3svEXT;
PFNGLBINORMAL3BEXTPROC glad_glBinormal3bEXT;
void APIENTRY glad_debug_impl_glBinormal3bEXT(GLbyte arg0, GLbyte arg1, GLbyte arg2) {
    _pre_call_callback("glBinormal3bEXT", (void*)glBinormal3bEXT, 3, arg0, arg1, arg2);
     glad_glBinormal3bEXT(arg0, arg1, arg2);
    _post_call_callback("glBinormal3bEXT", (void*)glBinormal3bEXT, 3, arg0, arg1, arg2);

}
PFNGLBINORMAL3BEXTPROC glad_debug_glBinormal3bEXT = glad_debug_impl_glBinormal3bEXT;
PFNGLBINORMAL3BVEXTPROC glad_glBinormal3bvEXT;
void APIENTRY glad_debug_impl_glBinormal3bvEXT(const GLbyte* arg0) {
    _pre_call_callback("glBinormal3bvEXT", (void*)glBinormal3bvEXT, 1, arg0);
     glad_glBinormal3bvEXT(arg0);
    _post_call_callback("glBinormal3bvEXT", (void*)glBinormal3bvEXT, 1, arg0);

}
PFNGLBINORMAL3BVEXTPROC glad_debug_glBinormal3bvEXT = glad_debug_impl_glBinormal3bvEXT;
PFNGLBINORMAL3DEXTPROC glad_glBinormal3dEXT;
void APIENTRY glad_debug_impl_glBinormal3dEXT(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glBinormal3dEXT", (void*)glBinormal3dEXT, 3, arg0, arg1, arg2);
     glad_glBinormal3dEXT(arg0, arg1, arg2);
    _post_call_callback("glBinormal3dEXT", (void*)glBinormal3dEXT, 3, arg0, arg1, arg2);

}
PFNGLBINORMAL3DEXTPROC glad_debug_glBinormal3dEXT = glad_debug_impl_glBinormal3dEXT;
PFNGLBINORMAL3DVEXTPROC glad_glBinormal3dvEXT;
void APIENTRY glad_debug_impl_glBinormal3dvEXT(const GLdouble* arg0) {
    _pre_call_callback("glBinormal3dvEXT", (void*)glBinormal3dvEXT, 1, arg0);
     glad_glBinormal3dvEXT(arg0);
    _post_call_callback("glBinormal3dvEXT", (void*)glBinormal3dvEXT, 1, arg0);

}
PFNGLBINORMAL3DVEXTPROC glad_debug_glBinormal3dvEXT = glad_debug_impl_glBinormal3dvEXT;
PFNGLBINORMAL3FEXTPROC glad_glBinormal3fEXT;
void APIENTRY glad_debug_impl_glBinormal3fEXT(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glBinormal3fEXT", (void*)glBinormal3fEXT, 3, arg0, arg1, arg2);
     glad_glBinormal3fEXT(arg0, arg1, arg2);
    _post_call_callback("glBinormal3fEXT", (void*)glBinormal3fEXT, 3, arg0, arg1, arg2);

}
PFNGLBINORMAL3FEXTPROC glad_debug_glBinormal3fEXT = glad_debug_impl_glBinormal3fEXT;
PFNGLBINORMAL3FVEXTPROC glad_glBinormal3fvEXT;
void APIENTRY glad_debug_impl_glBinormal3fvEXT(const GLfloat* arg0) {
    _pre_call_callback("glBinormal3fvEXT", (void*)glBinormal3fvEXT, 1, arg0);
     glad_glBinormal3fvEXT(arg0);
    _post_call_callback("glBinormal3fvEXT", (void*)glBinormal3fvEXT, 1, arg0);

}
PFNGLBINORMAL3FVEXTPROC glad_debug_glBinormal3fvEXT = glad_debug_impl_glBinormal3fvEXT;
PFNGLBINORMAL3IEXTPROC glad_glBinormal3iEXT;
void APIENTRY glad_debug_impl_glBinormal3iEXT(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glBinormal3iEXT", (void*)glBinormal3iEXT, 3, arg0, arg1, arg2);
     glad_glBinormal3iEXT(arg0, arg1, arg2);
    _post_call_callback("glBinormal3iEXT", (void*)glBinormal3iEXT, 3, arg0, arg1, arg2);

}
PFNGLBINORMAL3IEXTPROC glad_debug_glBinormal3iEXT = glad_debug_impl_glBinormal3iEXT;
PFNGLBINORMAL3IVEXTPROC glad_glBinormal3ivEXT;
void APIENTRY glad_debug_impl_glBinormal3ivEXT(const GLint* arg0) {
    _pre_call_callback("glBinormal3ivEXT", (void*)glBinormal3ivEXT, 1, arg0);
     glad_glBinormal3ivEXT(arg0);
    _post_call_callback("glBinormal3ivEXT", (void*)glBinormal3ivEXT, 1, arg0);

}
PFNGLBINORMAL3IVEXTPROC glad_debug_glBinormal3ivEXT = glad_debug_impl_glBinormal3ivEXT;
PFNGLBINORMAL3SEXTPROC glad_glBinormal3sEXT;
void APIENTRY glad_debug_impl_glBinormal3sEXT(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glBinormal3sEXT", (void*)glBinormal3sEXT, 3, arg0, arg1, arg2);
     glad_glBinormal3sEXT(arg0, arg1, arg2);
    _post_call_callback("glBinormal3sEXT", (void*)glBinormal3sEXT, 3, arg0, arg1, arg2);

}
PFNGLBINORMAL3SEXTPROC glad_debug_glBinormal3sEXT = glad_debug_impl_glBinormal3sEXT;
PFNGLBINORMAL3SVEXTPROC glad_glBinormal3svEXT;
void APIENTRY glad_debug_impl_glBinormal3svEXT(const GLshort* arg0) {
    _pre_call_callback("glBinormal3svEXT", (void*)glBinormal3svEXT, 1, arg0);
     glad_glBinormal3svEXT(arg0);
    _post_call_callback("glBinormal3svEXT", (void*)glBinormal3svEXT, 1, arg0);

}
PFNGLBINORMAL3SVEXTPROC glad_debug_glBinormal3svEXT = glad_debug_impl_glBinormal3svEXT;
PFNGLTANGENTPOINTEREXTPROC glad_glTangentPointerEXT;
void APIENTRY glad_debug_impl_glTangentPointerEXT(GLenum arg0, GLsizei arg1, const void* arg2) {
    _pre_call_callback("glTangentPointerEXT", (void*)glTangentPointerEXT, 3, arg0, arg1, arg2);
     glad_glTangentPointerEXT(arg0, arg1, arg2);
    _post_call_callback("glTangentPointerEXT", (void*)glTangentPointerEXT, 3, arg0, arg1, arg2);

}
PFNGLTANGENTPOINTEREXTPROC glad_debug_glTangentPointerEXT = glad_debug_impl_glTangentPointerEXT;
PFNGLBINORMALPOINTEREXTPROC glad_glBinormalPointerEXT;
void APIENTRY glad_debug_impl_glBinormalPointerEXT(GLenum arg0, GLsizei arg1, const void* arg2) {
    _pre_call_callback("glBinormalPointerEXT", (void*)glBinormalPointerEXT, 3, arg0, arg1, arg2);
     glad_glBinormalPointerEXT(arg0, arg1, arg2);
    _post_call_callback("glBinormalPointerEXT", (void*)glBinormalPointerEXT, 3, arg0, arg1, arg2);

}
PFNGLBINORMALPOINTEREXTPROC glad_debug_glBinormalPointerEXT = glad_debug_impl_glBinormalPointerEXT;
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB;
void APIENTRY glad_debug_impl_glCompressedTexImage3DARB(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLsizei arg7, const void* arg8) {
    _pre_call_callback("glCompressedTexImage3DARB", (void*)glCompressedTexImage3DARB, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCompressedTexImage3DARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCompressedTexImage3DARB", (void*)glCompressedTexImage3DARB, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_debug_glCompressedTexImage3DARB = glad_debug_impl_glCompressedTexImage3DARB;
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB;
void APIENTRY glad_debug_impl_glCompressedTexImage2DARB(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLint arg5, GLsizei arg6, const void* arg7) {
    _pre_call_callback("glCompressedTexImage2DARB", (void*)glCompressedTexImage2DARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glCompressedTexImage2DARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glCompressedTexImage2DARB", (void*)glCompressedTexImage2DARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_debug_glCompressedTexImage2DARB = glad_debug_impl_glCompressedTexImage2DARB;
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB;
void APIENTRY glad_debug_impl_glCompressedTexImage1DARB(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLint arg4, GLsizei arg5, const void* arg6) {
    _pre_call_callback("glCompressedTexImage1DARB", (void*)glCompressedTexImage1DARB, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCompressedTexImage1DARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCompressedTexImage1DARB", (void*)glCompressedTexImage1DARB, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_debug_glCompressedTexImage1DARB = glad_debug_impl_glCompressedTexImage1DARB;
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB;
void APIENTRY glad_debug_impl_glCompressedTexSubImage3DARB(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLsizei arg9, const void* arg10) {
    _pre_call_callback("glCompressedTexSubImage3DARB", (void*)glCompressedTexSubImage3DARB, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glCompressedTexSubImage3DARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glCompressedTexSubImage3DARB", (void*)glCompressedTexSubImage3DARB, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_debug_glCompressedTexSubImage3DARB = glad_debug_impl_glCompressedTexSubImage3DARB;
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB;
void APIENTRY glad_debug_impl_glCompressedTexSubImage2DARB(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLsizei arg4, GLsizei arg5, GLenum arg6, GLsizei arg7, const void* arg8) {
    _pre_call_callback("glCompressedTexSubImage2DARB", (void*)glCompressedTexSubImage2DARB, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glCompressedTexSubImage2DARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glCompressedTexSubImage2DARB", (void*)glCompressedTexSubImage2DARB, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_debug_glCompressedTexSubImage2DARB = glad_debug_impl_glCompressedTexSubImage2DARB;
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB;
void APIENTRY glad_debug_impl_glCompressedTexSubImage1DARB(GLenum arg0, GLint arg1, GLint arg2, GLsizei arg3, GLenum arg4, GLsizei arg5, const void* arg6) {
    _pre_call_callback("glCompressedTexSubImage1DARB", (void*)glCompressedTexSubImage1DARB, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCompressedTexSubImage1DARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCompressedTexSubImage1DARB", (void*)glCompressedTexSubImage1DARB, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_debug_glCompressedTexSubImage1DARB = glad_debug_impl_glCompressedTexSubImage1DARB;
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glad_glGetCompressedTexImageARB;
void APIENTRY glad_debug_impl_glGetCompressedTexImageARB(GLenum arg0, GLint arg1, void* arg2) {
    _pre_call_callback("glGetCompressedTexImageARB", (void*)glGetCompressedTexImageARB, 3, arg0, arg1, arg2);
     glad_glGetCompressedTexImageARB(arg0, arg1, arg2);
    _post_call_callback("glGetCompressedTexImageARB", (void*)glGetCompressedTexImageARB, 3, arg0, arg1, arg2);

}
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glad_debug_glGetCompressedTexImageARB = glad_debug_impl_glGetCompressedTexImageARB;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
GLint APIENTRY glad_debug_impl_glGetSubroutineUniformLocation(GLuint arg0, GLenum arg1, const GLchar* arg2) {
    GLint ret;
    _pre_call_callback("glGetSubroutineUniformLocation", (void*)glGetSubroutineUniformLocation, 3, arg0, arg1, arg2);
    ret =  glad_glGetSubroutineUniformLocation(arg0, arg1, arg2);
    _post_call_callback("glGetSubroutineUniformLocation", (void*)glGetSubroutineUniformLocation, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_debug_glGetSubroutineUniformLocation = glad_debug_impl_glGetSubroutineUniformLocation;
PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
GLuint APIENTRY glad_debug_impl_glGetSubroutineIndex(GLuint arg0, GLenum arg1, const GLchar* arg2) {
    GLuint ret;
    _pre_call_callback("glGetSubroutineIndex", (void*)glGetSubroutineIndex, 3, arg0, arg1, arg2);
    ret =  glad_glGetSubroutineIndex(arg0, arg1, arg2);
    _post_call_callback("glGetSubroutineIndex", (void*)glGetSubroutineIndex, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETSUBROUTINEINDEXPROC glad_debug_glGetSubroutineIndex = glad_debug_impl_glGetSubroutineIndex;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
void APIENTRY glad_debug_impl_glGetActiveSubroutineUniformiv(GLuint arg0, GLenum arg1, GLuint arg2, GLenum arg3, GLint* arg4) {
    _pre_call_callback("glGetActiveSubroutineUniformiv", (void*)glGetActiveSubroutineUniformiv, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetActiveSubroutineUniformiv(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetActiveSubroutineUniformiv", (void*)glGetActiveSubroutineUniformiv, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_debug_glGetActiveSubroutineUniformiv = glad_debug_impl_glGetActiveSubroutineUniformiv;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
void APIENTRY glad_debug_impl_glGetActiveSubroutineUniformName(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, GLsizei* arg4, GLchar* arg5) {
    _pre_call_callback("glGetActiveSubroutineUniformName", (void*)glGetActiveSubroutineUniformName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetActiveSubroutineUniformName(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetActiveSubroutineUniformName", (void*)glGetActiveSubroutineUniformName, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_debug_glGetActiveSubroutineUniformName = glad_debug_impl_glGetActiveSubroutineUniformName;
PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
void APIENTRY glad_debug_impl_glGetActiveSubroutineName(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, GLsizei* arg4, GLchar* arg5) {
    _pre_call_callback("glGetActiveSubroutineName", (void*)glGetActiveSubroutineName, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glGetActiveSubroutineName(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glGetActiveSubroutineName", (void*)glGetActiveSubroutineName, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLGETACTIVESUBROUTINENAMEPROC glad_debug_glGetActiveSubroutineName = glad_debug_impl_glGetActiveSubroutineName;
PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
void APIENTRY glad_debug_impl_glUniformSubroutinesuiv(GLenum arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glUniformSubroutinesuiv", (void*)glUniformSubroutinesuiv, 3, arg0, arg1, arg2);
     glad_glUniformSubroutinesuiv(arg0, arg1, arg2);
    _post_call_callback("glUniformSubroutinesuiv", (void*)glUniformSubroutinesuiv, 3, arg0, arg1, arg2);

}
PFNGLUNIFORMSUBROUTINESUIVPROC glad_debug_glUniformSubroutinesuiv = glad_debug_impl_glUniformSubroutinesuiv;
PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
void APIENTRY glad_debug_impl_glGetUniformSubroutineuiv(GLenum arg0, GLint arg1, GLuint* arg2) {
    _pre_call_callback("glGetUniformSubroutineuiv", (void*)glGetUniformSubroutineuiv, 3, arg0, arg1, arg2);
     glad_glGetUniformSubroutineuiv(arg0, arg1, arg2);
    _post_call_callback("glGetUniformSubroutineuiv", (void*)glGetUniformSubroutineuiv, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_debug_glGetUniformSubroutineuiv = glad_debug_impl_glGetUniformSubroutineuiv;
PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
void APIENTRY glad_debug_impl_glGetProgramStageiv(GLuint arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetProgramStageiv", (void*)glGetProgramStageiv, 4, arg0, arg1, arg2, arg3);
     glad_glGetProgramStageiv(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetProgramStageiv", (void*)glGetProgramStageiv, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETPROGRAMSTAGEIVPROC glad_debug_glGetProgramStageiv = glad_debug_impl_glGetProgramStageiv;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample;
void APIENTRY glad_debug_impl_glTexStorage2DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLboolean arg5) {
    _pre_call_callback("glTexStorage2DMultisample", (void*)glTexStorage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glTexStorage2DMultisample(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glTexStorage2DMultisample", (void*)glTexStorage2DMultisample, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_debug_glTexStorage2DMultisample = glad_debug_impl_glTexStorage2DMultisample;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample;
void APIENTRY glad_debug_impl_glTexStorage3DMultisample(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLboolean arg6) {
    _pre_call_callback("glTexStorage3DMultisample", (void*)glTexStorage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glTexStorage3DMultisample(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glTexStorage3DMultisample", (void*)glTexStorage3DMultisample, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_debug_glTexStorage3DMultisample = glad_debug_impl_glTexStorage3DMultisample;
PFNGLVERTEXATTRIBL1DEXTPROC glad_glVertexAttribL1dEXT;
void APIENTRY glad_debug_impl_glVertexAttribL1dEXT(GLuint arg0, GLdouble arg1) {
    _pre_call_callback("glVertexAttribL1dEXT", (void*)glVertexAttribL1dEXT, 2, arg0, arg1);
     glad_glVertexAttribL1dEXT(arg0, arg1);
    _post_call_callback("glVertexAttribL1dEXT", (void*)glVertexAttribL1dEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1DEXTPROC glad_debug_glVertexAttribL1dEXT = glad_debug_impl_glVertexAttribL1dEXT;
PFNGLVERTEXATTRIBL2DEXTPROC glad_glVertexAttribL2dEXT;
void APIENTRY glad_debug_impl_glVertexAttribL2dEXT(GLuint arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glVertexAttribL2dEXT", (void*)glVertexAttribL2dEXT, 3, arg0, arg1, arg2);
     glad_glVertexAttribL2dEXT(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribL2dEXT", (void*)glVertexAttribL2dEXT, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBL2DEXTPROC glad_debug_glVertexAttribL2dEXT = glad_debug_impl_glVertexAttribL2dEXT;
PFNGLVERTEXATTRIBL3DEXTPROC glad_glVertexAttribL3dEXT;
void APIENTRY glad_debug_impl_glVertexAttribL3dEXT(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glVertexAttribL3dEXT", (void*)glVertexAttribL3dEXT, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribL3dEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribL3dEXT", (void*)glVertexAttribL3dEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBL3DEXTPROC glad_debug_glVertexAttribL3dEXT = glad_debug_impl_glVertexAttribL3dEXT;
PFNGLVERTEXATTRIBL4DEXTPROC glad_glVertexAttribL4dEXT;
void APIENTRY glad_debug_impl_glVertexAttribL4dEXT(GLuint arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glVertexAttribL4dEXT", (void*)glVertexAttribL4dEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribL4dEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribL4dEXT", (void*)glVertexAttribL4dEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBL4DEXTPROC glad_debug_glVertexAttribL4dEXT = glad_debug_impl_glVertexAttribL4dEXT;
PFNGLVERTEXATTRIBL1DVEXTPROC glad_glVertexAttribL1dvEXT;
void APIENTRY glad_debug_impl_glVertexAttribL1dvEXT(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttribL1dvEXT", (void*)glVertexAttribL1dvEXT, 2, arg0, arg1);
     glad_glVertexAttribL1dvEXT(arg0, arg1);
    _post_call_callback("glVertexAttribL1dvEXT", (void*)glVertexAttribL1dvEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL1DVEXTPROC glad_debug_glVertexAttribL1dvEXT = glad_debug_impl_glVertexAttribL1dvEXT;
PFNGLVERTEXATTRIBL2DVEXTPROC glad_glVertexAttribL2dvEXT;
void APIENTRY glad_debug_impl_glVertexAttribL2dvEXT(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttribL2dvEXT", (void*)glVertexAttribL2dvEXT, 2, arg0, arg1);
     glad_glVertexAttribL2dvEXT(arg0, arg1);
    _post_call_callback("glVertexAttribL2dvEXT", (void*)glVertexAttribL2dvEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL2DVEXTPROC glad_debug_glVertexAttribL2dvEXT = glad_debug_impl_glVertexAttribL2dvEXT;
PFNGLVERTEXATTRIBL3DVEXTPROC glad_glVertexAttribL3dvEXT;
void APIENTRY glad_debug_impl_glVertexAttribL3dvEXT(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttribL3dvEXT", (void*)glVertexAttribL3dvEXT, 2, arg0, arg1);
     glad_glVertexAttribL3dvEXT(arg0, arg1);
    _post_call_callback("glVertexAttribL3dvEXT", (void*)glVertexAttribL3dvEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL3DVEXTPROC glad_debug_glVertexAttribL3dvEXT = glad_debug_impl_glVertexAttribL3dvEXT;
PFNGLVERTEXATTRIBL4DVEXTPROC glad_glVertexAttribL4dvEXT;
void APIENTRY glad_debug_impl_glVertexAttribL4dvEXT(GLuint arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexAttribL4dvEXT", (void*)glVertexAttribL4dvEXT, 2, arg0, arg1);
     glad_glVertexAttribL4dvEXT(arg0, arg1);
    _post_call_callback("glVertexAttribL4dvEXT", (void*)glVertexAttribL4dvEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBL4DVEXTPROC glad_debug_glVertexAttribL4dvEXT = glad_debug_impl_glVertexAttribL4dvEXT;
PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_glVertexAttribLPointerEXT;
void APIENTRY glad_debug_impl_glVertexAttribLPointerEXT(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glVertexAttribLPointerEXT", (void*)glVertexAttribLPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribLPointerEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribLPointerEXT", (void*)glVertexAttribLPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_debug_glVertexAttribLPointerEXT = glad_debug_impl_glVertexAttribLPointerEXT;
PFNGLGETVERTEXATTRIBLDVEXTPROC glad_glGetVertexAttribLdvEXT;
void APIENTRY glad_debug_impl_glGetVertexAttribLdvEXT(GLuint arg0, GLenum arg1, GLdouble* arg2) {
    _pre_call_callback("glGetVertexAttribLdvEXT", (void*)glGetVertexAttribLdvEXT, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribLdvEXT(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribLdvEXT", (void*)glGetVertexAttribLdvEXT, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBLDVEXTPROC glad_debug_glGetVertexAttribLdvEXT = glad_debug_impl_glGetVertexAttribLdvEXT;
PFNGLQUERYMATRIXXOESPROC glad_glQueryMatrixxOES;
GLbitfield APIENTRY glad_debug_impl_glQueryMatrixxOES(GLfixed* arg0, GLint* arg1) {
    GLbitfield ret;
    _pre_call_callback("glQueryMatrixxOES", (void*)glQueryMatrixxOES, 2, arg0, arg1);
    ret =  glad_glQueryMatrixxOES(arg0, arg1);
    _post_call_callback("glQueryMatrixxOES", (void*)glQueryMatrixxOES, 2, arg0, arg1);
    return ret;
}
PFNGLQUERYMATRIXXOESPROC glad_debug_glQueryMatrixxOES = glad_debug_impl_glQueryMatrixxOES;
PFNGLWINDOWPOS2DMESAPROC glad_glWindowPos2dMESA;
void APIENTRY glad_debug_impl_glWindowPos2dMESA(GLdouble arg0, GLdouble arg1) {
    _pre_call_callback("glWindowPos2dMESA", (void*)glWindowPos2dMESA, 2, arg0, arg1);
     glad_glWindowPos2dMESA(arg0, arg1);
    _post_call_callback("glWindowPos2dMESA", (void*)glWindowPos2dMESA, 2, arg0, arg1);

}
PFNGLWINDOWPOS2DMESAPROC glad_debug_glWindowPos2dMESA = glad_debug_impl_glWindowPos2dMESA;
PFNGLWINDOWPOS2DVMESAPROC glad_glWindowPos2dvMESA;
void APIENTRY glad_debug_impl_glWindowPos2dvMESA(const GLdouble* arg0) {
    _pre_call_callback("glWindowPos2dvMESA", (void*)glWindowPos2dvMESA, 1, arg0);
     glad_glWindowPos2dvMESA(arg0);
    _post_call_callback("glWindowPos2dvMESA", (void*)glWindowPos2dvMESA, 1, arg0);

}
PFNGLWINDOWPOS2DVMESAPROC glad_debug_glWindowPos2dvMESA = glad_debug_impl_glWindowPos2dvMESA;
PFNGLWINDOWPOS2FMESAPROC glad_glWindowPos2fMESA;
void APIENTRY glad_debug_impl_glWindowPos2fMESA(GLfloat arg0, GLfloat arg1) {
    _pre_call_callback("glWindowPos2fMESA", (void*)glWindowPos2fMESA, 2, arg0, arg1);
     glad_glWindowPos2fMESA(arg0, arg1);
    _post_call_callback("glWindowPos2fMESA", (void*)glWindowPos2fMESA, 2, arg0, arg1);

}
PFNGLWINDOWPOS2FMESAPROC glad_debug_glWindowPos2fMESA = glad_debug_impl_glWindowPos2fMESA;
PFNGLWINDOWPOS2FVMESAPROC glad_glWindowPos2fvMESA;
void APIENTRY glad_debug_impl_glWindowPos2fvMESA(const GLfloat* arg0) {
    _pre_call_callback("glWindowPos2fvMESA", (void*)glWindowPos2fvMESA, 1, arg0);
     glad_glWindowPos2fvMESA(arg0);
    _post_call_callback("glWindowPos2fvMESA", (void*)glWindowPos2fvMESA, 1, arg0);

}
PFNGLWINDOWPOS2FVMESAPROC glad_debug_glWindowPos2fvMESA = glad_debug_impl_glWindowPos2fvMESA;
PFNGLWINDOWPOS2IMESAPROC glad_glWindowPos2iMESA;
void APIENTRY glad_debug_impl_glWindowPos2iMESA(GLint arg0, GLint arg1) {
    _pre_call_callback("glWindowPos2iMESA", (void*)glWindowPos2iMESA, 2, arg0, arg1);
     glad_glWindowPos2iMESA(arg0, arg1);
    _post_call_callback("glWindowPos2iMESA", (void*)glWindowPos2iMESA, 2, arg0, arg1);

}
PFNGLWINDOWPOS2IMESAPROC glad_debug_glWindowPos2iMESA = glad_debug_impl_glWindowPos2iMESA;
PFNGLWINDOWPOS2IVMESAPROC glad_glWindowPos2ivMESA;
void APIENTRY glad_debug_impl_glWindowPos2ivMESA(const GLint* arg0) {
    _pre_call_callback("glWindowPos2ivMESA", (void*)glWindowPos2ivMESA, 1, arg0);
     glad_glWindowPos2ivMESA(arg0);
    _post_call_callback("glWindowPos2ivMESA", (void*)glWindowPos2ivMESA, 1, arg0);

}
PFNGLWINDOWPOS2IVMESAPROC glad_debug_glWindowPos2ivMESA = glad_debug_impl_glWindowPos2ivMESA;
PFNGLWINDOWPOS2SMESAPROC glad_glWindowPos2sMESA;
void APIENTRY glad_debug_impl_glWindowPos2sMESA(GLshort arg0, GLshort arg1) {
    _pre_call_callback("glWindowPos2sMESA", (void*)glWindowPos2sMESA, 2, arg0, arg1);
     glad_glWindowPos2sMESA(arg0, arg1);
    _post_call_callback("glWindowPos2sMESA", (void*)glWindowPos2sMESA, 2, arg0, arg1);

}
PFNGLWINDOWPOS2SMESAPROC glad_debug_glWindowPos2sMESA = glad_debug_impl_glWindowPos2sMESA;
PFNGLWINDOWPOS2SVMESAPROC glad_glWindowPos2svMESA;
void APIENTRY glad_debug_impl_glWindowPos2svMESA(const GLshort* arg0) {
    _pre_call_callback("glWindowPos2svMESA", (void*)glWindowPos2svMESA, 1, arg0);
     glad_glWindowPos2svMESA(arg0);
    _post_call_callback("glWindowPos2svMESA", (void*)glWindowPos2svMESA, 1, arg0);

}
PFNGLWINDOWPOS2SVMESAPROC glad_debug_glWindowPos2svMESA = glad_debug_impl_glWindowPos2svMESA;
PFNGLWINDOWPOS3DMESAPROC glad_glWindowPos3dMESA;
void APIENTRY glad_debug_impl_glWindowPos3dMESA(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glWindowPos3dMESA", (void*)glWindowPos3dMESA, 3, arg0, arg1, arg2);
     glad_glWindowPos3dMESA(arg0, arg1, arg2);
    _post_call_callback("glWindowPos3dMESA", (void*)glWindowPos3dMESA, 3, arg0, arg1, arg2);

}
PFNGLWINDOWPOS3DMESAPROC glad_debug_glWindowPos3dMESA = glad_debug_impl_glWindowPos3dMESA;
PFNGLWINDOWPOS3DVMESAPROC glad_glWindowPos3dvMESA;
void APIENTRY glad_debug_impl_glWindowPos3dvMESA(const GLdouble* arg0) {
    _pre_call_callback("glWindowPos3dvMESA", (void*)glWindowPos3dvMESA, 1, arg0);
     glad_glWindowPos3dvMESA(arg0);
    _post_call_callback("glWindowPos3dvMESA", (void*)glWindowPos3dvMESA, 1, arg0);

}
PFNGLWINDOWPOS3DVMESAPROC glad_debug_glWindowPos3dvMESA = glad_debug_impl_glWindowPos3dvMESA;
PFNGLWINDOWPOS3FMESAPROC glad_glWindowPos3fMESA;
void APIENTRY glad_debug_impl_glWindowPos3fMESA(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glWindowPos3fMESA", (void*)glWindowPos3fMESA, 3, arg0, arg1, arg2);
     glad_glWindowPos3fMESA(arg0, arg1, arg2);
    _post_call_callback("glWindowPos3fMESA", (void*)glWindowPos3fMESA, 3, arg0, arg1, arg2);

}
PFNGLWINDOWPOS3FMESAPROC glad_debug_glWindowPos3fMESA = glad_debug_impl_glWindowPos3fMESA;
PFNGLWINDOWPOS3FVMESAPROC glad_glWindowPos3fvMESA;
void APIENTRY glad_debug_impl_glWindowPos3fvMESA(const GLfloat* arg0) {
    _pre_call_callback("glWindowPos3fvMESA", (void*)glWindowPos3fvMESA, 1, arg0);
     glad_glWindowPos3fvMESA(arg0);
    _post_call_callback("glWindowPos3fvMESA", (void*)glWindowPos3fvMESA, 1, arg0);

}
PFNGLWINDOWPOS3FVMESAPROC glad_debug_glWindowPos3fvMESA = glad_debug_impl_glWindowPos3fvMESA;
PFNGLWINDOWPOS3IMESAPROC glad_glWindowPos3iMESA;
void APIENTRY glad_debug_impl_glWindowPos3iMESA(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glWindowPos3iMESA", (void*)glWindowPos3iMESA, 3, arg0, arg1, arg2);
     glad_glWindowPos3iMESA(arg0, arg1, arg2);
    _post_call_callback("glWindowPos3iMESA", (void*)glWindowPos3iMESA, 3, arg0, arg1, arg2);

}
PFNGLWINDOWPOS3IMESAPROC glad_debug_glWindowPos3iMESA = glad_debug_impl_glWindowPos3iMESA;
PFNGLWINDOWPOS3IVMESAPROC glad_glWindowPos3ivMESA;
void APIENTRY glad_debug_impl_glWindowPos3ivMESA(const GLint* arg0) {
    _pre_call_callback("glWindowPos3ivMESA", (void*)glWindowPos3ivMESA, 1, arg0);
     glad_glWindowPos3ivMESA(arg0);
    _post_call_callback("glWindowPos3ivMESA", (void*)glWindowPos3ivMESA, 1, arg0);

}
PFNGLWINDOWPOS3IVMESAPROC glad_debug_glWindowPos3ivMESA = glad_debug_impl_glWindowPos3ivMESA;
PFNGLWINDOWPOS3SMESAPROC glad_glWindowPos3sMESA;
void APIENTRY glad_debug_impl_glWindowPos3sMESA(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glWindowPos3sMESA", (void*)glWindowPos3sMESA, 3, arg0, arg1, arg2);
     glad_glWindowPos3sMESA(arg0, arg1, arg2);
    _post_call_callback("glWindowPos3sMESA", (void*)glWindowPos3sMESA, 3, arg0, arg1, arg2);

}
PFNGLWINDOWPOS3SMESAPROC glad_debug_glWindowPos3sMESA = glad_debug_impl_glWindowPos3sMESA;
PFNGLWINDOWPOS3SVMESAPROC glad_glWindowPos3svMESA;
void APIENTRY glad_debug_impl_glWindowPos3svMESA(const GLshort* arg0) {
    _pre_call_callback("glWindowPos3svMESA", (void*)glWindowPos3svMESA, 1, arg0);
     glad_glWindowPos3svMESA(arg0);
    _post_call_callback("glWindowPos3svMESA", (void*)glWindowPos3svMESA, 1, arg0);

}
PFNGLWINDOWPOS3SVMESAPROC glad_debug_glWindowPos3svMESA = glad_debug_impl_glWindowPos3svMESA;
PFNGLWINDOWPOS4DMESAPROC glad_glWindowPos4dMESA;
void APIENTRY glad_debug_impl_glWindowPos4dMESA(GLdouble arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glWindowPos4dMESA", (void*)glWindowPos4dMESA, 4, arg0, arg1, arg2, arg3);
     glad_glWindowPos4dMESA(arg0, arg1, arg2, arg3);
    _post_call_callback("glWindowPos4dMESA", (void*)glWindowPos4dMESA, 4, arg0, arg1, arg2, arg3);

}
PFNGLWINDOWPOS4DMESAPROC glad_debug_glWindowPos4dMESA = glad_debug_impl_glWindowPos4dMESA;
PFNGLWINDOWPOS4DVMESAPROC glad_glWindowPos4dvMESA;
void APIENTRY glad_debug_impl_glWindowPos4dvMESA(const GLdouble* arg0) {
    _pre_call_callback("glWindowPos4dvMESA", (void*)glWindowPos4dvMESA, 1, arg0);
     glad_glWindowPos4dvMESA(arg0);
    _post_call_callback("glWindowPos4dvMESA", (void*)glWindowPos4dvMESA, 1, arg0);

}
PFNGLWINDOWPOS4DVMESAPROC glad_debug_glWindowPos4dvMESA = glad_debug_impl_glWindowPos4dvMESA;
PFNGLWINDOWPOS4FMESAPROC glad_glWindowPos4fMESA;
void APIENTRY glad_debug_impl_glWindowPos4fMESA(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glWindowPos4fMESA", (void*)glWindowPos4fMESA, 4, arg0, arg1, arg2, arg3);
     glad_glWindowPos4fMESA(arg0, arg1, arg2, arg3);
    _post_call_callback("glWindowPos4fMESA", (void*)glWindowPos4fMESA, 4, arg0, arg1, arg2, arg3);

}
PFNGLWINDOWPOS4FMESAPROC glad_debug_glWindowPos4fMESA = glad_debug_impl_glWindowPos4fMESA;
PFNGLWINDOWPOS4FVMESAPROC glad_glWindowPos4fvMESA;
void APIENTRY glad_debug_impl_glWindowPos4fvMESA(const GLfloat* arg0) {
    _pre_call_callback("glWindowPos4fvMESA", (void*)glWindowPos4fvMESA, 1, arg0);
     glad_glWindowPos4fvMESA(arg0);
    _post_call_callback("glWindowPos4fvMESA", (void*)glWindowPos4fvMESA, 1, arg0);

}
PFNGLWINDOWPOS4FVMESAPROC glad_debug_glWindowPos4fvMESA = glad_debug_impl_glWindowPos4fvMESA;
PFNGLWINDOWPOS4IMESAPROC glad_glWindowPos4iMESA;
void APIENTRY glad_debug_impl_glWindowPos4iMESA(GLint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glWindowPos4iMESA", (void*)glWindowPos4iMESA, 4, arg0, arg1, arg2, arg3);
     glad_glWindowPos4iMESA(arg0, arg1, arg2, arg3);
    _post_call_callback("glWindowPos4iMESA", (void*)glWindowPos4iMESA, 4, arg0, arg1, arg2, arg3);

}
PFNGLWINDOWPOS4IMESAPROC glad_debug_glWindowPos4iMESA = glad_debug_impl_glWindowPos4iMESA;
PFNGLWINDOWPOS4IVMESAPROC glad_glWindowPos4ivMESA;
void APIENTRY glad_debug_impl_glWindowPos4ivMESA(const GLint* arg0) {
    _pre_call_callback("glWindowPos4ivMESA", (void*)glWindowPos4ivMESA, 1, arg0);
     glad_glWindowPos4ivMESA(arg0);
    _post_call_callback("glWindowPos4ivMESA", (void*)glWindowPos4ivMESA, 1, arg0);

}
PFNGLWINDOWPOS4IVMESAPROC glad_debug_glWindowPos4ivMESA = glad_debug_impl_glWindowPos4ivMESA;
PFNGLWINDOWPOS4SMESAPROC glad_glWindowPos4sMESA;
void APIENTRY glad_debug_impl_glWindowPos4sMESA(GLshort arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_callback("glWindowPos4sMESA", (void*)glWindowPos4sMESA, 4, arg0, arg1, arg2, arg3);
     glad_glWindowPos4sMESA(arg0, arg1, arg2, arg3);
    _post_call_callback("glWindowPos4sMESA", (void*)glWindowPos4sMESA, 4, arg0, arg1, arg2, arg3);

}
PFNGLWINDOWPOS4SMESAPROC glad_debug_glWindowPos4sMESA = glad_debug_impl_glWindowPos4sMESA;
PFNGLWINDOWPOS4SVMESAPROC glad_glWindowPos4svMESA;
void APIENTRY glad_debug_impl_glWindowPos4svMESA(const GLshort* arg0) {
    _pre_call_callback("glWindowPos4svMESA", (void*)glWindowPos4svMESA, 1, arg0);
     glad_glWindowPos4svMESA(arg0);
    _post_call_callback("glWindowPos4svMESA", (void*)glWindowPos4svMESA, 1, arg0);

}
PFNGLWINDOWPOS4SVMESAPROC glad_debug_glWindowPos4svMESA = glad_debug_impl_glWindowPos4svMESA;
PFNGLOBJECTPURGEABLEAPPLEPROC glad_glObjectPurgeableAPPLE;
GLenum APIENTRY glad_debug_impl_glObjectPurgeableAPPLE(GLenum arg0, GLuint arg1, GLenum arg2) {
    GLenum ret;
    _pre_call_callback("glObjectPurgeableAPPLE", (void*)glObjectPurgeableAPPLE, 3, arg0, arg1, arg2);
    ret =  glad_glObjectPurgeableAPPLE(arg0, arg1, arg2);
    _post_call_callback("glObjectPurgeableAPPLE", (void*)glObjectPurgeableAPPLE, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLOBJECTPURGEABLEAPPLEPROC glad_debug_glObjectPurgeableAPPLE = glad_debug_impl_glObjectPurgeableAPPLE;
PFNGLOBJECTUNPURGEABLEAPPLEPROC glad_glObjectUnpurgeableAPPLE;
GLenum APIENTRY glad_debug_impl_glObjectUnpurgeableAPPLE(GLenum arg0, GLuint arg1, GLenum arg2) {
    GLenum ret;
    _pre_call_callback("glObjectUnpurgeableAPPLE", (void*)glObjectUnpurgeableAPPLE, 3, arg0, arg1, arg2);
    ret =  glad_glObjectUnpurgeableAPPLE(arg0, arg1, arg2);
    _post_call_callback("glObjectUnpurgeableAPPLE", (void*)glObjectUnpurgeableAPPLE, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLOBJECTUNPURGEABLEAPPLEPROC glad_debug_glObjectUnpurgeableAPPLE = glad_debug_impl_glObjectUnpurgeableAPPLE;
PFNGLGETOBJECTPARAMETERIVAPPLEPROC glad_glGetObjectParameterivAPPLE;
void APIENTRY glad_debug_impl_glGetObjectParameterivAPPLE(GLenum arg0, GLuint arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetObjectParameterivAPPLE", (void*)glGetObjectParameterivAPPLE, 4, arg0, arg1, arg2, arg3);
     glad_glGetObjectParameterivAPPLE(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetObjectParameterivAPPLE", (void*)glGetObjectParameterivAPPLE, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETOBJECTPARAMETERIVAPPLEPROC glad_debug_glGetObjectParameterivAPPLE = glad_debug_impl_glGetObjectParameterivAPPLE;
PFNGLGENQUERIESARBPROC glad_glGenQueriesARB;
void APIENTRY glad_debug_impl_glGenQueriesARB(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenQueriesARB", (void*)glGenQueriesARB, 2, arg0, arg1);
     glad_glGenQueriesARB(arg0, arg1);
    _post_call_callback("glGenQueriesARB", (void*)glGenQueriesARB, 2, arg0, arg1);

}
PFNGLGENQUERIESARBPROC glad_debug_glGenQueriesARB = glad_debug_impl_glGenQueriesARB;
PFNGLDELETEQUERIESARBPROC glad_glDeleteQueriesARB;
void APIENTRY glad_debug_impl_glDeleteQueriesARB(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteQueriesARB", (void*)glDeleteQueriesARB, 2, arg0, arg1);
     glad_glDeleteQueriesARB(arg0, arg1);
    _post_call_callback("glDeleteQueriesARB", (void*)glDeleteQueriesARB, 2, arg0, arg1);

}
PFNGLDELETEQUERIESARBPROC glad_debug_glDeleteQueriesARB = glad_debug_impl_glDeleteQueriesARB;
PFNGLISQUERYARBPROC glad_glIsQueryARB;
GLboolean APIENTRY glad_debug_impl_glIsQueryARB(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsQueryARB", (void*)glIsQueryARB, 1, arg0);
    ret =  glad_glIsQueryARB(arg0);
    _post_call_callback("glIsQueryARB", (void*)glIsQueryARB, 1, arg0);
    return ret;
}
PFNGLISQUERYARBPROC glad_debug_glIsQueryARB = glad_debug_impl_glIsQueryARB;
PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB;
void APIENTRY glad_debug_impl_glBeginQueryARB(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBeginQueryARB", (void*)glBeginQueryARB, 2, arg0, arg1);
     glad_glBeginQueryARB(arg0, arg1);
    _post_call_callback("glBeginQueryARB", (void*)glBeginQueryARB, 2, arg0, arg1);

}
PFNGLBEGINQUERYARBPROC glad_debug_glBeginQueryARB = glad_debug_impl_glBeginQueryARB;
PFNGLENDQUERYARBPROC glad_glEndQueryARB;
void APIENTRY glad_debug_impl_glEndQueryARB(GLenum arg0) {
    _pre_call_callback("glEndQueryARB", (void*)glEndQueryARB, 1, arg0);
     glad_glEndQueryARB(arg0);
    _post_call_callback("glEndQueryARB", (void*)glEndQueryARB, 1, arg0);

}
PFNGLENDQUERYARBPROC glad_debug_glEndQueryARB = glad_debug_impl_glEndQueryARB;
PFNGLGETQUERYIVARBPROC glad_glGetQueryivARB;
void APIENTRY glad_debug_impl_glGetQueryivARB(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetQueryivARB", (void*)glGetQueryivARB, 3, arg0, arg1, arg2);
     glad_glGetQueryivARB(arg0, arg1, arg2);
    _post_call_callback("glGetQueryivARB", (void*)glGetQueryivARB, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYIVARBPROC glad_debug_glGetQueryivARB = glad_debug_impl_glGetQueryivARB;
PFNGLGETQUERYOBJECTIVARBPROC glad_glGetQueryObjectivARB;
void APIENTRY glad_debug_impl_glGetQueryObjectivARB(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetQueryObjectivARB", (void*)glGetQueryObjectivARB, 3, arg0, arg1, arg2);
     glad_glGetQueryObjectivARB(arg0, arg1, arg2);
    _post_call_callback("glGetQueryObjectivARB", (void*)glGetQueryObjectivARB, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYOBJECTIVARBPROC glad_debug_glGetQueryObjectivARB = glad_debug_impl_glGetQueryObjectivARB;
PFNGLGETQUERYOBJECTUIVARBPROC glad_glGetQueryObjectuivARB;
void APIENTRY glad_debug_impl_glGetQueryObjectuivARB(GLuint arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetQueryObjectuivARB", (void*)glGetQueryObjectuivARB, 3, arg0, arg1, arg2);
     glad_glGetQueryObjectuivARB(arg0, arg1, arg2);
    _post_call_callback("glGetQueryObjectuivARB", (void*)glGetQueryObjectuivARB, 3, arg0, arg1, arg2);

}
PFNGLGETQUERYOBJECTUIVARBPROC glad_debug_glGetQueryObjectuivARB = glad_debug_impl_glGetQueryObjectuivARB;
PFNGLCOLORTABLESGIPROC glad_glColorTableSGI;
void APIENTRY glad_debug_impl_glColorTableSGI(GLenum arg0, GLenum arg1, GLsizei arg2, GLenum arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glColorTableSGI", (void*)glColorTableSGI, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glColorTableSGI(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glColorTableSGI", (void*)glColorTableSGI, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOLORTABLESGIPROC glad_debug_glColorTableSGI = glad_debug_impl_glColorTableSGI;
PFNGLCOLORTABLEPARAMETERFVSGIPROC glad_glColorTableParameterfvSGI;
void APIENTRY glad_debug_impl_glColorTableParameterfvSGI(GLenum arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glColorTableParameterfvSGI", (void*)glColorTableParameterfvSGI, 3, arg0, arg1, arg2);
     glad_glColorTableParameterfvSGI(arg0, arg1, arg2);
    _post_call_callback("glColorTableParameterfvSGI", (void*)glColorTableParameterfvSGI, 3, arg0, arg1, arg2);

}
PFNGLCOLORTABLEPARAMETERFVSGIPROC glad_debug_glColorTableParameterfvSGI = glad_debug_impl_glColorTableParameterfvSGI;
PFNGLCOLORTABLEPARAMETERIVSGIPROC glad_glColorTableParameterivSGI;
void APIENTRY glad_debug_impl_glColorTableParameterivSGI(GLenum arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glColorTableParameterivSGI", (void*)glColorTableParameterivSGI, 3, arg0, arg1, arg2);
     glad_glColorTableParameterivSGI(arg0, arg1, arg2);
    _post_call_callback("glColorTableParameterivSGI", (void*)glColorTableParameterivSGI, 3, arg0, arg1, arg2);

}
PFNGLCOLORTABLEPARAMETERIVSGIPROC glad_debug_glColorTableParameterivSGI = glad_debug_impl_glColorTableParameterivSGI;
PFNGLCOPYCOLORTABLESGIPROC glad_glCopyColorTableSGI;
void APIENTRY glad_debug_impl_glCopyColorTableSGI(GLenum arg0, GLenum arg1, GLint arg2, GLint arg3, GLsizei arg4) {
    _pre_call_callback("glCopyColorTableSGI", (void*)glCopyColorTableSGI, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glCopyColorTableSGI(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glCopyColorTableSGI", (void*)glCopyColorTableSGI, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLCOPYCOLORTABLESGIPROC glad_debug_glCopyColorTableSGI = glad_debug_impl_glCopyColorTableSGI;
PFNGLGETCOLORTABLESGIPROC glad_glGetColorTableSGI;
void APIENTRY glad_debug_impl_glGetColorTableSGI(GLenum arg0, GLenum arg1, GLenum arg2, void* arg3) {
    _pre_call_callback("glGetColorTableSGI", (void*)glGetColorTableSGI, 4, arg0, arg1, arg2, arg3);
     glad_glGetColorTableSGI(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetColorTableSGI", (void*)glGetColorTableSGI, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCOLORTABLESGIPROC glad_debug_glGetColorTableSGI = glad_debug_impl_glGetColorTableSGI;
PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glad_glGetColorTableParameterfvSGI;
void APIENTRY glad_debug_impl_glGetColorTableParameterfvSGI(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetColorTableParameterfvSGI", (void*)glGetColorTableParameterfvSGI, 3, arg0, arg1, arg2);
     glad_glGetColorTableParameterfvSGI(arg0, arg1, arg2);
    _post_call_callback("glGetColorTableParameterfvSGI", (void*)glGetColorTableParameterfvSGI, 3, arg0, arg1, arg2);

}
PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glad_debug_glGetColorTableParameterfvSGI = glad_debug_impl_glGetColorTableParameterfvSGI;
PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glad_glGetColorTableParameterivSGI;
void APIENTRY glad_debug_impl_glGetColorTableParameterivSGI(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetColorTableParameterivSGI", (void*)glGetColorTableParameterivSGI, 3, arg0, arg1, arg2);
     glad_glGetColorTableParameterivSGI(arg0, arg1, arg2);
    _post_call_callback("glGetColorTableParameterivSGI", (void*)glGetColorTableParameterivSGI, 3, arg0, arg1, arg2);

}
PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glad_debug_glGetColorTableParameterivSGI = glad_debug_impl_glGetColorTableParameterivSGI;
PFNGLGETUNIFORMUIVEXTPROC glad_glGetUniformuivEXT;
void APIENTRY glad_debug_impl_glGetUniformuivEXT(GLuint arg0, GLint arg1, GLuint* arg2) {
    _pre_call_callback("glGetUniformuivEXT", (void*)glGetUniformuivEXT, 3, arg0, arg1, arg2);
     glad_glGetUniformuivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetUniformuivEXT", (void*)glGetUniformuivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMUIVEXTPROC glad_debug_glGetUniformuivEXT = glad_debug_impl_glGetUniformuivEXT;
PFNGLBINDFRAGDATALOCATIONEXTPROC glad_glBindFragDataLocationEXT;
void APIENTRY glad_debug_impl_glBindFragDataLocationEXT(GLuint arg0, GLuint arg1, const GLchar* arg2) {
    _pre_call_callback("glBindFragDataLocationEXT", (void*)glBindFragDataLocationEXT, 3, arg0, arg1, arg2);
     glad_glBindFragDataLocationEXT(arg0, arg1, arg2);
    _post_call_callback("glBindFragDataLocationEXT", (void*)glBindFragDataLocationEXT, 3, arg0, arg1, arg2);

}
PFNGLBINDFRAGDATALOCATIONEXTPROC glad_debug_glBindFragDataLocationEXT = glad_debug_impl_glBindFragDataLocationEXT;
PFNGLGETFRAGDATALOCATIONEXTPROC glad_glGetFragDataLocationEXT;
GLint APIENTRY glad_debug_impl_glGetFragDataLocationEXT(GLuint arg0, const GLchar* arg1) {
    GLint ret;
    _pre_call_callback("glGetFragDataLocationEXT", (void*)glGetFragDataLocationEXT, 2, arg0, arg1);
    ret =  glad_glGetFragDataLocationEXT(arg0, arg1);
    _post_call_callback("glGetFragDataLocationEXT", (void*)glGetFragDataLocationEXT, 2, arg0, arg1);
    return ret;
}
PFNGLGETFRAGDATALOCATIONEXTPROC glad_debug_glGetFragDataLocationEXT = glad_debug_impl_glGetFragDataLocationEXT;
PFNGLUNIFORM1UIEXTPROC glad_glUniform1uiEXT;
void APIENTRY glad_debug_impl_glUniform1uiEXT(GLint arg0, GLuint arg1) {
    _pre_call_callback("glUniform1uiEXT", (void*)glUniform1uiEXT, 2, arg0, arg1);
     glad_glUniform1uiEXT(arg0, arg1);
    _post_call_callback("glUniform1uiEXT", (void*)glUniform1uiEXT, 2, arg0, arg1);

}
PFNGLUNIFORM1UIEXTPROC glad_debug_glUniform1uiEXT = glad_debug_impl_glUniform1uiEXT;
PFNGLUNIFORM2UIEXTPROC glad_glUniform2uiEXT;
void APIENTRY glad_debug_impl_glUniform2uiEXT(GLint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glUniform2uiEXT", (void*)glUniform2uiEXT, 3, arg0, arg1, arg2);
     glad_glUniform2uiEXT(arg0, arg1, arg2);
    _post_call_callback("glUniform2uiEXT", (void*)glUniform2uiEXT, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2UIEXTPROC glad_debug_glUniform2uiEXT = glad_debug_impl_glUniform2uiEXT;
PFNGLUNIFORM3UIEXTPROC glad_glUniform3uiEXT;
void APIENTRY glad_debug_impl_glUniform3uiEXT(GLint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_callback("glUniform3uiEXT", (void*)glUniform3uiEXT, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3uiEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3uiEXT", (void*)glUniform3uiEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3UIEXTPROC glad_debug_glUniform3uiEXT = glad_debug_impl_glUniform3uiEXT;
PFNGLUNIFORM4UIEXTPROC glad_glUniform4uiEXT;
void APIENTRY glad_debug_impl_glUniform4uiEXT(GLint arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_callback("glUniform4uiEXT", (void*)glUniform4uiEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4uiEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4uiEXT", (void*)glUniform4uiEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4UIEXTPROC glad_debug_glUniform4uiEXT = glad_debug_impl_glUniform4uiEXT;
PFNGLUNIFORM1UIVEXTPROC glad_glUniform1uivEXT;
void APIENTRY glad_debug_impl_glUniform1uivEXT(GLint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glUniform1uivEXT", (void*)glUniform1uivEXT, 3, arg0, arg1, arg2);
     glad_glUniform1uivEXT(arg0, arg1, arg2);
    _post_call_callback("glUniform1uivEXT", (void*)glUniform1uivEXT, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1UIVEXTPROC glad_debug_glUniform1uivEXT = glad_debug_impl_glUniform1uivEXT;
PFNGLUNIFORM2UIVEXTPROC glad_glUniform2uivEXT;
void APIENTRY glad_debug_impl_glUniform2uivEXT(GLint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glUniform2uivEXT", (void*)glUniform2uivEXT, 3, arg0, arg1, arg2);
     glad_glUniform2uivEXT(arg0, arg1, arg2);
    _post_call_callback("glUniform2uivEXT", (void*)glUniform2uivEXT, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2UIVEXTPROC glad_debug_glUniform2uivEXT = glad_debug_impl_glUniform2uivEXT;
PFNGLUNIFORM3UIVEXTPROC glad_glUniform3uivEXT;
void APIENTRY glad_debug_impl_glUniform3uivEXT(GLint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glUniform3uivEXT", (void*)glUniform3uivEXT, 3, arg0, arg1, arg2);
     glad_glUniform3uivEXT(arg0, arg1, arg2);
    _post_call_callback("glUniform3uivEXT", (void*)glUniform3uivEXT, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3UIVEXTPROC glad_debug_glUniform3uivEXT = glad_debug_impl_glUniform3uivEXT;
PFNGLUNIFORM4UIVEXTPROC glad_glUniform4uivEXT;
void APIENTRY glad_debug_impl_glUniform4uivEXT(GLint arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glUniform4uivEXT", (void*)glUniform4uivEXT, 3, arg0, arg1, arg2);
     glad_glUniform4uivEXT(arg0, arg1, arg2);
    _post_call_callback("glUniform4uivEXT", (void*)glUniform4uivEXT, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4UIVEXTPROC glad_debug_glUniform4uivEXT = glad_debug_impl_glUniform4uivEXT;
PFNGLPROGRAMVERTEXLIMITNVPROC glad_glProgramVertexLimitNV;
void APIENTRY glad_debug_impl_glProgramVertexLimitNV(GLenum arg0, GLint arg1) {
    _pre_call_callback("glProgramVertexLimitNV", (void*)glProgramVertexLimitNV, 2, arg0, arg1);
     glad_glProgramVertexLimitNV(arg0, arg1);
    _post_call_callback("glProgramVertexLimitNV", (void*)glProgramVertexLimitNV, 2, arg0, arg1);

}
PFNGLPROGRAMVERTEXLIMITNVPROC glad_debug_glProgramVertexLimitNV = glad_debug_impl_glProgramVertexLimitNV;
PFNGLFRAMEBUFFERTEXTUREEXTPROC glad_glFramebufferTextureEXT;
void APIENTRY glad_debug_impl_glFramebufferTextureEXT(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3) {
    _pre_call_callback("glFramebufferTextureEXT", (void*)glFramebufferTextureEXT, 4, arg0, arg1, arg2, arg3);
     glad_glFramebufferTextureEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glFramebufferTextureEXT", (void*)glFramebufferTextureEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLFRAMEBUFFERTEXTUREEXTPROC glad_debug_glFramebufferTextureEXT = glad_debug_impl_glFramebufferTextureEXT;
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glad_glFramebufferTextureFaceEXT;
void APIENTRY glad_debug_impl_glFramebufferTextureFaceEXT(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3, GLenum arg4) {
    _pre_call_callback("glFramebufferTextureFaceEXT", (void*)glFramebufferTextureFaceEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glFramebufferTextureFaceEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glFramebufferTextureFaceEXT", (void*)glFramebufferTextureFaceEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glad_debug_glFramebufferTextureFaceEXT = glad_debug_impl_glFramebufferTextureFaceEXT;
PFNGLDEBUGMESSAGEENABLEAMDPROC glad_glDebugMessageEnableAMD;
void APIENTRY glad_debug_impl_glDebugMessageEnableAMD(GLenum arg0, GLenum arg1, GLsizei arg2, const GLuint* arg3, GLboolean arg4) {
    _pre_call_callback("glDebugMessageEnableAMD", (void*)glDebugMessageEnableAMD, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDebugMessageEnableAMD(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDebugMessageEnableAMD", (void*)glDebugMessageEnableAMD, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDEBUGMESSAGEENABLEAMDPROC glad_debug_glDebugMessageEnableAMD = glad_debug_impl_glDebugMessageEnableAMD;
PFNGLDEBUGMESSAGEINSERTAMDPROC glad_glDebugMessageInsertAMD;
void APIENTRY glad_debug_impl_glDebugMessageInsertAMD(GLenum arg0, GLenum arg1, GLuint arg2, GLsizei arg3, const GLchar* arg4) {
    _pre_call_callback("glDebugMessageInsertAMD", (void*)glDebugMessageInsertAMD, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDebugMessageInsertAMD(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDebugMessageInsertAMD", (void*)glDebugMessageInsertAMD, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDEBUGMESSAGEINSERTAMDPROC glad_debug_glDebugMessageInsertAMD = glad_debug_impl_glDebugMessageInsertAMD;
PFNGLDEBUGMESSAGECALLBACKAMDPROC glad_glDebugMessageCallbackAMD;
void APIENTRY glad_debug_impl_glDebugMessageCallbackAMD(GLDEBUGPROCAMD arg0, void* arg1) {
    _pre_call_callback("glDebugMessageCallbackAMD", (void*)glDebugMessageCallbackAMD, 2, arg0, arg1);
     glad_glDebugMessageCallbackAMD(arg0, arg1);
    _post_call_callback("glDebugMessageCallbackAMD", (void*)glDebugMessageCallbackAMD, 2, arg0, arg1);

}
PFNGLDEBUGMESSAGECALLBACKAMDPROC glad_debug_glDebugMessageCallbackAMD = glad_debug_impl_glDebugMessageCallbackAMD;
PFNGLGETDEBUGMESSAGELOGAMDPROC glad_glGetDebugMessageLogAMD;
GLuint APIENTRY glad_debug_impl_glGetDebugMessageLogAMD(GLuint arg0, GLsizei arg1, GLenum* arg2, GLuint* arg3, GLuint* arg4, GLsizei* arg5, GLchar* arg6) {
    GLuint ret;
    _pre_call_callback("glGetDebugMessageLogAMD", (void*)glGetDebugMessageLogAMD, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    ret =  glad_glGetDebugMessageLogAMD(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetDebugMessageLogAMD", (void*)glGetDebugMessageLogAMD, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    return ret;
}
PFNGLGETDEBUGMESSAGELOGAMDPROC glad_debug_glGetDebugMessageLogAMD = glad_debug_impl_glGetDebugMessageLogAMD;
PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB;
void APIENTRY glad_debug_impl_glActiveTextureARB(GLenum arg0) {
    _pre_call_callback("glActiveTextureARB", (void*)glActiveTextureARB, 1, arg0);
     glad_glActiveTextureARB(arg0);
    _post_call_callback("glActiveTextureARB", (void*)glActiveTextureARB, 1, arg0);

}
PFNGLACTIVETEXTUREARBPROC glad_debug_glActiveTextureARB = glad_debug_impl_glActiveTextureARB;
PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB;
void APIENTRY glad_debug_impl_glClientActiveTextureARB(GLenum arg0) {
    _pre_call_callback("glClientActiveTextureARB", (void*)glClientActiveTextureARB, 1, arg0);
     glad_glClientActiveTextureARB(arg0);
    _post_call_callback("glClientActiveTextureARB", (void*)glClientActiveTextureARB, 1, arg0);

}
PFNGLCLIENTACTIVETEXTUREARBPROC glad_debug_glClientActiveTextureARB = glad_debug_impl_glClientActiveTextureARB;
PFNGLMULTITEXCOORD1DARBPROC glad_glMultiTexCoord1dARB;
void APIENTRY glad_debug_impl_glMultiTexCoord1dARB(GLenum arg0, GLdouble arg1) {
    _pre_call_callback("glMultiTexCoord1dARB", (void*)glMultiTexCoord1dARB, 2, arg0, arg1);
     glad_glMultiTexCoord1dARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord1dARB", (void*)glMultiTexCoord1dARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1DARBPROC glad_debug_glMultiTexCoord1dARB = glad_debug_impl_glMultiTexCoord1dARB;
PFNGLMULTITEXCOORD1DVARBPROC glad_glMultiTexCoord1dvARB;
void APIENTRY glad_debug_impl_glMultiTexCoord1dvARB(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glMultiTexCoord1dvARB", (void*)glMultiTexCoord1dvARB, 2, arg0, arg1);
     glad_glMultiTexCoord1dvARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord1dvARB", (void*)glMultiTexCoord1dvARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1DVARBPROC glad_debug_glMultiTexCoord1dvARB = glad_debug_impl_glMultiTexCoord1dvARB;
PFNGLMULTITEXCOORD1FARBPROC glad_glMultiTexCoord1fARB;
void APIENTRY glad_debug_impl_glMultiTexCoord1fARB(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glMultiTexCoord1fARB", (void*)glMultiTexCoord1fARB, 2, arg0, arg1);
     glad_glMultiTexCoord1fARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord1fARB", (void*)glMultiTexCoord1fARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1FARBPROC glad_debug_glMultiTexCoord1fARB = glad_debug_impl_glMultiTexCoord1fARB;
PFNGLMULTITEXCOORD1FVARBPROC glad_glMultiTexCoord1fvARB;
void APIENTRY glad_debug_impl_glMultiTexCoord1fvARB(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMultiTexCoord1fvARB", (void*)glMultiTexCoord1fvARB, 2, arg0, arg1);
     glad_glMultiTexCoord1fvARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord1fvARB", (void*)glMultiTexCoord1fvARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1FVARBPROC glad_debug_glMultiTexCoord1fvARB = glad_debug_impl_glMultiTexCoord1fvARB;
PFNGLMULTITEXCOORD1IARBPROC glad_glMultiTexCoord1iARB;
void APIENTRY glad_debug_impl_glMultiTexCoord1iARB(GLenum arg0, GLint arg1) {
    _pre_call_callback("glMultiTexCoord1iARB", (void*)glMultiTexCoord1iARB, 2, arg0, arg1);
     glad_glMultiTexCoord1iARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord1iARB", (void*)glMultiTexCoord1iARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1IARBPROC glad_debug_glMultiTexCoord1iARB = glad_debug_impl_glMultiTexCoord1iARB;
PFNGLMULTITEXCOORD1IVARBPROC glad_glMultiTexCoord1ivARB;
void APIENTRY glad_debug_impl_glMultiTexCoord1ivARB(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glMultiTexCoord1ivARB", (void*)glMultiTexCoord1ivARB, 2, arg0, arg1);
     glad_glMultiTexCoord1ivARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord1ivARB", (void*)glMultiTexCoord1ivARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1IVARBPROC glad_debug_glMultiTexCoord1ivARB = glad_debug_impl_glMultiTexCoord1ivARB;
PFNGLMULTITEXCOORD1SARBPROC glad_glMultiTexCoord1sARB;
void APIENTRY glad_debug_impl_glMultiTexCoord1sARB(GLenum arg0, GLshort arg1) {
    _pre_call_callback("glMultiTexCoord1sARB", (void*)glMultiTexCoord1sARB, 2, arg0, arg1);
     glad_glMultiTexCoord1sARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord1sARB", (void*)glMultiTexCoord1sARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1SARBPROC glad_debug_glMultiTexCoord1sARB = glad_debug_impl_glMultiTexCoord1sARB;
PFNGLMULTITEXCOORD1SVARBPROC glad_glMultiTexCoord1svARB;
void APIENTRY glad_debug_impl_glMultiTexCoord1svARB(GLenum arg0, const GLshort* arg1) {
    _pre_call_callback("glMultiTexCoord1svARB", (void*)glMultiTexCoord1svARB, 2, arg0, arg1);
     glad_glMultiTexCoord1svARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord1svARB", (void*)glMultiTexCoord1svARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1SVARBPROC glad_debug_glMultiTexCoord1svARB = glad_debug_impl_glMultiTexCoord1svARB;
PFNGLMULTITEXCOORD2DARBPROC glad_glMultiTexCoord2dARB;
void APIENTRY glad_debug_impl_glMultiTexCoord2dARB(GLenum arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glMultiTexCoord2dARB", (void*)glMultiTexCoord2dARB, 3, arg0, arg1, arg2);
     glad_glMultiTexCoord2dARB(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoord2dARB", (void*)glMultiTexCoord2dARB, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORD2DARBPROC glad_debug_glMultiTexCoord2dARB = glad_debug_impl_glMultiTexCoord2dARB;
PFNGLMULTITEXCOORD2DVARBPROC glad_glMultiTexCoord2dvARB;
void APIENTRY glad_debug_impl_glMultiTexCoord2dvARB(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glMultiTexCoord2dvARB", (void*)glMultiTexCoord2dvARB, 2, arg0, arg1);
     glad_glMultiTexCoord2dvARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord2dvARB", (void*)glMultiTexCoord2dvARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD2DVARBPROC glad_debug_glMultiTexCoord2dvARB = glad_debug_impl_glMultiTexCoord2dvARB;
PFNGLMULTITEXCOORD2FARBPROC glad_glMultiTexCoord2fARB;
void APIENTRY glad_debug_impl_glMultiTexCoord2fARB(GLenum arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glMultiTexCoord2fARB", (void*)glMultiTexCoord2fARB, 3, arg0, arg1, arg2);
     glad_glMultiTexCoord2fARB(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoord2fARB", (void*)glMultiTexCoord2fARB, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORD2FARBPROC glad_debug_glMultiTexCoord2fARB = glad_debug_impl_glMultiTexCoord2fARB;
PFNGLMULTITEXCOORD2FVARBPROC glad_glMultiTexCoord2fvARB;
void APIENTRY glad_debug_impl_glMultiTexCoord2fvARB(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMultiTexCoord2fvARB", (void*)glMultiTexCoord2fvARB, 2, arg0, arg1);
     glad_glMultiTexCoord2fvARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord2fvARB", (void*)glMultiTexCoord2fvARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD2FVARBPROC glad_debug_glMultiTexCoord2fvARB = glad_debug_impl_glMultiTexCoord2fvARB;
PFNGLMULTITEXCOORD2IARBPROC glad_glMultiTexCoord2iARB;
void APIENTRY glad_debug_impl_glMultiTexCoord2iARB(GLenum arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glMultiTexCoord2iARB", (void*)glMultiTexCoord2iARB, 3, arg0, arg1, arg2);
     glad_glMultiTexCoord2iARB(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoord2iARB", (void*)glMultiTexCoord2iARB, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORD2IARBPROC glad_debug_glMultiTexCoord2iARB = glad_debug_impl_glMultiTexCoord2iARB;
PFNGLMULTITEXCOORD2IVARBPROC glad_glMultiTexCoord2ivARB;
void APIENTRY glad_debug_impl_glMultiTexCoord2ivARB(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glMultiTexCoord2ivARB", (void*)glMultiTexCoord2ivARB, 2, arg0, arg1);
     glad_glMultiTexCoord2ivARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord2ivARB", (void*)glMultiTexCoord2ivARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD2IVARBPROC glad_debug_glMultiTexCoord2ivARB = glad_debug_impl_glMultiTexCoord2ivARB;
PFNGLMULTITEXCOORD2SARBPROC glad_glMultiTexCoord2sARB;
void APIENTRY glad_debug_impl_glMultiTexCoord2sARB(GLenum arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glMultiTexCoord2sARB", (void*)glMultiTexCoord2sARB, 3, arg0, arg1, arg2);
     glad_glMultiTexCoord2sARB(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoord2sARB", (void*)glMultiTexCoord2sARB, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORD2SARBPROC glad_debug_glMultiTexCoord2sARB = glad_debug_impl_glMultiTexCoord2sARB;
PFNGLMULTITEXCOORD2SVARBPROC glad_glMultiTexCoord2svARB;
void APIENTRY glad_debug_impl_glMultiTexCoord2svARB(GLenum arg0, const GLshort* arg1) {
    _pre_call_callback("glMultiTexCoord2svARB", (void*)glMultiTexCoord2svARB, 2, arg0, arg1);
     glad_glMultiTexCoord2svARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord2svARB", (void*)glMultiTexCoord2svARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD2SVARBPROC glad_debug_glMultiTexCoord2svARB = glad_debug_impl_glMultiTexCoord2svARB;
PFNGLMULTITEXCOORD3DARBPROC glad_glMultiTexCoord3dARB;
void APIENTRY glad_debug_impl_glMultiTexCoord3dARB(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glMultiTexCoord3dARB", (void*)glMultiTexCoord3dARB, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexCoord3dARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexCoord3dARB", (void*)glMultiTexCoord3dARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXCOORD3DARBPROC glad_debug_glMultiTexCoord3dARB = glad_debug_impl_glMultiTexCoord3dARB;
PFNGLMULTITEXCOORD3DVARBPROC glad_glMultiTexCoord3dvARB;
void APIENTRY glad_debug_impl_glMultiTexCoord3dvARB(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glMultiTexCoord3dvARB", (void*)glMultiTexCoord3dvARB, 2, arg0, arg1);
     glad_glMultiTexCoord3dvARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord3dvARB", (void*)glMultiTexCoord3dvARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD3DVARBPROC glad_debug_glMultiTexCoord3dvARB = glad_debug_impl_glMultiTexCoord3dvARB;
PFNGLMULTITEXCOORD3FARBPROC glad_glMultiTexCoord3fARB;
void APIENTRY glad_debug_impl_glMultiTexCoord3fARB(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glMultiTexCoord3fARB", (void*)glMultiTexCoord3fARB, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexCoord3fARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexCoord3fARB", (void*)glMultiTexCoord3fARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXCOORD3FARBPROC glad_debug_glMultiTexCoord3fARB = glad_debug_impl_glMultiTexCoord3fARB;
PFNGLMULTITEXCOORD3FVARBPROC glad_glMultiTexCoord3fvARB;
void APIENTRY glad_debug_impl_glMultiTexCoord3fvARB(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMultiTexCoord3fvARB", (void*)glMultiTexCoord3fvARB, 2, arg0, arg1);
     glad_glMultiTexCoord3fvARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord3fvARB", (void*)glMultiTexCoord3fvARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD3FVARBPROC glad_debug_glMultiTexCoord3fvARB = glad_debug_impl_glMultiTexCoord3fvARB;
PFNGLMULTITEXCOORD3IARBPROC glad_glMultiTexCoord3iARB;
void APIENTRY glad_debug_impl_glMultiTexCoord3iARB(GLenum arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glMultiTexCoord3iARB", (void*)glMultiTexCoord3iARB, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexCoord3iARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexCoord3iARB", (void*)glMultiTexCoord3iARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXCOORD3IARBPROC glad_debug_glMultiTexCoord3iARB = glad_debug_impl_glMultiTexCoord3iARB;
PFNGLMULTITEXCOORD3IVARBPROC glad_glMultiTexCoord3ivARB;
void APIENTRY glad_debug_impl_glMultiTexCoord3ivARB(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glMultiTexCoord3ivARB", (void*)glMultiTexCoord3ivARB, 2, arg0, arg1);
     glad_glMultiTexCoord3ivARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord3ivARB", (void*)glMultiTexCoord3ivARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD3IVARBPROC glad_debug_glMultiTexCoord3ivARB = glad_debug_impl_glMultiTexCoord3ivARB;
PFNGLMULTITEXCOORD3SARBPROC glad_glMultiTexCoord3sARB;
void APIENTRY glad_debug_impl_glMultiTexCoord3sARB(GLenum arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_callback("glMultiTexCoord3sARB", (void*)glMultiTexCoord3sARB, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexCoord3sARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexCoord3sARB", (void*)glMultiTexCoord3sARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXCOORD3SARBPROC glad_debug_glMultiTexCoord3sARB = glad_debug_impl_glMultiTexCoord3sARB;
PFNGLMULTITEXCOORD3SVARBPROC glad_glMultiTexCoord3svARB;
void APIENTRY glad_debug_impl_glMultiTexCoord3svARB(GLenum arg0, const GLshort* arg1) {
    _pre_call_callback("glMultiTexCoord3svARB", (void*)glMultiTexCoord3svARB, 2, arg0, arg1);
     glad_glMultiTexCoord3svARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord3svARB", (void*)glMultiTexCoord3svARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD3SVARBPROC glad_debug_glMultiTexCoord3svARB = glad_debug_impl_glMultiTexCoord3svARB;
PFNGLMULTITEXCOORD4DARBPROC glad_glMultiTexCoord4dARB;
void APIENTRY glad_debug_impl_glMultiTexCoord4dARB(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glMultiTexCoord4dARB", (void*)glMultiTexCoord4dARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiTexCoord4dARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiTexCoord4dARB", (void*)glMultiTexCoord4dARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTITEXCOORD4DARBPROC glad_debug_glMultiTexCoord4dARB = glad_debug_impl_glMultiTexCoord4dARB;
PFNGLMULTITEXCOORD4DVARBPROC glad_glMultiTexCoord4dvARB;
void APIENTRY glad_debug_impl_glMultiTexCoord4dvARB(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glMultiTexCoord4dvARB", (void*)glMultiTexCoord4dvARB, 2, arg0, arg1);
     glad_glMultiTexCoord4dvARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord4dvARB", (void*)glMultiTexCoord4dvARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD4DVARBPROC glad_debug_glMultiTexCoord4dvARB = glad_debug_impl_glMultiTexCoord4dvARB;
PFNGLMULTITEXCOORD4FARBPROC glad_glMultiTexCoord4fARB;
void APIENTRY glad_debug_impl_glMultiTexCoord4fARB(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glMultiTexCoord4fARB", (void*)glMultiTexCoord4fARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiTexCoord4fARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiTexCoord4fARB", (void*)glMultiTexCoord4fARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTITEXCOORD4FARBPROC glad_debug_glMultiTexCoord4fARB = glad_debug_impl_glMultiTexCoord4fARB;
PFNGLMULTITEXCOORD4FVARBPROC glad_glMultiTexCoord4fvARB;
void APIENTRY glad_debug_impl_glMultiTexCoord4fvARB(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMultiTexCoord4fvARB", (void*)glMultiTexCoord4fvARB, 2, arg0, arg1);
     glad_glMultiTexCoord4fvARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord4fvARB", (void*)glMultiTexCoord4fvARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD4FVARBPROC glad_debug_glMultiTexCoord4fvARB = glad_debug_impl_glMultiTexCoord4fvARB;
PFNGLMULTITEXCOORD4IARBPROC glad_glMultiTexCoord4iARB;
void APIENTRY glad_debug_impl_glMultiTexCoord4iARB(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glMultiTexCoord4iARB", (void*)glMultiTexCoord4iARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiTexCoord4iARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiTexCoord4iARB", (void*)glMultiTexCoord4iARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTITEXCOORD4IARBPROC glad_debug_glMultiTexCoord4iARB = glad_debug_impl_glMultiTexCoord4iARB;
PFNGLMULTITEXCOORD4IVARBPROC glad_glMultiTexCoord4ivARB;
void APIENTRY glad_debug_impl_glMultiTexCoord4ivARB(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glMultiTexCoord4ivARB", (void*)glMultiTexCoord4ivARB, 2, arg0, arg1);
     glad_glMultiTexCoord4ivARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord4ivARB", (void*)glMultiTexCoord4ivARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD4IVARBPROC glad_debug_glMultiTexCoord4ivARB = glad_debug_impl_glMultiTexCoord4ivARB;
PFNGLMULTITEXCOORD4SARBPROC glad_glMultiTexCoord4sARB;
void APIENTRY glad_debug_impl_glMultiTexCoord4sARB(GLenum arg0, GLshort arg1, GLshort arg2, GLshort arg3, GLshort arg4) {
    _pre_call_callback("glMultiTexCoord4sARB", (void*)glMultiTexCoord4sARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiTexCoord4sARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiTexCoord4sARB", (void*)glMultiTexCoord4sARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTITEXCOORD4SARBPROC glad_debug_glMultiTexCoord4sARB = glad_debug_impl_glMultiTexCoord4sARB;
PFNGLMULTITEXCOORD4SVARBPROC glad_glMultiTexCoord4svARB;
void APIENTRY glad_debug_impl_glMultiTexCoord4svARB(GLenum arg0, const GLshort* arg1) {
    _pre_call_callback("glMultiTexCoord4svARB", (void*)glMultiTexCoord4svARB, 2, arg0, arg1);
     glad_glMultiTexCoord4svARB(arg0, arg1);
    _post_call_callback("glMultiTexCoord4svARB", (void*)glMultiTexCoord4svARB, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD4SVARBPROC glad_debug_glMultiTexCoord4svARB = glad_debug_impl_glMultiTexCoord4svARB;
PFNGLDEFORMATIONMAP3DSGIXPROC glad_glDeformationMap3dSGIX;
void APIENTRY glad_debug_impl_glDeformationMap3dSGIX(GLenum arg0, GLdouble arg1, GLdouble arg2, GLint arg3, GLint arg4, GLdouble arg5, GLdouble arg6, GLint arg7, GLint arg8, GLdouble arg9, GLdouble arg10, GLint arg11, GLint arg12, const GLdouble* arg13) {
    _pre_call_callback("glDeformationMap3dSGIX", (void*)glDeformationMap3dSGIX, 14, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
     glad_glDeformationMap3dSGIX(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    _post_call_callback("glDeformationMap3dSGIX", (void*)glDeformationMap3dSGIX, 14, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);

}
PFNGLDEFORMATIONMAP3DSGIXPROC glad_debug_glDeformationMap3dSGIX = glad_debug_impl_glDeformationMap3dSGIX;
PFNGLDEFORMATIONMAP3FSGIXPROC glad_glDeformationMap3fSGIX;
void APIENTRY glad_debug_impl_glDeformationMap3fSGIX(GLenum arg0, GLfloat arg1, GLfloat arg2, GLint arg3, GLint arg4, GLfloat arg5, GLfloat arg6, GLint arg7, GLint arg8, GLfloat arg9, GLfloat arg10, GLint arg11, GLint arg12, const GLfloat* arg13) {
    _pre_call_callback("glDeformationMap3fSGIX", (void*)glDeformationMap3fSGIX, 14, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
     glad_glDeformationMap3fSGIX(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
    _post_call_callback("glDeformationMap3fSGIX", (void*)glDeformationMap3fSGIX, 14, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);

}
PFNGLDEFORMATIONMAP3FSGIXPROC glad_debug_glDeformationMap3fSGIX = glad_debug_impl_glDeformationMap3fSGIX;
PFNGLDEFORMSGIXPROC glad_glDeformSGIX;
void APIENTRY glad_debug_impl_glDeformSGIX(GLbitfield arg0) {
    _pre_call_callback("glDeformSGIX", (void*)glDeformSGIX, 1, arg0);
     glad_glDeformSGIX(arg0);
    _post_call_callback("glDeformSGIX", (void*)glDeformSGIX, 1, arg0);

}
PFNGLDEFORMSGIXPROC glad_debug_glDeformSGIX = glad_debug_impl_glDeformSGIX;
PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glad_glLoadIdentityDeformationMapSGIX;
void APIENTRY glad_debug_impl_glLoadIdentityDeformationMapSGIX(GLbitfield arg0) {
    _pre_call_callback("glLoadIdentityDeformationMapSGIX", (void*)glLoadIdentityDeformationMapSGIX, 1, arg0);
     glad_glLoadIdentityDeformationMapSGIX(arg0);
    _post_call_callback("glLoadIdentityDeformationMapSGIX", (void*)glLoadIdentityDeformationMapSGIX, 1, arg0);

}
PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glad_debug_glLoadIdentityDeformationMapSGIX = glad_debug_impl_glLoadIdentityDeformationMapSGIX;
PFNGLPROVOKINGVERTEXEXTPROC glad_glProvokingVertexEXT;
void APIENTRY glad_debug_impl_glProvokingVertexEXT(GLenum arg0) {
    _pre_call_callback("glProvokingVertexEXT", (void*)glProvokingVertexEXT, 1, arg0);
     glad_glProvokingVertexEXT(arg0);
    _post_call_callback("glProvokingVertexEXT", (void*)glProvokingVertexEXT, 1, arg0);

}
PFNGLPROVOKINGVERTEXEXTPROC glad_debug_glProvokingVertexEXT = glad_debug_impl_glProvokingVertexEXT;
PFNGLPOINTPARAMETERFARBPROC glad_glPointParameterfARB;
void APIENTRY glad_debug_impl_glPointParameterfARB(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glPointParameterfARB", (void*)glPointParameterfARB, 2, arg0, arg1);
     glad_glPointParameterfARB(arg0, arg1);
    _post_call_callback("glPointParameterfARB", (void*)glPointParameterfARB, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERFARBPROC glad_debug_glPointParameterfARB = glad_debug_impl_glPointParameterfARB;
PFNGLPOINTPARAMETERFVARBPROC glad_glPointParameterfvARB;
void APIENTRY glad_debug_impl_glPointParameterfvARB(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glPointParameterfvARB", (void*)glPointParameterfvARB, 2, arg0, arg1);
     glad_glPointParameterfvARB(arg0, arg1);
    _post_call_callback("glPointParameterfvARB", (void*)glPointParameterfvARB, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERFVARBPROC glad_debug_glPointParameterfvARB = glad_debug_impl_glPointParameterfvARB;
PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture;
void APIENTRY glad_debug_impl_glBindImageTexture(GLuint arg0, GLuint arg1, GLint arg2, GLboolean arg3, GLint arg4, GLenum arg5, GLenum arg6) {
    _pre_call_callback("glBindImageTexture", (void*)glBindImageTexture, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glBindImageTexture(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glBindImageTexture", (void*)glBindImageTexture, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLBINDIMAGETEXTUREPROC glad_debug_glBindImageTexture = glad_debug_impl_glBindImageTexture;
PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier;
void APIENTRY glad_debug_impl_glMemoryBarrier(GLbitfield arg0) {
    _pre_call_callback("glMemoryBarrier", (void*)glMemoryBarrier, 1, arg0);
     glad_glMemoryBarrier(arg0);
    _post_call_callback("glMemoryBarrier", (void*)glMemoryBarrier, 1, arg0);

}
PFNGLMEMORYBARRIERPROC glad_debug_glMemoryBarrier = glad_debug_impl_glMemoryBarrier;
PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier;
void APIENTRY glad_debug_impl_glTextureBarrier() {
    _pre_call_callback("glTextureBarrier", (void*)glTextureBarrier, 0);
     glad_glTextureBarrier();
    _post_call_callback("glTextureBarrier", (void*)glTextureBarrier, 0);

}
PFNGLTEXTUREBARRIERPROC glad_debug_glTextureBarrier = glad_debug_impl_glTextureBarrier;
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC glad_glMultiDrawArraysIndirectBindlessNV;
void APIENTRY glad_debug_impl_glMultiDrawArraysIndirectBindlessNV(GLenum arg0, const void* arg1, GLsizei arg2, GLsizei arg3, GLint arg4) {
    _pre_call_callback("glMultiDrawArraysIndirectBindlessNV", (void*)glMultiDrawArraysIndirectBindlessNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiDrawArraysIndirectBindlessNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiDrawArraysIndirectBindlessNV", (void*)glMultiDrawArraysIndirectBindlessNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC glad_debug_glMultiDrawArraysIndirectBindlessNV = glad_debug_impl_glMultiDrawArraysIndirectBindlessNV;
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC glad_glMultiDrawElementsIndirectBindlessNV;
void APIENTRY glad_debug_impl_glMultiDrawElementsIndirectBindlessNV(GLenum arg0, GLenum arg1, const void* arg2, GLsizei arg3, GLsizei arg4, GLint arg5) {
    _pre_call_callback("glMultiDrawElementsIndirectBindlessNV", (void*)glMultiDrawElementsIndirectBindlessNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glMultiDrawElementsIndirectBindlessNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glMultiDrawElementsIndirectBindlessNV", (void*)glMultiDrawElementsIndirectBindlessNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC glad_debug_glMultiDrawElementsIndirectBindlessNV = glad_debug_impl_glMultiDrawElementsIndirectBindlessNV;
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_glBeginTransformFeedbackEXT;
void APIENTRY glad_debug_impl_glBeginTransformFeedbackEXT(GLenum arg0) {
    _pre_call_callback("glBeginTransformFeedbackEXT", (void*)glBeginTransformFeedbackEXT, 1, arg0);
     glad_glBeginTransformFeedbackEXT(arg0);
    _post_call_callback("glBeginTransformFeedbackEXT", (void*)glBeginTransformFeedbackEXT, 1, arg0);

}
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_debug_glBeginTransformFeedbackEXT = glad_debug_impl_glBeginTransformFeedbackEXT;
PFNGLENDTRANSFORMFEEDBACKEXTPROC glad_glEndTransformFeedbackEXT;
void APIENTRY glad_debug_impl_glEndTransformFeedbackEXT() {
    _pre_call_callback("glEndTransformFeedbackEXT", (void*)glEndTransformFeedbackEXT, 0);
     glad_glEndTransformFeedbackEXT();
    _post_call_callback("glEndTransformFeedbackEXT", (void*)glEndTransformFeedbackEXT, 0);

}
PFNGLENDTRANSFORMFEEDBACKEXTPROC glad_debug_glEndTransformFeedbackEXT = glad_debug_impl_glEndTransformFeedbackEXT;
PFNGLBINDBUFFERRANGEEXTPROC glad_glBindBufferRangeEXT;
void APIENTRY glad_debug_impl_glBindBufferRangeEXT(GLenum arg0, GLuint arg1, GLuint arg2, GLintptr arg3, GLsizeiptr arg4) {
    _pre_call_callback("glBindBufferRangeEXT", (void*)glBindBufferRangeEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glBindBufferRangeEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glBindBufferRangeEXT", (void*)glBindBufferRangeEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLBINDBUFFERRANGEEXTPROC glad_debug_glBindBufferRangeEXT = glad_debug_impl_glBindBufferRangeEXT;
PFNGLBINDBUFFEROFFSETEXTPROC glad_glBindBufferOffsetEXT;
void APIENTRY glad_debug_impl_glBindBufferOffsetEXT(GLenum arg0, GLuint arg1, GLuint arg2, GLintptr arg3) {
    _pre_call_callback("glBindBufferOffsetEXT", (void*)glBindBufferOffsetEXT, 4, arg0, arg1, arg2, arg3);
     glad_glBindBufferOffsetEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glBindBufferOffsetEXT", (void*)glBindBufferOffsetEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLBINDBUFFEROFFSETEXTPROC glad_debug_glBindBufferOffsetEXT = glad_debug_impl_glBindBufferOffsetEXT;
PFNGLBINDBUFFERBASEEXTPROC glad_glBindBufferBaseEXT;
void APIENTRY glad_debug_impl_glBindBufferBaseEXT(GLenum arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glBindBufferBaseEXT", (void*)glBindBufferBaseEXT, 3, arg0, arg1, arg2);
     glad_glBindBufferBaseEXT(arg0, arg1, arg2);
    _post_call_callback("glBindBufferBaseEXT", (void*)glBindBufferBaseEXT, 3, arg0, arg1, arg2);

}
PFNGLBINDBUFFERBASEEXTPROC glad_debug_glBindBufferBaseEXT = glad_debug_impl_glBindBufferBaseEXT;
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glad_glTransformFeedbackVaryingsEXT;
void APIENTRY glad_debug_impl_glTransformFeedbackVaryingsEXT(GLuint arg0, GLsizei arg1, const GLchar** arg2, GLenum arg3) {
    _pre_call_callback("glTransformFeedbackVaryingsEXT", (void*)glTransformFeedbackVaryingsEXT, 4, arg0, arg1, arg2, arg3);
     glad_glTransformFeedbackVaryingsEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glTransformFeedbackVaryingsEXT", (void*)glTransformFeedbackVaryingsEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glad_debug_glTransformFeedbackVaryingsEXT = glad_debug_impl_glTransformFeedbackVaryingsEXT;
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glad_glGetTransformFeedbackVaryingEXT;
void APIENTRY glad_debug_impl_glGetTransformFeedbackVaryingEXT(GLuint arg0, GLuint arg1, GLsizei arg2, GLsizei* arg3, GLsizei* arg4, GLenum* arg5, GLchar* arg6) {
    _pre_call_callback("glGetTransformFeedbackVaryingEXT", (void*)glGetTransformFeedbackVaryingEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetTransformFeedbackVaryingEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetTransformFeedbackVaryingEXT", (void*)glGetTransformFeedbackVaryingEXT, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glad_debug_glGetTransformFeedbackVaryingEXT = glad_debug_impl_glGetTransformFeedbackVaryingEXT;
PFNGLPROGRAMLOCALPARAMETERI4INVPROC glad_glProgramLocalParameterI4iNV;
void APIENTRY glad_debug_impl_glProgramLocalParameterI4iNV(GLenum arg0, GLuint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5) {
    _pre_call_callback("glProgramLocalParameterI4iNV", (void*)glProgramLocalParameterI4iNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramLocalParameterI4iNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramLocalParameterI4iNV", (void*)glProgramLocalParameterI4iNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMLOCALPARAMETERI4INVPROC glad_debug_glProgramLocalParameterI4iNV = glad_debug_impl_glProgramLocalParameterI4iNV;
PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glad_glProgramLocalParameterI4ivNV;
void APIENTRY glad_debug_impl_glProgramLocalParameterI4ivNV(GLenum arg0, GLuint arg1, const GLint* arg2) {
    _pre_call_callback("glProgramLocalParameterI4ivNV", (void*)glProgramLocalParameterI4ivNV, 3, arg0, arg1, arg2);
     glad_glProgramLocalParameterI4ivNV(arg0, arg1, arg2);
    _post_call_callback("glProgramLocalParameterI4ivNV", (void*)glProgramLocalParameterI4ivNV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glad_debug_glProgramLocalParameterI4ivNV = glad_debug_impl_glProgramLocalParameterI4ivNV;
PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glad_glProgramLocalParametersI4ivNV;
void APIENTRY glad_debug_impl_glProgramLocalParametersI4ivNV(GLenum arg0, GLuint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramLocalParametersI4ivNV", (void*)glProgramLocalParametersI4ivNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramLocalParametersI4ivNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramLocalParametersI4ivNV", (void*)glProgramLocalParametersI4ivNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glad_debug_glProgramLocalParametersI4ivNV = glad_debug_impl_glProgramLocalParametersI4ivNV;
PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glad_glProgramLocalParameterI4uiNV;
void APIENTRY glad_debug_impl_glProgramLocalParameterI4uiNV(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5) {
    _pre_call_callback("glProgramLocalParameterI4uiNV", (void*)glProgramLocalParameterI4uiNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramLocalParameterI4uiNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramLocalParameterI4uiNV", (void*)glProgramLocalParameterI4uiNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glad_debug_glProgramLocalParameterI4uiNV = glad_debug_impl_glProgramLocalParameterI4uiNV;
PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glad_glProgramLocalParameterI4uivNV;
void APIENTRY glad_debug_impl_glProgramLocalParameterI4uivNV(GLenum arg0, GLuint arg1, const GLuint* arg2) {
    _pre_call_callback("glProgramLocalParameterI4uivNV", (void*)glProgramLocalParameterI4uivNV, 3, arg0, arg1, arg2);
     glad_glProgramLocalParameterI4uivNV(arg0, arg1, arg2);
    _post_call_callback("glProgramLocalParameterI4uivNV", (void*)glProgramLocalParameterI4uivNV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glad_debug_glProgramLocalParameterI4uivNV = glad_debug_impl_glProgramLocalParameterI4uivNV;
PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glad_glProgramLocalParametersI4uivNV;
void APIENTRY glad_debug_impl_glProgramLocalParametersI4uivNV(GLenum arg0, GLuint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramLocalParametersI4uivNV", (void*)glProgramLocalParametersI4uivNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramLocalParametersI4uivNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramLocalParametersI4uivNV", (void*)glProgramLocalParametersI4uivNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glad_debug_glProgramLocalParametersI4uivNV = glad_debug_impl_glProgramLocalParametersI4uivNV;
PFNGLPROGRAMENVPARAMETERI4INVPROC glad_glProgramEnvParameterI4iNV;
void APIENTRY glad_debug_impl_glProgramEnvParameterI4iNV(GLenum arg0, GLuint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5) {
    _pre_call_callback("glProgramEnvParameterI4iNV", (void*)glProgramEnvParameterI4iNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramEnvParameterI4iNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramEnvParameterI4iNV", (void*)glProgramEnvParameterI4iNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMENVPARAMETERI4INVPROC glad_debug_glProgramEnvParameterI4iNV = glad_debug_impl_glProgramEnvParameterI4iNV;
PFNGLPROGRAMENVPARAMETERI4IVNVPROC glad_glProgramEnvParameterI4ivNV;
void APIENTRY glad_debug_impl_glProgramEnvParameterI4ivNV(GLenum arg0, GLuint arg1, const GLint* arg2) {
    _pre_call_callback("glProgramEnvParameterI4ivNV", (void*)glProgramEnvParameterI4ivNV, 3, arg0, arg1, arg2);
     glad_glProgramEnvParameterI4ivNV(arg0, arg1, arg2);
    _post_call_callback("glProgramEnvParameterI4ivNV", (void*)glProgramEnvParameterI4ivNV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMENVPARAMETERI4IVNVPROC glad_debug_glProgramEnvParameterI4ivNV = glad_debug_impl_glProgramEnvParameterI4ivNV;
PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glad_glProgramEnvParametersI4ivNV;
void APIENTRY glad_debug_impl_glProgramEnvParametersI4ivNV(GLenum arg0, GLuint arg1, GLsizei arg2, const GLint* arg3) {
    _pre_call_callback("glProgramEnvParametersI4ivNV", (void*)glProgramEnvParametersI4ivNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramEnvParametersI4ivNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramEnvParametersI4ivNV", (void*)glProgramEnvParametersI4ivNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glad_debug_glProgramEnvParametersI4ivNV = glad_debug_impl_glProgramEnvParametersI4ivNV;
PFNGLPROGRAMENVPARAMETERI4UINVPROC glad_glProgramEnvParameterI4uiNV;
void APIENTRY glad_debug_impl_glProgramEnvParameterI4uiNV(GLenum arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5) {
    _pre_call_callback("glProgramEnvParameterI4uiNV", (void*)glProgramEnvParameterI4uiNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramEnvParameterI4uiNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramEnvParameterI4uiNV", (void*)glProgramEnvParameterI4uiNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMENVPARAMETERI4UINVPROC glad_debug_glProgramEnvParameterI4uiNV = glad_debug_impl_glProgramEnvParameterI4uiNV;
PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glad_glProgramEnvParameterI4uivNV;
void APIENTRY glad_debug_impl_glProgramEnvParameterI4uivNV(GLenum arg0, GLuint arg1, const GLuint* arg2) {
    _pre_call_callback("glProgramEnvParameterI4uivNV", (void*)glProgramEnvParameterI4uivNV, 3, arg0, arg1, arg2);
     glad_glProgramEnvParameterI4uivNV(arg0, arg1, arg2);
    _post_call_callback("glProgramEnvParameterI4uivNV", (void*)glProgramEnvParameterI4uivNV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glad_debug_glProgramEnvParameterI4uivNV = glad_debug_impl_glProgramEnvParameterI4uivNV;
PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glad_glProgramEnvParametersI4uivNV;
void APIENTRY glad_debug_impl_glProgramEnvParametersI4uivNV(GLenum arg0, GLuint arg1, GLsizei arg2, const GLuint* arg3) {
    _pre_call_callback("glProgramEnvParametersI4uivNV", (void*)glProgramEnvParametersI4uivNV, 4, arg0, arg1, arg2, arg3);
     glad_glProgramEnvParametersI4uivNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramEnvParametersI4uivNV", (void*)glProgramEnvParametersI4uivNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glad_debug_glProgramEnvParametersI4uivNV = glad_debug_impl_glProgramEnvParametersI4uivNV;
PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC glad_glGetProgramLocalParameterIivNV;
void APIENTRY glad_debug_impl_glGetProgramLocalParameterIivNV(GLenum arg0, GLuint arg1, GLint* arg2) {
    _pre_call_callback("glGetProgramLocalParameterIivNV", (void*)glGetProgramLocalParameterIivNV, 3, arg0, arg1, arg2);
     glad_glGetProgramLocalParameterIivNV(arg0, arg1, arg2);
    _post_call_callback("glGetProgramLocalParameterIivNV", (void*)glGetProgramLocalParameterIivNV, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC glad_debug_glGetProgramLocalParameterIivNV = glad_debug_impl_glGetProgramLocalParameterIivNV;
PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC glad_glGetProgramLocalParameterIuivNV;
void APIENTRY glad_debug_impl_glGetProgramLocalParameterIuivNV(GLenum arg0, GLuint arg1, GLuint* arg2) {
    _pre_call_callback("glGetProgramLocalParameterIuivNV", (void*)glGetProgramLocalParameterIuivNV, 3, arg0, arg1, arg2);
     glad_glGetProgramLocalParameterIuivNV(arg0, arg1, arg2);
    _post_call_callback("glGetProgramLocalParameterIuivNV", (void*)glGetProgramLocalParameterIuivNV, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC glad_debug_glGetProgramLocalParameterIuivNV = glad_debug_impl_glGetProgramLocalParameterIuivNV;
PFNGLGETPROGRAMENVPARAMETERIIVNVPROC glad_glGetProgramEnvParameterIivNV;
void APIENTRY glad_debug_impl_glGetProgramEnvParameterIivNV(GLenum arg0, GLuint arg1, GLint* arg2) {
    _pre_call_callback("glGetProgramEnvParameterIivNV", (void*)glGetProgramEnvParameterIivNV, 3, arg0, arg1, arg2);
     glad_glGetProgramEnvParameterIivNV(arg0, arg1, arg2);
    _post_call_callback("glGetProgramEnvParameterIivNV", (void*)glGetProgramEnvParameterIivNV, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMENVPARAMETERIIVNVPROC glad_debug_glGetProgramEnvParameterIivNV = glad_debug_impl_glGetProgramEnvParameterIivNV;
PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC glad_glGetProgramEnvParameterIuivNV;
void APIENTRY glad_debug_impl_glGetProgramEnvParameterIuivNV(GLenum arg0, GLuint arg1, GLuint* arg2) {
    _pre_call_callback("glGetProgramEnvParameterIuivNV", (void*)glGetProgramEnvParameterIuivNV, 3, arg0, arg1, arg2);
     glad_glGetProgramEnvParameterIuivNV(arg0, arg1, arg2);
    _post_call_callback("glGetProgramEnvParameterIuivNV", (void*)glGetProgramEnvParameterIuivNV, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC glad_debug_glGetProgramEnvParameterIuivNV = glad_debug_impl_glGetProgramEnvParameterIuivNV;
PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC glad_glProgramSubroutineParametersuivNV;
void APIENTRY glad_debug_impl_glProgramSubroutineParametersuivNV(GLenum arg0, GLsizei arg1, const GLuint* arg2) {
    _pre_call_callback("glProgramSubroutineParametersuivNV", (void*)glProgramSubroutineParametersuivNV, 3, arg0, arg1, arg2);
     glad_glProgramSubroutineParametersuivNV(arg0, arg1, arg2);
    _post_call_callback("glProgramSubroutineParametersuivNV", (void*)glProgramSubroutineParametersuivNV, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC glad_debug_glProgramSubroutineParametersuivNV = glad_debug_impl_glProgramSubroutineParametersuivNV;
PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC glad_glGetProgramSubroutineParameteruivNV;
void APIENTRY glad_debug_impl_glGetProgramSubroutineParameteruivNV(GLenum arg0, GLuint arg1, GLuint* arg2) {
    _pre_call_callback("glGetProgramSubroutineParameteruivNV", (void*)glGetProgramSubroutineParameteruivNV, 3, arg0, arg1, arg2);
     glad_glGetProgramSubroutineParameteruivNV(arg0, arg1, arg2);
    _post_call_callback("glGetProgramSubroutineParameteruivNV", (void*)glGetProgramSubroutineParameteruivNV, 3, arg0, arg1, arg2);

}
PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC glad_debug_glGetProgramSubroutineParameteruivNV = glad_debug_impl_glGetProgramSubroutineParameteruivNV;
PFNGLPROGRAMPARAMETERIARBPROC glad_glProgramParameteriARB;
void APIENTRY glad_debug_impl_glProgramParameteriARB(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glProgramParameteriARB", (void*)glProgramParameteriARB, 3, arg0, arg1, arg2);
     glad_glProgramParameteriARB(arg0, arg1, arg2);
    _post_call_callback("glProgramParameteriARB", (void*)glProgramParameteriARB, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMPARAMETERIARBPROC glad_debug_glProgramParameteriARB = glad_debug_impl_glProgramParameteriARB;
PFNGLFRAMEBUFFERTEXTUREARBPROC glad_glFramebufferTextureARB;
void APIENTRY glad_debug_impl_glFramebufferTextureARB(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3) {
    _pre_call_callback("glFramebufferTextureARB", (void*)glFramebufferTextureARB, 4, arg0, arg1, arg2, arg3);
     glad_glFramebufferTextureARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glFramebufferTextureARB", (void*)glFramebufferTextureARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLFRAMEBUFFERTEXTUREARBPROC glad_debug_glFramebufferTextureARB = glad_debug_impl_glFramebufferTextureARB;
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glad_glFramebufferTextureLayerARB;
void APIENTRY glad_debug_impl_glFramebufferTextureLayerARB(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glFramebufferTextureLayerARB", (void*)glFramebufferTextureLayerARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glFramebufferTextureLayerARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glFramebufferTextureLayerARB", (void*)glFramebufferTextureLayerARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glad_debug_glFramebufferTextureLayerARB = glad_debug_impl_glFramebufferTextureLayerARB;
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glad_glFramebufferTextureFaceARB;
void APIENTRY glad_debug_impl_glFramebufferTextureFaceARB(GLenum arg0, GLenum arg1, GLuint arg2, GLint arg3, GLenum arg4) {
    _pre_call_callback("glFramebufferTextureFaceARB", (void*)glFramebufferTextureFaceARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glFramebufferTextureFaceARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glFramebufferTextureFaceARB", (void*)glFramebufferTextureFaceARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glad_debug_glFramebufferTextureFaceARB = glad_debug_impl_glFramebufferTextureFaceARB;
PFNGLSUBPIXELPRECISIONBIASNVPROC glad_glSubpixelPrecisionBiasNV;
void APIENTRY glad_debug_impl_glSubpixelPrecisionBiasNV(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glSubpixelPrecisionBiasNV", (void*)glSubpixelPrecisionBiasNV, 2, arg0, arg1);
     glad_glSubpixelPrecisionBiasNV(arg0, arg1);
    _post_call_callback("glSubpixelPrecisionBiasNV", (void*)glSubpixelPrecisionBiasNV, 2, arg0, arg1);

}
PFNGLSUBPIXELPRECISIONBIASNVPROC glad_debug_glSubpixelPrecisionBiasNV = glad_debug_impl_glSubpixelPrecisionBiasNV;
PFNGLSPRITEPARAMETERFSGIXPROC glad_glSpriteParameterfSGIX;
void APIENTRY glad_debug_impl_glSpriteParameterfSGIX(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glSpriteParameterfSGIX", (void*)glSpriteParameterfSGIX, 2, arg0, arg1);
     glad_glSpriteParameterfSGIX(arg0, arg1);
    _post_call_callback("glSpriteParameterfSGIX", (void*)glSpriteParameterfSGIX, 2, arg0, arg1);

}
PFNGLSPRITEPARAMETERFSGIXPROC glad_debug_glSpriteParameterfSGIX = glad_debug_impl_glSpriteParameterfSGIX;
PFNGLSPRITEPARAMETERFVSGIXPROC glad_glSpriteParameterfvSGIX;
void APIENTRY glad_debug_impl_glSpriteParameterfvSGIX(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glSpriteParameterfvSGIX", (void*)glSpriteParameterfvSGIX, 2, arg0, arg1);
     glad_glSpriteParameterfvSGIX(arg0, arg1);
    _post_call_callback("glSpriteParameterfvSGIX", (void*)glSpriteParameterfvSGIX, 2, arg0, arg1);

}
PFNGLSPRITEPARAMETERFVSGIXPROC glad_debug_glSpriteParameterfvSGIX = glad_debug_impl_glSpriteParameterfvSGIX;
PFNGLSPRITEPARAMETERISGIXPROC glad_glSpriteParameteriSGIX;
void APIENTRY glad_debug_impl_glSpriteParameteriSGIX(GLenum arg0, GLint arg1) {
    _pre_call_callback("glSpriteParameteriSGIX", (void*)glSpriteParameteriSGIX, 2, arg0, arg1);
     glad_glSpriteParameteriSGIX(arg0, arg1);
    _post_call_callback("glSpriteParameteriSGIX", (void*)glSpriteParameteriSGIX, 2, arg0, arg1);

}
PFNGLSPRITEPARAMETERISGIXPROC glad_debug_glSpriteParameteriSGIX = glad_debug_impl_glSpriteParameteriSGIX;
PFNGLSPRITEPARAMETERIVSGIXPROC glad_glSpriteParameterivSGIX;
void APIENTRY glad_debug_impl_glSpriteParameterivSGIX(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glSpriteParameterivSGIX", (void*)glSpriteParameterivSGIX, 2, arg0, arg1);
     glad_glSpriteParameterivSGIX(arg0, arg1);
    _post_call_callback("glSpriteParameterivSGIX", (void*)glSpriteParameterivSGIX, 2, arg0, arg1);

}
PFNGLSPRITEPARAMETERIVSGIXPROC glad_debug_glSpriteParameterivSGIX = glad_debug_impl_glSpriteParameterivSGIX;
PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
void APIENTRY glad_debug_impl_glGetProgramBinary(GLuint arg0, GLsizei arg1, GLsizei* arg2, GLenum* arg3, void* arg4) {
    _pre_call_callback("glGetProgramBinary", (void*)glGetProgramBinary, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetProgramBinary(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetProgramBinary", (void*)glGetProgramBinary, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETPROGRAMBINARYPROC glad_debug_glGetProgramBinary = glad_debug_impl_glGetProgramBinary;
PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
void APIENTRY glad_debug_impl_glProgramBinary(GLuint arg0, GLenum arg1, const void* arg2, GLsizei arg3) {
    _pre_call_callback("glProgramBinary", (void*)glProgramBinary, 4, arg0, arg1, arg2, arg3);
     glad_glProgramBinary(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramBinary", (void*)glProgramBinary, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMBINARYPROC glad_debug_glProgramBinary = glad_debug_impl_glProgramBinary;
PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
void APIENTRY glad_debug_impl_glProgramParameteri(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glProgramParameteri", (void*)glProgramParameteri, 3, arg0, arg1, arg2);
     glad_glProgramParameteri(arg0, arg1, arg2);
    _post_call_callback("glProgramParameteri", (void*)glProgramParameteri, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMPARAMETERIPROC glad_debug_glProgramParameteri = glad_debug_impl_glProgramParameteri;
PFNGLQUERYOBJECTPARAMETERUIAMDPROC glad_glQueryObjectParameteruiAMD;
void APIENTRY glad_debug_impl_glQueryObjectParameteruiAMD(GLenum arg0, GLuint arg1, GLenum arg2, GLuint arg3) {
    _pre_call_callback("glQueryObjectParameteruiAMD", (void*)glQueryObjectParameteruiAMD, 4, arg0, arg1, arg2, arg3);
     glad_glQueryObjectParameteruiAMD(arg0, arg1, arg2, arg3);
    _post_call_callback("glQueryObjectParameteruiAMD", (void*)glQueryObjectParameteruiAMD, 4, arg0, arg1, arg2, arg3);

}
PFNGLQUERYOBJECTPARAMETERUIAMDPROC glad_debug_glQueryObjectParameteruiAMD = glad_debug_impl_glQueryObjectParameteruiAMD;
PFNGLSAMPLEMASKSGISPROC glad_glSampleMaskSGIS;
void APIENTRY glad_debug_impl_glSampleMaskSGIS(GLclampf arg0, GLboolean arg1) {
    _pre_call_callback("glSampleMaskSGIS", (void*)glSampleMaskSGIS, 2, arg0, arg1);
     glad_glSampleMaskSGIS(arg0, arg1);
    _post_call_callback("glSampleMaskSGIS", (void*)glSampleMaskSGIS, 2, arg0, arg1);

}
PFNGLSAMPLEMASKSGISPROC glad_debug_glSampleMaskSGIS = glad_debug_impl_glSampleMaskSGIS;
PFNGLSAMPLEPATTERNSGISPROC glad_glSamplePatternSGIS;
void APIENTRY glad_debug_impl_glSamplePatternSGIS(GLenum arg0) {
    _pre_call_callback("glSamplePatternSGIS", (void*)glSamplePatternSGIS, 1, arg0);
     glad_glSamplePatternSGIS(arg0);
    _post_call_callback("glSamplePatternSGIS", (void*)glSamplePatternSGIS, 1, arg0);

}
PFNGLSAMPLEPATTERNSGISPROC glad_debug_glSamplePatternSGIS = glad_debug_impl_glSamplePatternSGIS;
PFNGLISRENDERBUFFEREXTPROC glad_glIsRenderbufferEXT;
GLboolean APIENTRY glad_debug_impl_glIsRenderbufferEXT(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsRenderbufferEXT", (void*)glIsRenderbufferEXT, 1, arg0);
    ret =  glad_glIsRenderbufferEXT(arg0);
    _post_call_callback("glIsRenderbufferEXT", (void*)glIsRenderbufferEXT, 1, arg0);
    return ret;
}
PFNGLISRENDERBUFFEREXTPROC glad_debug_glIsRenderbufferEXT = glad_debug_impl_glIsRenderbufferEXT;
PFNGLBINDRENDERBUFFEREXTPROC glad_glBindRenderbufferEXT;
void APIENTRY glad_debug_impl_glBindRenderbufferEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindRenderbufferEXT", (void*)glBindRenderbufferEXT, 2, arg0, arg1);
     glad_glBindRenderbufferEXT(arg0, arg1);
    _post_call_callback("glBindRenderbufferEXT", (void*)glBindRenderbufferEXT, 2, arg0, arg1);

}
PFNGLBINDRENDERBUFFEREXTPROC glad_debug_glBindRenderbufferEXT = glad_debug_impl_glBindRenderbufferEXT;
PFNGLDELETERENDERBUFFERSEXTPROC glad_glDeleteRenderbuffersEXT;
void APIENTRY glad_debug_impl_glDeleteRenderbuffersEXT(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteRenderbuffersEXT", (void*)glDeleteRenderbuffersEXT, 2, arg0, arg1);
     glad_glDeleteRenderbuffersEXT(arg0, arg1);
    _post_call_callback("glDeleteRenderbuffersEXT", (void*)glDeleteRenderbuffersEXT, 2, arg0, arg1);

}
PFNGLDELETERENDERBUFFERSEXTPROC glad_debug_glDeleteRenderbuffersEXT = glad_debug_impl_glDeleteRenderbuffersEXT;
PFNGLGENRENDERBUFFERSEXTPROC glad_glGenRenderbuffersEXT;
void APIENTRY glad_debug_impl_glGenRenderbuffersEXT(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenRenderbuffersEXT", (void*)glGenRenderbuffersEXT, 2, arg0, arg1);
     glad_glGenRenderbuffersEXT(arg0, arg1);
    _post_call_callback("glGenRenderbuffersEXT", (void*)glGenRenderbuffersEXT, 2, arg0, arg1);

}
PFNGLGENRENDERBUFFERSEXTPROC glad_debug_glGenRenderbuffersEXT = glad_debug_impl_glGenRenderbuffersEXT;
PFNGLRENDERBUFFERSTORAGEEXTPROC glad_glRenderbufferStorageEXT;
void APIENTRY glad_debug_impl_glRenderbufferStorageEXT(GLenum arg0, GLenum arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glRenderbufferStorageEXT", (void*)glRenderbufferStorageEXT, 4, arg0, arg1, arg2, arg3);
     glad_glRenderbufferStorageEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glRenderbufferStorageEXT", (void*)glRenderbufferStorageEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLRENDERBUFFERSTORAGEEXTPROC glad_debug_glRenderbufferStorageEXT = glad_debug_impl_glRenderbufferStorageEXT;
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glad_glGetRenderbufferParameterivEXT;
void APIENTRY glad_debug_impl_glGetRenderbufferParameterivEXT(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetRenderbufferParameterivEXT", (void*)glGetRenderbufferParameterivEXT, 3, arg0, arg1, arg2);
     glad_glGetRenderbufferParameterivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetRenderbufferParameterivEXT", (void*)glGetRenderbufferParameterivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glad_debug_glGetRenderbufferParameterivEXT = glad_debug_impl_glGetRenderbufferParameterivEXT;
PFNGLISFRAMEBUFFEREXTPROC glad_glIsFramebufferEXT;
GLboolean APIENTRY glad_debug_impl_glIsFramebufferEXT(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsFramebufferEXT", (void*)glIsFramebufferEXT, 1, arg0);
    ret =  glad_glIsFramebufferEXT(arg0);
    _post_call_callback("glIsFramebufferEXT", (void*)glIsFramebufferEXT, 1, arg0);
    return ret;
}
PFNGLISFRAMEBUFFEREXTPROC glad_debug_glIsFramebufferEXT = glad_debug_impl_glIsFramebufferEXT;
PFNGLBINDFRAMEBUFFEREXTPROC glad_glBindFramebufferEXT;
void APIENTRY glad_debug_impl_glBindFramebufferEXT(GLenum arg0, GLuint arg1) {
    _pre_call_callback("glBindFramebufferEXT", (void*)glBindFramebufferEXT, 2, arg0, arg1);
     glad_glBindFramebufferEXT(arg0, arg1);
    _post_call_callback("glBindFramebufferEXT", (void*)glBindFramebufferEXT, 2, arg0, arg1);

}
PFNGLBINDFRAMEBUFFEREXTPROC glad_debug_glBindFramebufferEXT = glad_debug_impl_glBindFramebufferEXT;
PFNGLDELETEFRAMEBUFFERSEXTPROC glad_glDeleteFramebuffersEXT;
void APIENTRY glad_debug_impl_glDeleteFramebuffersEXT(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteFramebuffersEXT", (void*)glDeleteFramebuffersEXT, 2, arg0, arg1);
     glad_glDeleteFramebuffersEXT(arg0, arg1);
    _post_call_callback("glDeleteFramebuffersEXT", (void*)glDeleteFramebuffersEXT, 2, arg0, arg1);

}
PFNGLDELETEFRAMEBUFFERSEXTPROC glad_debug_glDeleteFramebuffersEXT = glad_debug_impl_glDeleteFramebuffersEXT;
PFNGLGENFRAMEBUFFERSEXTPROC glad_glGenFramebuffersEXT;
void APIENTRY glad_debug_impl_glGenFramebuffersEXT(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenFramebuffersEXT", (void*)glGenFramebuffersEXT, 2, arg0, arg1);
     glad_glGenFramebuffersEXT(arg0, arg1);
    _post_call_callback("glGenFramebuffersEXT", (void*)glGenFramebuffersEXT, 2, arg0, arg1);

}
PFNGLGENFRAMEBUFFERSEXTPROC glad_debug_glGenFramebuffersEXT = glad_debug_impl_glGenFramebuffersEXT;
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_glCheckFramebufferStatusEXT;
GLenum APIENTRY glad_debug_impl_glCheckFramebufferStatusEXT(GLenum arg0) {
    GLenum ret;
    _pre_call_callback("glCheckFramebufferStatusEXT", (void*)glCheckFramebufferStatusEXT, 1, arg0);
    ret =  glad_glCheckFramebufferStatusEXT(arg0);
    _post_call_callback("glCheckFramebufferStatusEXT", (void*)glCheckFramebufferStatusEXT, 1, arg0);
    return ret;
}
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_debug_glCheckFramebufferStatusEXT = glad_debug_impl_glCheckFramebufferStatusEXT;
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glad_glFramebufferTexture1DEXT;
void APIENTRY glad_debug_impl_glFramebufferTexture1DEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_callback("glFramebufferTexture1DEXT", (void*)glFramebufferTexture1DEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glFramebufferTexture1DEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glFramebufferTexture1DEXT", (void*)glFramebufferTexture1DEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glad_debug_glFramebufferTexture1DEXT = glad_debug_impl_glFramebufferTexture1DEXT;
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glad_glFramebufferTexture2DEXT;
void APIENTRY glad_debug_impl_glFramebufferTexture2DEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4) {
    _pre_call_callback("glFramebufferTexture2DEXT", (void*)glFramebufferTexture2DEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glFramebufferTexture2DEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glFramebufferTexture2DEXT", (void*)glFramebufferTexture2DEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glad_debug_glFramebufferTexture2DEXT = glad_debug_impl_glFramebufferTexture2DEXT;
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glad_glFramebufferTexture3DEXT;
void APIENTRY glad_debug_impl_glFramebufferTexture3DEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3, GLint arg4, GLint arg5) {
    _pre_call_callback("glFramebufferTexture3DEXT", (void*)glFramebufferTexture3DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glFramebufferTexture3DEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glFramebufferTexture3DEXT", (void*)glFramebufferTexture3DEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glad_debug_glFramebufferTexture3DEXT = glad_debug_impl_glFramebufferTexture3DEXT;
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glad_glFramebufferRenderbufferEXT;
void APIENTRY glad_debug_impl_glFramebufferRenderbufferEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLuint arg3) {
    _pre_call_callback("glFramebufferRenderbufferEXT", (void*)glFramebufferRenderbufferEXT, 4, arg0, arg1, arg2, arg3);
     glad_glFramebufferRenderbufferEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glFramebufferRenderbufferEXT", (void*)glFramebufferRenderbufferEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glad_debug_glFramebufferRenderbufferEXT = glad_debug_impl_glFramebufferRenderbufferEXT;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_glGetFramebufferAttachmentParameterivEXT;
void APIENTRY glad_debug_impl_glGetFramebufferAttachmentParameterivEXT(GLenum arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetFramebufferAttachmentParameterivEXT", (void*)glGetFramebufferAttachmentParameterivEXT, 4, arg0, arg1, arg2, arg3);
     glad_glGetFramebufferAttachmentParameterivEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetFramebufferAttachmentParameterivEXT", (void*)glGetFramebufferAttachmentParameterivEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_debug_glGetFramebufferAttachmentParameterivEXT = glad_debug_impl_glGetFramebufferAttachmentParameterivEXT;
PFNGLGENERATEMIPMAPEXTPROC glad_glGenerateMipmapEXT;
void APIENTRY glad_debug_impl_glGenerateMipmapEXT(GLenum arg0) {
    _pre_call_callback("glGenerateMipmapEXT", (void*)glGenerateMipmapEXT, 1, arg0);
     glad_glGenerateMipmapEXT(arg0);
    _post_call_callback("glGenerateMipmapEXT", (void*)glGenerateMipmapEXT, 1, arg0);

}
PFNGLGENERATEMIPMAPEXTPROC glad_debug_glGenerateMipmapEXT = glad_debug_impl_glGenerateMipmapEXT;
PFNGLVERTEXARRAYRANGEAPPLEPROC glad_glVertexArrayRangeAPPLE;
void APIENTRY glad_debug_impl_glVertexArrayRangeAPPLE(GLsizei arg0, void* arg1) {
    _pre_call_callback("glVertexArrayRangeAPPLE", (void*)glVertexArrayRangeAPPLE, 2, arg0, arg1);
     glad_glVertexArrayRangeAPPLE(arg0, arg1);
    _post_call_callback("glVertexArrayRangeAPPLE", (void*)glVertexArrayRangeAPPLE, 2, arg0, arg1);

}
PFNGLVERTEXARRAYRANGEAPPLEPROC glad_debug_glVertexArrayRangeAPPLE = glad_debug_impl_glVertexArrayRangeAPPLE;
PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glad_glFlushVertexArrayRangeAPPLE;
void APIENTRY glad_debug_impl_glFlushVertexArrayRangeAPPLE(GLsizei arg0, void* arg1) {
    _pre_call_callback("glFlushVertexArrayRangeAPPLE", (void*)glFlushVertexArrayRangeAPPLE, 2, arg0, arg1);
     glad_glFlushVertexArrayRangeAPPLE(arg0, arg1);
    _post_call_callback("glFlushVertexArrayRangeAPPLE", (void*)glFlushVertexArrayRangeAPPLE, 2, arg0, arg1);

}
PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glad_debug_glFlushVertexArrayRangeAPPLE = glad_debug_impl_glFlushVertexArrayRangeAPPLE;
PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glad_glVertexArrayParameteriAPPLE;
void APIENTRY glad_debug_impl_glVertexArrayParameteriAPPLE(GLenum arg0, GLint arg1) {
    _pre_call_callback("glVertexArrayParameteriAPPLE", (void*)glVertexArrayParameteriAPPLE, 2, arg0, arg1);
     glad_glVertexArrayParameteriAPPLE(arg0, arg1);
    _post_call_callback("glVertexArrayParameteriAPPLE", (void*)glVertexArrayParameteriAPPLE, 2, arg0, arg1);

}
PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glad_debug_glVertexArrayParameteriAPPLE = glad_debug_impl_glVertexArrayParameteriAPPLE;
PFNGLCOMBINERPARAMETERFVNVPROC glad_glCombinerParameterfvNV;
void APIENTRY glad_debug_impl_glCombinerParameterfvNV(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glCombinerParameterfvNV", (void*)glCombinerParameterfvNV, 2, arg0, arg1);
     glad_glCombinerParameterfvNV(arg0, arg1);
    _post_call_callback("glCombinerParameterfvNV", (void*)glCombinerParameterfvNV, 2, arg0, arg1);

}
PFNGLCOMBINERPARAMETERFVNVPROC glad_debug_glCombinerParameterfvNV = glad_debug_impl_glCombinerParameterfvNV;
PFNGLCOMBINERPARAMETERFNVPROC glad_glCombinerParameterfNV;
void APIENTRY glad_debug_impl_glCombinerParameterfNV(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glCombinerParameterfNV", (void*)glCombinerParameterfNV, 2, arg0, arg1);
     glad_glCombinerParameterfNV(arg0, arg1);
    _post_call_callback("glCombinerParameterfNV", (void*)glCombinerParameterfNV, 2, arg0, arg1);

}
PFNGLCOMBINERPARAMETERFNVPROC glad_debug_glCombinerParameterfNV = glad_debug_impl_glCombinerParameterfNV;
PFNGLCOMBINERPARAMETERIVNVPROC glad_glCombinerParameterivNV;
void APIENTRY glad_debug_impl_glCombinerParameterivNV(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glCombinerParameterivNV", (void*)glCombinerParameterivNV, 2, arg0, arg1);
     glad_glCombinerParameterivNV(arg0, arg1);
    _post_call_callback("glCombinerParameterivNV", (void*)glCombinerParameterivNV, 2, arg0, arg1);

}
PFNGLCOMBINERPARAMETERIVNVPROC glad_debug_glCombinerParameterivNV = glad_debug_impl_glCombinerParameterivNV;
PFNGLCOMBINERPARAMETERINVPROC glad_glCombinerParameteriNV;
void APIENTRY glad_debug_impl_glCombinerParameteriNV(GLenum arg0, GLint arg1) {
    _pre_call_callback("glCombinerParameteriNV", (void*)glCombinerParameteriNV, 2, arg0, arg1);
     glad_glCombinerParameteriNV(arg0, arg1);
    _post_call_callback("glCombinerParameteriNV", (void*)glCombinerParameteriNV, 2, arg0, arg1);

}
PFNGLCOMBINERPARAMETERINVPROC glad_debug_glCombinerParameteriNV = glad_debug_impl_glCombinerParameteriNV;
PFNGLCOMBINERINPUTNVPROC glad_glCombinerInputNV;
void APIENTRY glad_debug_impl_glCombinerInputNV(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3, GLenum arg4, GLenum arg5) {
    _pre_call_callback("glCombinerInputNV", (void*)glCombinerInputNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glCombinerInputNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glCombinerInputNV", (void*)glCombinerInputNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOMBINERINPUTNVPROC glad_debug_glCombinerInputNV = glad_debug_impl_glCombinerInputNV;
PFNGLCOMBINEROUTPUTNVPROC glad_glCombinerOutputNV;
void APIENTRY glad_debug_impl_glCombinerOutputNV(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3, GLenum arg4, GLenum arg5, GLenum arg6, GLboolean arg7, GLboolean arg8, GLboolean arg9) {
    _pre_call_callback("glCombinerOutputNV", (void*)glCombinerOutputNV, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glCombinerOutputNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glCombinerOutputNV", (void*)glCombinerOutputNV, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLCOMBINEROUTPUTNVPROC glad_debug_glCombinerOutputNV = glad_debug_impl_glCombinerOutputNV;
PFNGLFINALCOMBINERINPUTNVPROC glad_glFinalCombinerInputNV;
void APIENTRY glad_debug_impl_glFinalCombinerInputNV(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_callback("glFinalCombinerInputNV", (void*)glFinalCombinerInputNV, 4, arg0, arg1, arg2, arg3);
     glad_glFinalCombinerInputNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glFinalCombinerInputNV", (void*)glFinalCombinerInputNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLFINALCOMBINERINPUTNVPROC glad_debug_glFinalCombinerInputNV = glad_debug_impl_glFinalCombinerInputNV;
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glad_glGetCombinerInputParameterfvNV;
void APIENTRY glad_debug_impl_glGetCombinerInputParameterfvNV(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3, GLfloat* arg4) {
    _pre_call_callback("glGetCombinerInputParameterfvNV", (void*)glGetCombinerInputParameterfvNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetCombinerInputParameterfvNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetCombinerInputParameterfvNV", (void*)glGetCombinerInputParameterfvNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glad_debug_glGetCombinerInputParameterfvNV = glad_debug_impl_glGetCombinerInputParameterfvNV;
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glad_glGetCombinerInputParameterivNV;
void APIENTRY glad_debug_impl_glGetCombinerInputParameterivNV(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3, GLint* arg4) {
    _pre_call_callback("glGetCombinerInputParameterivNV", (void*)glGetCombinerInputParameterivNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetCombinerInputParameterivNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetCombinerInputParameterivNV", (void*)glGetCombinerInputParameterivNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glad_debug_glGetCombinerInputParameterivNV = glad_debug_impl_glGetCombinerInputParameterivNV;
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glad_glGetCombinerOutputParameterfvNV;
void APIENTRY glad_debug_impl_glGetCombinerOutputParameterfvNV(GLenum arg0, GLenum arg1, GLenum arg2, GLfloat* arg3) {
    _pre_call_callback("glGetCombinerOutputParameterfvNV", (void*)glGetCombinerOutputParameterfvNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetCombinerOutputParameterfvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetCombinerOutputParameterfvNV", (void*)glGetCombinerOutputParameterfvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glad_debug_glGetCombinerOutputParameterfvNV = glad_debug_impl_glGetCombinerOutputParameterfvNV;
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glad_glGetCombinerOutputParameterivNV;
void APIENTRY glad_debug_impl_glGetCombinerOutputParameterivNV(GLenum arg0, GLenum arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetCombinerOutputParameterivNV", (void*)glGetCombinerOutputParameterivNV, 4, arg0, arg1, arg2, arg3);
     glad_glGetCombinerOutputParameterivNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetCombinerOutputParameterivNV", (void*)glGetCombinerOutputParameterivNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glad_debug_glGetCombinerOutputParameterivNV = glad_debug_impl_glGetCombinerOutputParameterivNV;
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glad_glGetFinalCombinerInputParameterfvNV;
void APIENTRY glad_debug_impl_glGetFinalCombinerInputParameterfvNV(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetFinalCombinerInputParameterfvNV", (void*)glGetFinalCombinerInputParameterfvNV, 3, arg0, arg1, arg2);
     glad_glGetFinalCombinerInputParameterfvNV(arg0, arg1, arg2);
    _post_call_callback("glGetFinalCombinerInputParameterfvNV", (void*)glGetFinalCombinerInputParameterfvNV, 3, arg0, arg1, arg2);

}
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glad_debug_glGetFinalCombinerInputParameterfvNV = glad_debug_impl_glGetFinalCombinerInputParameterfvNV;
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glad_glGetFinalCombinerInputParameterivNV;
void APIENTRY glad_debug_impl_glGetFinalCombinerInputParameterivNV(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetFinalCombinerInputParameterivNV", (void*)glGetFinalCombinerInputParameterivNV, 3, arg0, arg1, arg2);
     glad_glGetFinalCombinerInputParameterivNV(arg0, arg1, arg2);
    _post_call_callback("glGetFinalCombinerInputParameterivNV", (void*)glGetFinalCombinerInputParameterivNV, 3, arg0, arg1, arg2);

}
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glad_debug_glGetFinalCombinerInputParameterivNV = glad_debug_impl_glGetFinalCombinerInputParameterivNV;
PFNGLDRAWBUFFERSARBPROC glad_glDrawBuffersARB;
void APIENTRY glad_debug_impl_glDrawBuffersARB(GLsizei arg0, const GLenum* arg1) {
    _pre_call_callback("glDrawBuffersARB", (void*)glDrawBuffersARB, 2, arg0, arg1);
     glad_glDrawBuffersARB(arg0, arg1);
    _post_call_callback("glDrawBuffersARB", (void*)glDrawBuffersARB, 2, arg0, arg1);

}
PFNGLDRAWBUFFERSARBPROC glad_debug_glDrawBuffersARB = glad_debug_impl_glDrawBuffersARB;
PFNGLDEBUGMESSAGECONTROLARBPROC glad_glDebugMessageControlARB;
void APIENTRY glad_debug_impl_glDebugMessageControlARB(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, const GLuint* arg4, GLboolean arg5) {
    _pre_call_callback("glDebugMessageControlARB", (void*)glDebugMessageControlARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDebugMessageControlARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDebugMessageControlARB", (void*)glDebugMessageControlARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDEBUGMESSAGECONTROLARBPROC glad_debug_glDebugMessageControlARB = glad_debug_impl_glDebugMessageControlARB;
PFNGLDEBUGMESSAGEINSERTARBPROC glad_glDebugMessageInsertARB;
void APIENTRY glad_debug_impl_glDebugMessageInsertARB(GLenum arg0, GLenum arg1, GLuint arg2, GLenum arg3, GLsizei arg4, const GLchar* arg5) {
    _pre_call_callback("glDebugMessageInsertARB", (void*)glDebugMessageInsertARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDebugMessageInsertARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDebugMessageInsertARB", (void*)glDebugMessageInsertARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDEBUGMESSAGEINSERTARBPROC glad_debug_glDebugMessageInsertARB = glad_debug_impl_glDebugMessageInsertARB;
PFNGLDEBUGMESSAGECALLBACKARBPROC glad_glDebugMessageCallbackARB;
void APIENTRY glad_debug_impl_glDebugMessageCallbackARB(GLDEBUGPROCARB arg0, const void* arg1) {
    _pre_call_callback("glDebugMessageCallbackARB", (void*)glDebugMessageCallbackARB, 2, arg0, arg1);
     glad_glDebugMessageCallbackARB(arg0, arg1);
    _post_call_callback("glDebugMessageCallbackARB", (void*)glDebugMessageCallbackARB, 2, arg0, arg1);

}
PFNGLDEBUGMESSAGECALLBACKARBPROC glad_debug_glDebugMessageCallbackARB = glad_debug_impl_glDebugMessageCallbackARB;
PFNGLGETDEBUGMESSAGELOGARBPROC glad_glGetDebugMessageLogARB;
GLuint APIENTRY glad_debug_impl_glGetDebugMessageLogARB(GLuint arg0, GLsizei arg1, GLenum* arg2, GLenum* arg3, GLuint* arg4, GLenum* arg5, GLsizei* arg6, GLchar* arg7) {
    GLuint ret;
    _pre_call_callback("glGetDebugMessageLogARB", (void*)glGetDebugMessageLogARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    ret =  glad_glGetDebugMessageLogARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glGetDebugMessageLogARB", (void*)glGetDebugMessageLogARB, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    return ret;
}
PFNGLGETDEBUGMESSAGELOGARBPROC glad_debug_glGetDebugMessageLogARB = glad_debug_impl_glGetDebugMessageLogARB;
PFNGLCULLPARAMETERDVEXTPROC glad_glCullParameterdvEXT;
void APIENTRY glad_debug_impl_glCullParameterdvEXT(GLenum arg0, GLdouble* arg1) {
    _pre_call_callback("glCullParameterdvEXT", (void*)glCullParameterdvEXT, 2, arg0, arg1);
     glad_glCullParameterdvEXT(arg0, arg1);
    _post_call_callback("glCullParameterdvEXT", (void*)glCullParameterdvEXT, 2, arg0, arg1);

}
PFNGLCULLPARAMETERDVEXTPROC glad_debug_glCullParameterdvEXT = glad_debug_impl_glCullParameterdvEXT;
PFNGLCULLPARAMETERFVEXTPROC glad_glCullParameterfvEXT;
void APIENTRY glad_debug_impl_glCullParameterfvEXT(GLenum arg0, GLfloat* arg1) {
    _pre_call_callback("glCullParameterfvEXT", (void*)glCullParameterfvEXT, 2, arg0, arg1);
     glad_glCullParameterfvEXT(arg0, arg1);
    _post_call_callback("glCullParameterfvEXT", (void*)glCullParameterfvEXT, 2, arg0, arg1);

}
PFNGLCULLPARAMETERFVEXTPROC glad_debug_glCullParameterfvEXT = glad_debug_impl_glCullParameterfvEXT;
PFNGLMULTIMODEDRAWARRAYSIBMPROC glad_glMultiModeDrawArraysIBM;
void APIENTRY glad_debug_impl_glMultiModeDrawArraysIBM(const GLenum* arg0, const GLint* arg1, const GLsizei* arg2, GLsizei arg3, GLint arg4) {
    _pre_call_callback("glMultiModeDrawArraysIBM", (void*)glMultiModeDrawArraysIBM, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiModeDrawArraysIBM(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiModeDrawArraysIBM", (void*)glMultiModeDrawArraysIBM, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTIMODEDRAWARRAYSIBMPROC glad_debug_glMultiModeDrawArraysIBM = glad_debug_impl_glMultiModeDrawArraysIBM;
PFNGLMULTIMODEDRAWELEMENTSIBMPROC glad_glMultiModeDrawElementsIBM;
void APIENTRY glad_debug_impl_glMultiModeDrawElementsIBM(const GLenum* arg0, const GLsizei* arg1, GLenum arg2, const void** arg3, GLsizei arg4, GLint arg5) {
    _pre_call_callback("glMultiModeDrawElementsIBM", (void*)glMultiModeDrawElementsIBM, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glMultiModeDrawElementsIBM(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glMultiModeDrawElementsIBM", (void*)glMultiModeDrawElementsIBM, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLMULTIMODEDRAWELEMENTSIBMPROC glad_debug_glMultiModeDrawElementsIBM = glad_debug_impl_glMultiModeDrawElementsIBM;
PFNGLBINDVERTEXARRAYAPPLEPROC glad_glBindVertexArrayAPPLE;
void APIENTRY glad_debug_impl_glBindVertexArrayAPPLE(GLuint arg0) {
    _pre_call_callback("glBindVertexArrayAPPLE", (void*)glBindVertexArrayAPPLE, 1, arg0);
     glad_glBindVertexArrayAPPLE(arg0);
    _post_call_callback("glBindVertexArrayAPPLE", (void*)glBindVertexArrayAPPLE, 1, arg0);

}
PFNGLBINDVERTEXARRAYAPPLEPROC glad_debug_glBindVertexArrayAPPLE = glad_debug_impl_glBindVertexArrayAPPLE;
PFNGLDELETEVERTEXARRAYSAPPLEPROC glad_glDeleteVertexArraysAPPLE;
void APIENTRY glad_debug_impl_glDeleteVertexArraysAPPLE(GLsizei arg0, const GLuint* arg1) {
    _pre_call_callback("glDeleteVertexArraysAPPLE", (void*)glDeleteVertexArraysAPPLE, 2, arg0, arg1);
     glad_glDeleteVertexArraysAPPLE(arg0, arg1);
    _post_call_callback("glDeleteVertexArraysAPPLE", (void*)glDeleteVertexArraysAPPLE, 2, arg0, arg1);

}
PFNGLDELETEVERTEXARRAYSAPPLEPROC glad_debug_glDeleteVertexArraysAPPLE = glad_debug_impl_glDeleteVertexArraysAPPLE;
PFNGLGENVERTEXARRAYSAPPLEPROC glad_glGenVertexArraysAPPLE;
void APIENTRY glad_debug_impl_glGenVertexArraysAPPLE(GLsizei arg0, GLuint* arg1) {
    _pre_call_callback("glGenVertexArraysAPPLE", (void*)glGenVertexArraysAPPLE, 2, arg0, arg1);
     glad_glGenVertexArraysAPPLE(arg0, arg1);
    _post_call_callback("glGenVertexArraysAPPLE", (void*)glGenVertexArraysAPPLE, 2, arg0, arg1);

}
PFNGLGENVERTEXARRAYSAPPLEPROC glad_debug_glGenVertexArraysAPPLE = glad_debug_impl_glGenVertexArraysAPPLE;
PFNGLISVERTEXARRAYAPPLEPROC glad_glIsVertexArrayAPPLE;
GLboolean APIENTRY glad_debug_impl_glIsVertexArrayAPPLE(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsVertexArrayAPPLE", (void*)glIsVertexArrayAPPLE, 1, arg0);
    ret =  glad_glIsVertexArrayAPPLE(arg0);
    _post_call_callback("glIsVertexArrayAPPLE", (void*)glIsVertexArrayAPPLE, 1, arg0);
    return ret;
}
PFNGLISVERTEXARRAYAPPLEPROC glad_debug_glIsVertexArrayAPPLE = glad_debug_impl_glIsVertexArrayAPPLE;
PFNGLDETAILTEXFUNCSGISPROC glad_glDetailTexFuncSGIS;
void APIENTRY glad_debug_impl_glDetailTexFuncSGIS(GLenum arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glDetailTexFuncSGIS", (void*)glDetailTexFuncSGIS, 3, arg0, arg1, arg2);
     glad_glDetailTexFuncSGIS(arg0, arg1, arg2);
    _post_call_callback("glDetailTexFuncSGIS", (void*)glDetailTexFuncSGIS, 3, arg0, arg1, arg2);

}
PFNGLDETAILTEXFUNCSGISPROC glad_debug_glDetailTexFuncSGIS = glad_debug_impl_glDetailTexFuncSGIS;
PFNGLGETDETAILTEXFUNCSGISPROC glad_glGetDetailTexFuncSGIS;
void APIENTRY glad_debug_impl_glGetDetailTexFuncSGIS(GLenum arg0, GLfloat* arg1) {
    _pre_call_callback("glGetDetailTexFuncSGIS", (void*)glGetDetailTexFuncSGIS, 2, arg0, arg1);
     glad_glGetDetailTexFuncSGIS(arg0, arg1);
    _post_call_callback("glGetDetailTexFuncSGIS", (void*)glGetDetailTexFuncSGIS, 2, arg0, arg1);

}
PFNGLGETDETAILTEXFUNCSGISPROC glad_debug_glGetDetailTexFuncSGIS = glad_debug_impl_glGetDetailTexFuncSGIS;
PFNGLDRAWARRAYSINSTANCEDARBPROC glad_glDrawArraysInstancedARB;
void APIENTRY glad_debug_impl_glDrawArraysInstancedARB(GLenum arg0, GLint arg1, GLsizei arg2, GLsizei arg3) {
    _pre_call_callback("glDrawArraysInstancedARB", (void*)glDrawArraysInstancedARB, 4, arg0, arg1, arg2, arg3);
     glad_glDrawArraysInstancedARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glDrawArraysInstancedARB", (void*)glDrawArraysInstancedARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLDRAWARRAYSINSTANCEDARBPROC glad_debug_glDrawArraysInstancedARB = glad_debug_impl_glDrawArraysInstancedARB;
PFNGLDRAWELEMENTSINSTANCEDARBPROC glad_glDrawElementsInstancedARB;
void APIENTRY glad_debug_impl_glDrawElementsInstancedARB(GLenum arg0, GLsizei arg1, GLenum arg2, const void* arg3, GLsizei arg4) {
    _pre_call_callback("glDrawElementsInstancedARB", (void*)glDrawElementsInstancedARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glDrawElementsInstancedARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glDrawElementsInstancedARB", (void*)glDrawElementsInstancedARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLDRAWELEMENTSINSTANCEDARBPROC glad_debug_glDrawElementsInstancedARB = glad_debug_impl_glDrawElementsInstancedARB;
PFNGLNAMEDSTRINGARBPROC glad_glNamedStringARB;
void APIENTRY glad_debug_impl_glNamedStringARB(GLenum arg0, GLint arg1, const GLchar* arg2, GLint arg3, const GLchar* arg4) {
    _pre_call_callback("glNamedStringARB", (void*)glNamedStringARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glNamedStringARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glNamedStringARB", (void*)glNamedStringARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLNAMEDSTRINGARBPROC glad_debug_glNamedStringARB = glad_debug_impl_glNamedStringARB;
PFNGLDELETENAMEDSTRINGARBPROC glad_glDeleteNamedStringARB;
void APIENTRY glad_debug_impl_glDeleteNamedStringARB(GLint arg0, const GLchar* arg1) {
    _pre_call_callback("glDeleteNamedStringARB", (void*)glDeleteNamedStringARB, 2, arg0, arg1);
     glad_glDeleteNamedStringARB(arg0, arg1);
    _post_call_callback("glDeleteNamedStringARB", (void*)glDeleteNamedStringARB, 2, arg0, arg1);

}
PFNGLDELETENAMEDSTRINGARBPROC glad_debug_glDeleteNamedStringARB = glad_debug_impl_glDeleteNamedStringARB;
PFNGLCOMPILESHADERINCLUDEARBPROC glad_glCompileShaderIncludeARB;
void APIENTRY glad_debug_impl_glCompileShaderIncludeARB(GLuint arg0, GLsizei arg1, const GLchar** arg2, const GLint* arg3) {
    _pre_call_callback("glCompileShaderIncludeARB", (void*)glCompileShaderIncludeARB, 4, arg0, arg1, arg2, arg3);
     glad_glCompileShaderIncludeARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glCompileShaderIncludeARB", (void*)glCompileShaderIncludeARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLCOMPILESHADERINCLUDEARBPROC glad_debug_glCompileShaderIncludeARB = glad_debug_impl_glCompileShaderIncludeARB;
PFNGLISNAMEDSTRINGARBPROC glad_glIsNamedStringARB;
GLboolean APIENTRY glad_debug_impl_glIsNamedStringARB(GLint arg0, const GLchar* arg1) {
    GLboolean ret;
    _pre_call_callback("glIsNamedStringARB", (void*)glIsNamedStringARB, 2, arg0, arg1);
    ret =  glad_glIsNamedStringARB(arg0, arg1);
    _post_call_callback("glIsNamedStringARB", (void*)glIsNamedStringARB, 2, arg0, arg1);
    return ret;
}
PFNGLISNAMEDSTRINGARBPROC glad_debug_glIsNamedStringARB = glad_debug_impl_glIsNamedStringARB;
PFNGLGETNAMEDSTRINGARBPROC glad_glGetNamedStringARB;
void APIENTRY glad_debug_impl_glGetNamedStringARB(GLint arg0, const GLchar* arg1, GLsizei arg2, GLint* arg3, GLchar* arg4) {
    _pre_call_callback("glGetNamedStringARB", (void*)glGetNamedStringARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetNamedStringARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetNamedStringARB", (void*)glGetNamedStringARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETNAMEDSTRINGARBPROC glad_debug_glGetNamedStringARB = glad_debug_impl_glGetNamedStringARB;
PFNGLGETNAMEDSTRINGIVARBPROC glad_glGetNamedStringivARB;
void APIENTRY glad_debug_impl_glGetNamedStringivARB(GLint arg0, const GLchar* arg1, GLenum arg2, GLint* arg3) {
    _pre_call_callback("glGetNamedStringivARB", (void*)glGetNamedStringivARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetNamedStringivARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetNamedStringivARB", (void*)glGetNamedStringivARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNAMEDSTRINGIVARBPROC glad_debug_glGetNamedStringivARB = glad_debug_impl_glGetNamedStringivARB;
PFNGLBLENDFUNCSEPARATEINGRPROC glad_glBlendFuncSeparateINGR;
void APIENTRY glad_debug_impl_glBlendFuncSeparateINGR(GLenum arg0, GLenum arg1, GLenum arg2, GLenum arg3) {
    _pre_call_callback("glBlendFuncSeparateINGR", (void*)glBlendFuncSeparateINGR, 4, arg0, arg1, arg2, arg3);
     glad_glBlendFuncSeparateINGR(arg0, arg1, arg2, arg3);
    _post_call_callback("glBlendFuncSeparateINGR", (void*)glBlendFuncSeparateINGR, 4, arg0, arg1, arg2, arg3);

}
PFNGLBLENDFUNCSEPARATEINGRPROC glad_debug_glBlendFuncSeparateINGR = glad_debug_impl_glBlendFuncSeparateINGR;
PFNGLGENPATHSNVPROC glad_glGenPathsNV;
GLuint APIENTRY glad_debug_impl_glGenPathsNV(GLsizei arg0) {
    GLuint ret;
    _pre_call_callback("glGenPathsNV", (void*)glGenPathsNV, 1, arg0);
    ret =  glad_glGenPathsNV(arg0);
    _post_call_callback("glGenPathsNV", (void*)glGenPathsNV, 1, arg0);
    return ret;
}
PFNGLGENPATHSNVPROC glad_debug_glGenPathsNV = glad_debug_impl_glGenPathsNV;
PFNGLDELETEPATHSNVPROC glad_glDeletePathsNV;
void APIENTRY glad_debug_impl_glDeletePathsNV(GLuint arg0, GLsizei arg1) {
    _pre_call_callback("glDeletePathsNV", (void*)glDeletePathsNV, 2, arg0, arg1);
     glad_glDeletePathsNV(arg0, arg1);
    _post_call_callback("glDeletePathsNV", (void*)glDeletePathsNV, 2, arg0, arg1);

}
PFNGLDELETEPATHSNVPROC glad_debug_glDeletePathsNV = glad_debug_impl_glDeletePathsNV;
PFNGLISPATHNVPROC glad_glIsPathNV;
GLboolean APIENTRY glad_debug_impl_glIsPathNV(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsPathNV", (void*)glIsPathNV, 1, arg0);
    ret =  glad_glIsPathNV(arg0);
    _post_call_callback("glIsPathNV", (void*)glIsPathNV, 1, arg0);
    return ret;
}
PFNGLISPATHNVPROC glad_debug_glIsPathNV = glad_debug_impl_glIsPathNV;
PFNGLPATHCOMMANDSNVPROC glad_glPathCommandsNV;
void APIENTRY glad_debug_impl_glPathCommandsNV(GLuint arg0, GLsizei arg1, const GLubyte* arg2, GLsizei arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glPathCommandsNV", (void*)glPathCommandsNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glPathCommandsNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glPathCommandsNV", (void*)glPathCommandsNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPATHCOMMANDSNVPROC glad_debug_glPathCommandsNV = glad_debug_impl_glPathCommandsNV;
PFNGLPATHCOORDSNVPROC glad_glPathCoordsNV;
void APIENTRY glad_debug_impl_glPathCoordsNV(GLuint arg0, GLsizei arg1, GLenum arg2, const void* arg3) {
    _pre_call_callback("glPathCoordsNV", (void*)glPathCoordsNV, 4, arg0, arg1, arg2, arg3);
     glad_glPathCoordsNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glPathCoordsNV", (void*)glPathCoordsNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPATHCOORDSNVPROC glad_debug_glPathCoordsNV = glad_debug_impl_glPathCoordsNV;
PFNGLPATHSUBCOMMANDSNVPROC glad_glPathSubCommandsNV;
void APIENTRY glad_debug_impl_glPathSubCommandsNV(GLuint arg0, GLsizei arg1, GLsizei arg2, GLsizei arg3, const GLubyte* arg4, GLsizei arg5, GLenum arg6, const void* arg7) {
    _pre_call_callback("glPathSubCommandsNV", (void*)glPathSubCommandsNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glPathSubCommandsNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glPathSubCommandsNV", (void*)glPathSubCommandsNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLPATHSUBCOMMANDSNVPROC glad_debug_glPathSubCommandsNV = glad_debug_impl_glPathSubCommandsNV;
PFNGLPATHSUBCOORDSNVPROC glad_glPathSubCoordsNV;
void APIENTRY glad_debug_impl_glPathSubCoordsNV(GLuint arg0, GLsizei arg1, GLsizei arg2, GLenum arg3, const void* arg4) {
    _pre_call_callback("glPathSubCoordsNV", (void*)glPathSubCoordsNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glPathSubCoordsNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glPathSubCoordsNV", (void*)glPathSubCoordsNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPATHSUBCOORDSNVPROC glad_debug_glPathSubCoordsNV = glad_debug_impl_glPathSubCoordsNV;
PFNGLPATHSTRINGNVPROC glad_glPathStringNV;
void APIENTRY glad_debug_impl_glPathStringNV(GLuint arg0, GLenum arg1, GLsizei arg2, const void* arg3) {
    _pre_call_callback("glPathStringNV", (void*)glPathStringNV, 4, arg0, arg1, arg2, arg3);
     glad_glPathStringNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glPathStringNV", (void*)glPathStringNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPATHSTRINGNVPROC glad_debug_glPathStringNV = glad_debug_impl_glPathStringNV;
PFNGLPATHGLYPHSNVPROC glad_glPathGlyphsNV;
void APIENTRY glad_debug_impl_glPathGlyphsNV(GLuint arg0, GLenum arg1, const void* arg2, GLbitfield arg3, GLsizei arg4, GLenum arg5, const void* arg6, GLenum arg7, GLuint arg8, GLfloat arg9) {
    _pre_call_callback("glPathGlyphsNV", (void*)glPathGlyphsNV, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glPathGlyphsNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glPathGlyphsNV", (void*)glPathGlyphsNV, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLPATHGLYPHSNVPROC glad_debug_glPathGlyphsNV = glad_debug_impl_glPathGlyphsNV;
PFNGLPATHGLYPHRANGENVPROC glad_glPathGlyphRangeNV;
void APIENTRY glad_debug_impl_glPathGlyphRangeNV(GLuint arg0, GLenum arg1, const void* arg2, GLbitfield arg3, GLuint arg4, GLsizei arg5, GLenum arg6, GLuint arg7, GLfloat arg8) {
    _pre_call_callback("glPathGlyphRangeNV", (void*)glPathGlyphRangeNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glPathGlyphRangeNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glPathGlyphRangeNV", (void*)glPathGlyphRangeNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLPATHGLYPHRANGENVPROC glad_debug_glPathGlyphRangeNV = glad_debug_impl_glPathGlyphRangeNV;
PFNGLWEIGHTPATHSNVPROC glad_glWeightPathsNV;
void APIENTRY glad_debug_impl_glWeightPathsNV(GLuint arg0, GLsizei arg1, const GLuint* arg2, const GLfloat* arg3) {
    _pre_call_callback("glWeightPathsNV", (void*)glWeightPathsNV, 4, arg0, arg1, arg2, arg3);
     glad_glWeightPathsNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glWeightPathsNV", (void*)glWeightPathsNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLWEIGHTPATHSNVPROC glad_debug_glWeightPathsNV = glad_debug_impl_glWeightPathsNV;
PFNGLCOPYPATHNVPROC glad_glCopyPathNV;
void APIENTRY glad_debug_impl_glCopyPathNV(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glCopyPathNV", (void*)glCopyPathNV, 2, arg0, arg1);
     glad_glCopyPathNV(arg0, arg1);
    _post_call_callback("glCopyPathNV", (void*)glCopyPathNV, 2, arg0, arg1);

}
PFNGLCOPYPATHNVPROC glad_debug_glCopyPathNV = glad_debug_impl_glCopyPathNV;
PFNGLINTERPOLATEPATHSNVPROC glad_glInterpolatePathsNV;
void APIENTRY glad_debug_impl_glInterpolatePathsNV(GLuint arg0, GLuint arg1, GLuint arg2, GLfloat arg3) {
    _pre_call_callback("glInterpolatePathsNV", (void*)glInterpolatePathsNV, 4, arg0, arg1, arg2, arg3);
     glad_glInterpolatePathsNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glInterpolatePathsNV", (void*)glInterpolatePathsNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLINTERPOLATEPATHSNVPROC glad_debug_glInterpolatePathsNV = glad_debug_impl_glInterpolatePathsNV;
PFNGLTRANSFORMPATHNVPROC glad_glTransformPathNV;
void APIENTRY glad_debug_impl_glTransformPathNV(GLuint arg0, GLuint arg1, GLenum arg2, const GLfloat* arg3) {
    _pre_call_callback("glTransformPathNV", (void*)glTransformPathNV, 4, arg0, arg1, arg2, arg3);
     glad_glTransformPathNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glTransformPathNV", (void*)glTransformPathNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLTRANSFORMPATHNVPROC glad_debug_glTransformPathNV = glad_debug_impl_glTransformPathNV;
PFNGLPATHPARAMETERIVNVPROC glad_glPathParameterivNV;
void APIENTRY glad_debug_impl_glPathParameterivNV(GLuint arg0, GLenum arg1, const GLint* arg2) {
    _pre_call_callback("glPathParameterivNV", (void*)glPathParameterivNV, 3, arg0, arg1, arg2);
     glad_glPathParameterivNV(arg0, arg1, arg2);
    _post_call_callback("glPathParameterivNV", (void*)glPathParameterivNV, 3, arg0, arg1, arg2);

}
PFNGLPATHPARAMETERIVNVPROC glad_debug_glPathParameterivNV = glad_debug_impl_glPathParameterivNV;
PFNGLPATHPARAMETERINVPROC glad_glPathParameteriNV;
void APIENTRY glad_debug_impl_glPathParameteriNV(GLuint arg0, GLenum arg1, GLint arg2) {
    _pre_call_callback("glPathParameteriNV", (void*)glPathParameteriNV, 3, arg0, arg1, arg2);
     glad_glPathParameteriNV(arg0, arg1, arg2);
    _post_call_callback("glPathParameteriNV", (void*)glPathParameteriNV, 3, arg0, arg1, arg2);

}
PFNGLPATHPARAMETERINVPROC glad_debug_glPathParameteriNV = glad_debug_impl_glPathParameteriNV;
PFNGLPATHPARAMETERFVNVPROC glad_glPathParameterfvNV;
void APIENTRY glad_debug_impl_glPathParameterfvNV(GLuint arg0, GLenum arg1, const GLfloat* arg2) {
    _pre_call_callback("glPathParameterfvNV", (void*)glPathParameterfvNV, 3, arg0, arg1, arg2);
     glad_glPathParameterfvNV(arg0, arg1, arg2);
    _post_call_callback("glPathParameterfvNV", (void*)glPathParameterfvNV, 3, arg0, arg1, arg2);

}
PFNGLPATHPARAMETERFVNVPROC glad_debug_glPathParameterfvNV = glad_debug_impl_glPathParameterfvNV;
PFNGLPATHPARAMETERFNVPROC glad_glPathParameterfNV;
void APIENTRY glad_debug_impl_glPathParameterfNV(GLuint arg0, GLenum arg1, GLfloat arg2) {
    _pre_call_callback("glPathParameterfNV", (void*)glPathParameterfNV, 3, arg0, arg1, arg2);
     glad_glPathParameterfNV(arg0, arg1, arg2);
    _post_call_callback("glPathParameterfNV", (void*)glPathParameterfNV, 3, arg0, arg1, arg2);

}
PFNGLPATHPARAMETERFNVPROC glad_debug_glPathParameterfNV = glad_debug_impl_glPathParameterfNV;
PFNGLPATHDASHARRAYNVPROC glad_glPathDashArrayNV;
void APIENTRY glad_debug_impl_glPathDashArrayNV(GLuint arg0, GLsizei arg1, const GLfloat* arg2) {
    _pre_call_callback("glPathDashArrayNV", (void*)glPathDashArrayNV, 3, arg0, arg1, arg2);
     glad_glPathDashArrayNV(arg0, arg1, arg2);
    _post_call_callback("glPathDashArrayNV", (void*)glPathDashArrayNV, 3, arg0, arg1, arg2);

}
PFNGLPATHDASHARRAYNVPROC glad_debug_glPathDashArrayNV = glad_debug_impl_glPathDashArrayNV;
PFNGLPATHSTENCILFUNCNVPROC glad_glPathStencilFuncNV;
void APIENTRY glad_debug_impl_glPathStencilFuncNV(GLenum arg0, GLint arg1, GLuint arg2) {
    _pre_call_callback("glPathStencilFuncNV", (void*)glPathStencilFuncNV, 3, arg0, arg1, arg2);
     glad_glPathStencilFuncNV(arg0, arg1, arg2);
    _post_call_callback("glPathStencilFuncNV", (void*)glPathStencilFuncNV, 3, arg0, arg1, arg2);

}
PFNGLPATHSTENCILFUNCNVPROC glad_debug_glPathStencilFuncNV = glad_debug_impl_glPathStencilFuncNV;
PFNGLPATHSTENCILDEPTHOFFSETNVPROC glad_glPathStencilDepthOffsetNV;
void APIENTRY glad_debug_impl_glPathStencilDepthOffsetNV(GLfloat arg0, GLfloat arg1) {
    _pre_call_callback("glPathStencilDepthOffsetNV", (void*)glPathStencilDepthOffsetNV, 2, arg0, arg1);
     glad_glPathStencilDepthOffsetNV(arg0, arg1);
    _post_call_callback("glPathStencilDepthOffsetNV", (void*)glPathStencilDepthOffsetNV, 2, arg0, arg1);

}
PFNGLPATHSTENCILDEPTHOFFSETNVPROC glad_debug_glPathStencilDepthOffsetNV = glad_debug_impl_glPathStencilDepthOffsetNV;
PFNGLSTENCILFILLPATHNVPROC glad_glStencilFillPathNV;
void APIENTRY glad_debug_impl_glStencilFillPathNV(GLuint arg0, GLenum arg1, GLuint arg2) {
    _pre_call_callback("glStencilFillPathNV", (void*)glStencilFillPathNV, 3, arg0, arg1, arg2);
     glad_glStencilFillPathNV(arg0, arg1, arg2);
    _post_call_callback("glStencilFillPathNV", (void*)glStencilFillPathNV, 3, arg0, arg1, arg2);

}
PFNGLSTENCILFILLPATHNVPROC glad_debug_glStencilFillPathNV = glad_debug_impl_glStencilFillPathNV;
PFNGLSTENCILSTROKEPATHNVPROC glad_glStencilStrokePathNV;
void APIENTRY glad_debug_impl_glStencilStrokePathNV(GLuint arg0, GLint arg1, GLuint arg2) {
    _pre_call_callback("glStencilStrokePathNV", (void*)glStencilStrokePathNV, 3, arg0, arg1, arg2);
     glad_glStencilStrokePathNV(arg0, arg1, arg2);
    _post_call_callback("glStencilStrokePathNV", (void*)glStencilStrokePathNV, 3, arg0, arg1, arg2);

}
PFNGLSTENCILSTROKEPATHNVPROC glad_debug_glStencilStrokePathNV = glad_debug_impl_glStencilStrokePathNV;
PFNGLSTENCILFILLPATHINSTANCEDNVPROC glad_glStencilFillPathInstancedNV;
void APIENTRY glad_debug_impl_glStencilFillPathInstancedNV(GLsizei arg0, GLenum arg1, const void* arg2, GLuint arg3, GLenum arg4, GLuint arg5, GLenum arg6, const GLfloat* arg7) {
    _pre_call_callback("glStencilFillPathInstancedNV", (void*)glStencilFillPathInstancedNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glStencilFillPathInstancedNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glStencilFillPathInstancedNV", (void*)glStencilFillPathInstancedNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLSTENCILFILLPATHINSTANCEDNVPROC glad_debug_glStencilFillPathInstancedNV = glad_debug_impl_glStencilFillPathInstancedNV;
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glad_glStencilStrokePathInstancedNV;
void APIENTRY glad_debug_impl_glStencilStrokePathInstancedNV(GLsizei arg0, GLenum arg1, const void* arg2, GLuint arg3, GLint arg4, GLuint arg5, GLenum arg6, const GLfloat* arg7) {
    _pre_call_callback("glStencilStrokePathInstancedNV", (void*)glStencilStrokePathInstancedNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glStencilStrokePathInstancedNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glStencilStrokePathInstancedNV", (void*)glStencilStrokePathInstancedNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glad_debug_glStencilStrokePathInstancedNV = glad_debug_impl_glStencilStrokePathInstancedNV;
PFNGLPATHCOVERDEPTHFUNCNVPROC glad_glPathCoverDepthFuncNV;
void APIENTRY glad_debug_impl_glPathCoverDepthFuncNV(GLenum arg0) {
    _pre_call_callback("glPathCoverDepthFuncNV", (void*)glPathCoverDepthFuncNV, 1, arg0);
     glad_glPathCoverDepthFuncNV(arg0);
    _post_call_callback("glPathCoverDepthFuncNV", (void*)glPathCoverDepthFuncNV, 1, arg0);

}
PFNGLPATHCOVERDEPTHFUNCNVPROC glad_debug_glPathCoverDepthFuncNV = glad_debug_impl_glPathCoverDepthFuncNV;
PFNGLCOVERFILLPATHNVPROC glad_glCoverFillPathNV;
void APIENTRY glad_debug_impl_glCoverFillPathNV(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glCoverFillPathNV", (void*)glCoverFillPathNV, 2, arg0, arg1);
     glad_glCoverFillPathNV(arg0, arg1);
    _post_call_callback("glCoverFillPathNV", (void*)glCoverFillPathNV, 2, arg0, arg1);

}
PFNGLCOVERFILLPATHNVPROC glad_debug_glCoverFillPathNV = glad_debug_impl_glCoverFillPathNV;
PFNGLCOVERSTROKEPATHNVPROC glad_glCoverStrokePathNV;
void APIENTRY glad_debug_impl_glCoverStrokePathNV(GLuint arg0, GLenum arg1) {
    _pre_call_callback("glCoverStrokePathNV", (void*)glCoverStrokePathNV, 2, arg0, arg1);
     glad_glCoverStrokePathNV(arg0, arg1);
    _post_call_callback("glCoverStrokePathNV", (void*)glCoverStrokePathNV, 2, arg0, arg1);

}
PFNGLCOVERSTROKEPATHNVPROC glad_debug_glCoverStrokePathNV = glad_debug_impl_glCoverStrokePathNV;
PFNGLCOVERFILLPATHINSTANCEDNVPROC glad_glCoverFillPathInstancedNV;
void APIENTRY glad_debug_impl_glCoverFillPathInstancedNV(GLsizei arg0, GLenum arg1, const void* arg2, GLuint arg3, GLenum arg4, GLenum arg5, const GLfloat* arg6) {
    _pre_call_callback("glCoverFillPathInstancedNV", (void*)glCoverFillPathInstancedNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCoverFillPathInstancedNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCoverFillPathInstancedNV", (void*)glCoverFillPathInstancedNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOVERFILLPATHINSTANCEDNVPROC glad_debug_glCoverFillPathInstancedNV = glad_debug_impl_glCoverFillPathInstancedNV;
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glad_glCoverStrokePathInstancedNV;
void APIENTRY glad_debug_impl_glCoverStrokePathInstancedNV(GLsizei arg0, GLenum arg1, const void* arg2, GLuint arg3, GLenum arg4, GLenum arg5, const GLfloat* arg6) {
    _pre_call_callback("glCoverStrokePathInstancedNV", (void*)glCoverStrokePathInstancedNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glCoverStrokePathInstancedNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glCoverStrokePathInstancedNV", (void*)glCoverStrokePathInstancedNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glad_debug_glCoverStrokePathInstancedNV = glad_debug_impl_glCoverStrokePathInstancedNV;
PFNGLGETPATHPARAMETERIVNVPROC glad_glGetPathParameterivNV;
void APIENTRY glad_debug_impl_glGetPathParameterivNV(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetPathParameterivNV", (void*)glGetPathParameterivNV, 3, arg0, arg1, arg2);
     glad_glGetPathParameterivNV(arg0, arg1, arg2);
    _post_call_callback("glGetPathParameterivNV", (void*)glGetPathParameterivNV, 3, arg0, arg1, arg2);

}
PFNGLGETPATHPARAMETERIVNVPROC glad_debug_glGetPathParameterivNV = glad_debug_impl_glGetPathParameterivNV;
PFNGLGETPATHPARAMETERFVNVPROC glad_glGetPathParameterfvNV;
void APIENTRY glad_debug_impl_glGetPathParameterfvNV(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetPathParameterfvNV", (void*)glGetPathParameterfvNV, 3, arg0, arg1, arg2);
     glad_glGetPathParameterfvNV(arg0, arg1, arg2);
    _post_call_callback("glGetPathParameterfvNV", (void*)glGetPathParameterfvNV, 3, arg0, arg1, arg2);

}
PFNGLGETPATHPARAMETERFVNVPROC glad_debug_glGetPathParameterfvNV = glad_debug_impl_glGetPathParameterfvNV;
PFNGLGETPATHCOMMANDSNVPROC glad_glGetPathCommandsNV;
void APIENTRY glad_debug_impl_glGetPathCommandsNV(GLuint arg0, GLubyte* arg1) {
    _pre_call_callback("glGetPathCommandsNV", (void*)glGetPathCommandsNV, 2, arg0, arg1);
     glad_glGetPathCommandsNV(arg0, arg1);
    _post_call_callback("glGetPathCommandsNV", (void*)glGetPathCommandsNV, 2, arg0, arg1);

}
PFNGLGETPATHCOMMANDSNVPROC glad_debug_glGetPathCommandsNV = glad_debug_impl_glGetPathCommandsNV;
PFNGLGETPATHCOORDSNVPROC glad_glGetPathCoordsNV;
void APIENTRY glad_debug_impl_glGetPathCoordsNV(GLuint arg0, GLfloat* arg1) {
    _pre_call_callback("glGetPathCoordsNV", (void*)glGetPathCoordsNV, 2, arg0, arg1);
     glad_glGetPathCoordsNV(arg0, arg1);
    _post_call_callback("glGetPathCoordsNV", (void*)glGetPathCoordsNV, 2, arg0, arg1);

}
PFNGLGETPATHCOORDSNVPROC glad_debug_glGetPathCoordsNV = glad_debug_impl_glGetPathCoordsNV;
PFNGLGETPATHDASHARRAYNVPROC glad_glGetPathDashArrayNV;
void APIENTRY glad_debug_impl_glGetPathDashArrayNV(GLuint arg0, GLfloat* arg1) {
    _pre_call_callback("glGetPathDashArrayNV", (void*)glGetPathDashArrayNV, 2, arg0, arg1);
     glad_glGetPathDashArrayNV(arg0, arg1);
    _post_call_callback("glGetPathDashArrayNV", (void*)glGetPathDashArrayNV, 2, arg0, arg1);

}
PFNGLGETPATHDASHARRAYNVPROC glad_debug_glGetPathDashArrayNV = glad_debug_impl_glGetPathDashArrayNV;
PFNGLGETPATHMETRICSNVPROC glad_glGetPathMetricsNV;
void APIENTRY glad_debug_impl_glGetPathMetricsNV(GLbitfield arg0, GLsizei arg1, GLenum arg2, const void* arg3, GLuint arg4, GLsizei arg5, GLfloat* arg6) {
    _pre_call_callback("glGetPathMetricsNV", (void*)glGetPathMetricsNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glGetPathMetricsNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glGetPathMetricsNV", (void*)glGetPathMetricsNV, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLGETPATHMETRICSNVPROC glad_debug_glGetPathMetricsNV = glad_debug_impl_glGetPathMetricsNV;
PFNGLGETPATHMETRICRANGENVPROC glad_glGetPathMetricRangeNV;
void APIENTRY glad_debug_impl_glGetPathMetricRangeNV(GLbitfield arg0, GLuint arg1, GLsizei arg2, GLsizei arg3, GLfloat* arg4) {
    _pre_call_callback("glGetPathMetricRangeNV", (void*)glGetPathMetricRangeNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetPathMetricRangeNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetPathMetricRangeNV", (void*)glGetPathMetricRangeNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETPATHMETRICRANGENVPROC glad_debug_glGetPathMetricRangeNV = glad_debug_impl_glGetPathMetricRangeNV;
PFNGLGETPATHSPACINGNVPROC glad_glGetPathSpacingNV;
void APIENTRY glad_debug_impl_glGetPathSpacingNV(GLenum arg0, GLsizei arg1, GLenum arg2, const void* arg3, GLuint arg4, GLfloat arg5, GLfloat arg6, GLenum arg7, GLfloat* arg8) {
    _pre_call_callback("glGetPathSpacingNV", (void*)glGetPathSpacingNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glGetPathSpacingNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glGetPathSpacingNV", (void*)glGetPathSpacingNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLGETPATHSPACINGNVPROC glad_debug_glGetPathSpacingNV = glad_debug_impl_glGetPathSpacingNV;
PFNGLISPOINTINFILLPATHNVPROC glad_glIsPointInFillPathNV;
GLboolean APIENTRY glad_debug_impl_glIsPointInFillPathNV(GLuint arg0, GLuint arg1, GLfloat arg2, GLfloat arg3) {
    GLboolean ret;
    _pre_call_callback("glIsPointInFillPathNV", (void*)glIsPointInFillPathNV, 4, arg0, arg1, arg2, arg3);
    ret =  glad_glIsPointInFillPathNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glIsPointInFillPathNV", (void*)glIsPointInFillPathNV, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLISPOINTINFILLPATHNVPROC glad_debug_glIsPointInFillPathNV = glad_debug_impl_glIsPointInFillPathNV;
PFNGLISPOINTINSTROKEPATHNVPROC glad_glIsPointInStrokePathNV;
GLboolean APIENTRY glad_debug_impl_glIsPointInStrokePathNV(GLuint arg0, GLfloat arg1, GLfloat arg2) {
    GLboolean ret;
    _pre_call_callback("glIsPointInStrokePathNV", (void*)glIsPointInStrokePathNV, 3, arg0, arg1, arg2);
    ret =  glad_glIsPointInStrokePathNV(arg0, arg1, arg2);
    _post_call_callback("glIsPointInStrokePathNV", (void*)glIsPointInStrokePathNV, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLISPOINTINSTROKEPATHNVPROC glad_debug_glIsPointInStrokePathNV = glad_debug_impl_glIsPointInStrokePathNV;
PFNGLGETPATHLENGTHNVPROC glad_glGetPathLengthNV;
GLfloat APIENTRY glad_debug_impl_glGetPathLengthNV(GLuint arg0, GLsizei arg1, GLsizei arg2) {
    GLfloat ret;
    _pre_call_callback("glGetPathLengthNV", (void*)glGetPathLengthNV, 3, arg0, arg1, arg2);
    ret =  glad_glGetPathLengthNV(arg0, arg1, arg2);
    _post_call_callback("glGetPathLengthNV", (void*)glGetPathLengthNV, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLGETPATHLENGTHNVPROC glad_debug_glGetPathLengthNV = glad_debug_impl_glGetPathLengthNV;
PFNGLPOINTALONGPATHNVPROC glad_glPointAlongPathNV;
GLboolean APIENTRY glad_debug_impl_glPointAlongPathNV(GLuint arg0, GLsizei arg1, GLsizei arg2, GLfloat arg3, GLfloat* arg4, GLfloat* arg5, GLfloat* arg6, GLfloat* arg7) {
    GLboolean ret;
    _pre_call_callback("glPointAlongPathNV", (void*)glPointAlongPathNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    ret =  glad_glPointAlongPathNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glPointAlongPathNV", (void*)glPointAlongPathNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    return ret;
}
PFNGLPOINTALONGPATHNVPROC glad_debug_glPointAlongPathNV = glad_debug_impl_glPointAlongPathNV;
PFNGLMATRIXLOAD3X2FNVPROC glad_glMatrixLoad3x2fNV;
void APIENTRY glad_debug_impl_glMatrixLoad3x2fNV(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixLoad3x2fNV", (void*)glMatrixLoad3x2fNV, 2, arg0, arg1);
     glad_glMatrixLoad3x2fNV(arg0, arg1);
    _post_call_callback("glMatrixLoad3x2fNV", (void*)glMatrixLoad3x2fNV, 2, arg0, arg1);

}
PFNGLMATRIXLOAD3X2FNVPROC glad_debug_glMatrixLoad3x2fNV = glad_debug_impl_glMatrixLoad3x2fNV;
PFNGLMATRIXLOAD3X3FNVPROC glad_glMatrixLoad3x3fNV;
void APIENTRY glad_debug_impl_glMatrixLoad3x3fNV(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixLoad3x3fNV", (void*)glMatrixLoad3x3fNV, 2, arg0, arg1);
     glad_glMatrixLoad3x3fNV(arg0, arg1);
    _post_call_callback("glMatrixLoad3x3fNV", (void*)glMatrixLoad3x3fNV, 2, arg0, arg1);

}
PFNGLMATRIXLOAD3X3FNVPROC glad_debug_glMatrixLoad3x3fNV = glad_debug_impl_glMatrixLoad3x3fNV;
PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC glad_glMatrixLoadTranspose3x3fNV;
void APIENTRY glad_debug_impl_glMatrixLoadTranspose3x3fNV(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixLoadTranspose3x3fNV", (void*)glMatrixLoadTranspose3x3fNV, 2, arg0, arg1);
     glad_glMatrixLoadTranspose3x3fNV(arg0, arg1);
    _post_call_callback("glMatrixLoadTranspose3x3fNV", (void*)glMatrixLoadTranspose3x3fNV, 2, arg0, arg1);

}
PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC glad_debug_glMatrixLoadTranspose3x3fNV = glad_debug_impl_glMatrixLoadTranspose3x3fNV;
PFNGLMATRIXMULT3X2FNVPROC glad_glMatrixMult3x2fNV;
void APIENTRY glad_debug_impl_glMatrixMult3x2fNV(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixMult3x2fNV", (void*)glMatrixMult3x2fNV, 2, arg0, arg1);
     glad_glMatrixMult3x2fNV(arg0, arg1);
    _post_call_callback("glMatrixMult3x2fNV", (void*)glMatrixMult3x2fNV, 2, arg0, arg1);

}
PFNGLMATRIXMULT3X2FNVPROC glad_debug_glMatrixMult3x2fNV = glad_debug_impl_glMatrixMult3x2fNV;
PFNGLMATRIXMULT3X3FNVPROC glad_glMatrixMult3x3fNV;
void APIENTRY glad_debug_impl_glMatrixMult3x3fNV(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixMult3x3fNV", (void*)glMatrixMult3x3fNV, 2, arg0, arg1);
     glad_glMatrixMult3x3fNV(arg0, arg1);
    _post_call_callback("glMatrixMult3x3fNV", (void*)glMatrixMult3x3fNV, 2, arg0, arg1);

}
PFNGLMATRIXMULT3X3FNVPROC glad_debug_glMatrixMult3x3fNV = glad_debug_impl_glMatrixMult3x3fNV;
PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC glad_glMatrixMultTranspose3x3fNV;
void APIENTRY glad_debug_impl_glMatrixMultTranspose3x3fNV(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glMatrixMultTranspose3x3fNV", (void*)glMatrixMultTranspose3x3fNV, 2, arg0, arg1);
     glad_glMatrixMultTranspose3x3fNV(arg0, arg1);
    _post_call_callback("glMatrixMultTranspose3x3fNV", (void*)glMatrixMultTranspose3x3fNV, 2, arg0, arg1);

}
PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC glad_debug_glMatrixMultTranspose3x3fNV = glad_debug_impl_glMatrixMultTranspose3x3fNV;
PFNGLSTENCILTHENCOVERFILLPATHNVPROC glad_glStencilThenCoverFillPathNV;
void APIENTRY glad_debug_impl_glStencilThenCoverFillPathNV(GLuint arg0, GLenum arg1, GLuint arg2, GLenum arg3) {
    _pre_call_callback("glStencilThenCoverFillPathNV", (void*)glStencilThenCoverFillPathNV, 4, arg0, arg1, arg2, arg3);
     glad_glStencilThenCoverFillPathNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glStencilThenCoverFillPathNV", (void*)glStencilThenCoverFillPathNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLSTENCILTHENCOVERFILLPATHNVPROC glad_debug_glStencilThenCoverFillPathNV = glad_debug_impl_glStencilThenCoverFillPathNV;
PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC glad_glStencilThenCoverStrokePathNV;
void APIENTRY glad_debug_impl_glStencilThenCoverStrokePathNV(GLuint arg0, GLint arg1, GLuint arg2, GLenum arg3) {
    _pre_call_callback("glStencilThenCoverStrokePathNV", (void*)glStencilThenCoverStrokePathNV, 4, arg0, arg1, arg2, arg3);
     glad_glStencilThenCoverStrokePathNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glStencilThenCoverStrokePathNV", (void*)glStencilThenCoverStrokePathNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC glad_debug_glStencilThenCoverStrokePathNV = glad_debug_impl_glStencilThenCoverStrokePathNV;
PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC glad_glStencilThenCoverFillPathInstancedNV;
void APIENTRY glad_debug_impl_glStencilThenCoverFillPathInstancedNV(GLsizei arg0, GLenum arg1, const void* arg2, GLuint arg3, GLenum arg4, GLuint arg5, GLenum arg6, GLenum arg7, const GLfloat* arg8) {
    _pre_call_callback("glStencilThenCoverFillPathInstancedNV", (void*)glStencilThenCoverFillPathInstancedNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glStencilThenCoverFillPathInstancedNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glStencilThenCoverFillPathInstancedNV", (void*)glStencilThenCoverFillPathInstancedNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC glad_debug_glStencilThenCoverFillPathInstancedNV = glad_debug_impl_glStencilThenCoverFillPathInstancedNV;
PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC glad_glStencilThenCoverStrokePathInstancedNV;
void APIENTRY glad_debug_impl_glStencilThenCoverStrokePathInstancedNV(GLsizei arg0, GLenum arg1, const void* arg2, GLuint arg3, GLint arg4, GLuint arg5, GLenum arg6, GLenum arg7, const GLfloat* arg8) {
    _pre_call_callback("glStencilThenCoverStrokePathInstancedNV", (void*)glStencilThenCoverStrokePathInstancedNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glStencilThenCoverStrokePathInstancedNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glStencilThenCoverStrokePathInstancedNV", (void*)glStencilThenCoverStrokePathInstancedNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC glad_debug_glStencilThenCoverStrokePathInstancedNV = glad_debug_impl_glStencilThenCoverStrokePathInstancedNV;
PFNGLPATHGLYPHINDEXRANGENVPROC glad_glPathGlyphIndexRangeNV;
GLenum APIENTRY glad_debug_impl_glPathGlyphIndexRangeNV(GLenum arg0, const void* arg1, GLbitfield arg2, GLuint arg3, GLfloat arg4, GLuint* arg5) {
    GLenum ret;
    _pre_call_callback("glPathGlyphIndexRangeNV", (void*)glPathGlyphIndexRangeNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    ret =  glad_glPathGlyphIndexRangeNV(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glPathGlyphIndexRangeNV", (void*)glPathGlyphIndexRangeNV, 6, arg0, arg1, arg2, arg3, arg4, arg5);
    return ret;
}
PFNGLPATHGLYPHINDEXRANGENVPROC glad_debug_glPathGlyphIndexRangeNV = glad_debug_impl_glPathGlyphIndexRangeNV;
PFNGLPATHGLYPHINDEXARRAYNVPROC glad_glPathGlyphIndexArrayNV;
GLenum APIENTRY glad_debug_impl_glPathGlyphIndexArrayNV(GLuint arg0, GLenum arg1, const void* arg2, GLbitfield arg3, GLuint arg4, GLsizei arg5, GLuint arg6, GLfloat arg7) {
    GLenum ret;
    _pre_call_callback("glPathGlyphIndexArrayNV", (void*)glPathGlyphIndexArrayNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    ret =  glad_glPathGlyphIndexArrayNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glPathGlyphIndexArrayNV", (void*)glPathGlyphIndexArrayNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    return ret;
}
PFNGLPATHGLYPHINDEXARRAYNVPROC glad_debug_glPathGlyphIndexArrayNV = glad_debug_impl_glPathGlyphIndexArrayNV;
PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC glad_glPathMemoryGlyphIndexArrayNV;
GLenum APIENTRY glad_debug_impl_glPathMemoryGlyphIndexArrayNV(GLuint arg0, GLenum arg1, GLsizeiptr arg2, const void* arg3, GLsizei arg4, GLuint arg5, GLsizei arg6, GLuint arg7, GLfloat arg8) {
    GLenum ret;
    _pre_call_callback("glPathMemoryGlyphIndexArrayNV", (void*)glPathMemoryGlyphIndexArrayNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    ret =  glad_glPathMemoryGlyphIndexArrayNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glPathMemoryGlyphIndexArrayNV", (void*)glPathMemoryGlyphIndexArrayNV, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    return ret;
}
PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC glad_debug_glPathMemoryGlyphIndexArrayNV = glad_debug_impl_glPathMemoryGlyphIndexArrayNV;
PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC glad_glProgramPathFragmentInputGenNV;
void APIENTRY glad_debug_impl_glProgramPathFragmentInputGenNV(GLuint arg0, GLint arg1, GLenum arg2, GLint arg3, const GLfloat* arg4) {
    _pre_call_callback("glProgramPathFragmentInputGenNV", (void*)glProgramPathFragmentInputGenNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramPathFragmentInputGenNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramPathFragmentInputGenNV", (void*)glProgramPathFragmentInputGenNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC glad_debug_glProgramPathFragmentInputGenNV = glad_debug_impl_glProgramPathFragmentInputGenNV;
PFNGLGETPROGRAMRESOURCEFVNVPROC glad_glGetProgramResourcefvNV;
void APIENTRY glad_debug_impl_glGetProgramResourcefvNV(GLuint arg0, GLenum arg1, GLuint arg2, GLsizei arg3, const GLenum* arg4, GLsizei arg5, GLsizei* arg6, GLfloat* arg7) {
    _pre_call_callback("glGetProgramResourcefvNV", (void*)glGetProgramResourcefvNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glGetProgramResourcefvNV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glGetProgramResourcefvNV", (void*)glGetProgramResourcefvNV, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLGETPROGRAMRESOURCEFVNVPROC glad_debug_glGetProgramResourcefvNV = glad_debug_impl_glGetProgramResourcefvNV;
PFNGLPATHCOLORGENNVPROC glad_glPathColorGenNV;
void APIENTRY glad_debug_impl_glPathColorGenNV(GLenum arg0, GLenum arg1, GLenum arg2, const GLfloat* arg3) {
    _pre_call_callback("glPathColorGenNV", (void*)glPathColorGenNV, 4, arg0, arg1, arg2, arg3);
     glad_glPathColorGenNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glPathColorGenNV", (void*)glPathColorGenNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPATHCOLORGENNVPROC glad_debug_glPathColorGenNV = glad_debug_impl_glPathColorGenNV;
PFNGLPATHTEXGENNVPROC glad_glPathTexGenNV;
void APIENTRY glad_debug_impl_glPathTexGenNV(GLenum arg0, GLenum arg1, GLint arg2, const GLfloat* arg3) {
    _pre_call_callback("glPathTexGenNV", (void*)glPathTexGenNV, 4, arg0, arg1, arg2, arg3);
     glad_glPathTexGenNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glPathTexGenNV", (void*)glPathTexGenNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLPATHTEXGENNVPROC glad_debug_glPathTexGenNV = glad_debug_impl_glPathTexGenNV;
PFNGLPATHFOGGENNVPROC glad_glPathFogGenNV;
void APIENTRY glad_debug_impl_glPathFogGenNV(GLenum arg0) {
    _pre_call_callback("glPathFogGenNV", (void*)glPathFogGenNV, 1, arg0);
     glad_glPathFogGenNV(arg0);
    _post_call_callback("glPathFogGenNV", (void*)glPathFogGenNV, 1, arg0);

}
PFNGLPATHFOGGENNVPROC glad_debug_glPathFogGenNV = glad_debug_impl_glPathFogGenNV;
PFNGLGETPATHCOLORGENIVNVPROC glad_glGetPathColorGenivNV;
void APIENTRY glad_debug_impl_glGetPathColorGenivNV(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetPathColorGenivNV", (void*)glGetPathColorGenivNV, 3, arg0, arg1, arg2);
     glad_glGetPathColorGenivNV(arg0, arg1, arg2);
    _post_call_callback("glGetPathColorGenivNV", (void*)glGetPathColorGenivNV, 3, arg0, arg1, arg2);

}
PFNGLGETPATHCOLORGENIVNVPROC glad_debug_glGetPathColorGenivNV = glad_debug_impl_glGetPathColorGenivNV;
PFNGLGETPATHCOLORGENFVNVPROC glad_glGetPathColorGenfvNV;
void APIENTRY glad_debug_impl_glGetPathColorGenfvNV(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetPathColorGenfvNV", (void*)glGetPathColorGenfvNV, 3, arg0, arg1, arg2);
     glad_glGetPathColorGenfvNV(arg0, arg1, arg2);
    _post_call_callback("glGetPathColorGenfvNV", (void*)glGetPathColorGenfvNV, 3, arg0, arg1, arg2);

}
PFNGLGETPATHCOLORGENFVNVPROC glad_debug_glGetPathColorGenfvNV = glad_debug_impl_glGetPathColorGenfvNV;
PFNGLGETPATHTEXGENIVNVPROC glad_glGetPathTexGenivNV;
void APIENTRY glad_debug_impl_glGetPathTexGenivNV(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetPathTexGenivNV", (void*)glGetPathTexGenivNV, 3, arg0, arg1, arg2);
     glad_glGetPathTexGenivNV(arg0, arg1, arg2);
    _post_call_callback("glGetPathTexGenivNV", (void*)glGetPathTexGenivNV, 3, arg0, arg1, arg2);

}
PFNGLGETPATHTEXGENIVNVPROC glad_debug_glGetPathTexGenivNV = glad_debug_impl_glGetPathTexGenivNV;
PFNGLGETPATHTEXGENFVNVPROC glad_glGetPathTexGenfvNV;
void APIENTRY glad_debug_impl_glGetPathTexGenfvNV(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetPathTexGenfvNV", (void*)glGetPathTexGenfvNV, 3, arg0, arg1, arg2);
     glad_glGetPathTexGenfvNV(arg0, arg1, arg2);
    _post_call_callback("glGetPathTexGenfvNV", (void*)glGetPathTexGenfvNV, 3, arg0, arg1, arg2);

}
PFNGLGETPATHTEXGENFVNVPROC glad_debug_glGetPathTexGenfvNV = glad_debug_impl_glGetPathTexGenfvNV;
PFNGLCONSERVATIVERASTERPARAMETERFNVPROC glad_glConservativeRasterParameterfNV;
void APIENTRY glad_debug_impl_glConservativeRasterParameterfNV(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glConservativeRasterParameterfNV", (void*)glConservativeRasterParameterfNV, 2, arg0, arg1);
     glad_glConservativeRasterParameterfNV(arg0, arg1);
    _post_call_callback("glConservativeRasterParameterfNV", (void*)glConservativeRasterParameterfNV, 2, arg0, arg1);

}
PFNGLCONSERVATIVERASTERPARAMETERFNVPROC glad_debug_glConservativeRasterParameterfNV = glad_debug_impl_glConservativeRasterParameterfNV;
PFNGLVERTEXSTREAM1SATIPROC glad_glVertexStream1sATI;
void APIENTRY glad_debug_impl_glVertexStream1sATI(GLenum arg0, GLshort arg1) {
    _pre_call_callback("glVertexStream1sATI", (void*)glVertexStream1sATI, 2, arg0, arg1);
     glad_glVertexStream1sATI(arg0, arg1);
    _post_call_callback("glVertexStream1sATI", (void*)glVertexStream1sATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM1SATIPROC glad_debug_glVertexStream1sATI = glad_debug_impl_glVertexStream1sATI;
PFNGLVERTEXSTREAM1SVATIPROC glad_glVertexStream1svATI;
void APIENTRY glad_debug_impl_glVertexStream1svATI(GLenum arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexStream1svATI", (void*)glVertexStream1svATI, 2, arg0, arg1);
     glad_glVertexStream1svATI(arg0, arg1);
    _post_call_callback("glVertexStream1svATI", (void*)glVertexStream1svATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM1SVATIPROC glad_debug_glVertexStream1svATI = glad_debug_impl_glVertexStream1svATI;
PFNGLVERTEXSTREAM1IATIPROC glad_glVertexStream1iATI;
void APIENTRY glad_debug_impl_glVertexStream1iATI(GLenum arg0, GLint arg1) {
    _pre_call_callback("glVertexStream1iATI", (void*)glVertexStream1iATI, 2, arg0, arg1);
     glad_glVertexStream1iATI(arg0, arg1);
    _post_call_callback("glVertexStream1iATI", (void*)glVertexStream1iATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM1IATIPROC glad_debug_glVertexStream1iATI = glad_debug_impl_glVertexStream1iATI;
PFNGLVERTEXSTREAM1IVATIPROC glad_glVertexStream1ivATI;
void APIENTRY glad_debug_impl_glVertexStream1ivATI(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glVertexStream1ivATI", (void*)glVertexStream1ivATI, 2, arg0, arg1);
     glad_glVertexStream1ivATI(arg0, arg1);
    _post_call_callback("glVertexStream1ivATI", (void*)glVertexStream1ivATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM1IVATIPROC glad_debug_glVertexStream1ivATI = glad_debug_impl_glVertexStream1ivATI;
PFNGLVERTEXSTREAM1FATIPROC glad_glVertexStream1fATI;
void APIENTRY glad_debug_impl_glVertexStream1fATI(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glVertexStream1fATI", (void*)glVertexStream1fATI, 2, arg0, arg1);
     glad_glVertexStream1fATI(arg0, arg1);
    _post_call_callback("glVertexStream1fATI", (void*)glVertexStream1fATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM1FATIPROC glad_debug_glVertexStream1fATI = glad_debug_impl_glVertexStream1fATI;
PFNGLVERTEXSTREAM1FVATIPROC glad_glVertexStream1fvATI;
void APIENTRY glad_debug_impl_glVertexStream1fvATI(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexStream1fvATI", (void*)glVertexStream1fvATI, 2, arg0, arg1);
     glad_glVertexStream1fvATI(arg0, arg1);
    _post_call_callback("glVertexStream1fvATI", (void*)glVertexStream1fvATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM1FVATIPROC glad_debug_glVertexStream1fvATI = glad_debug_impl_glVertexStream1fvATI;
PFNGLVERTEXSTREAM1DATIPROC glad_glVertexStream1dATI;
void APIENTRY glad_debug_impl_glVertexStream1dATI(GLenum arg0, GLdouble arg1) {
    _pre_call_callback("glVertexStream1dATI", (void*)glVertexStream1dATI, 2, arg0, arg1);
     glad_glVertexStream1dATI(arg0, arg1);
    _post_call_callback("glVertexStream1dATI", (void*)glVertexStream1dATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM1DATIPROC glad_debug_glVertexStream1dATI = glad_debug_impl_glVertexStream1dATI;
PFNGLVERTEXSTREAM1DVATIPROC glad_glVertexStream1dvATI;
void APIENTRY glad_debug_impl_glVertexStream1dvATI(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexStream1dvATI", (void*)glVertexStream1dvATI, 2, arg0, arg1);
     glad_glVertexStream1dvATI(arg0, arg1);
    _post_call_callback("glVertexStream1dvATI", (void*)glVertexStream1dvATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM1DVATIPROC glad_debug_glVertexStream1dvATI = glad_debug_impl_glVertexStream1dvATI;
PFNGLVERTEXSTREAM2SATIPROC glad_glVertexStream2sATI;
void APIENTRY glad_debug_impl_glVertexStream2sATI(GLenum arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glVertexStream2sATI", (void*)glVertexStream2sATI, 3, arg0, arg1, arg2);
     glad_glVertexStream2sATI(arg0, arg1, arg2);
    _post_call_callback("glVertexStream2sATI", (void*)glVertexStream2sATI, 3, arg0, arg1, arg2);

}
PFNGLVERTEXSTREAM2SATIPROC glad_debug_glVertexStream2sATI = glad_debug_impl_glVertexStream2sATI;
PFNGLVERTEXSTREAM2SVATIPROC glad_glVertexStream2svATI;
void APIENTRY glad_debug_impl_glVertexStream2svATI(GLenum arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexStream2svATI", (void*)glVertexStream2svATI, 2, arg0, arg1);
     glad_glVertexStream2svATI(arg0, arg1);
    _post_call_callback("glVertexStream2svATI", (void*)glVertexStream2svATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM2SVATIPROC glad_debug_glVertexStream2svATI = glad_debug_impl_glVertexStream2svATI;
PFNGLVERTEXSTREAM2IATIPROC glad_glVertexStream2iATI;
void APIENTRY glad_debug_impl_glVertexStream2iATI(GLenum arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glVertexStream2iATI", (void*)glVertexStream2iATI, 3, arg0, arg1, arg2);
     glad_glVertexStream2iATI(arg0, arg1, arg2);
    _post_call_callback("glVertexStream2iATI", (void*)glVertexStream2iATI, 3, arg0, arg1, arg2);

}
PFNGLVERTEXSTREAM2IATIPROC glad_debug_glVertexStream2iATI = glad_debug_impl_glVertexStream2iATI;
PFNGLVERTEXSTREAM2IVATIPROC glad_glVertexStream2ivATI;
void APIENTRY glad_debug_impl_glVertexStream2ivATI(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glVertexStream2ivATI", (void*)glVertexStream2ivATI, 2, arg0, arg1);
     glad_glVertexStream2ivATI(arg0, arg1);
    _post_call_callback("glVertexStream2ivATI", (void*)glVertexStream2ivATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM2IVATIPROC glad_debug_glVertexStream2ivATI = glad_debug_impl_glVertexStream2ivATI;
PFNGLVERTEXSTREAM2FATIPROC glad_glVertexStream2fATI;
void APIENTRY glad_debug_impl_glVertexStream2fATI(GLenum arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glVertexStream2fATI", (void*)glVertexStream2fATI, 3, arg0, arg1, arg2);
     glad_glVertexStream2fATI(arg0, arg1, arg2);
    _post_call_callback("glVertexStream2fATI", (void*)glVertexStream2fATI, 3, arg0, arg1, arg2);

}
PFNGLVERTEXSTREAM2FATIPROC glad_debug_glVertexStream2fATI = glad_debug_impl_glVertexStream2fATI;
PFNGLVERTEXSTREAM2FVATIPROC glad_glVertexStream2fvATI;
void APIENTRY glad_debug_impl_glVertexStream2fvATI(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexStream2fvATI", (void*)glVertexStream2fvATI, 2, arg0, arg1);
     glad_glVertexStream2fvATI(arg0, arg1);
    _post_call_callback("glVertexStream2fvATI", (void*)glVertexStream2fvATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM2FVATIPROC glad_debug_glVertexStream2fvATI = glad_debug_impl_glVertexStream2fvATI;
PFNGLVERTEXSTREAM2DATIPROC glad_glVertexStream2dATI;
void APIENTRY glad_debug_impl_glVertexStream2dATI(GLenum arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glVertexStream2dATI", (void*)glVertexStream2dATI, 3, arg0, arg1, arg2);
     glad_glVertexStream2dATI(arg0, arg1, arg2);
    _post_call_callback("glVertexStream2dATI", (void*)glVertexStream2dATI, 3, arg0, arg1, arg2);

}
PFNGLVERTEXSTREAM2DATIPROC glad_debug_glVertexStream2dATI = glad_debug_impl_glVertexStream2dATI;
PFNGLVERTEXSTREAM2DVATIPROC glad_glVertexStream2dvATI;
void APIENTRY glad_debug_impl_glVertexStream2dvATI(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexStream2dvATI", (void*)glVertexStream2dvATI, 2, arg0, arg1);
     glad_glVertexStream2dvATI(arg0, arg1);
    _post_call_callback("glVertexStream2dvATI", (void*)glVertexStream2dvATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM2DVATIPROC glad_debug_glVertexStream2dvATI = glad_debug_impl_glVertexStream2dvATI;
PFNGLVERTEXSTREAM3SATIPROC glad_glVertexStream3sATI;
void APIENTRY glad_debug_impl_glVertexStream3sATI(GLenum arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_callback("glVertexStream3sATI", (void*)glVertexStream3sATI, 4, arg0, arg1, arg2, arg3);
     glad_glVertexStream3sATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexStream3sATI", (void*)glVertexStream3sATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXSTREAM3SATIPROC glad_debug_glVertexStream3sATI = glad_debug_impl_glVertexStream3sATI;
PFNGLVERTEXSTREAM3SVATIPROC glad_glVertexStream3svATI;
void APIENTRY glad_debug_impl_glVertexStream3svATI(GLenum arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexStream3svATI", (void*)glVertexStream3svATI, 2, arg0, arg1);
     glad_glVertexStream3svATI(arg0, arg1);
    _post_call_callback("glVertexStream3svATI", (void*)glVertexStream3svATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM3SVATIPROC glad_debug_glVertexStream3svATI = glad_debug_impl_glVertexStream3svATI;
PFNGLVERTEXSTREAM3IATIPROC glad_glVertexStream3iATI;
void APIENTRY glad_debug_impl_glVertexStream3iATI(GLenum arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glVertexStream3iATI", (void*)glVertexStream3iATI, 4, arg0, arg1, arg2, arg3);
     glad_glVertexStream3iATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexStream3iATI", (void*)glVertexStream3iATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXSTREAM3IATIPROC glad_debug_glVertexStream3iATI = glad_debug_impl_glVertexStream3iATI;
PFNGLVERTEXSTREAM3IVATIPROC glad_glVertexStream3ivATI;
void APIENTRY glad_debug_impl_glVertexStream3ivATI(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glVertexStream3ivATI", (void*)glVertexStream3ivATI, 2, arg0, arg1);
     glad_glVertexStream3ivATI(arg0, arg1);
    _post_call_callback("glVertexStream3ivATI", (void*)glVertexStream3ivATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM3IVATIPROC glad_debug_glVertexStream3ivATI = glad_debug_impl_glVertexStream3ivATI;
PFNGLVERTEXSTREAM3FATIPROC glad_glVertexStream3fATI;
void APIENTRY glad_debug_impl_glVertexStream3fATI(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glVertexStream3fATI", (void*)glVertexStream3fATI, 4, arg0, arg1, arg2, arg3);
     glad_glVertexStream3fATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexStream3fATI", (void*)glVertexStream3fATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXSTREAM3FATIPROC glad_debug_glVertexStream3fATI = glad_debug_impl_glVertexStream3fATI;
PFNGLVERTEXSTREAM3FVATIPROC glad_glVertexStream3fvATI;
void APIENTRY glad_debug_impl_glVertexStream3fvATI(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexStream3fvATI", (void*)glVertexStream3fvATI, 2, arg0, arg1);
     glad_glVertexStream3fvATI(arg0, arg1);
    _post_call_callback("glVertexStream3fvATI", (void*)glVertexStream3fvATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM3FVATIPROC glad_debug_glVertexStream3fvATI = glad_debug_impl_glVertexStream3fvATI;
PFNGLVERTEXSTREAM3DATIPROC glad_glVertexStream3dATI;
void APIENTRY glad_debug_impl_glVertexStream3dATI(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glVertexStream3dATI", (void*)glVertexStream3dATI, 4, arg0, arg1, arg2, arg3);
     glad_glVertexStream3dATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexStream3dATI", (void*)glVertexStream3dATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXSTREAM3DATIPROC glad_debug_glVertexStream3dATI = glad_debug_impl_glVertexStream3dATI;
PFNGLVERTEXSTREAM3DVATIPROC glad_glVertexStream3dvATI;
void APIENTRY glad_debug_impl_glVertexStream3dvATI(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexStream3dvATI", (void*)glVertexStream3dvATI, 2, arg0, arg1);
     glad_glVertexStream3dvATI(arg0, arg1);
    _post_call_callback("glVertexStream3dvATI", (void*)glVertexStream3dvATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM3DVATIPROC glad_debug_glVertexStream3dvATI = glad_debug_impl_glVertexStream3dvATI;
PFNGLVERTEXSTREAM4SATIPROC glad_glVertexStream4sATI;
void APIENTRY glad_debug_impl_glVertexStream4sATI(GLenum arg0, GLshort arg1, GLshort arg2, GLshort arg3, GLshort arg4) {
    _pre_call_callback("glVertexStream4sATI", (void*)glVertexStream4sATI, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexStream4sATI(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexStream4sATI", (void*)glVertexStream4sATI, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXSTREAM4SATIPROC glad_debug_glVertexStream4sATI = glad_debug_impl_glVertexStream4sATI;
PFNGLVERTEXSTREAM4SVATIPROC glad_glVertexStream4svATI;
void APIENTRY glad_debug_impl_glVertexStream4svATI(GLenum arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexStream4svATI", (void*)glVertexStream4svATI, 2, arg0, arg1);
     glad_glVertexStream4svATI(arg0, arg1);
    _post_call_callback("glVertexStream4svATI", (void*)glVertexStream4svATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM4SVATIPROC glad_debug_glVertexStream4svATI = glad_debug_impl_glVertexStream4svATI;
PFNGLVERTEXSTREAM4IATIPROC glad_glVertexStream4iATI;
void APIENTRY glad_debug_impl_glVertexStream4iATI(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glVertexStream4iATI", (void*)glVertexStream4iATI, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexStream4iATI(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexStream4iATI", (void*)glVertexStream4iATI, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXSTREAM4IATIPROC glad_debug_glVertexStream4iATI = glad_debug_impl_glVertexStream4iATI;
PFNGLVERTEXSTREAM4IVATIPROC glad_glVertexStream4ivATI;
void APIENTRY glad_debug_impl_glVertexStream4ivATI(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glVertexStream4ivATI", (void*)glVertexStream4ivATI, 2, arg0, arg1);
     glad_glVertexStream4ivATI(arg0, arg1);
    _post_call_callback("glVertexStream4ivATI", (void*)glVertexStream4ivATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM4IVATIPROC glad_debug_glVertexStream4ivATI = glad_debug_impl_glVertexStream4ivATI;
PFNGLVERTEXSTREAM4FATIPROC glad_glVertexStream4fATI;
void APIENTRY glad_debug_impl_glVertexStream4fATI(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glVertexStream4fATI", (void*)glVertexStream4fATI, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexStream4fATI(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexStream4fATI", (void*)glVertexStream4fATI, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXSTREAM4FATIPROC glad_debug_glVertexStream4fATI = glad_debug_impl_glVertexStream4fATI;
PFNGLVERTEXSTREAM4FVATIPROC glad_glVertexStream4fvATI;
void APIENTRY glad_debug_impl_glVertexStream4fvATI(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glVertexStream4fvATI", (void*)glVertexStream4fvATI, 2, arg0, arg1);
     glad_glVertexStream4fvATI(arg0, arg1);
    _post_call_callback("glVertexStream4fvATI", (void*)glVertexStream4fvATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM4FVATIPROC glad_debug_glVertexStream4fvATI = glad_debug_impl_glVertexStream4fvATI;
PFNGLVERTEXSTREAM4DATIPROC glad_glVertexStream4dATI;
void APIENTRY glad_debug_impl_glVertexStream4dATI(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3, GLdouble arg4) {
    _pre_call_callback("glVertexStream4dATI", (void*)glVertexStream4dATI, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexStream4dATI(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexStream4dATI", (void*)glVertexStream4dATI, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXSTREAM4DATIPROC glad_debug_glVertexStream4dATI = glad_debug_impl_glVertexStream4dATI;
PFNGLVERTEXSTREAM4DVATIPROC glad_glVertexStream4dvATI;
void APIENTRY glad_debug_impl_glVertexStream4dvATI(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glVertexStream4dvATI", (void*)glVertexStream4dvATI, 2, arg0, arg1);
     glad_glVertexStream4dvATI(arg0, arg1);
    _post_call_callback("glVertexStream4dvATI", (void*)glVertexStream4dvATI, 2, arg0, arg1);

}
PFNGLVERTEXSTREAM4DVATIPROC glad_debug_glVertexStream4dvATI = glad_debug_impl_glVertexStream4dvATI;
PFNGLNORMALSTREAM3BATIPROC glad_glNormalStream3bATI;
void APIENTRY glad_debug_impl_glNormalStream3bATI(GLenum arg0, GLbyte arg1, GLbyte arg2, GLbyte arg3) {
    _pre_call_callback("glNormalStream3bATI", (void*)glNormalStream3bATI, 4, arg0, arg1, arg2, arg3);
     glad_glNormalStream3bATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glNormalStream3bATI", (void*)glNormalStream3bATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLNORMALSTREAM3BATIPROC glad_debug_glNormalStream3bATI = glad_debug_impl_glNormalStream3bATI;
PFNGLNORMALSTREAM3BVATIPROC glad_glNormalStream3bvATI;
void APIENTRY glad_debug_impl_glNormalStream3bvATI(GLenum arg0, const GLbyte* arg1) {
    _pre_call_callback("glNormalStream3bvATI", (void*)glNormalStream3bvATI, 2, arg0, arg1);
     glad_glNormalStream3bvATI(arg0, arg1);
    _post_call_callback("glNormalStream3bvATI", (void*)glNormalStream3bvATI, 2, arg0, arg1);

}
PFNGLNORMALSTREAM3BVATIPROC glad_debug_glNormalStream3bvATI = glad_debug_impl_glNormalStream3bvATI;
PFNGLNORMALSTREAM3SATIPROC glad_glNormalStream3sATI;
void APIENTRY glad_debug_impl_glNormalStream3sATI(GLenum arg0, GLshort arg1, GLshort arg2, GLshort arg3) {
    _pre_call_callback("glNormalStream3sATI", (void*)glNormalStream3sATI, 4, arg0, arg1, arg2, arg3);
     glad_glNormalStream3sATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glNormalStream3sATI", (void*)glNormalStream3sATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLNORMALSTREAM3SATIPROC glad_debug_glNormalStream3sATI = glad_debug_impl_glNormalStream3sATI;
PFNGLNORMALSTREAM3SVATIPROC glad_glNormalStream3svATI;
void APIENTRY glad_debug_impl_glNormalStream3svATI(GLenum arg0, const GLshort* arg1) {
    _pre_call_callback("glNormalStream3svATI", (void*)glNormalStream3svATI, 2, arg0, arg1);
     glad_glNormalStream3svATI(arg0, arg1);
    _post_call_callback("glNormalStream3svATI", (void*)glNormalStream3svATI, 2, arg0, arg1);

}
PFNGLNORMALSTREAM3SVATIPROC glad_debug_glNormalStream3svATI = glad_debug_impl_glNormalStream3svATI;
PFNGLNORMALSTREAM3IATIPROC glad_glNormalStream3iATI;
void APIENTRY glad_debug_impl_glNormalStream3iATI(GLenum arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glNormalStream3iATI", (void*)glNormalStream3iATI, 4, arg0, arg1, arg2, arg3);
     glad_glNormalStream3iATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glNormalStream3iATI", (void*)glNormalStream3iATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLNORMALSTREAM3IATIPROC glad_debug_glNormalStream3iATI = glad_debug_impl_glNormalStream3iATI;
PFNGLNORMALSTREAM3IVATIPROC glad_glNormalStream3ivATI;
void APIENTRY glad_debug_impl_glNormalStream3ivATI(GLenum arg0, const GLint* arg1) {
    _pre_call_callback("glNormalStream3ivATI", (void*)glNormalStream3ivATI, 2, arg0, arg1);
     glad_glNormalStream3ivATI(arg0, arg1);
    _post_call_callback("glNormalStream3ivATI", (void*)glNormalStream3ivATI, 2, arg0, arg1);

}
PFNGLNORMALSTREAM3IVATIPROC glad_debug_glNormalStream3ivATI = glad_debug_impl_glNormalStream3ivATI;
PFNGLNORMALSTREAM3FATIPROC glad_glNormalStream3fATI;
void APIENTRY glad_debug_impl_glNormalStream3fATI(GLenum arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glNormalStream3fATI", (void*)glNormalStream3fATI, 4, arg0, arg1, arg2, arg3);
     glad_glNormalStream3fATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glNormalStream3fATI", (void*)glNormalStream3fATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLNORMALSTREAM3FATIPROC glad_debug_glNormalStream3fATI = glad_debug_impl_glNormalStream3fATI;
PFNGLNORMALSTREAM3FVATIPROC glad_glNormalStream3fvATI;
void APIENTRY glad_debug_impl_glNormalStream3fvATI(GLenum arg0, const GLfloat* arg1) {
    _pre_call_callback("glNormalStream3fvATI", (void*)glNormalStream3fvATI, 2, arg0, arg1);
     glad_glNormalStream3fvATI(arg0, arg1);
    _post_call_callback("glNormalStream3fvATI", (void*)glNormalStream3fvATI, 2, arg0, arg1);

}
PFNGLNORMALSTREAM3FVATIPROC glad_debug_glNormalStream3fvATI = glad_debug_impl_glNormalStream3fvATI;
PFNGLNORMALSTREAM3DATIPROC glad_glNormalStream3dATI;
void APIENTRY glad_debug_impl_glNormalStream3dATI(GLenum arg0, GLdouble arg1, GLdouble arg2, GLdouble arg3) {
    _pre_call_callback("glNormalStream3dATI", (void*)glNormalStream3dATI, 4, arg0, arg1, arg2, arg3);
     glad_glNormalStream3dATI(arg0, arg1, arg2, arg3);
    _post_call_callback("glNormalStream3dATI", (void*)glNormalStream3dATI, 4, arg0, arg1, arg2, arg3);

}
PFNGLNORMALSTREAM3DATIPROC glad_debug_glNormalStream3dATI = glad_debug_impl_glNormalStream3dATI;
PFNGLNORMALSTREAM3DVATIPROC glad_glNormalStream3dvATI;
void APIENTRY glad_debug_impl_glNormalStream3dvATI(GLenum arg0, const GLdouble* arg1) {
    _pre_call_callback("glNormalStream3dvATI", (void*)glNormalStream3dvATI, 2, arg0, arg1);
     glad_glNormalStream3dvATI(arg0, arg1);
    _post_call_callback("glNormalStream3dvATI", (void*)glNormalStream3dvATI, 2, arg0, arg1);

}
PFNGLNORMALSTREAM3DVATIPROC glad_debug_glNormalStream3dvATI = glad_debug_impl_glNormalStream3dvATI;
PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glad_glClientActiveVertexStreamATI;
void APIENTRY glad_debug_impl_glClientActiveVertexStreamATI(GLenum arg0) {
    _pre_call_callback("glClientActiveVertexStreamATI", (void*)glClientActiveVertexStreamATI, 1, arg0);
     glad_glClientActiveVertexStreamATI(arg0);
    _post_call_callback("glClientActiveVertexStreamATI", (void*)glClientActiveVertexStreamATI, 1, arg0);

}
PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glad_debug_glClientActiveVertexStreamATI = glad_debug_impl_glClientActiveVertexStreamATI;
PFNGLVERTEXBLENDENVIATIPROC glad_glVertexBlendEnviATI;
void APIENTRY glad_debug_impl_glVertexBlendEnviATI(GLenum arg0, GLint arg1) {
    _pre_call_callback("glVertexBlendEnviATI", (void*)glVertexBlendEnviATI, 2, arg0, arg1);
     glad_glVertexBlendEnviATI(arg0, arg1);
    _post_call_callback("glVertexBlendEnviATI", (void*)glVertexBlendEnviATI, 2, arg0, arg1);

}
PFNGLVERTEXBLENDENVIATIPROC glad_debug_glVertexBlendEnviATI = glad_debug_impl_glVertexBlendEnviATI;
PFNGLVERTEXBLENDENVFATIPROC glad_glVertexBlendEnvfATI;
void APIENTRY glad_debug_impl_glVertexBlendEnvfATI(GLenum arg0, GLfloat arg1) {
    _pre_call_callback("glVertexBlendEnvfATI", (void*)glVertexBlendEnvfATI, 2, arg0, arg1);
     glad_glVertexBlendEnvfATI(arg0, arg1);
    _post_call_callback("glVertexBlendEnvfATI", (void*)glVertexBlendEnvfATI, 2, arg0, arg1);

}
PFNGLVERTEXBLENDENVFATIPROC glad_debug_glVertexBlendEnvfATI = glad_debug_impl_glVertexBlendEnvfATI;
PFNGLUNIFORM1I64ARBPROC glad_glUniform1i64ARB;
void APIENTRY glad_debug_impl_glUniform1i64ARB(GLint arg0, GLint64 arg1) {
    _pre_call_callback("glUniform1i64ARB", (void*)glUniform1i64ARB, 2, arg0, arg1);
     glad_glUniform1i64ARB(arg0, arg1);
    _post_call_callback("glUniform1i64ARB", (void*)glUniform1i64ARB, 2, arg0, arg1);

}
PFNGLUNIFORM1I64ARBPROC glad_debug_glUniform1i64ARB = glad_debug_impl_glUniform1i64ARB;
PFNGLUNIFORM2I64ARBPROC glad_glUniform2i64ARB;
void APIENTRY glad_debug_impl_glUniform2i64ARB(GLint arg0, GLint64 arg1, GLint64 arg2) {
    _pre_call_callback("glUniform2i64ARB", (void*)glUniform2i64ARB, 3, arg0, arg1, arg2);
     glad_glUniform2i64ARB(arg0, arg1, arg2);
    _post_call_callback("glUniform2i64ARB", (void*)glUniform2i64ARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2I64ARBPROC glad_debug_glUniform2i64ARB = glad_debug_impl_glUniform2i64ARB;
PFNGLUNIFORM3I64ARBPROC glad_glUniform3i64ARB;
void APIENTRY glad_debug_impl_glUniform3i64ARB(GLint arg0, GLint64 arg1, GLint64 arg2, GLint64 arg3) {
    _pre_call_callback("glUniform3i64ARB", (void*)glUniform3i64ARB, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3i64ARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3i64ARB", (void*)glUniform3i64ARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3I64ARBPROC glad_debug_glUniform3i64ARB = glad_debug_impl_glUniform3i64ARB;
PFNGLUNIFORM4I64ARBPROC glad_glUniform4i64ARB;
void APIENTRY glad_debug_impl_glUniform4i64ARB(GLint arg0, GLint64 arg1, GLint64 arg2, GLint64 arg3, GLint64 arg4) {
    _pre_call_callback("glUniform4i64ARB", (void*)glUniform4i64ARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4i64ARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4i64ARB", (void*)glUniform4i64ARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4I64ARBPROC glad_debug_glUniform4i64ARB = glad_debug_impl_glUniform4i64ARB;
PFNGLUNIFORM1I64VARBPROC glad_glUniform1i64vARB;
void APIENTRY glad_debug_impl_glUniform1i64vARB(GLint arg0, GLsizei arg1, const GLint64* arg2) {
    _pre_call_callback("glUniform1i64vARB", (void*)glUniform1i64vARB, 3, arg0, arg1, arg2);
     glad_glUniform1i64vARB(arg0, arg1, arg2);
    _post_call_callback("glUniform1i64vARB", (void*)glUniform1i64vARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1I64VARBPROC glad_debug_glUniform1i64vARB = glad_debug_impl_glUniform1i64vARB;
PFNGLUNIFORM2I64VARBPROC glad_glUniform2i64vARB;
void APIENTRY glad_debug_impl_glUniform2i64vARB(GLint arg0, GLsizei arg1, const GLint64* arg2) {
    _pre_call_callback("glUniform2i64vARB", (void*)glUniform2i64vARB, 3, arg0, arg1, arg2);
     glad_glUniform2i64vARB(arg0, arg1, arg2);
    _post_call_callback("glUniform2i64vARB", (void*)glUniform2i64vARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2I64VARBPROC glad_debug_glUniform2i64vARB = glad_debug_impl_glUniform2i64vARB;
PFNGLUNIFORM3I64VARBPROC glad_glUniform3i64vARB;
void APIENTRY glad_debug_impl_glUniform3i64vARB(GLint arg0, GLsizei arg1, const GLint64* arg2) {
    _pre_call_callback("glUniform3i64vARB", (void*)glUniform3i64vARB, 3, arg0, arg1, arg2);
     glad_glUniform3i64vARB(arg0, arg1, arg2);
    _post_call_callback("glUniform3i64vARB", (void*)glUniform3i64vARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3I64VARBPROC glad_debug_glUniform3i64vARB = glad_debug_impl_glUniform3i64vARB;
PFNGLUNIFORM4I64VARBPROC glad_glUniform4i64vARB;
void APIENTRY glad_debug_impl_glUniform4i64vARB(GLint arg0, GLsizei arg1, const GLint64* arg2) {
    _pre_call_callback("glUniform4i64vARB", (void*)glUniform4i64vARB, 3, arg0, arg1, arg2);
     glad_glUniform4i64vARB(arg0, arg1, arg2);
    _post_call_callback("glUniform4i64vARB", (void*)glUniform4i64vARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4I64VARBPROC glad_debug_glUniform4i64vARB = glad_debug_impl_glUniform4i64vARB;
PFNGLUNIFORM1UI64ARBPROC glad_glUniform1ui64ARB;
void APIENTRY glad_debug_impl_glUniform1ui64ARB(GLint arg0, GLuint64 arg1) {
    _pre_call_callback("glUniform1ui64ARB", (void*)glUniform1ui64ARB, 2, arg0, arg1);
     glad_glUniform1ui64ARB(arg0, arg1);
    _post_call_callback("glUniform1ui64ARB", (void*)glUniform1ui64ARB, 2, arg0, arg1);

}
PFNGLUNIFORM1UI64ARBPROC glad_debug_glUniform1ui64ARB = glad_debug_impl_glUniform1ui64ARB;
PFNGLUNIFORM2UI64ARBPROC glad_glUniform2ui64ARB;
void APIENTRY glad_debug_impl_glUniform2ui64ARB(GLint arg0, GLuint64 arg1, GLuint64 arg2) {
    _pre_call_callback("glUniform2ui64ARB", (void*)glUniform2ui64ARB, 3, arg0, arg1, arg2);
     glad_glUniform2ui64ARB(arg0, arg1, arg2);
    _post_call_callback("glUniform2ui64ARB", (void*)glUniform2ui64ARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2UI64ARBPROC glad_debug_glUniform2ui64ARB = glad_debug_impl_glUniform2ui64ARB;
PFNGLUNIFORM3UI64ARBPROC glad_glUniform3ui64ARB;
void APIENTRY glad_debug_impl_glUniform3ui64ARB(GLint arg0, GLuint64 arg1, GLuint64 arg2, GLuint64 arg3) {
    _pre_call_callback("glUniform3ui64ARB", (void*)glUniform3ui64ARB, 4, arg0, arg1, arg2, arg3);
     glad_glUniform3ui64ARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glUniform3ui64ARB", (void*)glUniform3ui64ARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLUNIFORM3UI64ARBPROC glad_debug_glUniform3ui64ARB = glad_debug_impl_glUniform3ui64ARB;
PFNGLUNIFORM4UI64ARBPROC glad_glUniform4ui64ARB;
void APIENTRY glad_debug_impl_glUniform4ui64ARB(GLint arg0, GLuint64 arg1, GLuint64 arg2, GLuint64 arg3, GLuint64 arg4) {
    _pre_call_callback("glUniform4ui64ARB", (void*)glUniform4ui64ARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUniform4ui64ARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUniform4ui64ARB", (void*)glUniform4ui64ARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUNIFORM4UI64ARBPROC glad_debug_glUniform4ui64ARB = glad_debug_impl_glUniform4ui64ARB;
PFNGLUNIFORM1UI64VARBPROC glad_glUniform1ui64vARB;
void APIENTRY glad_debug_impl_glUniform1ui64vARB(GLint arg0, GLsizei arg1, const GLuint64* arg2) {
    _pre_call_callback("glUniform1ui64vARB", (void*)glUniform1ui64vARB, 3, arg0, arg1, arg2);
     glad_glUniform1ui64vARB(arg0, arg1, arg2);
    _post_call_callback("glUniform1ui64vARB", (void*)glUniform1ui64vARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM1UI64VARBPROC glad_debug_glUniform1ui64vARB = glad_debug_impl_glUniform1ui64vARB;
PFNGLUNIFORM2UI64VARBPROC glad_glUniform2ui64vARB;
void APIENTRY glad_debug_impl_glUniform2ui64vARB(GLint arg0, GLsizei arg1, const GLuint64* arg2) {
    _pre_call_callback("glUniform2ui64vARB", (void*)glUniform2ui64vARB, 3, arg0, arg1, arg2);
     glad_glUniform2ui64vARB(arg0, arg1, arg2);
    _post_call_callback("glUniform2ui64vARB", (void*)glUniform2ui64vARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM2UI64VARBPROC glad_debug_glUniform2ui64vARB = glad_debug_impl_glUniform2ui64vARB;
PFNGLUNIFORM3UI64VARBPROC glad_glUniform3ui64vARB;
void APIENTRY glad_debug_impl_glUniform3ui64vARB(GLint arg0, GLsizei arg1, const GLuint64* arg2) {
    _pre_call_callback("glUniform3ui64vARB", (void*)glUniform3ui64vARB, 3, arg0, arg1, arg2);
     glad_glUniform3ui64vARB(arg0, arg1, arg2);
    _post_call_callback("glUniform3ui64vARB", (void*)glUniform3ui64vARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM3UI64VARBPROC glad_debug_glUniform3ui64vARB = glad_debug_impl_glUniform3ui64vARB;
PFNGLUNIFORM4UI64VARBPROC glad_glUniform4ui64vARB;
void APIENTRY glad_debug_impl_glUniform4ui64vARB(GLint arg0, GLsizei arg1, const GLuint64* arg2) {
    _pre_call_callback("glUniform4ui64vARB", (void*)glUniform4ui64vARB, 3, arg0, arg1, arg2);
     glad_glUniform4ui64vARB(arg0, arg1, arg2);
    _post_call_callback("glUniform4ui64vARB", (void*)glUniform4ui64vARB, 3, arg0, arg1, arg2);

}
PFNGLUNIFORM4UI64VARBPROC glad_debug_glUniform4ui64vARB = glad_debug_impl_glUniform4ui64vARB;
PFNGLGETUNIFORMI64VARBPROC glad_glGetUniformi64vARB;
void APIENTRY glad_debug_impl_glGetUniformi64vARB(GLuint arg0, GLint arg1, GLint64* arg2) {
    _pre_call_callback("glGetUniformi64vARB", (void*)glGetUniformi64vARB, 3, arg0, arg1, arg2);
     glad_glGetUniformi64vARB(arg0, arg1, arg2);
    _post_call_callback("glGetUniformi64vARB", (void*)glGetUniformi64vARB, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMI64VARBPROC glad_debug_glGetUniformi64vARB = glad_debug_impl_glGetUniformi64vARB;
PFNGLGETUNIFORMUI64VARBPROC glad_glGetUniformui64vARB;
void APIENTRY glad_debug_impl_glGetUniformui64vARB(GLuint arg0, GLint arg1, GLuint64* arg2) {
    _pre_call_callback("glGetUniformui64vARB", (void*)glGetUniformui64vARB, 3, arg0, arg1, arg2);
     glad_glGetUniformui64vARB(arg0, arg1, arg2);
    _post_call_callback("glGetUniformui64vARB", (void*)glGetUniformui64vARB, 3, arg0, arg1, arg2);

}
PFNGLGETUNIFORMUI64VARBPROC glad_debug_glGetUniformui64vARB = glad_debug_impl_glGetUniformui64vARB;
PFNGLGETNUNIFORMI64VARBPROC glad_glGetnUniformi64vARB;
void APIENTRY glad_debug_impl_glGetnUniformi64vARB(GLuint arg0, GLint arg1, GLsizei arg2, GLint64* arg3) {
    _pre_call_callback("glGetnUniformi64vARB", (void*)glGetnUniformi64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformi64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformi64vARB", (void*)glGetnUniformi64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMI64VARBPROC glad_debug_glGetnUniformi64vARB = glad_debug_impl_glGetnUniformi64vARB;
PFNGLGETNUNIFORMUI64VARBPROC glad_glGetnUniformui64vARB;
void APIENTRY glad_debug_impl_glGetnUniformui64vARB(GLuint arg0, GLint arg1, GLsizei arg2, GLuint64* arg3) {
    _pre_call_callback("glGetnUniformui64vARB", (void*)glGetnUniformui64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glGetnUniformui64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetnUniformui64vARB", (void*)glGetnUniformui64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETNUNIFORMUI64VARBPROC glad_debug_glGetnUniformui64vARB = glad_debug_impl_glGetnUniformui64vARB;
PFNGLPROGRAMUNIFORM1I64ARBPROC glad_glProgramUniform1i64ARB;
void APIENTRY glad_debug_impl_glProgramUniform1i64ARB(GLuint arg0, GLint arg1, GLint64 arg2) {
    _pre_call_callback("glProgramUniform1i64ARB", (void*)glProgramUniform1i64ARB, 3, arg0, arg1, arg2);
     glad_glProgramUniform1i64ARB(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1i64ARB", (void*)glProgramUniform1i64ARB, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1I64ARBPROC glad_debug_glProgramUniform1i64ARB = glad_debug_impl_glProgramUniform1i64ARB;
PFNGLPROGRAMUNIFORM2I64ARBPROC glad_glProgramUniform2i64ARB;
void APIENTRY glad_debug_impl_glProgramUniform2i64ARB(GLuint arg0, GLint arg1, GLint64 arg2, GLint64 arg3) {
    _pre_call_callback("glProgramUniform2i64ARB", (void*)glProgramUniform2i64ARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2i64ARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2i64ARB", (void*)glProgramUniform2i64ARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2I64ARBPROC glad_debug_glProgramUniform2i64ARB = glad_debug_impl_glProgramUniform2i64ARB;
PFNGLPROGRAMUNIFORM3I64ARBPROC glad_glProgramUniform3i64ARB;
void APIENTRY glad_debug_impl_glProgramUniform3i64ARB(GLuint arg0, GLint arg1, GLint64 arg2, GLint64 arg3, GLint64 arg4) {
    _pre_call_callback("glProgramUniform3i64ARB", (void*)glProgramUniform3i64ARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3i64ARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3i64ARB", (void*)glProgramUniform3i64ARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3I64ARBPROC glad_debug_glProgramUniform3i64ARB = glad_debug_impl_glProgramUniform3i64ARB;
PFNGLPROGRAMUNIFORM4I64ARBPROC glad_glProgramUniform4i64ARB;
void APIENTRY glad_debug_impl_glProgramUniform4i64ARB(GLuint arg0, GLint arg1, GLint64 arg2, GLint64 arg3, GLint64 arg4, GLint64 arg5) {
    _pre_call_callback("glProgramUniform4i64ARB", (void*)glProgramUniform4i64ARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4i64ARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4i64ARB", (void*)glProgramUniform4i64ARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4I64ARBPROC glad_debug_glProgramUniform4i64ARB = glad_debug_impl_glProgramUniform4i64ARB;
PFNGLPROGRAMUNIFORM1I64VARBPROC glad_glProgramUniform1i64vARB;
void APIENTRY glad_debug_impl_glProgramUniform1i64vARB(GLuint arg0, GLint arg1, GLsizei arg2, const GLint64* arg3) {
    _pre_call_callback("glProgramUniform1i64vARB", (void*)glProgramUniform1i64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1i64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1i64vARB", (void*)glProgramUniform1i64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1I64VARBPROC glad_debug_glProgramUniform1i64vARB = glad_debug_impl_glProgramUniform1i64vARB;
PFNGLPROGRAMUNIFORM2I64VARBPROC glad_glProgramUniform2i64vARB;
void APIENTRY glad_debug_impl_glProgramUniform2i64vARB(GLuint arg0, GLint arg1, GLsizei arg2, const GLint64* arg3) {
    _pre_call_callback("glProgramUniform2i64vARB", (void*)glProgramUniform2i64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2i64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2i64vARB", (void*)glProgramUniform2i64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2I64VARBPROC glad_debug_glProgramUniform2i64vARB = glad_debug_impl_glProgramUniform2i64vARB;
PFNGLPROGRAMUNIFORM3I64VARBPROC glad_glProgramUniform3i64vARB;
void APIENTRY glad_debug_impl_glProgramUniform3i64vARB(GLuint arg0, GLint arg1, GLsizei arg2, const GLint64* arg3) {
    _pre_call_callback("glProgramUniform3i64vARB", (void*)glProgramUniform3i64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3i64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3i64vARB", (void*)glProgramUniform3i64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3I64VARBPROC glad_debug_glProgramUniform3i64vARB = glad_debug_impl_glProgramUniform3i64vARB;
PFNGLPROGRAMUNIFORM4I64VARBPROC glad_glProgramUniform4i64vARB;
void APIENTRY glad_debug_impl_glProgramUniform4i64vARB(GLuint arg0, GLint arg1, GLsizei arg2, const GLint64* arg3) {
    _pre_call_callback("glProgramUniform4i64vARB", (void*)glProgramUniform4i64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4i64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4i64vARB", (void*)glProgramUniform4i64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4I64VARBPROC glad_debug_glProgramUniform4i64vARB = glad_debug_impl_glProgramUniform4i64vARB;
PFNGLPROGRAMUNIFORM1UI64ARBPROC glad_glProgramUniform1ui64ARB;
void APIENTRY glad_debug_impl_glProgramUniform1ui64ARB(GLuint arg0, GLint arg1, GLuint64 arg2) {
    _pre_call_callback("glProgramUniform1ui64ARB", (void*)glProgramUniform1ui64ARB, 3, arg0, arg1, arg2);
     glad_glProgramUniform1ui64ARB(arg0, arg1, arg2);
    _post_call_callback("glProgramUniform1ui64ARB", (void*)glProgramUniform1ui64ARB, 3, arg0, arg1, arg2);

}
PFNGLPROGRAMUNIFORM1UI64ARBPROC glad_debug_glProgramUniform1ui64ARB = glad_debug_impl_glProgramUniform1ui64ARB;
PFNGLPROGRAMUNIFORM2UI64ARBPROC glad_glProgramUniform2ui64ARB;
void APIENTRY glad_debug_impl_glProgramUniform2ui64ARB(GLuint arg0, GLint arg1, GLuint64 arg2, GLuint64 arg3) {
    _pre_call_callback("glProgramUniform2ui64ARB", (void*)glProgramUniform2ui64ARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2ui64ARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2ui64ARB", (void*)glProgramUniform2ui64ARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2UI64ARBPROC glad_debug_glProgramUniform2ui64ARB = glad_debug_impl_glProgramUniform2ui64ARB;
PFNGLPROGRAMUNIFORM3UI64ARBPROC glad_glProgramUniform3ui64ARB;
void APIENTRY glad_debug_impl_glProgramUniform3ui64ARB(GLuint arg0, GLint arg1, GLuint64 arg2, GLuint64 arg3, GLuint64 arg4) {
    _pre_call_callback("glProgramUniform3ui64ARB", (void*)glProgramUniform3ui64ARB, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glProgramUniform3ui64ARB(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glProgramUniform3ui64ARB", (void*)glProgramUniform3ui64ARB, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLPROGRAMUNIFORM3UI64ARBPROC glad_debug_glProgramUniform3ui64ARB = glad_debug_impl_glProgramUniform3ui64ARB;
PFNGLPROGRAMUNIFORM4UI64ARBPROC glad_glProgramUniform4ui64ARB;
void APIENTRY glad_debug_impl_glProgramUniform4ui64ARB(GLuint arg0, GLint arg1, GLuint64 arg2, GLuint64 arg3, GLuint64 arg4, GLuint64 arg5) {
    _pre_call_callback("glProgramUniform4ui64ARB", (void*)glProgramUniform4ui64ARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glProgramUniform4ui64ARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glProgramUniform4ui64ARB", (void*)glProgramUniform4ui64ARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLPROGRAMUNIFORM4UI64ARBPROC glad_debug_glProgramUniform4ui64ARB = glad_debug_impl_glProgramUniform4ui64ARB;
PFNGLPROGRAMUNIFORM1UI64VARBPROC glad_glProgramUniform1ui64vARB;
void APIENTRY glad_debug_impl_glProgramUniform1ui64vARB(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64* arg3) {
    _pre_call_callback("glProgramUniform1ui64vARB", (void*)glProgramUniform1ui64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform1ui64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform1ui64vARB", (void*)glProgramUniform1ui64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM1UI64VARBPROC glad_debug_glProgramUniform1ui64vARB = glad_debug_impl_glProgramUniform1ui64vARB;
PFNGLPROGRAMUNIFORM2UI64VARBPROC glad_glProgramUniform2ui64vARB;
void APIENTRY glad_debug_impl_glProgramUniform2ui64vARB(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64* arg3) {
    _pre_call_callback("glProgramUniform2ui64vARB", (void*)glProgramUniform2ui64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform2ui64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform2ui64vARB", (void*)glProgramUniform2ui64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM2UI64VARBPROC glad_debug_glProgramUniform2ui64vARB = glad_debug_impl_glProgramUniform2ui64vARB;
PFNGLPROGRAMUNIFORM3UI64VARBPROC glad_glProgramUniform3ui64vARB;
void APIENTRY glad_debug_impl_glProgramUniform3ui64vARB(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64* arg3) {
    _pre_call_callback("glProgramUniform3ui64vARB", (void*)glProgramUniform3ui64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform3ui64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform3ui64vARB", (void*)glProgramUniform3ui64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM3UI64VARBPROC glad_debug_glProgramUniform3ui64vARB = glad_debug_impl_glProgramUniform3ui64vARB;
PFNGLPROGRAMUNIFORM4UI64VARBPROC glad_glProgramUniform4ui64vARB;
void APIENTRY glad_debug_impl_glProgramUniform4ui64vARB(GLuint arg0, GLint arg1, GLsizei arg2, const GLuint64* arg3) {
    _pre_call_callback("glProgramUniform4ui64vARB", (void*)glProgramUniform4ui64vARB, 4, arg0, arg1, arg2, arg3);
     glad_glProgramUniform4ui64vARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glProgramUniform4ui64vARB", (void*)glProgramUniform4ui64vARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLPROGRAMUNIFORM4UI64VARBPROC glad_debug_glProgramUniform4ui64vARB = glad_debug_impl_glProgramUniform4ui64vARB;
PFNGLVDPAUINITNVPROC glad_glVDPAUInitNV;
void APIENTRY glad_debug_impl_glVDPAUInitNV(const void* arg0, const void* arg1) {
    _pre_call_callback("glVDPAUInitNV", (void*)glVDPAUInitNV, 2, arg0, arg1);
     glad_glVDPAUInitNV(arg0, arg1);
    _post_call_callback("glVDPAUInitNV", (void*)glVDPAUInitNV, 2, arg0, arg1);

}
PFNGLVDPAUINITNVPROC glad_debug_glVDPAUInitNV = glad_debug_impl_glVDPAUInitNV;
PFNGLVDPAUFININVPROC glad_glVDPAUFiniNV;
void APIENTRY glad_debug_impl_glVDPAUFiniNV() {
    _pre_call_callback("glVDPAUFiniNV", (void*)glVDPAUFiniNV, 0);
     glad_glVDPAUFiniNV();
    _post_call_callback("glVDPAUFiniNV", (void*)glVDPAUFiniNV, 0);

}
PFNGLVDPAUFININVPROC glad_debug_glVDPAUFiniNV = glad_debug_impl_glVDPAUFiniNV;
PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glad_glVDPAURegisterVideoSurfaceNV;
GLvdpauSurfaceNV APIENTRY glad_debug_impl_glVDPAURegisterVideoSurfaceNV(const void* arg0, GLenum arg1, GLsizei arg2, const GLuint* arg3) {
    GLvdpauSurfaceNV ret;
    _pre_call_callback("glVDPAURegisterVideoSurfaceNV", (void*)glVDPAURegisterVideoSurfaceNV, 4, arg0, arg1, arg2, arg3);
    ret =  glad_glVDPAURegisterVideoSurfaceNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVDPAURegisterVideoSurfaceNV", (void*)glVDPAURegisterVideoSurfaceNV, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glad_debug_glVDPAURegisterVideoSurfaceNV = glad_debug_impl_glVDPAURegisterVideoSurfaceNV;
PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glad_glVDPAURegisterOutputSurfaceNV;
GLvdpauSurfaceNV APIENTRY glad_debug_impl_glVDPAURegisterOutputSurfaceNV(const void* arg0, GLenum arg1, GLsizei arg2, const GLuint* arg3) {
    GLvdpauSurfaceNV ret;
    _pre_call_callback("glVDPAURegisterOutputSurfaceNV", (void*)glVDPAURegisterOutputSurfaceNV, 4, arg0, arg1, arg2, arg3);
    ret =  glad_glVDPAURegisterOutputSurfaceNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glVDPAURegisterOutputSurfaceNV", (void*)glVDPAURegisterOutputSurfaceNV, 4, arg0, arg1, arg2, arg3);
    return ret;
}
PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glad_debug_glVDPAURegisterOutputSurfaceNV = glad_debug_impl_glVDPAURegisterOutputSurfaceNV;
PFNGLVDPAUISSURFACENVPROC glad_glVDPAUIsSurfaceNV;
GLboolean APIENTRY glad_debug_impl_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV arg0) {
    GLboolean ret;
    _pre_call_callback("glVDPAUIsSurfaceNV", (void*)glVDPAUIsSurfaceNV, 1, arg0);
    ret =  glad_glVDPAUIsSurfaceNV(arg0);
    _post_call_callback("glVDPAUIsSurfaceNV", (void*)glVDPAUIsSurfaceNV, 1, arg0);
    return ret;
}
PFNGLVDPAUISSURFACENVPROC glad_debug_glVDPAUIsSurfaceNV = glad_debug_impl_glVDPAUIsSurfaceNV;
PFNGLVDPAUUNREGISTERSURFACENVPROC glad_glVDPAUUnregisterSurfaceNV;
void APIENTRY glad_debug_impl_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV arg0) {
    _pre_call_callback("glVDPAUUnregisterSurfaceNV", (void*)glVDPAUUnregisterSurfaceNV, 1, arg0);
     glad_glVDPAUUnregisterSurfaceNV(arg0);
    _post_call_callback("glVDPAUUnregisterSurfaceNV", (void*)glVDPAUUnregisterSurfaceNV, 1, arg0);

}
PFNGLVDPAUUNREGISTERSURFACENVPROC glad_debug_glVDPAUUnregisterSurfaceNV = glad_debug_impl_glVDPAUUnregisterSurfaceNV;
PFNGLVDPAUGETSURFACEIVNVPROC glad_glVDPAUGetSurfaceivNV;
void APIENTRY glad_debug_impl_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV arg0, GLenum arg1, GLsizei arg2, GLsizei* arg3, GLint* arg4) {
    _pre_call_callback("glVDPAUGetSurfaceivNV", (void*)glVDPAUGetSurfaceivNV, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVDPAUGetSurfaceivNV(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVDPAUGetSurfaceivNV", (void*)glVDPAUGetSurfaceivNV, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVDPAUGETSURFACEIVNVPROC glad_debug_glVDPAUGetSurfaceivNV = glad_debug_impl_glVDPAUGetSurfaceivNV;
PFNGLVDPAUSURFACEACCESSNVPROC glad_glVDPAUSurfaceAccessNV;
void APIENTRY glad_debug_impl_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV arg0, GLenum arg1) {
    _pre_call_callback("glVDPAUSurfaceAccessNV", (void*)glVDPAUSurfaceAccessNV, 2, arg0, arg1);
     glad_glVDPAUSurfaceAccessNV(arg0, arg1);
    _post_call_callback("glVDPAUSurfaceAccessNV", (void*)glVDPAUSurfaceAccessNV, 2, arg0, arg1);

}
PFNGLVDPAUSURFACEACCESSNVPROC glad_debug_glVDPAUSurfaceAccessNV = glad_debug_impl_glVDPAUSurfaceAccessNV;
PFNGLVDPAUMAPSURFACESNVPROC glad_glVDPAUMapSurfacesNV;
void APIENTRY glad_debug_impl_glVDPAUMapSurfacesNV(GLsizei arg0, const GLvdpauSurfaceNV* arg1) {
    _pre_call_callback("glVDPAUMapSurfacesNV", (void*)glVDPAUMapSurfacesNV, 2, arg0, arg1);
     glad_glVDPAUMapSurfacesNV(arg0, arg1);
    _post_call_callback("glVDPAUMapSurfacesNV", (void*)glVDPAUMapSurfacesNV, 2, arg0, arg1);

}
PFNGLVDPAUMAPSURFACESNVPROC glad_debug_glVDPAUMapSurfacesNV = glad_debug_impl_glVDPAUMapSurfacesNV;
PFNGLVDPAUUNMAPSURFACESNVPROC glad_glVDPAUUnmapSurfacesNV;
void APIENTRY glad_debug_impl_glVDPAUUnmapSurfacesNV(GLsizei arg0, const GLvdpauSurfaceNV* arg1) {
    _pre_call_callback("glVDPAUUnmapSurfacesNV", (void*)glVDPAUUnmapSurfacesNV, 2, arg0, arg1);
     glad_glVDPAUUnmapSurfacesNV(arg0, arg1);
    _post_call_callback("glVDPAUUnmapSurfacesNV", (void*)glVDPAUUnmapSurfacesNV, 2, arg0, arg1);

}
PFNGLVDPAUUNMAPSURFACESNVPROC glad_debug_glVDPAUUnmapSurfacesNV = glad_debug_impl_glVDPAUUnmapSurfacesNV;
PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v;
void APIENTRY glad_debug_impl_glGetInternalformati64v(GLenum arg0, GLenum arg1, GLenum arg2, GLsizei arg3, GLint64* arg4) {
    _pre_call_callback("glGetInternalformati64v", (void*)glGetInternalformati64v, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glGetInternalformati64v(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glGetInternalformati64v", (void*)glGetInternalformati64v, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLGETINTERNALFORMATI64VPROC glad_debug_glGetInternalformati64v = glad_debug_impl_glGetInternalformati64v;
PFNGLCOLOR4UBVERTEX2FSUNPROC glad_glColor4ubVertex2fSUN;
void APIENTRY glad_debug_impl_glColor4ubVertex2fSUN(GLubyte arg0, GLubyte arg1, GLubyte arg2, GLubyte arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glColor4ubVertex2fSUN", (void*)glColor4ubVertex2fSUN, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glColor4ubVertex2fSUN(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glColor4ubVertex2fSUN", (void*)glColor4ubVertex2fSUN, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOLOR4UBVERTEX2FSUNPROC glad_debug_glColor4ubVertex2fSUN = glad_debug_impl_glColor4ubVertex2fSUN;
PFNGLCOLOR4UBVERTEX2FVSUNPROC glad_glColor4ubVertex2fvSUN;
void APIENTRY glad_debug_impl_glColor4ubVertex2fvSUN(const GLubyte* arg0, const GLfloat* arg1) {
    _pre_call_callback("glColor4ubVertex2fvSUN", (void*)glColor4ubVertex2fvSUN, 2, arg0, arg1);
     glad_glColor4ubVertex2fvSUN(arg0, arg1);
    _post_call_callback("glColor4ubVertex2fvSUN", (void*)glColor4ubVertex2fvSUN, 2, arg0, arg1);

}
PFNGLCOLOR4UBVERTEX2FVSUNPROC glad_debug_glColor4ubVertex2fvSUN = glad_debug_impl_glColor4ubVertex2fvSUN;
PFNGLCOLOR4UBVERTEX3FSUNPROC glad_glColor4ubVertex3fSUN;
void APIENTRY glad_debug_impl_glColor4ubVertex3fSUN(GLubyte arg0, GLubyte arg1, GLubyte arg2, GLubyte arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6) {
    _pre_call_callback("glColor4ubVertex3fSUN", (void*)glColor4ubVertex3fSUN, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glColor4ubVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glColor4ubVertex3fSUN", (void*)glColor4ubVertex3fSUN, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLCOLOR4UBVERTEX3FSUNPROC glad_debug_glColor4ubVertex3fSUN = glad_debug_impl_glColor4ubVertex3fSUN;
PFNGLCOLOR4UBVERTEX3FVSUNPROC glad_glColor4ubVertex3fvSUN;
void APIENTRY glad_debug_impl_glColor4ubVertex3fvSUN(const GLubyte* arg0, const GLfloat* arg1) {
    _pre_call_callback("glColor4ubVertex3fvSUN", (void*)glColor4ubVertex3fvSUN, 2, arg0, arg1);
     glad_glColor4ubVertex3fvSUN(arg0, arg1);
    _post_call_callback("glColor4ubVertex3fvSUN", (void*)glColor4ubVertex3fvSUN, 2, arg0, arg1);

}
PFNGLCOLOR4UBVERTEX3FVSUNPROC glad_debug_glColor4ubVertex3fvSUN = glad_debug_impl_glColor4ubVertex3fvSUN;
PFNGLCOLOR3FVERTEX3FSUNPROC glad_glColor3fVertex3fSUN;
void APIENTRY glad_debug_impl_glColor3fVertex3fSUN(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glColor3fVertex3fSUN", (void*)glColor3fVertex3fSUN, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glColor3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glColor3fVertex3fSUN", (void*)glColor3fVertex3fSUN, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLCOLOR3FVERTEX3FSUNPROC glad_debug_glColor3fVertex3fSUN = glad_debug_impl_glColor3fVertex3fSUN;
PFNGLCOLOR3FVERTEX3FVSUNPROC glad_glColor3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glColor3fVertex3fvSUN(const GLfloat* arg0, const GLfloat* arg1) {
    _pre_call_callback("glColor3fVertex3fvSUN", (void*)glColor3fVertex3fvSUN, 2, arg0, arg1);
     glad_glColor3fVertex3fvSUN(arg0, arg1);
    _post_call_callback("glColor3fVertex3fvSUN", (void*)glColor3fVertex3fvSUN, 2, arg0, arg1);

}
PFNGLCOLOR3FVERTEX3FVSUNPROC glad_debug_glColor3fVertex3fvSUN = glad_debug_impl_glColor3fVertex3fvSUN;
PFNGLNORMAL3FVERTEX3FSUNPROC glad_glNormal3fVertex3fSUN;
void APIENTRY glad_debug_impl_glNormal3fVertex3fSUN(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glNormal3fVertex3fSUN", (void*)glNormal3fVertex3fSUN, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glNormal3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glNormal3fVertex3fSUN", (void*)glNormal3fVertex3fSUN, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLNORMAL3FVERTEX3FSUNPROC glad_debug_glNormal3fVertex3fSUN = glad_debug_impl_glNormal3fVertex3fSUN;
PFNGLNORMAL3FVERTEX3FVSUNPROC glad_glNormal3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glNormal3fVertex3fvSUN(const GLfloat* arg0, const GLfloat* arg1) {
    _pre_call_callback("glNormal3fVertex3fvSUN", (void*)glNormal3fVertex3fvSUN, 2, arg0, arg1);
     glad_glNormal3fVertex3fvSUN(arg0, arg1);
    _post_call_callback("glNormal3fVertex3fvSUN", (void*)glNormal3fVertex3fvSUN, 2, arg0, arg1);

}
PFNGLNORMAL3FVERTEX3FVSUNPROC glad_debug_glNormal3fVertex3fvSUN = glad_debug_impl_glNormal3fVertex3fvSUN;
PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_glColor4fNormal3fVertex3fSUN;
void APIENTRY glad_debug_impl_glColor4fNormal3fVertex3fSUN(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7, GLfloat arg8, GLfloat arg9) {
    _pre_call_callback("glColor4fNormal3fVertex3fSUN", (void*)glColor4fNormal3fVertex3fSUN, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glColor4fNormal3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glColor4fNormal3fVertex3fSUN", (void*)glColor4fNormal3fVertex3fSUN, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_debug_glColor4fNormal3fVertex3fSUN = glad_debug_impl_glColor4fNormal3fVertex3fSUN;
PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_glColor4fNormal3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glColor4fNormal3fVertex3fvSUN(const GLfloat* arg0, const GLfloat* arg1, const GLfloat* arg2) {
    _pre_call_callback("glColor4fNormal3fVertex3fvSUN", (void*)glColor4fNormal3fVertex3fvSUN, 3, arg0, arg1, arg2);
     glad_glColor4fNormal3fVertex3fvSUN(arg0, arg1, arg2);
    _post_call_callback("glColor4fNormal3fVertex3fvSUN", (void*)glColor4fNormal3fVertex3fvSUN, 3, arg0, arg1, arg2);

}
PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_debug_glColor4fNormal3fVertex3fvSUN = glad_debug_impl_glColor4fNormal3fVertex3fvSUN;
PFNGLTEXCOORD2FVERTEX3FSUNPROC glad_glTexCoord2fVertex3fSUN;
void APIENTRY glad_debug_impl_glTexCoord2fVertex3fSUN(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4) {
    _pre_call_callback("glTexCoord2fVertex3fSUN", (void*)glTexCoord2fVertex3fSUN, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glTexCoord2fVertex3fSUN(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glTexCoord2fVertex3fSUN", (void*)glTexCoord2fVertex3fSUN, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLTEXCOORD2FVERTEX3FSUNPROC glad_debug_glTexCoord2fVertex3fSUN = glad_debug_impl_glTexCoord2fVertex3fSUN;
PFNGLTEXCOORD2FVERTEX3FVSUNPROC glad_glTexCoord2fVertex3fvSUN;
void APIENTRY glad_debug_impl_glTexCoord2fVertex3fvSUN(const GLfloat* arg0, const GLfloat* arg1) {
    _pre_call_callback("glTexCoord2fVertex3fvSUN", (void*)glTexCoord2fVertex3fvSUN, 2, arg0, arg1);
     glad_glTexCoord2fVertex3fvSUN(arg0, arg1);
    _post_call_callback("glTexCoord2fVertex3fvSUN", (void*)glTexCoord2fVertex3fvSUN, 2, arg0, arg1);

}
PFNGLTEXCOORD2FVERTEX3FVSUNPROC glad_debug_glTexCoord2fVertex3fvSUN = glad_debug_impl_glTexCoord2fVertex3fvSUN;
PFNGLTEXCOORD4FVERTEX4FSUNPROC glad_glTexCoord4fVertex4fSUN;
void APIENTRY glad_debug_impl_glTexCoord4fVertex4fSUN(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7) {
    _pre_call_callback("glTexCoord4fVertex4fSUN", (void*)glTexCoord4fVertex4fSUN, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTexCoord4fVertex4fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTexCoord4fVertex4fSUN", (void*)glTexCoord4fVertex4fSUN, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXCOORD4FVERTEX4FSUNPROC glad_debug_glTexCoord4fVertex4fSUN = glad_debug_impl_glTexCoord4fVertex4fSUN;
PFNGLTEXCOORD4FVERTEX4FVSUNPROC glad_glTexCoord4fVertex4fvSUN;
void APIENTRY glad_debug_impl_glTexCoord4fVertex4fvSUN(const GLfloat* arg0, const GLfloat* arg1) {
    _pre_call_callback("glTexCoord4fVertex4fvSUN", (void*)glTexCoord4fVertex4fvSUN, 2, arg0, arg1);
     glad_glTexCoord4fVertex4fvSUN(arg0, arg1);
    _post_call_callback("glTexCoord4fVertex4fvSUN", (void*)glTexCoord4fVertex4fvSUN, 2, arg0, arg1);

}
PFNGLTEXCOORD4FVERTEX4FVSUNPROC glad_debug_glTexCoord4fVertex4fvSUN = glad_debug_impl_glTexCoord4fVertex4fvSUN;
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glad_glTexCoord2fColor4ubVertex3fSUN;
void APIENTRY glad_debug_impl_glTexCoord2fColor4ubVertex3fSUN(GLfloat arg0, GLfloat arg1, GLubyte arg2, GLubyte arg3, GLubyte arg4, GLubyte arg5, GLfloat arg6, GLfloat arg7, GLfloat arg8) {
    _pre_call_callback("glTexCoord2fColor4ubVertex3fSUN", (void*)glTexCoord2fColor4ubVertex3fSUN, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glTexCoord2fColor4ubVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glTexCoord2fColor4ubVertex3fSUN", (void*)glTexCoord2fColor4ubVertex3fSUN, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glad_debug_glTexCoord2fColor4ubVertex3fSUN = glad_debug_impl_glTexCoord2fColor4ubVertex3fSUN;
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glad_glTexCoord2fColor4ubVertex3fvSUN;
void APIENTRY glad_debug_impl_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat* arg0, const GLubyte* arg1, const GLfloat* arg2) {
    _pre_call_callback("glTexCoord2fColor4ubVertex3fvSUN", (void*)glTexCoord2fColor4ubVertex3fvSUN, 3, arg0, arg1, arg2);
     glad_glTexCoord2fColor4ubVertex3fvSUN(arg0, arg1, arg2);
    _post_call_callback("glTexCoord2fColor4ubVertex3fvSUN", (void*)glTexCoord2fColor4ubVertex3fvSUN, 3, arg0, arg1, arg2);

}
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glad_debug_glTexCoord2fColor4ubVertex3fvSUN = glad_debug_impl_glTexCoord2fColor4ubVertex3fvSUN;
PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glad_glTexCoord2fColor3fVertex3fSUN;
void APIENTRY glad_debug_impl_glTexCoord2fColor3fVertex3fSUN(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7) {
    _pre_call_callback("glTexCoord2fColor3fVertex3fSUN", (void*)glTexCoord2fColor3fVertex3fSUN, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTexCoord2fColor3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTexCoord2fColor3fVertex3fSUN", (void*)glTexCoord2fColor3fVertex3fSUN, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glad_debug_glTexCoord2fColor3fVertex3fSUN = glad_debug_impl_glTexCoord2fColor3fVertex3fSUN;
PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glad_glTexCoord2fColor3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glTexCoord2fColor3fVertex3fvSUN(const GLfloat* arg0, const GLfloat* arg1, const GLfloat* arg2) {
    _pre_call_callback("glTexCoord2fColor3fVertex3fvSUN", (void*)glTexCoord2fColor3fVertex3fvSUN, 3, arg0, arg1, arg2);
     glad_glTexCoord2fColor3fVertex3fvSUN(arg0, arg1, arg2);
    _post_call_callback("glTexCoord2fColor3fVertex3fvSUN", (void*)glTexCoord2fColor3fVertex3fvSUN, 3, arg0, arg1, arg2);

}
PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glad_debug_glTexCoord2fColor3fVertex3fvSUN = glad_debug_impl_glTexCoord2fColor3fVertex3fvSUN;
PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glad_glTexCoord2fNormal3fVertex3fSUN;
void APIENTRY glad_debug_impl_glTexCoord2fNormal3fVertex3fSUN(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7) {
    _pre_call_callback("glTexCoord2fNormal3fVertex3fSUN", (void*)glTexCoord2fNormal3fVertex3fSUN, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glTexCoord2fNormal3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glTexCoord2fNormal3fVertex3fSUN", (void*)glTexCoord2fNormal3fVertex3fSUN, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glad_debug_glTexCoord2fNormal3fVertex3fSUN = glad_debug_impl_glTexCoord2fNormal3fVertex3fSUN;
PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glad_glTexCoord2fNormal3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat* arg0, const GLfloat* arg1, const GLfloat* arg2) {
    _pre_call_callback("glTexCoord2fNormal3fVertex3fvSUN", (void*)glTexCoord2fNormal3fVertex3fvSUN, 3, arg0, arg1, arg2);
     glad_glTexCoord2fNormal3fVertex3fvSUN(arg0, arg1, arg2);
    _post_call_callback("glTexCoord2fNormal3fVertex3fvSUN", (void*)glTexCoord2fNormal3fVertex3fvSUN, 3, arg0, arg1, arg2);

}
PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glad_debug_glTexCoord2fNormal3fVertex3fvSUN = glad_debug_impl_glTexCoord2fNormal3fVertex3fvSUN;
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_glTexCoord2fColor4fNormal3fVertex3fSUN;
void APIENTRY glad_debug_impl_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7, GLfloat arg8, GLfloat arg9, GLfloat arg10, GLfloat arg11) {
    _pre_call_callback("glTexCoord2fColor4fNormal3fVertex3fSUN", (void*)glTexCoord2fColor4fNormal3fVertex3fSUN, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
     glad_glTexCoord2fColor4fNormal3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
    _post_call_callback("glTexCoord2fColor4fNormal3fVertex3fSUN", (void*)glTexCoord2fColor4fNormal3fVertex3fSUN, 12, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

}
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_debug_glTexCoord2fColor4fNormal3fVertex3fSUN = glad_debug_impl_glTexCoord2fColor4fNormal3fVertex3fSUN;
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_glTexCoord2fColor4fNormal3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* arg0, const GLfloat* arg1, const GLfloat* arg2, const GLfloat* arg3) {
    _pre_call_callback("glTexCoord2fColor4fNormal3fVertex3fvSUN", (void*)glTexCoord2fColor4fNormal3fVertex3fvSUN, 4, arg0, arg1, arg2, arg3);
     glad_glTexCoord2fColor4fNormal3fVertex3fvSUN(arg0, arg1, arg2, arg3);
    _post_call_callback("glTexCoord2fColor4fNormal3fVertex3fvSUN", (void*)glTexCoord2fColor4fNormal3fVertex3fvSUN, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_debug_glTexCoord2fColor4fNormal3fVertex3fvSUN = glad_debug_impl_glTexCoord2fColor4fNormal3fVertex3fvSUN;
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glad_glTexCoord4fColor4fNormal3fVertex4fSUN;
void APIENTRY glad_debug_impl_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7, GLfloat arg8, GLfloat arg9, GLfloat arg10, GLfloat arg11, GLfloat arg12, GLfloat arg13, GLfloat arg14) {
    _pre_call_callback("glTexCoord4fColor4fNormal3fVertex4fSUN", (void*)glTexCoord4fColor4fNormal3fVertex4fSUN, 15, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
     glad_glTexCoord4fColor4fNormal3fVertex4fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
    _post_call_callback("glTexCoord4fColor4fNormal3fVertex4fSUN", (void*)glTexCoord4fColor4fNormal3fVertex4fSUN, 15, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);

}
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glad_debug_glTexCoord4fColor4fNormal3fVertex4fSUN = glad_debug_impl_glTexCoord4fColor4fNormal3fVertex4fSUN;
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glad_glTexCoord4fColor4fNormal3fVertex4fvSUN;
void APIENTRY glad_debug_impl_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* arg0, const GLfloat* arg1, const GLfloat* arg2, const GLfloat* arg3) {
    _pre_call_callback("glTexCoord4fColor4fNormal3fVertex4fvSUN", (void*)glTexCoord4fColor4fNormal3fVertex4fvSUN, 4, arg0, arg1, arg2, arg3);
     glad_glTexCoord4fColor4fNormal3fVertex4fvSUN(arg0, arg1, arg2, arg3);
    _post_call_callback("glTexCoord4fColor4fNormal3fVertex4fvSUN", (void*)glTexCoord4fColor4fNormal3fVertex4fvSUN, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glad_debug_glTexCoord4fColor4fNormal3fVertex4fvSUN = glad_debug_impl_glTexCoord4fColor4fNormal3fVertex4fvSUN;
PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glad_glReplacementCodeuiVertex3fSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiVertex3fSUN(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3) {
    _pre_call_callback("glReplacementCodeuiVertex3fSUN", (void*)glReplacementCodeuiVertex3fSUN, 4, arg0, arg1, arg2, arg3);
     glad_glReplacementCodeuiVertex3fSUN(arg0, arg1, arg2, arg3);
    _post_call_callback("glReplacementCodeuiVertex3fSUN", (void*)glReplacementCodeuiVertex3fSUN, 4, arg0, arg1, arg2, arg3);

}
PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glad_debug_glReplacementCodeuiVertex3fSUN = glad_debug_impl_glReplacementCodeuiVertex3fSUN;
PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glad_glReplacementCodeuiVertex3fvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiVertex3fvSUN(const GLuint* arg0, const GLfloat* arg1) {
    _pre_call_callback("glReplacementCodeuiVertex3fvSUN", (void*)glReplacementCodeuiVertex3fvSUN, 2, arg0, arg1);
     glad_glReplacementCodeuiVertex3fvSUN(arg0, arg1);
    _post_call_callback("glReplacementCodeuiVertex3fvSUN", (void*)glReplacementCodeuiVertex3fvSUN, 2, arg0, arg1);

}
PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiVertex3fvSUN = glad_debug_impl_glReplacementCodeuiVertex3fvSUN;
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glad_glReplacementCodeuiColor4ubVertex3fSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiColor4ubVertex3fSUN(GLuint arg0, GLubyte arg1, GLubyte arg2, GLubyte arg3, GLubyte arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7) {
    _pre_call_callback("glReplacementCodeuiColor4ubVertex3fSUN", (void*)glReplacementCodeuiColor4ubVertex3fSUN, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
     glad_glReplacementCodeuiColor4ubVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    _post_call_callback("glReplacementCodeuiColor4ubVertex3fSUN", (void*)glReplacementCodeuiColor4ubVertex3fSUN, 8, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

}
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glad_debug_glReplacementCodeuiColor4ubVertex3fSUN = glad_debug_impl_glReplacementCodeuiColor4ubVertex3fSUN;
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glad_glReplacementCodeuiColor4ubVertex3fvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* arg0, const GLubyte* arg1, const GLfloat* arg2) {
    _pre_call_callback("glReplacementCodeuiColor4ubVertex3fvSUN", (void*)glReplacementCodeuiColor4ubVertex3fvSUN, 3, arg0, arg1, arg2);
     glad_glReplacementCodeuiColor4ubVertex3fvSUN(arg0, arg1, arg2);
    _post_call_callback("glReplacementCodeuiColor4ubVertex3fvSUN", (void*)glReplacementCodeuiColor4ubVertex3fvSUN, 3, arg0, arg1, arg2);

}
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiColor4ubVertex3fvSUN = glad_debug_impl_glReplacementCodeuiColor4ubVertex3fvSUN;
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glad_glReplacementCodeuiColor3fVertex3fSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiColor3fVertex3fSUN(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6) {
    _pre_call_callback("glReplacementCodeuiColor3fVertex3fSUN", (void*)glReplacementCodeuiColor3fVertex3fSUN, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glReplacementCodeuiColor3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glReplacementCodeuiColor3fVertex3fSUN", (void*)glReplacementCodeuiColor3fVertex3fSUN, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiColor3fVertex3fSUN = glad_debug_impl_glReplacementCodeuiColor3fVertex3fSUN;
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glad_glReplacementCodeuiColor3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* arg0, const GLfloat* arg1, const GLfloat* arg2) {
    _pre_call_callback("glReplacementCodeuiColor3fVertex3fvSUN", (void*)glReplacementCodeuiColor3fVertex3fvSUN, 3, arg0, arg1, arg2);
     glad_glReplacementCodeuiColor3fVertex3fvSUN(arg0, arg1, arg2);
    _post_call_callback("glReplacementCodeuiColor3fVertex3fvSUN", (void*)glReplacementCodeuiColor3fVertex3fvSUN, 3, arg0, arg1, arg2);

}
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiColor3fVertex3fvSUN = glad_debug_impl_glReplacementCodeuiColor3fVertex3fvSUN;
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glad_glReplacementCodeuiNormal3fVertex3fSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiNormal3fVertex3fSUN(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6) {
    _pre_call_callback("glReplacementCodeuiNormal3fVertex3fSUN", (void*)glReplacementCodeuiNormal3fVertex3fSUN, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glReplacementCodeuiNormal3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glReplacementCodeuiNormal3fVertex3fSUN", (void*)glReplacementCodeuiNormal3fVertex3fSUN, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiNormal3fVertex3fSUN = glad_debug_impl_glReplacementCodeuiNormal3fVertex3fSUN;
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glad_glReplacementCodeuiNormal3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* arg0, const GLfloat* arg1, const GLfloat* arg2) {
    _pre_call_callback("glReplacementCodeuiNormal3fVertex3fvSUN", (void*)glReplacementCodeuiNormal3fVertex3fvSUN, 3, arg0, arg1, arg2);
     glad_glReplacementCodeuiNormal3fVertex3fvSUN(arg0, arg1, arg2);
    _post_call_callback("glReplacementCodeuiNormal3fVertex3fvSUN", (void*)glReplacementCodeuiNormal3fVertex3fvSUN, 3, arg0, arg1, arg2);

}
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiNormal3fVertex3fvSUN = glad_debug_impl_glReplacementCodeuiNormal3fVertex3fvSUN;
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7, GLfloat arg8, GLfloat arg9, GLfloat arg10) {
    _pre_call_callback("glReplacementCodeuiColor4fNormal3fVertex3fSUN", (void*)glReplacementCodeuiColor4fNormal3fVertex3fSUN, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glReplacementCodeuiColor4fNormal3fVertex3fSUN", (void*)glReplacementCodeuiColor4fNormal3fVertex3fSUN, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiColor4fNormal3fVertex3fSUN = glad_debug_impl_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* arg0, const GLfloat* arg1, const GLfloat* arg2, const GLfloat* arg3) {
    _pre_call_callback("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", (void*)glReplacementCodeuiColor4fNormal3fVertex3fvSUN, 4, arg0, arg1, arg2, arg3);
     glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(arg0, arg1, arg2, arg3);
    _post_call_callback("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", (void*)glReplacementCodeuiColor4fNormal3fVertex3fvSUN, 4, arg0, arg1, arg2, arg3);

}
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = glad_debug_impl_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glad_glReplacementCodeuiTexCoord2fVertex3fSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5) {
    _pre_call_callback("glReplacementCodeuiTexCoord2fVertex3fSUN", (void*)glReplacementCodeuiTexCoord2fVertex3fSUN, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glReplacementCodeuiTexCoord2fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glReplacementCodeuiTexCoord2fVertex3fSUN", (void*)glReplacementCodeuiTexCoord2fVertex3fSUN, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiTexCoord2fVertex3fSUN = glad_debug_impl_glReplacementCodeuiTexCoord2fVertex3fSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glad_glReplacementCodeuiTexCoord2fVertex3fvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* arg0, const GLfloat* arg1, const GLfloat* arg2) {
    _pre_call_callback("glReplacementCodeuiTexCoord2fVertex3fvSUN", (void*)glReplacementCodeuiTexCoord2fVertex3fvSUN, 3, arg0, arg1, arg2);
     glad_glReplacementCodeuiTexCoord2fVertex3fvSUN(arg0, arg1, arg2);
    _post_call_callback("glReplacementCodeuiTexCoord2fVertex3fvSUN", (void*)glReplacementCodeuiTexCoord2fVertex3fvSUN, 3, arg0, arg1, arg2);

}
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiTexCoord2fVertex3fvSUN = glad_debug_impl_glReplacementCodeuiTexCoord2fVertex3fvSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7, GLfloat arg8) {
    _pre_call_callback("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", (void*)glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", (void*)glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = glad_debug_impl_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* arg0, const GLfloat* arg1, const GLfloat* arg2, const GLfloat* arg3) {
    _pre_call_callback("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", (void*)glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, 4, arg0, arg1, arg2, arg3);
     glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(arg0, arg1, arg2, arg3);
    _post_call_callback("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", (void*)glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, 4, arg0, arg1, arg2, arg3);

}
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = glad_debug_impl_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint arg0, GLfloat arg1, GLfloat arg2, GLfloat arg3, GLfloat arg4, GLfloat arg5, GLfloat arg6, GLfloat arg7, GLfloat arg8, GLfloat arg9, GLfloat arg10, GLfloat arg11, GLfloat arg12) {
    _pre_call_callback("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", (void*)glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, 13, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
     glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    _post_call_callback("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", (void*)glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, 13, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

}
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glad_debug_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = glad_debug_impl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
void APIENTRY glad_debug_impl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* arg0, const GLfloat* arg1, const GLfloat* arg2, const GLfloat* arg3, const GLfloat* arg4) {
    _pre_call_callback("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", (void*)glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", (void*)glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glad_debug_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = glad_debug_impl_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
PFNGLIGLOOINTERFACESGIXPROC glad_glIglooInterfaceSGIX;
void APIENTRY glad_debug_impl_glIglooInterfaceSGIX(GLenum arg0, const void* arg1) {
    _pre_call_callback("glIglooInterfaceSGIX", (void*)glIglooInterfaceSGIX, 2, arg0, arg1);
     glad_glIglooInterfaceSGIX(arg0, arg1);
    _post_call_callback("glIglooInterfaceSGIX", (void*)glIglooInterfaceSGIX, 2, arg0, arg1);

}
PFNGLIGLOOINTERFACESGIXPROC glad_debug_glIglooInterfaceSGIX = glad_debug_impl_glIglooInterfaceSGIX;
PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
void APIENTRY glad_debug_impl_glDrawArraysIndirect(GLenum arg0, const void* arg1) {
    _pre_call_callback("glDrawArraysIndirect", (void*)glDrawArraysIndirect, 2, arg0, arg1);
     glad_glDrawArraysIndirect(arg0, arg1);
    _post_call_callback("glDrawArraysIndirect", (void*)glDrawArraysIndirect, 2, arg0, arg1);

}
PFNGLDRAWARRAYSINDIRECTPROC glad_debug_glDrawArraysIndirect = glad_debug_impl_glDrawArraysIndirect;
PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
void APIENTRY glad_debug_impl_glDrawElementsIndirect(GLenum arg0, GLenum arg1, const void* arg2) {
    _pre_call_callback("glDrawElementsIndirect", (void*)glDrawElementsIndirect, 3, arg0, arg1, arg2);
     glad_glDrawElementsIndirect(arg0, arg1, arg2);
    _post_call_callback("glDrawElementsIndirect", (void*)glDrawElementsIndirect, 3, arg0, arg1, arg2);

}
PFNGLDRAWELEMENTSINDIRECTPROC glad_debug_glDrawElementsIndirect = glad_debug_impl_glDrawElementsIndirect;
PFNGLVERTEXATTRIBI1IEXTPROC glad_glVertexAttribI1iEXT;
void APIENTRY glad_debug_impl_glVertexAttribI1iEXT(GLuint arg0, GLint arg1) {
    _pre_call_callback("glVertexAttribI1iEXT", (void*)glVertexAttribI1iEXT, 2, arg0, arg1);
     glad_glVertexAttribI1iEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI1iEXT", (void*)glVertexAttribI1iEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI1IEXTPROC glad_debug_glVertexAttribI1iEXT = glad_debug_impl_glVertexAttribI1iEXT;
PFNGLVERTEXATTRIBI2IEXTPROC glad_glVertexAttribI2iEXT;
void APIENTRY glad_debug_impl_glVertexAttribI2iEXT(GLuint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glVertexAttribI2iEXT", (void*)glVertexAttribI2iEXT, 3, arg0, arg1, arg2);
     glad_glVertexAttribI2iEXT(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribI2iEXT", (void*)glVertexAttribI2iEXT, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBI2IEXTPROC glad_debug_glVertexAttribI2iEXT = glad_debug_impl_glVertexAttribI2iEXT;
PFNGLVERTEXATTRIBI3IEXTPROC glad_glVertexAttribI3iEXT;
void APIENTRY glad_debug_impl_glVertexAttribI3iEXT(GLuint arg0, GLint arg1, GLint arg2, GLint arg3) {
    _pre_call_callback("glVertexAttribI3iEXT", (void*)glVertexAttribI3iEXT, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribI3iEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribI3iEXT", (void*)glVertexAttribI3iEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBI3IEXTPROC glad_debug_glVertexAttribI3iEXT = glad_debug_impl_glVertexAttribI3iEXT;
PFNGLVERTEXATTRIBI4IEXTPROC glad_glVertexAttribI4iEXT;
void APIENTRY glad_debug_impl_glVertexAttribI4iEXT(GLuint arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4) {
    _pre_call_callback("glVertexAttribI4iEXT", (void*)glVertexAttribI4iEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribI4iEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribI4iEXT", (void*)glVertexAttribI4iEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBI4IEXTPROC glad_debug_glVertexAttribI4iEXT = glad_debug_impl_glVertexAttribI4iEXT;
PFNGLVERTEXATTRIBI1UIEXTPROC glad_glVertexAttribI1uiEXT;
void APIENTRY glad_debug_impl_glVertexAttribI1uiEXT(GLuint arg0, GLuint arg1) {
    _pre_call_callback("glVertexAttribI1uiEXT", (void*)glVertexAttribI1uiEXT, 2, arg0, arg1);
     glad_glVertexAttribI1uiEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI1uiEXT", (void*)glVertexAttribI1uiEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI1UIEXTPROC glad_debug_glVertexAttribI1uiEXT = glad_debug_impl_glVertexAttribI1uiEXT;
PFNGLVERTEXATTRIBI2UIEXTPROC glad_glVertexAttribI2uiEXT;
void APIENTRY glad_debug_impl_glVertexAttribI2uiEXT(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glVertexAttribI2uiEXT", (void*)glVertexAttribI2uiEXT, 3, arg0, arg1, arg2);
     glad_glVertexAttribI2uiEXT(arg0, arg1, arg2);
    _post_call_callback("glVertexAttribI2uiEXT", (void*)glVertexAttribI2uiEXT, 3, arg0, arg1, arg2);

}
PFNGLVERTEXATTRIBI2UIEXTPROC glad_debug_glVertexAttribI2uiEXT = glad_debug_impl_glVertexAttribI2uiEXT;
PFNGLVERTEXATTRIBI3UIEXTPROC glad_glVertexAttribI3uiEXT;
void APIENTRY glad_debug_impl_glVertexAttribI3uiEXT(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3) {
    _pre_call_callback("glVertexAttribI3uiEXT", (void*)glVertexAttribI3uiEXT, 4, arg0, arg1, arg2, arg3);
     glad_glVertexAttribI3uiEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glVertexAttribI3uiEXT", (void*)glVertexAttribI3uiEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLVERTEXATTRIBI3UIEXTPROC glad_debug_glVertexAttribI3uiEXT = glad_debug_impl_glVertexAttribI3uiEXT;
PFNGLVERTEXATTRIBI4UIEXTPROC glad_glVertexAttribI4uiEXT;
void APIENTRY glad_debug_impl_glVertexAttribI4uiEXT(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4) {
    _pre_call_callback("glVertexAttribI4uiEXT", (void*)glVertexAttribI4uiEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribI4uiEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribI4uiEXT", (void*)glVertexAttribI4uiEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBI4UIEXTPROC glad_debug_glVertexAttribI4uiEXT = glad_debug_impl_glVertexAttribI4uiEXT;
PFNGLVERTEXATTRIBI1IVEXTPROC glad_glVertexAttribI1ivEXT;
void APIENTRY glad_debug_impl_glVertexAttribI1ivEXT(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttribI1ivEXT", (void*)glVertexAttribI1ivEXT, 2, arg0, arg1);
     glad_glVertexAttribI1ivEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI1ivEXT", (void*)glVertexAttribI1ivEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI1IVEXTPROC glad_debug_glVertexAttribI1ivEXT = glad_debug_impl_glVertexAttribI1ivEXT;
PFNGLVERTEXATTRIBI2IVEXTPROC glad_glVertexAttribI2ivEXT;
void APIENTRY glad_debug_impl_glVertexAttribI2ivEXT(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttribI2ivEXT", (void*)glVertexAttribI2ivEXT, 2, arg0, arg1);
     glad_glVertexAttribI2ivEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI2ivEXT", (void*)glVertexAttribI2ivEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI2IVEXTPROC glad_debug_glVertexAttribI2ivEXT = glad_debug_impl_glVertexAttribI2ivEXT;
PFNGLVERTEXATTRIBI3IVEXTPROC glad_glVertexAttribI3ivEXT;
void APIENTRY glad_debug_impl_glVertexAttribI3ivEXT(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttribI3ivEXT", (void*)glVertexAttribI3ivEXT, 2, arg0, arg1);
     glad_glVertexAttribI3ivEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI3ivEXT", (void*)glVertexAttribI3ivEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI3IVEXTPROC glad_debug_glVertexAttribI3ivEXT = glad_debug_impl_glVertexAttribI3ivEXT;
PFNGLVERTEXATTRIBI4IVEXTPROC glad_glVertexAttribI4ivEXT;
void APIENTRY glad_debug_impl_glVertexAttribI4ivEXT(GLuint arg0, const GLint* arg1) {
    _pre_call_callback("glVertexAttribI4ivEXT", (void*)glVertexAttribI4ivEXT, 2, arg0, arg1);
     glad_glVertexAttribI4ivEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI4ivEXT", (void*)glVertexAttribI4ivEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4IVEXTPROC glad_debug_glVertexAttribI4ivEXT = glad_debug_impl_glVertexAttribI4ivEXT;
PFNGLVERTEXATTRIBI1UIVEXTPROC glad_glVertexAttribI1uivEXT;
void APIENTRY glad_debug_impl_glVertexAttribI1uivEXT(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttribI1uivEXT", (void*)glVertexAttribI1uivEXT, 2, arg0, arg1);
     glad_glVertexAttribI1uivEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI1uivEXT", (void*)glVertexAttribI1uivEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI1UIVEXTPROC glad_debug_glVertexAttribI1uivEXT = glad_debug_impl_glVertexAttribI1uivEXT;
PFNGLVERTEXATTRIBI2UIVEXTPROC glad_glVertexAttribI2uivEXT;
void APIENTRY glad_debug_impl_glVertexAttribI2uivEXT(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttribI2uivEXT", (void*)glVertexAttribI2uivEXT, 2, arg0, arg1);
     glad_glVertexAttribI2uivEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI2uivEXT", (void*)glVertexAttribI2uivEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI2UIVEXTPROC glad_debug_glVertexAttribI2uivEXT = glad_debug_impl_glVertexAttribI2uivEXT;
PFNGLVERTEXATTRIBI3UIVEXTPROC glad_glVertexAttribI3uivEXT;
void APIENTRY glad_debug_impl_glVertexAttribI3uivEXT(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttribI3uivEXT", (void*)glVertexAttribI3uivEXT, 2, arg0, arg1);
     glad_glVertexAttribI3uivEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI3uivEXT", (void*)glVertexAttribI3uivEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI3UIVEXTPROC glad_debug_glVertexAttribI3uivEXT = glad_debug_impl_glVertexAttribI3uivEXT;
PFNGLVERTEXATTRIBI4UIVEXTPROC glad_glVertexAttribI4uivEXT;
void APIENTRY glad_debug_impl_glVertexAttribI4uivEXT(GLuint arg0, const GLuint* arg1) {
    _pre_call_callback("glVertexAttribI4uivEXT", (void*)glVertexAttribI4uivEXT, 2, arg0, arg1);
     glad_glVertexAttribI4uivEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI4uivEXT", (void*)glVertexAttribI4uivEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4UIVEXTPROC glad_debug_glVertexAttribI4uivEXT = glad_debug_impl_glVertexAttribI4uivEXT;
PFNGLVERTEXATTRIBI4BVEXTPROC glad_glVertexAttribI4bvEXT;
void APIENTRY glad_debug_impl_glVertexAttribI4bvEXT(GLuint arg0, const GLbyte* arg1) {
    _pre_call_callback("glVertexAttribI4bvEXT", (void*)glVertexAttribI4bvEXT, 2, arg0, arg1);
     glad_glVertexAttribI4bvEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI4bvEXT", (void*)glVertexAttribI4bvEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4BVEXTPROC glad_debug_glVertexAttribI4bvEXT = glad_debug_impl_glVertexAttribI4bvEXT;
PFNGLVERTEXATTRIBI4SVEXTPROC glad_glVertexAttribI4svEXT;
void APIENTRY glad_debug_impl_glVertexAttribI4svEXT(GLuint arg0, const GLshort* arg1) {
    _pre_call_callback("glVertexAttribI4svEXT", (void*)glVertexAttribI4svEXT, 2, arg0, arg1);
     glad_glVertexAttribI4svEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI4svEXT", (void*)glVertexAttribI4svEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4SVEXTPROC glad_debug_glVertexAttribI4svEXT = glad_debug_impl_glVertexAttribI4svEXT;
PFNGLVERTEXATTRIBI4UBVEXTPROC glad_glVertexAttribI4ubvEXT;
void APIENTRY glad_debug_impl_glVertexAttribI4ubvEXT(GLuint arg0, const GLubyte* arg1) {
    _pre_call_callback("glVertexAttribI4ubvEXT", (void*)glVertexAttribI4ubvEXT, 2, arg0, arg1);
     glad_glVertexAttribI4ubvEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI4ubvEXT", (void*)glVertexAttribI4ubvEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4UBVEXTPROC glad_debug_glVertexAttribI4ubvEXT = glad_debug_impl_glVertexAttribI4ubvEXT;
PFNGLVERTEXATTRIBI4USVEXTPROC glad_glVertexAttribI4usvEXT;
void APIENTRY glad_debug_impl_glVertexAttribI4usvEXT(GLuint arg0, const GLushort* arg1) {
    _pre_call_callback("glVertexAttribI4usvEXT", (void*)glVertexAttribI4usvEXT, 2, arg0, arg1);
     glad_glVertexAttribI4usvEXT(arg0, arg1);
    _post_call_callback("glVertexAttribI4usvEXT", (void*)glVertexAttribI4usvEXT, 2, arg0, arg1);

}
PFNGLVERTEXATTRIBI4USVEXTPROC glad_debug_glVertexAttribI4usvEXT = glad_debug_impl_glVertexAttribI4usvEXT;
PFNGLVERTEXATTRIBIPOINTEREXTPROC glad_glVertexAttribIPointerEXT;
void APIENTRY glad_debug_impl_glVertexAttribIPointerEXT(GLuint arg0, GLint arg1, GLenum arg2, GLsizei arg3, const void* arg4) {
    _pre_call_callback("glVertexAttribIPointerEXT", (void*)glVertexAttribIPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVertexAttribIPointerEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVertexAttribIPointerEXT", (void*)glVertexAttribIPointerEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVERTEXATTRIBIPOINTEREXTPROC glad_debug_glVertexAttribIPointerEXT = glad_debug_impl_glVertexAttribIPointerEXT;
PFNGLGETVERTEXATTRIBIIVEXTPROC glad_glGetVertexAttribIivEXT;
void APIENTRY glad_debug_impl_glGetVertexAttribIivEXT(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVertexAttribIivEXT", (void*)glGetVertexAttribIivEXT, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribIivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribIivEXT", (void*)glGetVertexAttribIivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBIIVEXTPROC glad_debug_glGetVertexAttribIivEXT = glad_debug_impl_glGetVertexAttribIivEXT;
PFNGLGETVERTEXATTRIBIUIVEXTPROC glad_glGetVertexAttribIuivEXT;
void APIENTRY glad_debug_impl_glGetVertexAttribIuivEXT(GLuint arg0, GLenum arg1, GLuint* arg2) {
    _pre_call_callback("glGetVertexAttribIuivEXT", (void*)glGetVertexAttribIuivEXT, 3, arg0, arg1, arg2);
     glad_glGetVertexAttribIuivEXT(arg0, arg1, arg2);
    _post_call_callback("glGetVertexAttribIuivEXT", (void*)glGetVertexAttribIuivEXT, 3, arg0, arg1, arg2);

}
PFNGLGETVERTEXATTRIBIUIVEXTPROC glad_debug_glGetVertexAttribIuivEXT = glad_debug_impl_glGetVertexAttribIuivEXT;
PFNGLFOGFUNCSGISPROC glad_glFogFuncSGIS;
void APIENTRY glad_debug_impl_glFogFuncSGIS(GLsizei arg0, const GLfloat* arg1) {
    _pre_call_callback("glFogFuncSGIS", (void*)glFogFuncSGIS, 2, arg0, arg1);
     glad_glFogFuncSGIS(arg0, arg1);
    _post_call_callback("glFogFuncSGIS", (void*)glFogFuncSGIS, 2, arg0, arg1);

}
PFNGLFOGFUNCSGISPROC glad_debug_glFogFuncSGIS = glad_debug_impl_glFogFuncSGIS;
PFNGLGETFOGFUNCSGISPROC glad_glGetFogFuncSGIS;
void APIENTRY glad_debug_impl_glGetFogFuncSGIS(GLfloat* arg0) {
    _pre_call_callback("glGetFogFuncSGIS", (void*)glGetFogFuncSGIS, 1, arg0);
     glad_glGetFogFuncSGIS(arg0);
    _post_call_callback("glGetFogFuncSGIS", (void*)glGetFogFuncSGIS, 1, arg0);

}
PFNGLGETFOGFUNCSGISPROC glad_debug_glGetFogFuncSGIS = glad_debug_impl_glGetFogFuncSGIS;
PFNGLIMPORTSYNCEXTPROC glad_glImportSyncEXT;
GLsync APIENTRY glad_debug_impl_glImportSyncEXT(GLenum arg0, GLintptr arg1, GLbitfield arg2) {
    GLsync ret;
    _pre_call_callback("glImportSyncEXT", (void*)glImportSyncEXT, 3, arg0, arg1, arg2);
    ret =  glad_glImportSyncEXT(arg0, arg1, arg2);
    _post_call_callback("glImportSyncEXT", (void*)glImportSyncEXT, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLIMPORTSYNCEXTPROC glad_debug_glImportSyncEXT = glad_debug_impl_glImportSyncEXT;
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glad_glFramebufferSampleLocationsfvNV;
void APIENTRY glad_debug_impl_glFramebufferSampleLocationsfvNV(GLenum arg0, GLuint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glFramebufferSampleLocationsfvNV", (void*)glFramebufferSampleLocationsfvNV, 4, arg0, arg1, arg2, arg3);
     glad_glFramebufferSampleLocationsfvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glFramebufferSampleLocationsfvNV", (void*)glFramebufferSampleLocationsfvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glad_debug_glFramebufferSampleLocationsfvNV = glad_debug_impl_glFramebufferSampleLocationsfvNV;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glad_glNamedFramebufferSampleLocationsfvNV;
void APIENTRY glad_debug_impl_glNamedFramebufferSampleLocationsfvNV(GLuint arg0, GLuint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glNamedFramebufferSampleLocationsfvNV", (void*)glNamedFramebufferSampleLocationsfvNV, 4, arg0, arg1, arg2, arg3);
     glad_glNamedFramebufferSampleLocationsfvNV(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedFramebufferSampleLocationsfvNV", (void*)glNamedFramebufferSampleLocationsfvNV, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC glad_debug_glNamedFramebufferSampleLocationsfvNV = glad_debug_impl_glNamedFramebufferSampleLocationsfvNV;
PFNGLRESOLVEDEPTHVALUESNVPROC glad_glResolveDepthValuesNV;
void APIENTRY glad_debug_impl_glResolveDepthValuesNV() {
    _pre_call_callback("glResolveDepthValuesNV", (void*)glResolveDepthValuesNV, 0);
     glad_glResolveDepthValuesNV();
    _post_call_callback("glResolveDepthValuesNV", (void*)glResolveDepthValuesNV, 0);

}
PFNGLRESOLVEDEPTHVALUESNVPROC glad_debug_glResolveDepthValuesNV = glad_debug_impl_glResolveDepthValuesNV;
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glad_glDispatchComputeGroupSizeARB;
void APIENTRY glad_debug_impl_glDispatchComputeGroupSizeARB(GLuint arg0, GLuint arg1, GLuint arg2, GLuint arg3, GLuint arg4, GLuint arg5) {
    _pre_call_callback("glDispatchComputeGroupSizeARB", (void*)glDispatchComputeGroupSizeARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDispatchComputeGroupSizeARB(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDispatchComputeGroupSizeARB", (void*)glDispatchComputeGroupSizeARB, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC glad_debug_glDispatchComputeGroupSizeARB = glad_debug_impl_glDispatchComputeGroupSizeARB;
PFNGLALPHAFUNCXOESPROC glad_glAlphaFuncxOES;
void APIENTRY glad_debug_impl_glAlphaFuncxOES(GLenum arg0, GLfixed arg1) {
    _pre_call_callback("glAlphaFuncxOES", (void*)glAlphaFuncxOES, 2, arg0, arg1);
     glad_glAlphaFuncxOES(arg0, arg1);
    _post_call_callback("glAlphaFuncxOES", (void*)glAlphaFuncxOES, 2, arg0, arg1);

}
PFNGLALPHAFUNCXOESPROC glad_debug_glAlphaFuncxOES = glad_debug_impl_glAlphaFuncxOES;
PFNGLCLEARCOLORXOESPROC glad_glClearColorxOES;
void APIENTRY glad_debug_impl_glClearColorxOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3) {
    _pre_call_callback("glClearColorxOES", (void*)glClearColorxOES, 4, arg0, arg1, arg2, arg3);
     glad_glClearColorxOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glClearColorxOES", (void*)glClearColorxOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLCLEARCOLORXOESPROC glad_debug_glClearColorxOES = glad_debug_impl_glClearColorxOES;
PFNGLCLEARDEPTHXOESPROC glad_glClearDepthxOES;
void APIENTRY glad_debug_impl_glClearDepthxOES(GLfixed arg0) {
    _pre_call_callback("glClearDepthxOES", (void*)glClearDepthxOES, 1, arg0);
     glad_glClearDepthxOES(arg0);
    _post_call_callback("glClearDepthxOES", (void*)glClearDepthxOES, 1, arg0);

}
PFNGLCLEARDEPTHXOESPROC glad_debug_glClearDepthxOES = glad_debug_impl_glClearDepthxOES;
PFNGLCLIPPLANEXOESPROC glad_glClipPlanexOES;
void APIENTRY glad_debug_impl_glClipPlanexOES(GLenum arg0, const GLfixed* arg1) {
    _pre_call_callback("glClipPlanexOES", (void*)glClipPlanexOES, 2, arg0, arg1);
     glad_glClipPlanexOES(arg0, arg1);
    _post_call_callback("glClipPlanexOES", (void*)glClipPlanexOES, 2, arg0, arg1);

}
PFNGLCLIPPLANEXOESPROC glad_debug_glClipPlanexOES = glad_debug_impl_glClipPlanexOES;
PFNGLCOLOR4XOESPROC glad_glColor4xOES;
void APIENTRY glad_debug_impl_glColor4xOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3) {
    _pre_call_callback("glColor4xOES", (void*)glColor4xOES, 4, arg0, arg1, arg2, arg3);
     glad_glColor4xOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glColor4xOES", (void*)glColor4xOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLCOLOR4XOESPROC glad_debug_glColor4xOES = glad_debug_impl_glColor4xOES;
PFNGLDEPTHRANGEXOESPROC glad_glDepthRangexOES;
void APIENTRY glad_debug_impl_glDepthRangexOES(GLfixed arg0, GLfixed arg1) {
    _pre_call_callback("glDepthRangexOES", (void*)glDepthRangexOES, 2, arg0, arg1);
     glad_glDepthRangexOES(arg0, arg1);
    _post_call_callback("glDepthRangexOES", (void*)glDepthRangexOES, 2, arg0, arg1);

}
PFNGLDEPTHRANGEXOESPROC glad_debug_glDepthRangexOES = glad_debug_impl_glDepthRangexOES;
PFNGLFOGXOESPROC glad_glFogxOES;
void APIENTRY glad_debug_impl_glFogxOES(GLenum arg0, GLfixed arg1) {
    _pre_call_callback("glFogxOES", (void*)glFogxOES, 2, arg0, arg1);
     glad_glFogxOES(arg0, arg1);
    _post_call_callback("glFogxOES", (void*)glFogxOES, 2, arg0, arg1);

}
PFNGLFOGXOESPROC glad_debug_glFogxOES = glad_debug_impl_glFogxOES;
PFNGLFOGXVOESPROC glad_glFogxvOES;
void APIENTRY glad_debug_impl_glFogxvOES(GLenum arg0, const GLfixed* arg1) {
    _pre_call_callback("glFogxvOES", (void*)glFogxvOES, 2, arg0, arg1);
     glad_glFogxvOES(arg0, arg1);
    _post_call_callback("glFogxvOES", (void*)glFogxvOES, 2, arg0, arg1);

}
PFNGLFOGXVOESPROC glad_debug_glFogxvOES = glad_debug_impl_glFogxvOES;
PFNGLFRUSTUMXOESPROC glad_glFrustumxOES;
void APIENTRY glad_debug_impl_glFrustumxOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3, GLfixed arg4, GLfixed arg5) {
    _pre_call_callback("glFrustumxOES", (void*)glFrustumxOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glFrustumxOES(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glFrustumxOES", (void*)glFrustumxOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLFRUSTUMXOESPROC glad_debug_glFrustumxOES = glad_debug_impl_glFrustumxOES;
PFNGLGETCLIPPLANEXOESPROC glad_glGetClipPlanexOES;
void APIENTRY glad_debug_impl_glGetClipPlanexOES(GLenum arg0, GLfixed* arg1) {
    _pre_call_callback("glGetClipPlanexOES", (void*)glGetClipPlanexOES, 2, arg0, arg1);
     glad_glGetClipPlanexOES(arg0, arg1);
    _post_call_callback("glGetClipPlanexOES", (void*)glGetClipPlanexOES, 2, arg0, arg1);

}
PFNGLGETCLIPPLANEXOESPROC glad_debug_glGetClipPlanexOES = glad_debug_impl_glGetClipPlanexOES;
PFNGLGETFIXEDVOESPROC glad_glGetFixedvOES;
void APIENTRY glad_debug_impl_glGetFixedvOES(GLenum arg0, GLfixed* arg1) {
    _pre_call_callback("glGetFixedvOES", (void*)glGetFixedvOES, 2, arg0, arg1);
     glad_glGetFixedvOES(arg0, arg1);
    _post_call_callback("glGetFixedvOES", (void*)glGetFixedvOES, 2, arg0, arg1);

}
PFNGLGETFIXEDVOESPROC glad_debug_glGetFixedvOES = glad_debug_impl_glGetFixedvOES;
PFNGLGETTEXENVXVOESPROC glad_glGetTexEnvxvOES;
void APIENTRY glad_debug_impl_glGetTexEnvxvOES(GLenum arg0, GLenum arg1, GLfixed* arg2) {
    _pre_call_callback("glGetTexEnvxvOES", (void*)glGetTexEnvxvOES, 3, arg0, arg1, arg2);
     glad_glGetTexEnvxvOES(arg0, arg1, arg2);
    _post_call_callback("glGetTexEnvxvOES", (void*)glGetTexEnvxvOES, 3, arg0, arg1, arg2);

}
PFNGLGETTEXENVXVOESPROC glad_debug_glGetTexEnvxvOES = glad_debug_impl_glGetTexEnvxvOES;
PFNGLGETTEXPARAMETERXVOESPROC glad_glGetTexParameterxvOES;
void APIENTRY glad_debug_impl_glGetTexParameterxvOES(GLenum arg0, GLenum arg1, GLfixed* arg2) {
    _pre_call_callback("glGetTexParameterxvOES", (void*)glGetTexParameterxvOES, 3, arg0, arg1, arg2);
     glad_glGetTexParameterxvOES(arg0, arg1, arg2);
    _post_call_callback("glGetTexParameterxvOES", (void*)glGetTexParameterxvOES, 3, arg0, arg1, arg2);

}
PFNGLGETTEXPARAMETERXVOESPROC glad_debug_glGetTexParameterxvOES = glad_debug_impl_glGetTexParameterxvOES;
PFNGLLIGHTMODELXOESPROC glad_glLightModelxOES;
void APIENTRY glad_debug_impl_glLightModelxOES(GLenum arg0, GLfixed arg1) {
    _pre_call_callback("glLightModelxOES", (void*)glLightModelxOES, 2, arg0, arg1);
     glad_glLightModelxOES(arg0, arg1);
    _post_call_callback("glLightModelxOES", (void*)glLightModelxOES, 2, arg0, arg1);

}
PFNGLLIGHTMODELXOESPROC glad_debug_glLightModelxOES = glad_debug_impl_glLightModelxOES;
PFNGLLIGHTMODELXVOESPROC glad_glLightModelxvOES;
void APIENTRY glad_debug_impl_glLightModelxvOES(GLenum arg0, const GLfixed* arg1) {
    _pre_call_callback("glLightModelxvOES", (void*)glLightModelxvOES, 2, arg0, arg1);
     glad_glLightModelxvOES(arg0, arg1);
    _post_call_callback("glLightModelxvOES", (void*)glLightModelxvOES, 2, arg0, arg1);

}
PFNGLLIGHTMODELXVOESPROC glad_debug_glLightModelxvOES = glad_debug_impl_glLightModelxvOES;
PFNGLLIGHTXOESPROC glad_glLightxOES;
void APIENTRY glad_debug_impl_glLightxOES(GLenum arg0, GLenum arg1, GLfixed arg2) {
    _pre_call_callback("glLightxOES", (void*)glLightxOES, 3, arg0, arg1, arg2);
     glad_glLightxOES(arg0, arg1, arg2);
    _post_call_callback("glLightxOES", (void*)glLightxOES, 3, arg0, arg1, arg2);

}
PFNGLLIGHTXOESPROC glad_debug_glLightxOES = glad_debug_impl_glLightxOES;
PFNGLLIGHTXVOESPROC glad_glLightxvOES;
void APIENTRY glad_debug_impl_glLightxvOES(GLenum arg0, GLenum arg1, const GLfixed* arg2) {
    _pre_call_callback("glLightxvOES", (void*)glLightxvOES, 3, arg0, arg1, arg2);
     glad_glLightxvOES(arg0, arg1, arg2);
    _post_call_callback("glLightxvOES", (void*)glLightxvOES, 3, arg0, arg1, arg2);

}
PFNGLLIGHTXVOESPROC glad_debug_glLightxvOES = glad_debug_impl_glLightxvOES;
PFNGLLINEWIDTHXOESPROC glad_glLineWidthxOES;
void APIENTRY glad_debug_impl_glLineWidthxOES(GLfixed arg0) {
    _pre_call_callback("glLineWidthxOES", (void*)glLineWidthxOES, 1, arg0);
     glad_glLineWidthxOES(arg0);
    _post_call_callback("glLineWidthxOES", (void*)glLineWidthxOES, 1, arg0);

}
PFNGLLINEWIDTHXOESPROC glad_debug_glLineWidthxOES = glad_debug_impl_glLineWidthxOES;
PFNGLLOADMATRIXXOESPROC glad_glLoadMatrixxOES;
void APIENTRY glad_debug_impl_glLoadMatrixxOES(const GLfixed* arg0) {
    _pre_call_callback("glLoadMatrixxOES", (void*)glLoadMatrixxOES, 1, arg0);
     glad_glLoadMatrixxOES(arg0);
    _post_call_callback("glLoadMatrixxOES", (void*)glLoadMatrixxOES, 1, arg0);

}
PFNGLLOADMATRIXXOESPROC glad_debug_glLoadMatrixxOES = glad_debug_impl_glLoadMatrixxOES;
PFNGLMATERIALXOESPROC glad_glMaterialxOES;
void APIENTRY glad_debug_impl_glMaterialxOES(GLenum arg0, GLenum arg1, GLfixed arg2) {
    _pre_call_callback("glMaterialxOES", (void*)glMaterialxOES, 3, arg0, arg1, arg2);
     glad_glMaterialxOES(arg0, arg1, arg2);
    _post_call_callback("glMaterialxOES", (void*)glMaterialxOES, 3, arg0, arg1, arg2);

}
PFNGLMATERIALXOESPROC glad_debug_glMaterialxOES = glad_debug_impl_glMaterialxOES;
PFNGLMATERIALXVOESPROC glad_glMaterialxvOES;
void APIENTRY glad_debug_impl_glMaterialxvOES(GLenum arg0, GLenum arg1, const GLfixed* arg2) {
    _pre_call_callback("glMaterialxvOES", (void*)glMaterialxvOES, 3, arg0, arg1, arg2);
     glad_glMaterialxvOES(arg0, arg1, arg2);
    _post_call_callback("glMaterialxvOES", (void*)glMaterialxvOES, 3, arg0, arg1, arg2);

}
PFNGLMATERIALXVOESPROC glad_debug_glMaterialxvOES = glad_debug_impl_glMaterialxvOES;
PFNGLMULTMATRIXXOESPROC glad_glMultMatrixxOES;
void APIENTRY glad_debug_impl_glMultMatrixxOES(const GLfixed* arg0) {
    _pre_call_callback("glMultMatrixxOES", (void*)glMultMatrixxOES, 1, arg0);
     glad_glMultMatrixxOES(arg0);
    _post_call_callback("glMultMatrixxOES", (void*)glMultMatrixxOES, 1, arg0);

}
PFNGLMULTMATRIXXOESPROC glad_debug_glMultMatrixxOES = glad_debug_impl_glMultMatrixxOES;
PFNGLMULTITEXCOORD4XOESPROC glad_glMultiTexCoord4xOES;
void APIENTRY glad_debug_impl_glMultiTexCoord4xOES(GLenum arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3, GLfixed arg4) {
    _pre_call_callback("glMultiTexCoord4xOES", (void*)glMultiTexCoord4xOES, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMultiTexCoord4xOES(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMultiTexCoord4xOES", (void*)glMultiTexCoord4xOES, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMULTITEXCOORD4XOESPROC glad_debug_glMultiTexCoord4xOES = glad_debug_impl_glMultiTexCoord4xOES;
PFNGLNORMAL3XOESPROC glad_glNormal3xOES;
void APIENTRY glad_debug_impl_glNormal3xOES(GLfixed arg0, GLfixed arg1, GLfixed arg2) {
    _pre_call_callback("glNormal3xOES", (void*)glNormal3xOES, 3, arg0, arg1, arg2);
     glad_glNormal3xOES(arg0, arg1, arg2);
    _post_call_callback("glNormal3xOES", (void*)glNormal3xOES, 3, arg0, arg1, arg2);

}
PFNGLNORMAL3XOESPROC glad_debug_glNormal3xOES = glad_debug_impl_glNormal3xOES;
PFNGLORTHOXOESPROC glad_glOrthoxOES;
void APIENTRY glad_debug_impl_glOrthoxOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3, GLfixed arg4, GLfixed arg5) {
    _pre_call_callback("glOrthoxOES", (void*)glOrthoxOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glOrthoxOES(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glOrthoxOES", (void*)glOrthoxOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLORTHOXOESPROC glad_debug_glOrthoxOES = glad_debug_impl_glOrthoxOES;
PFNGLPOINTPARAMETERXVOESPROC glad_glPointParameterxvOES;
void APIENTRY glad_debug_impl_glPointParameterxvOES(GLenum arg0, const GLfixed* arg1) {
    _pre_call_callback("glPointParameterxvOES", (void*)glPointParameterxvOES, 2, arg0, arg1);
     glad_glPointParameterxvOES(arg0, arg1);
    _post_call_callback("glPointParameterxvOES", (void*)glPointParameterxvOES, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERXVOESPROC glad_debug_glPointParameterxvOES = glad_debug_impl_glPointParameterxvOES;
PFNGLPOINTSIZEXOESPROC glad_glPointSizexOES;
void APIENTRY glad_debug_impl_glPointSizexOES(GLfixed arg0) {
    _pre_call_callback("glPointSizexOES", (void*)glPointSizexOES, 1, arg0);
     glad_glPointSizexOES(arg0);
    _post_call_callback("glPointSizexOES", (void*)glPointSizexOES, 1, arg0);

}
PFNGLPOINTSIZEXOESPROC glad_debug_glPointSizexOES = glad_debug_impl_glPointSizexOES;
PFNGLPOLYGONOFFSETXOESPROC glad_glPolygonOffsetxOES;
void APIENTRY glad_debug_impl_glPolygonOffsetxOES(GLfixed arg0, GLfixed arg1) {
    _pre_call_callback("glPolygonOffsetxOES", (void*)glPolygonOffsetxOES, 2, arg0, arg1);
     glad_glPolygonOffsetxOES(arg0, arg1);
    _post_call_callback("glPolygonOffsetxOES", (void*)glPolygonOffsetxOES, 2, arg0, arg1);

}
PFNGLPOLYGONOFFSETXOESPROC glad_debug_glPolygonOffsetxOES = glad_debug_impl_glPolygonOffsetxOES;
PFNGLROTATEXOESPROC glad_glRotatexOES;
void APIENTRY glad_debug_impl_glRotatexOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3) {
    _pre_call_callback("glRotatexOES", (void*)glRotatexOES, 4, arg0, arg1, arg2, arg3);
     glad_glRotatexOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glRotatexOES", (void*)glRotatexOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLROTATEXOESPROC glad_debug_glRotatexOES = glad_debug_impl_glRotatexOES;
PFNGLSCALEXOESPROC glad_glScalexOES;
void APIENTRY glad_debug_impl_glScalexOES(GLfixed arg0, GLfixed arg1, GLfixed arg2) {
    _pre_call_callback("glScalexOES", (void*)glScalexOES, 3, arg0, arg1, arg2);
     glad_glScalexOES(arg0, arg1, arg2);
    _post_call_callback("glScalexOES", (void*)glScalexOES, 3, arg0, arg1, arg2);

}
PFNGLSCALEXOESPROC glad_debug_glScalexOES = glad_debug_impl_glScalexOES;
PFNGLTEXENVXOESPROC glad_glTexEnvxOES;
void APIENTRY glad_debug_impl_glTexEnvxOES(GLenum arg0, GLenum arg1, GLfixed arg2) {
    _pre_call_callback("glTexEnvxOES", (void*)glTexEnvxOES, 3, arg0, arg1, arg2);
     glad_glTexEnvxOES(arg0, arg1, arg2);
    _post_call_callback("glTexEnvxOES", (void*)glTexEnvxOES, 3, arg0, arg1, arg2);

}
PFNGLTEXENVXOESPROC glad_debug_glTexEnvxOES = glad_debug_impl_glTexEnvxOES;
PFNGLTEXENVXVOESPROC glad_glTexEnvxvOES;
void APIENTRY glad_debug_impl_glTexEnvxvOES(GLenum arg0, GLenum arg1, const GLfixed* arg2) {
    _pre_call_callback("glTexEnvxvOES", (void*)glTexEnvxvOES, 3, arg0, arg1, arg2);
     glad_glTexEnvxvOES(arg0, arg1, arg2);
    _post_call_callback("glTexEnvxvOES", (void*)glTexEnvxvOES, 3, arg0, arg1, arg2);

}
PFNGLTEXENVXVOESPROC glad_debug_glTexEnvxvOES = glad_debug_impl_glTexEnvxvOES;
PFNGLTEXPARAMETERXOESPROC glad_glTexParameterxOES;
void APIENTRY glad_debug_impl_glTexParameterxOES(GLenum arg0, GLenum arg1, GLfixed arg2) {
    _pre_call_callback("glTexParameterxOES", (void*)glTexParameterxOES, 3, arg0, arg1, arg2);
     glad_glTexParameterxOES(arg0, arg1, arg2);
    _post_call_callback("glTexParameterxOES", (void*)glTexParameterxOES, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERXOESPROC glad_debug_glTexParameterxOES = glad_debug_impl_glTexParameterxOES;
PFNGLTEXPARAMETERXVOESPROC glad_glTexParameterxvOES;
void APIENTRY glad_debug_impl_glTexParameterxvOES(GLenum arg0, GLenum arg1, const GLfixed* arg2) {
    _pre_call_callback("glTexParameterxvOES", (void*)glTexParameterxvOES, 3, arg0, arg1, arg2);
     glad_glTexParameterxvOES(arg0, arg1, arg2);
    _post_call_callback("glTexParameterxvOES", (void*)glTexParameterxvOES, 3, arg0, arg1, arg2);

}
PFNGLTEXPARAMETERXVOESPROC glad_debug_glTexParameterxvOES = glad_debug_impl_glTexParameterxvOES;
PFNGLTRANSLATEXOESPROC glad_glTranslatexOES;
void APIENTRY glad_debug_impl_glTranslatexOES(GLfixed arg0, GLfixed arg1, GLfixed arg2) {
    _pre_call_callback("glTranslatexOES", (void*)glTranslatexOES, 3, arg0, arg1, arg2);
     glad_glTranslatexOES(arg0, arg1, arg2);
    _post_call_callback("glTranslatexOES", (void*)glTranslatexOES, 3, arg0, arg1, arg2);

}
PFNGLTRANSLATEXOESPROC glad_debug_glTranslatexOES = glad_debug_impl_glTranslatexOES;
PFNGLGETLIGHTXVOESPROC glad_glGetLightxvOES;
void APIENTRY glad_debug_impl_glGetLightxvOES(GLenum arg0, GLenum arg1, GLfixed* arg2) {
    _pre_call_callback("glGetLightxvOES", (void*)glGetLightxvOES, 3, arg0, arg1, arg2);
     glad_glGetLightxvOES(arg0, arg1, arg2);
    _post_call_callback("glGetLightxvOES", (void*)glGetLightxvOES, 3, arg0, arg1, arg2);

}
PFNGLGETLIGHTXVOESPROC glad_debug_glGetLightxvOES = glad_debug_impl_glGetLightxvOES;
PFNGLGETMATERIALXVOESPROC glad_glGetMaterialxvOES;
void APIENTRY glad_debug_impl_glGetMaterialxvOES(GLenum arg0, GLenum arg1, GLfixed* arg2) {
    _pre_call_callback("glGetMaterialxvOES", (void*)glGetMaterialxvOES, 3, arg0, arg1, arg2);
     glad_glGetMaterialxvOES(arg0, arg1, arg2);
    _post_call_callback("glGetMaterialxvOES", (void*)glGetMaterialxvOES, 3, arg0, arg1, arg2);

}
PFNGLGETMATERIALXVOESPROC glad_debug_glGetMaterialxvOES = glad_debug_impl_glGetMaterialxvOES;
PFNGLPOINTPARAMETERXOESPROC glad_glPointParameterxOES;
void APIENTRY glad_debug_impl_glPointParameterxOES(GLenum arg0, GLfixed arg1) {
    _pre_call_callback("glPointParameterxOES", (void*)glPointParameterxOES, 2, arg0, arg1);
     glad_glPointParameterxOES(arg0, arg1);
    _post_call_callback("glPointParameterxOES", (void*)glPointParameterxOES, 2, arg0, arg1);

}
PFNGLPOINTPARAMETERXOESPROC glad_debug_glPointParameterxOES = glad_debug_impl_glPointParameterxOES;
PFNGLSAMPLECOVERAGEXOESPROC glad_glSampleCoveragexOES;
void APIENTRY glad_debug_impl_glSampleCoveragexOES(GLclampx arg0, GLboolean arg1) {
    _pre_call_callback("glSampleCoveragexOES", (void*)glSampleCoveragexOES, 2, arg0, arg1);
     glad_glSampleCoveragexOES(arg0, arg1);
    _post_call_callback("glSampleCoveragexOES", (void*)glSampleCoveragexOES, 2, arg0, arg1);

}
PFNGLSAMPLECOVERAGEXOESPROC glad_debug_glSampleCoveragexOES = glad_debug_impl_glSampleCoveragexOES;
PFNGLACCUMXOESPROC glad_glAccumxOES;
void APIENTRY glad_debug_impl_glAccumxOES(GLenum arg0, GLfixed arg1) {
    _pre_call_callback("glAccumxOES", (void*)glAccumxOES, 2, arg0, arg1);
     glad_glAccumxOES(arg0, arg1);
    _post_call_callback("glAccumxOES", (void*)glAccumxOES, 2, arg0, arg1);

}
PFNGLACCUMXOESPROC glad_debug_glAccumxOES = glad_debug_impl_glAccumxOES;
PFNGLBITMAPXOESPROC glad_glBitmapxOES;
void APIENTRY glad_debug_impl_glBitmapxOES(GLsizei arg0, GLsizei arg1, GLfixed arg2, GLfixed arg3, GLfixed arg4, GLfixed arg5, const GLubyte* arg6) {
    _pre_call_callback("glBitmapxOES", (void*)glBitmapxOES, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
     glad_glBitmapxOES(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    _post_call_callback("glBitmapxOES", (void*)glBitmapxOES, 7, arg0, arg1, arg2, arg3, arg4, arg5, arg6);

}
PFNGLBITMAPXOESPROC glad_debug_glBitmapxOES = glad_debug_impl_glBitmapxOES;
PFNGLBLENDCOLORXOESPROC glad_glBlendColorxOES;
void APIENTRY glad_debug_impl_glBlendColorxOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3) {
    _pre_call_callback("glBlendColorxOES", (void*)glBlendColorxOES, 4, arg0, arg1, arg2, arg3);
     glad_glBlendColorxOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glBlendColorxOES", (void*)glBlendColorxOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLBLENDCOLORXOESPROC glad_debug_glBlendColorxOES = glad_debug_impl_glBlendColorxOES;
PFNGLCLEARACCUMXOESPROC glad_glClearAccumxOES;
void APIENTRY glad_debug_impl_glClearAccumxOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3) {
    _pre_call_callback("glClearAccumxOES", (void*)glClearAccumxOES, 4, arg0, arg1, arg2, arg3);
     glad_glClearAccumxOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glClearAccumxOES", (void*)glClearAccumxOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLCLEARACCUMXOESPROC glad_debug_glClearAccumxOES = glad_debug_impl_glClearAccumxOES;
PFNGLCOLOR3XOESPROC glad_glColor3xOES;
void APIENTRY glad_debug_impl_glColor3xOES(GLfixed arg0, GLfixed arg1, GLfixed arg2) {
    _pre_call_callback("glColor3xOES", (void*)glColor3xOES, 3, arg0, arg1, arg2);
     glad_glColor3xOES(arg0, arg1, arg2);
    _post_call_callback("glColor3xOES", (void*)glColor3xOES, 3, arg0, arg1, arg2);

}
PFNGLCOLOR3XOESPROC glad_debug_glColor3xOES = glad_debug_impl_glColor3xOES;
PFNGLCOLOR3XVOESPROC glad_glColor3xvOES;
void APIENTRY glad_debug_impl_glColor3xvOES(const GLfixed* arg0) {
    _pre_call_callback("glColor3xvOES", (void*)glColor3xvOES, 1, arg0);
     glad_glColor3xvOES(arg0);
    _post_call_callback("glColor3xvOES", (void*)glColor3xvOES, 1, arg0);

}
PFNGLCOLOR3XVOESPROC glad_debug_glColor3xvOES = glad_debug_impl_glColor3xvOES;
PFNGLCOLOR4XVOESPROC glad_glColor4xvOES;
void APIENTRY glad_debug_impl_glColor4xvOES(const GLfixed* arg0) {
    _pre_call_callback("glColor4xvOES", (void*)glColor4xvOES, 1, arg0);
     glad_glColor4xvOES(arg0);
    _post_call_callback("glColor4xvOES", (void*)glColor4xvOES, 1, arg0);

}
PFNGLCOLOR4XVOESPROC glad_debug_glColor4xvOES = glad_debug_impl_glColor4xvOES;
PFNGLCONVOLUTIONPARAMETERXOESPROC glad_glConvolutionParameterxOES;
void APIENTRY glad_debug_impl_glConvolutionParameterxOES(GLenum arg0, GLenum arg1, GLfixed arg2) {
    _pre_call_callback("glConvolutionParameterxOES", (void*)glConvolutionParameterxOES, 3, arg0, arg1, arg2);
     glad_glConvolutionParameterxOES(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameterxOES", (void*)glConvolutionParameterxOES, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERXOESPROC glad_debug_glConvolutionParameterxOES = glad_debug_impl_glConvolutionParameterxOES;
PFNGLCONVOLUTIONPARAMETERXVOESPROC glad_glConvolutionParameterxvOES;
void APIENTRY glad_debug_impl_glConvolutionParameterxvOES(GLenum arg0, GLenum arg1, const GLfixed* arg2) {
    _pre_call_callback("glConvolutionParameterxvOES", (void*)glConvolutionParameterxvOES, 3, arg0, arg1, arg2);
     glad_glConvolutionParameterxvOES(arg0, arg1, arg2);
    _post_call_callback("glConvolutionParameterxvOES", (void*)glConvolutionParameterxvOES, 3, arg0, arg1, arg2);

}
PFNGLCONVOLUTIONPARAMETERXVOESPROC glad_debug_glConvolutionParameterxvOES = glad_debug_impl_glConvolutionParameterxvOES;
PFNGLEVALCOORD1XOESPROC glad_glEvalCoord1xOES;
void APIENTRY glad_debug_impl_glEvalCoord1xOES(GLfixed arg0) {
    _pre_call_callback("glEvalCoord1xOES", (void*)glEvalCoord1xOES, 1, arg0);
     glad_glEvalCoord1xOES(arg0);
    _post_call_callback("glEvalCoord1xOES", (void*)glEvalCoord1xOES, 1, arg0);

}
PFNGLEVALCOORD1XOESPROC glad_debug_glEvalCoord1xOES = glad_debug_impl_glEvalCoord1xOES;
PFNGLEVALCOORD1XVOESPROC glad_glEvalCoord1xvOES;
void APIENTRY glad_debug_impl_glEvalCoord1xvOES(const GLfixed* arg0) {
    _pre_call_callback("glEvalCoord1xvOES", (void*)glEvalCoord1xvOES, 1, arg0);
     glad_glEvalCoord1xvOES(arg0);
    _post_call_callback("glEvalCoord1xvOES", (void*)glEvalCoord1xvOES, 1, arg0);

}
PFNGLEVALCOORD1XVOESPROC glad_debug_glEvalCoord1xvOES = glad_debug_impl_glEvalCoord1xvOES;
PFNGLEVALCOORD2XOESPROC glad_glEvalCoord2xOES;
void APIENTRY glad_debug_impl_glEvalCoord2xOES(GLfixed arg0, GLfixed arg1) {
    _pre_call_callback("glEvalCoord2xOES", (void*)glEvalCoord2xOES, 2, arg0, arg1);
     glad_glEvalCoord2xOES(arg0, arg1);
    _post_call_callback("glEvalCoord2xOES", (void*)glEvalCoord2xOES, 2, arg0, arg1);

}
PFNGLEVALCOORD2XOESPROC glad_debug_glEvalCoord2xOES = glad_debug_impl_glEvalCoord2xOES;
PFNGLEVALCOORD2XVOESPROC glad_glEvalCoord2xvOES;
void APIENTRY glad_debug_impl_glEvalCoord2xvOES(const GLfixed* arg0) {
    _pre_call_callback("glEvalCoord2xvOES", (void*)glEvalCoord2xvOES, 1, arg0);
     glad_glEvalCoord2xvOES(arg0);
    _post_call_callback("glEvalCoord2xvOES", (void*)glEvalCoord2xvOES, 1, arg0);

}
PFNGLEVALCOORD2XVOESPROC glad_debug_glEvalCoord2xvOES = glad_debug_impl_glEvalCoord2xvOES;
PFNGLFEEDBACKBUFFERXOESPROC glad_glFeedbackBufferxOES;
void APIENTRY glad_debug_impl_glFeedbackBufferxOES(GLsizei arg0, GLenum arg1, const GLfixed* arg2) {
    _pre_call_callback("glFeedbackBufferxOES", (void*)glFeedbackBufferxOES, 3, arg0, arg1, arg2);
     glad_glFeedbackBufferxOES(arg0, arg1, arg2);
    _post_call_callback("glFeedbackBufferxOES", (void*)glFeedbackBufferxOES, 3, arg0, arg1, arg2);

}
PFNGLFEEDBACKBUFFERXOESPROC glad_debug_glFeedbackBufferxOES = glad_debug_impl_glFeedbackBufferxOES;
PFNGLGETCONVOLUTIONPARAMETERXVOESPROC glad_glGetConvolutionParameterxvOES;
void APIENTRY glad_debug_impl_glGetConvolutionParameterxvOES(GLenum arg0, GLenum arg1, GLfixed* arg2) {
    _pre_call_callback("glGetConvolutionParameterxvOES", (void*)glGetConvolutionParameterxvOES, 3, arg0, arg1, arg2);
     glad_glGetConvolutionParameterxvOES(arg0, arg1, arg2);
    _post_call_callback("glGetConvolutionParameterxvOES", (void*)glGetConvolutionParameterxvOES, 3, arg0, arg1, arg2);

}
PFNGLGETCONVOLUTIONPARAMETERXVOESPROC glad_debug_glGetConvolutionParameterxvOES = glad_debug_impl_glGetConvolutionParameterxvOES;
PFNGLGETHISTOGRAMPARAMETERXVOESPROC glad_glGetHistogramParameterxvOES;
void APIENTRY glad_debug_impl_glGetHistogramParameterxvOES(GLenum arg0, GLenum arg1, GLfixed* arg2) {
    _pre_call_callback("glGetHistogramParameterxvOES", (void*)glGetHistogramParameterxvOES, 3, arg0, arg1, arg2);
     glad_glGetHistogramParameterxvOES(arg0, arg1, arg2);
    _post_call_callback("glGetHistogramParameterxvOES", (void*)glGetHistogramParameterxvOES, 3, arg0, arg1, arg2);

}
PFNGLGETHISTOGRAMPARAMETERXVOESPROC glad_debug_glGetHistogramParameterxvOES = glad_debug_impl_glGetHistogramParameterxvOES;
PFNGLGETLIGHTXOESPROC glad_glGetLightxOES;
void APIENTRY glad_debug_impl_glGetLightxOES(GLenum arg0, GLenum arg1, GLfixed* arg2) {
    _pre_call_callback("glGetLightxOES", (void*)glGetLightxOES, 3, arg0, arg1, arg2);
     glad_glGetLightxOES(arg0, arg1, arg2);
    _post_call_callback("glGetLightxOES", (void*)glGetLightxOES, 3, arg0, arg1, arg2);

}
PFNGLGETLIGHTXOESPROC glad_debug_glGetLightxOES = glad_debug_impl_glGetLightxOES;
PFNGLGETMAPXVOESPROC glad_glGetMapxvOES;
void APIENTRY glad_debug_impl_glGetMapxvOES(GLenum arg0, GLenum arg1, GLfixed* arg2) {
    _pre_call_callback("glGetMapxvOES", (void*)glGetMapxvOES, 3, arg0, arg1, arg2);
     glad_glGetMapxvOES(arg0, arg1, arg2);
    _post_call_callback("glGetMapxvOES", (void*)glGetMapxvOES, 3, arg0, arg1, arg2);

}
PFNGLGETMAPXVOESPROC glad_debug_glGetMapxvOES = glad_debug_impl_glGetMapxvOES;
PFNGLGETMATERIALXOESPROC glad_glGetMaterialxOES;
void APIENTRY glad_debug_impl_glGetMaterialxOES(GLenum arg0, GLenum arg1, GLfixed arg2) {
    _pre_call_callback("glGetMaterialxOES", (void*)glGetMaterialxOES, 3, arg0, arg1, arg2);
     glad_glGetMaterialxOES(arg0, arg1, arg2);
    _post_call_callback("glGetMaterialxOES", (void*)glGetMaterialxOES, 3, arg0, arg1, arg2);

}
PFNGLGETMATERIALXOESPROC glad_debug_glGetMaterialxOES = glad_debug_impl_glGetMaterialxOES;
PFNGLGETPIXELMAPXVPROC glad_glGetPixelMapxv;
void APIENTRY glad_debug_impl_glGetPixelMapxv(GLenum arg0, GLint arg1, GLfixed* arg2) {
    _pre_call_callback("glGetPixelMapxv", (void*)glGetPixelMapxv, 3, arg0, arg1, arg2);
     glad_glGetPixelMapxv(arg0, arg1, arg2);
    _post_call_callback("glGetPixelMapxv", (void*)glGetPixelMapxv, 3, arg0, arg1, arg2);

}
PFNGLGETPIXELMAPXVPROC glad_debug_glGetPixelMapxv = glad_debug_impl_glGetPixelMapxv;
PFNGLGETTEXGENXVOESPROC glad_glGetTexGenxvOES;
void APIENTRY glad_debug_impl_glGetTexGenxvOES(GLenum arg0, GLenum arg1, GLfixed* arg2) {
    _pre_call_callback("glGetTexGenxvOES", (void*)glGetTexGenxvOES, 3, arg0, arg1, arg2);
     glad_glGetTexGenxvOES(arg0, arg1, arg2);
    _post_call_callback("glGetTexGenxvOES", (void*)glGetTexGenxvOES, 3, arg0, arg1, arg2);

}
PFNGLGETTEXGENXVOESPROC glad_debug_glGetTexGenxvOES = glad_debug_impl_glGetTexGenxvOES;
PFNGLGETTEXLEVELPARAMETERXVOESPROC glad_glGetTexLevelParameterxvOES;
void APIENTRY glad_debug_impl_glGetTexLevelParameterxvOES(GLenum arg0, GLint arg1, GLenum arg2, GLfixed* arg3) {
    _pre_call_callback("glGetTexLevelParameterxvOES", (void*)glGetTexLevelParameterxvOES, 4, arg0, arg1, arg2, arg3);
     glad_glGetTexLevelParameterxvOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glGetTexLevelParameterxvOES", (void*)glGetTexLevelParameterxvOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLGETTEXLEVELPARAMETERXVOESPROC glad_debug_glGetTexLevelParameterxvOES = glad_debug_impl_glGetTexLevelParameterxvOES;
PFNGLINDEXXOESPROC glad_glIndexxOES;
void APIENTRY glad_debug_impl_glIndexxOES(GLfixed arg0) {
    _pre_call_callback("glIndexxOES", (void*)glIndexxOES, 1, arg0);
     glad_glIndexxOES(arg0);
    _post_call_callback("glIndexxOES", (void*)glIndexxOES, 1, arg0);

}
PFNGLINDEXXOESPROC glad_debug_glIndexxOES = glad_debug_impl_glIndexxOES;
PFNGLINDEXXVOESPROC glad_glIndexxvOES;
void APIENTRY glad_debug_impl_glIndexxvOES(const GLfixed* arg0) {
    _pre_call_callback("glIndexxvOES", (void*)glIndexxvOES, 1, arg0);
     glad_glIndexxvOES(arg0);
    _post_call_callback("glIndexxvOES", (void*)glIndexxvOES, 1, arg0);

}
PFNGLINDEXXVOESPROC glad_debug_glIndexxvOES = glad_debug_impl_glIndexxvOES;
PFNGLLOADTRANSPOSEMATRIXXOESPROC glad_glLoadTransposeMatrixxOES;
void APIENTRY glad_debug_impl_glLoadTransposeMatrixxOES(const GLfixed* arg0) {
    _pre_call_callback("glLoadTransposeMatrixxOES", (void*)glLoadTransposeMatrixxOES, 1, arg0);
     glad_glLoadTransposeMatrixxOES(arg0);
    _post_call_callback("glLoadTransposeMatrixxOES", (void*)glLoadTransposeMatrixxOES, 1, arg0);

}
PFNGLLOADTRANSPOSEMATRIXXOESPROC glad_debug_glLoadTransposeMatrixxOES = glad_debug_impl_glLoadTransposeMatrixxOES;
PFNGLMAP1XOESPROC glad_glMap1xOES;
void APIENTRY glad_debug_impl_glMap1xOES(GLenum arg0, GLfixed arg1, GLfixed arg2, GLint arg3, GLint arg4, GLfixed arg5) {
    _pre_call_callback("glMap1xOES", (void*)glMap1xOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glMap1xOES(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glMap1xOES", (void*)glMap1xOES, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLMAP1XOESPROC glad_debug_glMap1xOES = glad_debug_impl_glMap1xOES;
PFNGLMAP2XOESPROC glad_glMap2xOES;
void APIENTRY glad_debug_impl_glMap2xOES(GLenum arg0, GLfixed arg1, GLfixed arg2, GLint arg3, GLint arg4, GLfixed arg5, GLfixed arg6, GLint arg7, GLint arg8, GLfixed arg9) {
    _pre_call_callback("glMap2xOES", (void*)glMap2xOES, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glMap2xOES(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glMap2xOES", (void*)glMap2xOES, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLMAP2XOESPROC glad_debug_glMap2xOES = glad_debug_impl_glMap2xOES;
PFNGLMAPGRID1XOESPROC glad_glMapGrid1xOES;
void APIENTRY glad_debug_impl_glMapGrid1xOES(GLint arg0, GLfixed arg1, GLfixed arg2) {
    _pre_call_callback("glMapGrid1xOES", (void*)glMapGrid1xOES, 3, arg0, arg1, arg2);
     glad_glMapGrid1xOES(arg0, arg1, arg2);
    _post_call_callback("glMapGrid1xOES", (void*)glMapGrid1xOES, 3, arg0, arg1, arg2);

}
PFNGLMAPGRID1XOESPROC glad_debug_glMapGrid1xOES = glad_debug_impl_glMapGrid1xOES;
PFNGLMAPGRID2XOESPROC glad_glMapGrid2xOES;
void APIENTRY glad_debug_impl_glMapGrid2xOES(GLint arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3, GLfixed arg4) {
    _pre_call_callback("glMapGrid2xOES", (void*)glMapGrid2xOES, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glMapGrid2xOES(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glMapGrid2xOES", (void*)glMapGrid2xOES, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLMAPGRID2XOESPROC glad_debug_glMapGrid2xOES = glad_debug_impl_glMapGrid2xOES;
PFNGLMULTTRANSPOSEMATRIXXOESPROC glad_glMultTransposeMatrixxOES;
void APIENTRY glad_debug_impl_glMultTransposeMatrixxOES(const GLfixed* arg0) {
    _pre_call_callback("glMultTransposeMatrixxOES", (void*)glMultTransposeMatrixxOES, 1, arg0);
     glad_glMultTransposeMatrixxOES(arg0);
    _post_call_callback("glMultTransposeMatrixxOES", (void*)glMultTransposeMatrixxOES, 1, arg0);

}
PFNGLMULTTRANSPOSEMATRIXXOESPROC glad_debug_glMultTransposeMatrixxOES = glad_debug_impl_glMultTransposeMatrixxOES;
PFNGLMULTITEXCOORD1XOESPROC glad_glMultiTexCoord1xOES;
void APIENTRY glad_debug_impl_glMultiTexCoord1xOES(GLenum arg0, GLfixed arg1) {
    _pre_call_callback("glMultiTexCoord1xOES", (void*)glMultiTexCoord1xOES, 2, arg0, arg1);
     glad_glMultiTexCoord1xOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord1xOES", (void*)glMultiTexCoord1xOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1XOESPROC glad_debug_glMultiTexCoord1xOES = glad_debug_impl_glMultiTexCoord1xOES;
PFNGLMULTITEXCOORD1XVOESPROC glad_glMultiTexCoord1xvOES;
void APIENTRY glad_debug_impl_glMultiTexCoord1xvOES(GLenum arg0, const GLfixed* arg1) {
    _pre_call_callback("glMultiTexCoord1xvOES", (void*)glMultiTexCoord1xvOES, 2, arg0, arg1);
     glad_glMultiTexCoord1xvOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord1xvOES", (void*)glMultiTexCoord1xvOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD1XVOESPROC glad_debug_glMultiTexCoord1xvOES = glad_debug_impl_glMultiTexCoord1xvOES;
PFNGLMULTITEXCOORD2XOESPROC glad_glMultiTexCoord2xOES;
void APIENTRY glad_debug_impl_glMultiTexCoord2xOES(GLenum arg0, GLfixed arg1, GLfixed arg2) {
    _pre_call_callback("glMultiTexCoord2xOES", (void*)glMultiTexCoord2xOES, 3, arg0, arg1, arg2);
     glad_glMultiTexCoord2xOES(arg0, arg1, arg2);
    _post_call_callback("glMultiTexCoord2xOES", (void*)glMultiTexCoord2xOES, 3, arg0, arg1, arg2);

}
PFNGLMULTITEXCOORD2XOESPROC glad_debug_glMultiTexCoord2xOES = glad_debug_impl_glMultiTexCoord2xOES;
PFNGLMULTITEXCOORD2XVOESPROC glad_glMultiTexCoord2xvOES;
void APIENTRY glad_debug_impl_glMultiTexCoord2xvOES(GLenum arg0, const GLfixed* arg1) {
    _pre_call_callback("glMultiTexCoord2xvOES", (void*)glMultiTexCoord2xvOES, 2, arg0, arg1);
     glad_glMultiTexCoord2xvOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord2xvOES", (void*)glMultiTexCoord2xvOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD2XVOESPROC glad_debug_glMultiTexCoord2xvOES = glad_debug_impl_glMultiTexCoord2xvOES;
PFNGLMULTITEXCOORD3XOESPROC glad_glMultiTexCoord3xOES;
void APIENTRY glad_debug_impl_glMultiTexCoord3xOES(GLenum arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3) {
    _pre_call_callback("glMultiTexCoord3xOES", (void*)glMultiTexCoord3xOES, 4, arg0, arg1, arg2, arg3);
     glad_glMultiTexCoord3xOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glMultiTexCoord3xOES", (void*)glMultiTexCoord3xOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLMULTITEXCOORD3XOESPROC glad_debug_glMultiTexCoord3xOES = glad_debug_impl_glMultiTexCoord3xOES;
PFNGLMULTITEXCOORD3XVOESPROC glad_glMultiTexCoord3xvOES;
void APIENTRY glad_debug_impl_glMultiTexCoord3xvOES(GLenum arg0, const GLfixed* arg1) {
    _pre_call_callback("glMultiTexCoord3xvOES", (void*)glMultiTexCoord3xvOES, 2, arg0, arg1);
     glad_glMultiTexCoord3xvOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord3xvOES", (void*)glMultiTexCoord3xvOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD3XVOESPROC glad_debug_glMultiTexCoord3xvOES = glad_debug_impl_glMultiTexCoord3xvOES;
PFNGLMULTITEXCOORD4XVOESPROC glad_glMultiTexCoord4xvOES;
void APIENTRY glad_debug_impl_glMultiTexCoord4xvOES(GLenum arg0, const GLfixed* arg1) {
    _pre_call_callback("glMultiTexCoord4xvOES", (void*)glMultiTexCoord4xvOES, 2, arg0, arg1);
     glad_glMultiTexCoord4xvOES(arg0, arg1);
    _post_call_callback("glMultiTexCoord4xvOES", (void*)glMultiTexCoord4xvOES, 2, arg0, arg1);

}
PFNGLMULTITEXCOORD4XVOESPROC glad_debug_glMultiTexCoord4xvOES = glad_debug_impl_glMultiTexCoord4xvOES;
PFNGLNORMAL3XVOESPROC glad_glNormal3xvOES;
void APIENTRY glad_debug_impl_glNormal3xvOES(const GLfixed* arg0) {
    _pre_call_callback("glNormal3xvOES", (void*)glNormal3xvOES, 1, arg0);
     glad_glNormal3xvOES(arg0);
    _post_call_callback("glNormal3xvOES", (void*)glNormal3xvOES, 1, arg0);

}
PFNGLNORMAL3XVOESPROC glad_debug_glNormal3xvOES = glad_debug_impl_glNormal3xvOES;
PFNGLPASSTHROUGHXOESPROC glad_glPassThroughxOES;
void APIENTRY glad_debug_impl_glPassThroughxOES(GLfixed arg0) {
    _pre_call_callback("glPassThroughxOES", (void*)glPassThroughxOES, 1, arg0);
     glad_glPassThroughxOES(arg0);
    _post_call_callback("glPassThroughxOES", (void*)glPassThroughxOES, 1, arg0);

}
PFNGLPASSTHROUGHXOESPROC glad_debug_glPassThroughxOES = glad_debug_impl_glPassThroughxOES;
PFNGLPIXELMAPXPROC glad_glPixelMapx;
void APIENTRY glad_debug_impl_glPixelMapx(GLenum arg0, GLint arg1, const GLfixed* arg2) {
    _pre_call_callback("glPixelMapx", (void*)glPixelMapx, 3, arg0, arg1, arg2);
     glad_glPixelMapx(arg0, arg1, arg2);
    _post_call_callback("glPixelMapx", (void*)glPixelMapx, 3, arg0, arg1, arg2);

}
PFNGLPIXELMAPXPROC glad_debug_glPixelMapx = glad_debug_impl_glPixelMapx;
PFNGLPIXELSTOREXPROC glad_glPixelStorex;
void APIENTRY glad_debug_impl_glPixelStorex(GLenum arg0, GLfixed arg1) {
    _pre_call_callback("glPixelStorex", (void*)glPixelStorex, 2, arg0, arg1);
     glad_glPixelStorex(arg0, arg1);
    _post_call_callback("glPixelStorex", (void*)glPixelStorex, 2, arg0, arg1);

}
PFNGLPIXELSTOREXPROC glad_debug_glPixelStorex = glad_debug_impl_glPixelStorex;
PFNGLPIXELTRANSFERXOESPROC glad_glPixelTransferxOES;
void APIENTRY glad_debug_impl_glPixelTransferxOES(GLenum arg0, GLfixed arg1) {
    _pre_call_callback("glPixelTransferxOES", (void*)glPixelTransferxOES, 2, arg0, arg1);
     glad_glPixelTransferxOES(arg0, arg1);
    _post_call_callback("glPixelTransferxOES", (void*)glPixelTransferxOES, 2, arg0, arg1);

}
PFNGLPIXELTRANSFERXOESPROC glad_debug_glPixelTransferxOES = glad_debug_impl_glPixelTransferxOES;
PFNGLPIXELZOOMXOESPROC glad_glPixelZoomxOES;
void APIENTRY glad_debug_impl_glPixelZoomxOES(GLfixed arg0, GLfixed arg1) {
    _pre_call_callback("glPixelZoomxOES", (void*)glPixelZoomxOES, 2, arg0, arg1);
     glad_glPixelZoomxOES(arg0, arg1);
    _post_call_callback("glPixelZoomxOES", (void*)glPixelZoomxOES, 2, arg0, arg1);

}
PFNGLPIXELZOOMXOESPROC glad_debug_glPixelZoomxOES = glad_debug_impl_glPixelZoomxOES;
PFNGLPRIORITIZETEXTURESXOESPROC glad_glPrioritizeTexturesxOES;
void APIENTRY glad_debug_impl_glPrioritizeTexturesxOES(GLsizei arg0, const GLuint* arg1, const GLfixed* arg2) {
    _pre_call_callback("glPrioritizeTexturesxOES", (void*)glPrioritizeTexturesxOES, 3, arg0, arg1, arg2);
     glad_glPrioritizeTexturesxOES(arg0, arg1, arg2);
    _post_call_callback("glPrioritizeTexturesxOES", (void*)glPrioritizeTexturesxOES, 3, arg0, arg1, arg2);

}
PFNGLPRIORITIZETEXTURESXOESPROC glad_debug_glPrioritizeTexturesxOES = glad_debug_impl_glPrioritizeTexturesxOES;
PFNGLRASTERPOS2XOESPROC glad_glRasterPos2xOES;
void APIENTRY glad_debug_impl_glRasterPos2xOES(GLfixed arg0, GLfixed arg1) {
    _pre_call_callback("glRasterPos2xOES", (void*)glRasterPos2xOES, 2, arg0, arg1);
     glad_glRasterPos2xOES(arg0, arg1);
    _post_call_callback("glRasterPos2xOES", (void*)glRasterPos2xOES, 2, arg0, arg1);

}
PFNGLRASTERPOS2XOESPROC glad_debug_glRasterPos2xOES = glad_debug_impl_glRasterPos2xOES;
PFNGLRASTERPOS2XVOESPROC glad_glRasterPos2xvOES;
void APIENTRY glad_debug_impl_glRasterPos2xvOES(const GLfixed* arg0) {
    _pre_call_callback("glRasterPos2xvOES", (void*)glRasterPos2xvOES, 1, arg0);
     glad_glRasterPos2xvOES(arg0);
    _post_call_callback("glRasterPos2xvOES", (void*)glRasterPos2xvOES, 1, arg0);

}
PFNGLRASTERPOS2XVOESPROC glad_debug_glRasterPos2xvOES = glad_debug_impl_glRasterPos2xvOES;
PFNGLRASTERPOS3XOESPROC glad_glRasterPos3xOES;
void APIENTRY glad_debug_impl_glRasterPos3xOES(GLfixed arg0, GLfixed arg1, GLfixed arg2) {
    _pre_call_callback("glRasterPos3xOES", (void*)glRasterPos3xOES, 3, arg0, arg1, arg2);
     glad_glRasterPos3xOES(arg0, arg1, arg2);
    _post_call_callback("glRasterPos3xOES", (void*)glRasterPos3xOES, 3, arg0, arg1, arg2);

}
PFNGLRASTERPOS3XOESPROC glad_debug_glRasterPos3xOES = glad_debug_impl_glRasterPos3xOES;
PFNGLRASTERPOS3XVOESPROC glad_glRasterPos3xvOES;
void APIENTRY glad_debug_impl_glRasterPos3xvOES(const GLfixed* arg0) {
    _pre_call_callback("glRasterPos3xvOES", (void*)glRasterPos3xvOES, 1, arg0);
     glad_glRasterPos3xvOES(arg0);
    _post_call_callback("glRasterPos3xvOES", (void*)glRasterPos3xvOES, 1, arg0);

}
PFNGLRASTERPOS3XVOESPROC glad_debug_glRasterPos3xvOES = glad_debug_impl_glRasterPos3xvOES;
PFNGLRASTERPOS4XOESPROC glad_glRasterPos4xOES;
void APIENTRY glad_debug_impl_glRasterPos4xOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3) {
    _pre_call_callback("glRasterPos4xOES", (void*)glRasterPos4xOES, 4, arg0, arg1, arg2, arg3);
     glad_glRasterPos4xOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glRasterPos4xOES", (void*)glRasterPos4xOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLRASTERPOS4XOESPROC glad_debug_glRasterPos4xOES = glad_debug_impl_glRasterPos4xOES;
PFNGLRASTERPOS4XVOESPROC glad_glRasterPos4xvOES;
void APIENTRY glad_debug_impl_glRasterPos4xvOES(const GLfixed* arg0) {
    _pre_call_callback("glRasterPos4xvOES", (void*)glRasterPos4xvOES, 1, arg0);
     glad_glRasterPos4xvOES(arg0);
    _post_call_callback("glRasterPos4xvOES", (void*)glRasterPos4xvOES, 1, arg0);

}
PFNGLRASTERPOS4XVOESPROC glad_debug_glRasterPos4xvOES = glad_debug_impl_glRasterPos4xvOES;
PFNGLRECTXOESPROC glad_glRectxOES;
void APIENTRY glad_debug_impl_glRectxOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3) {
    _pre_call_callback("glRectxOES", (void*)glRectxOES, 4, arg0, arg1, arg2, arg3);
     glad_glRectxOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glRectxOES", (void*)glRectxOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLRECTXOESPROC glad_debug_glRectxOES = glad_debug_impl_glRectxOES;
PFNGLRECTXVOESPROC glad_glRectxvOES;
void APIENTRY glad_debug_impl_glRectxvOES(const GLfixed* arg0, const GLfixed* arg1) {
    _pre_call_callback("glRectxvOES", (void*)glRectxvOES, 2, arg0, arg1);
     glad_glRectxvOES(arg0, arg1);
    _post_call_callback("glRectxvOES", (void*)glRectxvOES, 2, arg0, arg1);

}
PFNGLRECTXVOESPROC glad_debug_glRectxvOES = glad_debug_impl_glRectxvOES;
PFNGLTEXCOORD1XOESPROC glad_glTexCoord1xOES;
void APIENTRY glad_debug_impl_glTexCoord1xOES(GLfixed arg0) {
    _pre_call_callback("glTexCoord1xOES", (void*)glTexCoord1xOES, 1, arg0);
     glad_glTexCoord1xOES(arg0);
    _post_call_callback("glTexCoord1xOES", (void*)glTexCoord1xOES, 1, arg0);

}
PFNGLTEXCOORD1XOESPROC glad_debug_glTexCoord1xOES = glad_debug_impl_glTexCoord1xOES;
PFNGLTEXCOORD1XVOESPROC glad_glTexCoord1xvOES;
void APIENTRY glad_debug_impl_glTexCoord1xvOES(const GLfixed* arg0) {
    _pre_call_callback("glTexCoord1xvOES", (void*)glTexCoord1xvOES, 1, arg0);
     glad_glTexCoord1xvOES(arg0);
    _post_call_callback("glTexCoord1xvOES", (void*)glTexCoord1xvOES, 1, arg0);

}
PFNGLTEXCOORD1XVOESPROC glad_debug_glTexCoord1xvOES = glad_debug_impl_glTexCoord1xvOES;
PFNGLTEXCOORD2XOESPROC glad_glTexCoord2xOES;
void APIENTRY glad_debug_impl_glTexCoord2xOES(GLfixed arg0, GLfixed arg1) {
    _pre_call_callback("glTexCoord2xOES", (void*)glTexCoord2xOES, 2, arg0, arg1);
     glad_glTexCoord2xOES(arg0, arg1);
    _post_call_callback("glTexCoord2xOES", (void*)glTexCoord2xOES, 2, arg0, arg1);

}
PFNGLTEXCOORD2XOESPROC glad_debug_glTexCoord2xOES = glad_debug_impl_glTexCoord2xOES;
PFNGLTEXCOORD2XVOESPROC glad_glTexCoord2xvOES;
void APIENTRY glad_debug_impl_glTexCoord2xvOES(const GLfixed* arg0) {
    _pre_call_callback("glTexCoord2xvOES", (void*)glTexCoord2xvOES, 1, arg0);
     glad_glTexCoord2xvOES(arg0);
    _post_call_callback("glTexCoord2xvOES", (void*)glTexCoord2xvOES, 1, arg0);

}
PFNGLTEXCOORD2XVOESPROC glad_debug_glTexCoord2xvOES = glad_debug_impl_glTexCoord2xvOES;
PFNGLTEXCOORD3XOESPROC glad_glTexCoord3xOES;
void APIENTRY glad_debug_impl_glTexCoord3xOES(GLfixed arg0, GLfixed arg1, GLfixed arg2) {
    _pre_call_callback("glTexCoord3xOES", (void*)glTexCoord3xOES, 3, arg0, arg1, arg2);
     glad_glTexCoord3xOES(arg0, arg1, arg2);
    _post_call_callback("glTexCoord3xOES", (void*)glTexCoord3xOES, 3, arg0, arg1, arg2);

}
PFNGLTEXCOORD3XOESPROC glad_debug_glTexCoord3xOES = glad_debug_impl_glTexCoord3xOES;
PFNGLTEXCOORD3XVOESPROC glad_glTexCoord3xvOES;
void APIENTRY glad_debug_impl_glTexCoord3xvOES(const GLfixed* arg0) {
    _pre_call_callback("glTexCoord3xvOES", (void*)glTexCoord3xvOES, 1, arg0);
     glad_glTexCoord3xvOES(arg0);
    _post_call_callback("glTexCoord3xvOES", (void*)glTexCoord3xvOES, 1, arg0);

}
PFNGLTEXCOORD3XVOESPROC glad_debug_glTexCoord3xvOES = glad_debug_impl_glTexCoord3xvOES;
PFNGLTEXCOORD4XOESPROC glad_glTexCoord4xOES;
void APIENTRY glad_debug_impl_glTexCoord4xOES(GLfixed arg0, GLfixed arg1, GLfixed arg2, GLfixed arg3) {
    _pre_call_callback("glTexCoord4xOES", (void*)glTexCoord4xOES, 4, arg0, arg1, arg2, arg3);
     glad_glTexCoord4xOES(arg0, arg1, arg2, arg3);
    _post_call_callback("glTexCoord4xOES", (void*)glTexCoord4xOES, 4, arg0, arg1, arg2, arg3);

}
PFNGLTEXCOORD4XOESPROC glad_debug_glTexCoord4xOES = glad_debug_impl_glTexCoord4xOES;
PFNGLTEXCOORD4XVOESPROC glad_glTexCoord4xvOES;
void APIENTRY glad_debug_impl_glTexCoord4xvOES(const GLfixed* arg0) {
    _pre_call_callback("glTexCoord4xvOES", (void*)glTexCoord4xvOES, 1, arg0);
     glad_glTexCoord4xvOES(arg0);
    _post_call_callback("glTexCoord4xvOES", (void*)glTexCoord4xvOES, 1, arg0);

}
PFNGLTEXCOORD4XVOESPROC glad_debug_glTexCoord4xvOES = glad_debug_impl_glTexCoord4xvOES;
PFNGLTEXGENXOESPROC glad_glTexGenxOES;
void APIENTRY glad_debug_impl_glTexGenxOES(GLenum arg0, GLenum arg1, GLfixed arg2) {
    _pre_call_callback("glTexGenxOES", (void*)glTexGenxOES, 3, arg0, arg1, arg2);
     glad_glTexGenxOES(arg0, arg1, arg2);
    _post_call_callback("glTexGenxOES", (void*)glTexGenxOES, 3, arg0, arg1, arg2);

}
PFNGLTEXGENXOESPROC glad_debug_glTexGenxOES = glad_debug_impl_glTexGenxOES;
PFNGLTEXGENXVOESPROC glad_glTexGenxvOES;
void APIENTRY glad_debug_impl_glTexGenxvOES(GLenum arg0, GLenum arg1, const GLfixed* arg2) {
    _pre_call_callback("glTexGenxvOES", (void*)glTexGenxvOES, 3, arg0, arg1, arg2);
     glad_glTexGenxvOES(arg0, arg1, arg2);
    _post_call_callback("glTexGenxvOES", (void*)glTexGenxvOES, 3, arg0, arg1, arg2);

}
PFNGLTEXGENXVOESPROC glad_debug_glTexGenxvOES = glad_debug_impl_glTexGenxvOES;
PFNGLVERTEX2XOESPROC glad_glVertex2xOES;
void APIENTRY glad_debug_impl_glVertex2xOES(GLfixed arg0) {
    _pre_call_callback("glVertex2xOES", (void*)glVertex2xOES, 1, arg0);
     glad_glVertex2xOES(arg0);
    _post_call_callback("glVertex2xOES", (void*)glVertex2xOES, 1, arg0);

}
PFNGLVERTEX2XOESPROC glad_debug_glVertex2xOES = glad_debug_impl_glVertex2xOES;
PFNGLVERTEX2XVOESPROC glad_glVertex2xvOES;
void APIENTRY glad_debug_impl_glVertex2xvOES(const GLfixed* arg0) {
    _pre_call_callback("glVertex2xvOES", (void*)glVertex2xvOES, 1, arg0);
     glad_glVertex2xvOES(arg0);
    _post_call_callback("glVertex2xvOES", (void*)glVertex2xvOES, 1, arg0);

}
PFNGLVERTEX2XVOESPROC glad_debug_glVertex2xvOES = glad_debug_impl_glVertex2xvOES;
PFNGLVERTEX3XOESPROC glad_glVertex3xOES;
void APIENTRY glad_debug_impl_glVertex3xOES(GLfixed arg0, GLfixed arg1) {
    _pre_call_callback("glVertex3xOES", (void*)glVertex3xOES, 2, arg0, arg1);
     glad_glVertex3xOES(arg0, arg1);
    _post_call_callback("glVertex3xOES", (void*)glVertex3xOES, 2, arg0, arg1);

}
PFNGLVERTEX3XOESPROC glad_debug_glVertex3xOES = glad_debug_impl_glVertex3xOES;
PFNGLVERTEX3XVOESPROC glad_glVertex3xvOES;
void APIENTRY glad_debug_impl_glVertex3xvOES(const GLfixed* arg0) {
    _pre_call_callback("glVertex3xvOES", (void*)glVertex3xvOES, 1, arg0);
     glad_glVertex3xvOES(arg0);
    _post_call_callback("glVertex3xvOES", (void*)glVertex3xvOES, 1, arg0);

}
PFNGLVERTEX3XVOESPROC glad_debug_glVertex3xvOES = glad_debug_impl_glVertex3xvOES;
PFNGLVERTEX4XOESPROC glad_glVertex4xOES;
void APIENTRY glad_debug_impl_glVertex4xOES(GLfixed arg0, GLfixed arg1, GLfixed arg2) {
    _pre_call_callback("glVertex4xOES", (void*)glVertex4xOES, 3, arg0, arg1, arg2);
     glad_glVertex4xOES(arg0, arg1, arg2);
    _post_call_callback("glVertex4xOES", (void*)glVertex4xOES, 3, arg0, arg1, arg2);

}
PFNGLVERTEX4XOESPROC glad_debug_glVertex4xOES = glad_debug_impl_glVertex4xOES;
PFNGLVERTEX4XVOESPROC glad_glVertex4xvOES;
void APIENTRY glad_debug_impl_glVertex4xvOES(const GLfixed* arg0) {
    _pre_call_callback("glVertex4xvOES", (void*)glVertex4xvOES, 1, arg0);
     glad_glVertex4xvOES(arg0);
    _post_call_callback("glVertex4xvOES", (void*)glVertex4xvOES, 1, arg0);

}
PFNGLVERTEX4XVOESPROC glad_debug_glVertex4xvOES = glad_debug_impl_glVertex4xvOES;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_glRenderbufferStorageMultisampleEXT;
void APIENTRY glad_debug_impl_glRenderbufferStorageMultisampleEXT(GLenum arg0, GLsizei arg1, GLenum arg2, GLsizei arg3, GLsizei arg4) {
    _pre_call_callback("glRenderbufferStorageMultisampleEXT", (void*)glRenderbufferStorageMultisampleEXT, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glRenderbufferStorageMultisampleEXT(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glRenderbufferStorageMultisampleEXT", (void*)glRenderbufferStorageMultisampleEXT, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_debug_glRenderbufferStorageMultisampleEXT = glad_debug_impl_glRenderbufferStorageMultisampleEXT;
PFNGLTEXIMAGE4DSGISPROC glad_glTexImage4DSGIS;
void APIENTRY glad_debug_impl_glTexImage4DSGIS(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLsizei arg6, GLint arg7, GLenum arg8, GLenum arg9, const void* arg10) {
    _pre_call_callback("glTexImage4DSGIS", (void*)glTexImage4DSGIS, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glTexImage4DSGIS(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glTexImage4DSGIS", (void*)glTexImage4DSGIS, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLTEXIMAGE4DSGISPROC glad_debug_glTexImage4DSGIS = glad_debug_impl_glTexImage4DSGIS;
PFNGLTEXSUBIMAGE4DSGISPROC glad_glTexSubImage4DSGIS;
void APIENTRY glad_debug_impl_glTexSubImage4DSGIS(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLint arg5, GLsizei arg6, GLsizei arg7, GLsizei arg8, GLsizei arg9, GLenum arg10, GLenum arg11, const void* arg12) {
    _pre_call_callback("glTexSubImage4DSGIS", (void*)glTexSubImage4DSGIS, 13, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
     glad_glTexSubImage4DSGIS(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
    _post_call_callback("glTexSubImage4DSGIS", (void*)glTexSubImage4DSGIS, 13, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

}
PFNGLTEXSUBIMAGE4DSGISPROC glad_debug_glTexSubImage4DSGIS = glad_debug_impl_glTexSubImage4DSGIS;
PFNGLTEXIMAGE3DEXTPROC glad_glTexImage3DEXT;
void APIENTRY glad_debug_impl_glTexImage3DEXT(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLsizei arg4, GLsizei arg5, GLint arg6, GLenum arg7, GLenum arg8, const void* arg9) {
    _pre_call_callback("glTexImage3DEXT", (void*)glTexImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
     glad_glTexImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    _post_call_callback("glTexImage3DEXT", (void*)glTexImage3DEXT, 10, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

}
PFNGLTEXIMAGE3DEXTPROC glad_debug_glTexImage3DEXT = glad_debug_impl_glTexImage3DEXT;
PFNGLTEXSUBIMAGE3DEXTPROC glad_glTexSubImage3DEXT;
void APIENTRY glad_debug_impl_glTexSubImage3DEXT(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLenum arg8, GLenum arg9, const void* arg10) {
    _pre_call_callback("glTexSubImage3DEXT", (void*)glTexSubImage3DEXT, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
     glad_glTexSubImage3DEXT(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
    _post_call_callback("glTexSubImage3DEXT", (void*)glTexSubImage3DEXT, 11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

}
PFNGLTEXSUBIMAGE3DEXTPROC glad_debug_glTexSubImage3DEXT = glad_debug_impl_glTexSubImage3DEXT;
PFNGLSAMPLEMASKEXTPROC glad_glSampleMaskEXT;
void APIENTRY glad_debug_impl_glSampleMaskEXT(GLclampf arg0, GLboolean arg1) {
    _pre_call_callback("glSampleMaskEXT", (void*)glSampleMaskEXT, 2, arg0, arg1);
     glad_glSampleMaskEXT(arg0, arg1);
    _post_call_callback("glSampleMaskEXT", (void*)glSampleMaskEXT, 2, arg0, arg1);

}
PFNGLSAMPLEMASKEXTPROC glad_debug_glSampleMaskEXT = glad_debug_impl_glSampleMaskEXT;
PFNGLSAMPLEPATTERNEXTPROC glad_glSamplePatternEXT;
void APIENTRY glad_debug_impl_glSamplePatternEXT(GLenum arg0) {
    _pre_call_callback("glSamplePatternEXT", (void*)glSamplePatternEXT, 1, arg0);
     glad_glSamplePatternEXT(arg0);
    _post_call_callback("glSamplePatternEXT", (void*)glSamplePatternEXT, 1, arg0);

}
PFNGLSAMPLEPATTERNEXTPROC glad_debug_glSamplePatternEXT = glad_debug_impl_glSamplePatternEXT;
PFNGLSECONDARYCOLOR3BEXTPROC glad_glSecondaryColor3bEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3bEXT(GLbyte arg0, GLbyte arg1, GLbyte arg2) {
    _pre_call_callback("glSecondaryColor3bEXT", (void*)glSecondaryColor3bEXT, 3, arg0, arg1, arg2);
     glad_glSecondaryColor3bEXT(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColor3bEXT", (void*)glSecondaryColor3bEXT, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLOR3BEXTPROC glad_debug_glSecondaryColor3bEXT = glad_debug_impl_glSecondaryColor3bEXT;
PFNGLSECONDARYCOLOR3BVEXTPROC glad_glSecondaryColor3bvEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3bvEXT(const GLbyte* arg0) {
    _pre_call_callback("glSecondaryColor3bvEXT", (void*)glSecondaryColor3bvEXT, 1, arg0);
     glad_glSecondaryColor3bvEXT(arg0);
    _post_call_callback("glSecondaryColor3bvEXT", (void*)glSecondaryColor3bvEXT, 1, arg0);

}
PFNGLSECONDARYCOLOR3BVEXTPROC glad_debug_glSecondaryColor3bvEXT = glad_debug_impl_glSecondaryColor3bvEXT;
PFNGLSECONDARYCOLOR3DEXTPROC glad_glSecondaryColor3dEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3dEXT(GLdouble arg0, GLdouble arg1, GLdouble arg2) {
    _pre_call_callback("glSecondaryColor3dEXT", (void*)glSecondaryColor3dEXT, 3, arg0, arg1, arg2);
     glad_glSecondaryColor3dEXT(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColor3dEXT", (void*)glSecondaryColor3dEXT, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLOR3DEXTPROC glad_debug_glSecondaryColor3dEXT = glad_debug_impl_glSecondaryColor3dEXT;
PFNGLSECONDARYCOLOR3DVEXTPROC glad_glSecondaryColor3dvEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3dvEXT(const GLdouble* arg0) {
    _pre_call_callback("glSecondaryColor3dvEXT", (void*)glSecondaryColor3dvEXT, 1, arg0);
     glad_glSecondaryColor3dvEXT(arg0);
    _post_call_callback("glSecondaryColor3dvEXT", (void*)glSecondaryColor3dvEXT, 1, arg0);

}
PFNGLSECONDARYCOLOR3DVEXTPROC glad_debug_glSecondaryColor3dvEXT = glad_debug_impl_glSecondaryColor3dvEXT;
PFNGLSECONDARYCOLOR3FEXTPROC glad_glSecondaryColor3fEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3fEXT(GLfloat arg0, GLfloat arg1, GLfloat arg2) {
    _pre_call_callback("glSecondaryColor3fEXT", (void*)glSecondaryColor3fEXT, 3, arg0, arg1, arg2);
     glad_glSecondaryColor3fEXT(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColor3fEXT", (void*)glSecondaryColor3fEXT, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLOR3FEXTPROC glad_debug_glSecondaryColor3fEXT = glad_debug_impl_glSecondaryColor3fEXT;
PFNGLSECONDARYCOLOR3FVEXTPROC glad_glSecondaryColor3fvEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3fvEXT(const GLfloat* arg0) {
    _pre_call_callback("glSecondaryColor3fvEXT", (void*)glSecondaryColor3fvEXT, 1, arg0);
     glad_glSecondaryColor3fvEXT(arg0);
    _post_call_callback("glSecondaryColor3fvEXT", (void*)glSecondaryColor3fvEXT, 1, arg0);

}
PFNGLSECONDARYCOLOR3FVEXTPROC glad_debug_glSecondaryColor3fvEXT = glad_debug_impl_glSecondaryColor3fvEXT;
PFNGLSECONDARYCOLOR3IEXTPROC glad_glSecondaryColor3iEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3iEXT(GLint arg0, GLint arg1, GLint arg2) {
    _pre_call_callback("glSecondaryColor3iEXT", (void*)glSecondaryColor3iEXT, 3, arg0, arg1, arg2);
     glad_glSecondaryColor3iEXT(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColor3iEXT", (void*)glSecondaryColor3iEXT, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLOR3IEXTPROC glad_debug_glSecondaryColor3iEXT = glad_debug_impl_glSecondaryColor3iEXT;
PFNGLSECONDARYCOLOR3IVEXTPROC glad_glSecondaryColor3ivEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3ivEXT(const GLint* arg0) {
    _pre_call_callback("glSecondaryColor3ivEXT", (void*)glSecondaryColor3ivEXT, 1, arg0);
     glad_glSecondaryColor3ivEXT(arg0);
    _post_call_callback("glSecondaryColor3ivEXT", (void*)glSecondaryColor3ivEXT, 1, arg0);

}
PFNGLSECONDARYCOLOR3IVEXTPROC glad_debug_glSecondaryColor3ivEXT = glad_debug_impl_glSecondaryColor3ivEXT;
PFNGLSECONDARYCOLOR3SEXTPROC glad_glSecondaryColor3sEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3sEXT(GLshort arg0, GLshort arg1, GLshort arg2) {
    _pre_call_callback("glSecondaryColor3sEXT", (void*)glSecondaryColor3sEXT, 3, arg0, arg1, arg2);
     glad_glSecondaryColor3sEXT(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColor3sEXT", (void*)glSecondaryColor3sEXT, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLOR3SEXTPROC glad_debug_glSecondaryColor3sEXT = glad_debug_impl_glSecondaryColor3sEXT;
PFNGLSECONDARYCOLOR3SVEXTPROC glad_glSecondaryColor3svEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3svEXT(const GLshort* arg0) {
    _pre_call_callback("glSecondaryColor3svEXT", (void*)glSecondaryColor3svEXT, 1, arg0);
     glad_glSecondaryColor3svEXT(arg0);
    _post_call_callback("glSecondaryColor3svEXT", (void*)glSecondaryColor3svEXT, 1, arg0);

}
PFNGLSECONDARYCOLOR3SVEXTPROC glad_debug_glSecondaryColor3svEXT = glad_debug_impl_glSecondaryColor3svEXT;
PFNGLSECONDARYCOLOR3UBEXTPROC glad_glSecondaryColor3ubEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3ubEXT(GLubyte arg0, GLubyte arg1, GLubyte arg2) {
    _pre_call_callback("glSecondaryColor3ubEXT", (void*)glSecondaryColor3ubEXT, 3, arg0, arg1, arg2);
     glad_glSecondaryColor3ubEXT(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColor3ubEXT", (void*)glSecondaryColor3ubEXT, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLOR3UBEXTPROC glad_debug_glSecondaryColor3ubEXT = glad_debug_impl_glSecondaryColor3ubEXT;
PFNGLSECONDARYCOLOR3UBVEXTPROC glad_glSecondaryColor3ubvEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3ubvEXT(const GLubyte* arg0) {
    _pre_call_callback("glSecondaryColor3ubvEXT", (void*)glSecondaryColor3ubvEXT, 1, arg0);
     glad_glSecondaryColor3ubvEXT(arg0);
    _post_call_callback("glSecondaryColor3ubvEXT", (void*)glSecondaryColor3ubvEXT, 1, arg0);

}
PFNGLSECONDARYCOLOR3UBVEXTPROC glad_debug_glSecondaryColor3ubvEXT = glad_debug_impl_glSecondaryColor3ubvEXT;
PFNGLSECONDARYCOLOR3UIEXTPROC glad_glSecondaryColor3uiEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3uiEXT(GLuint arg0, GLuint arg1, GLuint arg2) {
    _pre_call_callback("glSecondaryColor3uiEXT", (void*)glSecondaryColor3uiEXT, 3, arg0, arg1, arg2);
     glad_glSecondaryColor3uiEXT(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColor3uiEXT", (void*)glSecondaryColor3uiEXT, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLOR3UIEXTPROC glad_debug_glSecondaryColor3uiEXT = glad_debug_impl_glSecondaryColor3uiEXT;
PFNGLSECONDARYCOLOR3UIVEXTPROC glad_glSecondaryColor3uivEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3uivEXT(const GLuint* arg0) {
    _pre_call_callback("glSecondaryColor3uivEXT", (void*)glSecondaryColor3uivEXT, 1, arg0);
     glad_glSecondaryColor3uivEXT(arg0);
    _post_call_callback("glSecondaryColor3uivEXT", (void*)glSecondaryColor3uivEXT, 1, arg0);

}
PFNGLSECONDARYCOLOR3UIVEXTPROC glad_debug_glSecondaryColor3uivEXT = glad_debug_impl_glSecondaryColor3uivEXT;
PFNGLSECONDARYCOLOR3USEXTPROC glad_glSecondaryColor3usEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3usEXT(GLushort arg0, GLushort arg1, GLushort arg2) {
    _pre_call_callback("glSecondaryColor3usEXT", (void*)glSecondaryColor3usEXT, 3, arg0, arg1, arg2);
     glad_glSecondaryColor3usEXT(arg0, arg1, arg2);
    _post_call_callback("glSecondaryColor3usEXT", (void*)glSecondaryColor3usEXT, 3, arg0, arg1, arg2);

}
PFNGLSECONDARYCOLOR3USEXTPROC glad_debug_glSecondaryColor3usEXT = glad_debug_impl_glSecondaryColor3usEXT;
PFNGLSECONDARYCOLOR3USVEXTPROC glad_glSecondaryColor3usvEXT;
void APIENTRY glad_debug_impl_glSecondaryColor3usvEXT(const GLushort* arg0) {
    _pre_call_callback("glSecondaryColor3usvEXT", (void*)glSecondaryColor3usvEXT, 1, arg0);
     glad_glSecondaryColor3usvEXT(arg0);
    _post_call_callback("glSecondaryColor3usvEXT", (void*)glSecondaryColor3usvEXT, 1, arg0);

}
PFNGLSECONDARYCOLOR3USVEXTPROC glad_debug_glSecondaryColor3usvEXT = glad_debug_impl_glSecondaryColor3usvEXT;
PFNGLSECONDARYCOLORPOINTEREXTPROC glad_glSecondaryColorPointerEXT;
void APIENTRY glad_debug_impl_glSecondaryColorPointerEXT(GLint arg0, GLenum arg1, GLsizei arg2, const void* arg3) {
    _pre_call_callback("glSecondaryColorPointerEXT", (void*)glSecondaryColorPointerEXT, 4, arg0, arg1, arg2, arg3);
     glad_glSecondaryColorPointerEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glSecondaryColorPointerEXT", (void*)glSecondaryColorPointerEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLSECONDARYCOLORPOINTEREXTPROC glad_debug_glSecondaryColorPointerEXT = glad_debug_impl_glSecondaryColorPointerEXT;
PFNGLNEWOBJECTBUFFERATIPROC glad_glNewObjectBufferATI;
GLuint APIENTRY glad_debug_impl_glNewObjectBufferATI(GLsizei arg0, const void* arg1, GLenum arg2) {
    GLuint ret;
    _pre_call_callback("glNewObjectBufferATI", (void*)glNewObjectBufferATI, 3, arg0, arg1, arg2);
    ret =  glad_glNewObjectBufferATI(arg0, arg1, arg2);
    _post_call_callback("glNewObjectBufferATI", (void*)glNewObjectBufferATI, 3, arg0, arg1, arg2);
    return ret;
}
PFNGLNEWOBJECTBUFFERATIPROC glad_debug_glNewObjectBufferATI = glad_debug_impl_glNewObjectBufferATI;
PFNGLISOBJECTBUFFERATIPROC glad_glIsObjectBufferATI;
GLboolean APIENTRY glad_debug_impl_glIsObjectBufferATI(GLuint arg0) {
    GLboolean ret;
    _pre_call_callback("glIsObjectBufferATI", (void*)glIsObjectBufferATI, 1, arg0);
    ret =  glad_glIsObjectBufferATI(arg0);
    _post_call_callback("glIsObjectBufferATI", (void*)glIsObjectBufferATI, 1, arg0);
    return ret;
}
PFNGLISOBJECTBUFFERATIPROC glad_debug_glIsObjectBufferATI = glad_debug_impl_glIsObjectBufferATI;
PFNGLUPDATEOBJECTBUFFERATIPROC glad_glUpdateObjectBufferATI;
void APIENTRY glad_debug_impl_glUpdateObjectBufferATI(GLuint arg0, GLuint arg1, GLsizei arg2, const void* arg3, GLenum arg4) {
    _pre_call_callback("glUpdateObjectBufferATI", (void*)glUpdateObjectBufferATI, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glUpdateObjectBufferATI(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glUpdateObjectBufferATI", (void*)glUpdateObjectBufferATI, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLUPDATEOBJECTBUFFERATIPROC glad_debug_glUpdateObjectBufferATI = glad_debug_impl_glUpdateObjectBufferATI;
PFNGLGETOBJECTBUFFERFVATIPROC glad_glGetObjectBufferfvATI;
void APIENTRY glad_debug_impl_glGetObjectBufferfvATI(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetObjectBufferfvATI", (void*)glGetObjectBufferfvATI, 3, arg0, arg1, arg2);
     glad_glGetObjectBufferfvATI(arg0, arg1, arg2);
    _post_call_callback("glGetObjectBufferfvATI", (void*)glGetObjectBufferfvATI, 3, arg0, arg1, arg2);

}
PFNGLGETOBJECTBUFFERFVATIPROC glad_debug_glGetObjectBufferfvATI = glad_debug_impl_glGetObjectBufferfvATI;
PFNGLGETOBJECTBUFFERIVATIPROC glad_glGetObjectBufferivATI;
void APIENTRY glad_debug_impl_glGetObjectBufferivATI(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetObjectBufferivATI", (void*)glGetObjectBufferivATI, 3, arg0, arg1, arg2);
     glad_glGetObjectBufferivATI(arg0, arg1, arg2);
    _post_call_callback("glGetObjectBufferivATI", (void*)glGetObjectBufferivATI, 3, arg0, arg1, arg2);

}
PFNGLGETOBJECTBUFFERIVATIPROC glad_debug_glGetObjectBufferivATI = glad_debug_impl_glGetObjectBufferivATI;
PFNGLFREEOBJECTBUFFERATIPROC glad_glFreeObjectBufferATI;
void APIENTRY glad_debug_impl_glFreeObjectBufferATI(GLuint arg0) {
    _pre_call_callback("glFreeObjectBufferATI", (void*)glFreeObjectBufferATI, 1, arg0);
     glad_glFreeObjectBufferATI(arg0);
    _post_call_callback("glFreeObjectBufferATI", (void*)glFreeObjectBufferATI, 1, arg0);

}
PFNGLFREEOBJECTBUFFERATIPROC glad_debug_glFreeObjectBufferATI = glad_debug_impl_glFreeObjectBufferATI;
PFNGLARRAYOBJECTATIPROC glad_glArrayObjectATI;
void APIENTRY glad_debug_impl_glArrayObjectATI(GLenum arg0, GLint arg1, GLenum arg2, GLsizei arg3, GLuint arg4, GLuint arg5) {
    _pre_call_callback("glArrayObjectATI", (void*)glArrayObjectATI, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glArrayObjectATI(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glArrayObjectATI", (void*)glArrayObjectATI, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLARRAYOBJECTATIPROC glad_debug_glArrayObjectATI = glad_debug_impl_glArrayObjectATI;
PFNGLGETARRAYOBJECTFVATIPROC glad_glGetArrayObjectfvATI;
void APIENTRY glad_debug_impl_glGetArrayObjectfvATI(GLenum arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetArrayObjectfvATI", (void*)glGetArrayObjectfvATI, 3, arg0, arg1, arg2);
     glad_glGetArrayObjectfvATI(arg0, arg1, arg2);
    _post_call_callback("glGetArrayObjectfvATI", (void*)glGetArrayObjectfvATI, 3, arg0, arg1, arg2);

}
PFNGLGETARRAYOBJECTFVATIPROC glad_debug_glGetArrayObjectfvATI = glad_debug_impl_glGetArrayObjectfvATI;
PFNGLGETARRAYOBJECTIVATIPROC glad_glGetArrayObjectivATI;
void APIENTRY glad_debug_impl_glGetArrayObjectivATI(GLenum arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetArrayObjectivATI", (void*)glGetArrayObjectivATI, 3, arg0, arg1, arg2);
     glad_glGetArrayObjectivATI(arg0, arg1, arg2);
    _post_call_callback("glGetArrayObjectivATI", (void*)glGetArrayObjectivATI, 3, arg0, arg1, arg2);

}
PFNGLGETARRAYOBJECTIVATIPROC glad_debug_glGetArrayObjectivATI = glad_debug_impl_glGetArrayObjectivATI;
PFNGLVARIANTARRAYOBJECTATIPROC glad_glVariantArrayObjectATI;
void APIENTRY glad_debug_impl_glVariantArrayObjectATI(GLuint arg0, GLenum arg1, GLsizei arg2, GLuint arg3, GLuint arg4) {
    _pre_call_callback("glVariantArrayObjectATI", (void*)glVariantArrayObjectATI, 5, arg0, arg1, arg2, arg3, arg4);
     glad_glVariantArrayObjectATI(arg0, arg1, arg2, arg3, arg4);
    _post_call_callback("glVariantArrayObjectATI", (void*)glVariantArrayObjectATI, 5, arg0, arg1, arg2, arg3, arg4);

}
PFNGLVARIANTARRAYOBJECTATIPROC glad_debug_glVariantArrayObjectATI = glad_debug_impl_glVariantArrayObjectATI;
PFNGLGETVARIANTARRAYOBJECTFVATIPROC glad_glGetVariantArrayObjectfvATI;
void APIENTRY glad_debug_impl_glGetVariantArrayObjectfvATI(GLuint arg0, GLenum arg1, GLfloat* arg2) {
    _pre_call_callback("glGetVariantArrayObjectfvATI", (void*)glGetVariantArrayObjectfvATI, 3, arg0, arg1, arg2);
     glad_glGetVariantArrayObjectfvATI(arg0, arg1, arg2);
    _post_call_callback("glGetVariantArrayObjectfvATI", (void*)glGetVariantArrayObjectfvATI, 3, arg0, arg1, arg2);

}
PFNGLGETVARIANTARRAYOBJECTFVATIPROC glad_debug_glGetVariantArrayObjectfvATI = glad_debug_impl_glGetVariantArrayObjectfvATI;
PFNGLGETVARIANTARRAYOBJECTIVATIPROC glad_glGetVariantArrayObjectivATI;
void APIENTRY glad_debug_impl_glGetVariantArrayObjectivATI(GLuint arg0, GLenum arg1, GLint* arg2) {
    _pre_call_callback("glGetVariantArrayObjectivATI", (void*)glGetVariantArrayObjectivATI, 3, arg0, arg1, arg2);
     glad_glGetVariantArrayObjectivATI(arg0, arg1, arg2);
    _post_call_callback("glGetVariantArrayObjectivATI", (void*)glGetVariantArrayObjectivATI, 3, arg0, arg1, arg2);

}
PFNGLGETVARIANTARRAYOBJECTIVATIPROC glad_debug_glGetVariantArrayObjectivATI = glad_debug_impl_glGetVariantArrayObjectivATI;
PFNGLMAXSHADERCOMPILERTHREADSARBPROC glad_glMaxShaderCompilerThreadsARB;
void APIENTRY glad_debug_impl_glMaxShaderCompilerThreadsARB(GLuint arg0) {
    _pre_call_callback("glMaxShaderCompilerThreadsARB", (void*)glMaxShaderCompilerThreadsARB, 1, arg0);
     glad_glMaxShaderCompilerThreadsARB(arg0);
    _post_call_callback("glMaxShaderCompilerThreadsARB", (void*)glMaxShaderCompilerThreadsARB, 1, arg0);

}
PFNGLMAXSHADERCOMPILERTHREADSARBPROC glad_debug_glMaxShaderCompilerThreadsARB = glad_debug_impl_glMaxShaderCompilerThreadsARB;
PFNGLTEXPAGECOMMITMENTARBPROC glad_glTexPageCommitmentARB;
void APIENTRY glad_debug_impl_glTexPageCommitmentARB(GLenum arg0, GLint arg1, GLint arg2, GLint arg3, GLint arg4, GLsizei arg5, GLsizei arg6, GLsizei arg7, GLboolean arg8) {
    _pre_call_callback("glTexPageCommitmentARB", (void*)glTexPageCommitmentARB, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
     glad_glTexPageCommitmentARB(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    _post_call_callback("glTexPageCommitmentARB", (void*)glTexPageCommitmentARB, 9, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

}
PFNGLTEXPAGECOMMITMENTARBPROC glad_debug_glTexPageCommitmentARB = glad_debug_impl_glTexPageCommitmentARB;
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_glFramebufferSampleLocationsfvARB;
void APIENTRY glad_debug_impl_glFramebufferSampleLocationsfvARB(GLenum arg0, GLuint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glFramebufferSampleLocationsfvARB", (void*)glFramebufferSampleLocationsfvARB, 4, arg0, arg1, arg2, arg3);
     glad_glFramebufferSampleLocationsfvARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glFramebufferSampleLocationsfvARB", (void*)glFramebufferSampleLocationsfvARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_debug_glFramebufferSampleLocationsfvARB = glad_debug_impl_glFramebufferSampleLocationsfvARB;
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_glNamedFramebufferSampleLocationsfvARB;
void APIENTRY glad_debug_impl_glNamedFramebufferSampleLocationsfvARB(GLuint arg0, GLuint arg1, GLsizei arg2, const GLfloat* arg3) {
    _pre_call_callback("glNamedFramebufferSampleLocationsfvARB", (void*)glNamedFramebufferSampleLocationsfvARB, 4, arg0, arg1, arg2, arg3);
     glad_glNamedFramebufferSampleLocationsfvARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedFramebufferSampleLocationsfvARB", (void*)glNamedFramebufferSampleLocationsfvARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC glad_debug_glNamedFramebufferSampleLocationsfvARB = glad_debug_impl_glNamedFramebufferSampleLocationsfvARB;
PFNGLEVALUATEDEPTHVALUESARBPROC glad_glEvaluateDepthValuesARB;
void APIENTRY glad_debug_impl_glEvaluateDepthValuesARB() {
    _pre_call_callback("glEvaluateDepthValuesARB", (void*)glEvaluateDepthValuesARB, 0);
     glad_glEvaluateDepthValuesARB();
    _post_call_callback("glEvaluateDepthValuesARB", (void*)glEvaluateDepthValuesARB, 0);

}
PFNGLEVALUATEDEPTHVALUESARBPROC glad_debug_glEvaluateDepthValuesARB = glad_debug_impl_glEvaluateDepthValuesARB;
PFNGLBUFFERPAGECOMMITMENTARBPROC glad_glBufferPageCommitmentARB;
void APIENTRY glad_debug_impl_glBufferPageCommitmentARB(GLenum arg0, GLintptr arg1, GLsizeiptr arg2, GLboolean arg3) {
    _pre_call_callback("glBufferPageCommitmentARB", (void*)glBufferPageCommitmentARB, 4, arg0, arg1, arg2, arg3);
     glad_glBufferPageCommitmentARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glBufferPageCommitmentARB", (void*)glBufferPageCommitmentARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLBUFFERPAGECOMMITMENTARBPROC glad_debug_glBufferPageCommitmentARB = glad_debug_impl_glBufferPageCommitmentARB;
PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glad_glNamedBufferPageCommitmentEXT;
void APIENTRY glad_debug_impl_glNamedBufferPageCommitmentEXT(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, GLboolean arg3) {
    _pre_call_callback("glNamedBufferPageCommitmentEXT", (void*)glNamedBufferPageCommitmentEXT, 4, arg0, arg1, arg2, arg3);
     glad_glNamedBufferPageCommitmentEXT(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedBufferPageCommitmentEXT", (void*)glNamedBufferPageCommitmentEXT, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC glad_debug_glNamedBufferPageCommitmentEXT = glad_debug_impl_glNamedBufferPageCommitmentEXT;
PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glad_glNamedBufferPageCommitmentARB;
void APIENTRY glad_debug_impl_glNamedBufferPageCommitmentARB(GLuint arg0, GLintptr arg1, GLsizeiptr arg2, GLboolean arg3) {
    _pre_call_callback("glNamedBufferPageCommitmentARB", (void*)glNamedBufferPageCommitmentARB, 4, arg0, arg1, arg2, arg3);
     glad_glNamedBufferPageCommitmentARB(arg0, arg1, arg2, arg3);
    _post_call_callback("glNamedBufferPageCommitmentARB", (void*)glNamedBufferPageCommitmentARB, 4, arg0, arg1, arg2, arg3);

}
PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC glad_debug_glNamedBufferPageCommitmentARB = glad_debug_impl_glNamedBufferPageCommitmentARB;
PFNGLDRAWRANGEELEMENTSEXTPROC glad_glDrawRangeElementsEXT;
void APIENTRY glad_debug_impl_glDrawRangeElementsEXT(GLenum arg0, GLuint arg1, GLuint arg2, GLsizei arg3, GLenum arg4, const void* arg5) {
    _pre_call_callback("glDrawRangeElementsEXT", (void*)glDrawRangeElementsEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);
     glad_glDrawRangeElementsEXT(arg0, arg1, arg2, arg3, arg4, arg5);
    _post_call_callback("glDrawRangeElementsEXT", (void*)glDrawRangeElementsEXT, 6, arg0, arg1, arg2, arg3, arg4, arg5);

}
PFNGLDRAWRANGEELEMENTSEXTPROC glad_debug_glDrawRangeElementsEXT = glad_debug_impl_glDrawRangeElementsEXT;
static void load_GL_VERSION_1_0(GLADloadproc load) {
	if(!GLAD_GL_VERSION_1_0) return;
	glad_glCullFace = (PFNGLCULLFACEPROC)load("glCullFace");
	glad_glFrontFace = (PFNGLFRONTFACEPROC)load("glFrontFace");
	glad_glHint = (PFNGLHINTPROC)load("glHint");
	glad_glLineWidth = (PFNGLLINEWIDTHPROC)load("glLineWidth");
	glad_glPointSize = (PFNGLPOINTSIZEPROC)load("glPointSize");
	glad_glPolygonMode = (PFNGLPOLYGONMODEPROC)load("glPolygonMode");
	glad_glScissor = (PFNGLSCISSORPROC)load("glScissor");
	glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC)load("glTexParameterf");
	glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)load("glTexParameterfv");
	glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC)load("glTexParameteri");
	glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)load("glTexParameteriv");
	glad_glTexImage1D = (PFNGLTEXIMAGE1DPROC)load("glTexImage1D");
	glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC)load("glTexImage2D");
	glad_glDrawBuffer = (PFNGLDRAWBUFFERPROC)load("glDrawBuffer");
	glad_glClear = (PFNGLCLEARPROC)load("glClear");
	glad_glClearColor = (PFNGLCLEARCOLORPROC)load("glClearColor");
	glad_glClearStencil = (PFNGLCLEARSTENCILPROC)load("glClearStencil");
	glad_glClearDepth = (PFNGLCLEARDEPTHPROC)load("glClearDepth");
	glad_glStencilMask = (PFNGLSTENCILMASKPROC)load("glStencilMask");
	glad_glColorMask = (PFNGLCOLORMASKPROC)load("glColorMask");
	glad_glDepthMask = (PFNGLDEPTHMASKPROC)load("glDepthMask");
	glad_glDisable = (PFNGLDISABLEPROC)load("glDisable");
	glad_glEnable = (PFNGLENABLEPROC)load("glEnable");
	glad_glFinish = (PFNGLFINISHPROC)load("glFinish");
	glad_glFlush = (PFNGLFLUSHPROC)load("glFlush");
	glad_glBlendFunc = (PFNGLBLENDFUNCPROC)load("glBlendFunc");
	glad_glLogicOp = (PFNGLLOGICOPPROC)load("glLogicOp");
	glad_glStencilFunc = (PFNGLSTENCILFUNCPROC)load("glStencilFunc");
	glad_glStencilOp = (PFNGLSTENCILOPPROC)load("glStencilOp");
	glad_glDepthFunc = (PFNGLDEPTHFUNCPROC)load("glDepthFunc");
	glad_glPixelStoref = (PFNGLPIXELSTOREFPROC)load("glPixelStoref");
	glad_glPixelStorei = (PFNGLPIXELSTOREIPROC)load("glPixelStorei");
	glad_glReadBuffer = (PFNGLREADBUFFERPROC)load("glReadBuffer");
	glad_glReadPixels = (PFNGLREADPIXELSPROC)load("glReadPixels");
	glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC)load("glGetBooleanv");
	glad_glGetDoublev = (PFNGLGETDOUBLEVPROC)load("glGetDoublev");
	glad_glGetError = (PFNGLGETERRORPROC)load("glGetError");
	glad_glGetFloatv = (PFNGLGETFLOATVPROC)load("glGetFloatv");
	glad_glGetIntegerv = (PFNGLGETINTEGERVPROC)load("glGetIntegerv");
	glad_glGetString = (PFNGLGETSTRINGPROC)load("glGetString");
	glad_glGetTexImage = (PFNGLGETTEXIMAGEPROC)load("glGetTexImage");
	glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)load("glGetTexParameterfv");
	glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)load("glGetTexParameteriv");
	glad_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)load("glGetTexLevelParameterfv");
	glad_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)load("glGetTexLevelParameteriv");
	glad_glIsEnabled = (PFNGLISENABLEDPROC)load("glIsEnabled");
	glad_glDepthRange = (PFNGLDEPTHRANGEPROC)load("glDepthRange");
	glad_glViewport = (PFNGLVIEWPORTPROC)load("glViewport");
}
static void load_GL_VERSION_1_1(GLADloadproc load) {
	if(!GLAD_GL_VERSION_1_1) return;
	glad_glDrawArrays = (PFNGLDRAWARRAYSPROC)load("glDrawArrays");
	glad_glDrawElements = (PFNGLDRAWELEMENTSPROC)load("glDrawElements");
	glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)load("glPolygonOffset");
	glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)load("glCopyTexImage1D");
	glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)load("glCopyTexImage2D");
	glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)load("glCopyTexSubImage1D");
	glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)load("glCopyTexSubImage2D");
	glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)load("glTexSubImage1D");
	glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)load("glTexSubImage2D");
	glad_glBindTexture = (PFNGLBINDTEXTUREPROC)load("glBindTexture");
	glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC)load("glDeleteTextures");
	glad_glGenTextures = (PFNGLGENTEXTURESPROC)load("glGenTextures");
	glad_glIsTexture = (PFNGLISTEXTUREPROC)load("glIsTexture");
}
static void load_GL_VERSION_1_2(GLADloadproc load) {
	if(!GLAD_GL_VERSION_1_2) return;
	glad_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)load("glDrawRangeElements");
	glad_glTexImage3D = (PFNGLTEXIMAGE3DPROC)load("glTexImage3D");
	glad_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)load("glTexSubImage3D");
	glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)load("glCopyTexSubImage3D");
}
static void load_GL_VERSION_1_3(GLADloadproc load) {
	if(!GLAD_GL_VERSION_1_3) return;
	glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC)load("glActiveTexture");
	glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)load("glSampleCoverage");
	glad_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)load("glCompressedTexImage3D");
	glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)load("glCompressedTexImage2D");
	glad_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)load("glCompressedTexImage1D");
	glad_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)load("glCompressedTexSubImage3D");
	glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)load("glCompressedTexSubImage2D");
	glad_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)load("glCompressedTexSubImage1D");
	glad_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)load("glGetCompressedTexImage");
}
static void load_GL_VERSION_1_4(GLADloadproc load) {
	if(!GLAD_GL_VERSION_1_4) return;
	glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)load("glBlendFuncSeparate");
	glad_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)load("glMultiDrawArrays");
	glad_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)load("glMultiDrawElements");
	glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)load("glPointParameterf");
	glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)load("glPointParameterfv");
	glad_glPointParameteri = (PFNGLPOINTPARAMETERIPROC)load("glPointParameteri");
	glad_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)load("glPointParameteriv");
	glad_glBlendColor = (PFNGLBLENDCOLORPROC)load("glBlendColor");
	glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC)load("glBlendEquation");
}
static void load_GL_VERSION_1_5(GLADloadproc load) {
	if(!GLAD_GL_VERSION_1_5) return;
	glad_glGenQueries = (PFNGLGENQUERIESPROC)load("glGenQueries");
	glad_glDeleteQueries = (PFNGLDELETEQUERIESPROC)load("glDeleteQueries");
	glad_glIsQuery = (PFNGLISQUERYPROC)load("glIsQuery");
	glad_glBeginQuery = (PFNGLBEGINQUERYPROC)load("glBeginQuery");
	glad_glEndQuery = (PFNGLENDQUERYPROC)load("glEndQuery");
	glad_glGetQueryiv = (PFNGLGETQUERYIVPROC)load("glGetQueryiv");
	glad_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)load("glGetQueryObjectiv");
	glad_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)load("glGetQueryObjectuiv");
	glad_glBindBuffer = (PFNGLBINDBUFFERPROC)load("glBindBuffer");
	glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)load("glDeleteBuffers");
	glad_glGenBuffers = (PFNGLGENBUFFERSPROC)load("glGenBuffers");
	glad_glIsBuffer = (PFNGLISBUFFERPROC)load("glIsBuffer");
	glad_glBufferData = (PFNGLBUFFERDATAPROC)load("glBufferData");
	glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC)load("glBufferSubData");
	glad_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)load("glGetBufferSubData");
	glad_glMapBuffer = (PFNGLMAPBUFFERPROC)load("glMapBuffer");
	glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)load("glUnmapBuffer");
	glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)load("glGetBufferParameteriv");
	glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)load("glGetBufferPointerv");
}
static void load_GL_VERSION_2_0(GLADloadproc load) {
	if(!GLAD_GL_VERSION_2_0) return;
	glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)load("glBlendEquationSeparate");
	glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)load("glDrawBuffers");
	glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)load("glStencilOpSeparate");
	glad_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)load("glStencilFuncSeparate");
	glad_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)load("glStencilMaskSeparate");
	glad_glAttachShader = (PFNGLATTACHSHADERPROC)load("glAttachShader");
	glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)load("glBindAttribLocation");
	glad_glCompileShader = (PFNGLCOMPILESHADERPROC)load("glCompileShader");
	glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC)load("glCreateProgram");
	glad_glCreateShader = (PFNGLCREATESHADERPROC)load("glCreateShader");
	glad_glDeleteProgram = (PFNGLDELETEPROGRAMPROC)load("glDeleteProgram");
	glad_glDeleteShader = (PFNGLDELETESHADERPROC)load("glDeleteShader");
	glad_glDetachShader = (PFNGLDETACHSHADERPROC)load("glDetachShader");
	glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)load("glDisableVertexAttribArray");
	glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)load("glEnableVertexAttribArray");
	glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)load("glGetActiveAttrib");
	glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)load("glGetActiveUniform");
	glad_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)load("glGetAttachedShaders");
	glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)load("glGetAttribLocation");
	glad_glGetProgramiv = (PFNGLGETPROGRAMIVPROC)load("glGetProgramiv");
	glad_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)load("glGetProgramInfoLog");
	glad_glGetShaderiv = (PFNGLGETSHADERIVPROC)load("glGetShaderiv");
	glad_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)load("glGetShaderInfoLog");
	glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)load("glGetShaderSource");
	glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)load("glGetUniformLocation");
	glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC)load("glGetUniformfv");
	glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC)load("glGetUniformiv");
	glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)load("glGetVertexAttribdv");
	glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)load("glGetVertexAttribfv");
	glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)load("glGetVertexAttribiv");
	glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)load("glGetVertexAttribPointerv");
	glad_glIsProgram = (PFNGLISPROGRAMPROC)load("glIsProgram");
	glad_glIsShader = (PFNGLISSHADERPROC)load("glIsShader");
	glad_glLinkProgram = (PFNGLLINKPROGRAMPROC)load("glLinkProgram");
	glad_glShaderSource = (PFNGLSHADERSOURCEPROC)load("glShaderSource");
	glad_glUseProgram = (PFNGLUSEPROGRAMPROC)load("glUseProgram");
	glad_glUniform1f = (PFNGLUNIFORM1FPROC)load("glUniform1f");
	glad_glUniform2f = (PFNGLUNIFORM2FPROC)load("glUniform2f");
	glad_glUniform3f = (PFNGLUNIFORM3FPROC)load("glUniform3f");
	glad_glUniform4f = (PFNGLUNIFORM4FPROC)load("glUniform4f");
	glad_glUniform1i = (PFNGLUNIFORM1IPROC)load("glUniform1i");
	glad_glUniform2i = (PFNGLUNIFORM2IPROC)load("glUniform2i");
	glad_glUniform3i = (PFNGLUNIFORM3IPROC)load("glUniform3i");
	glad_glUniform4i = (PFNGLUNIFORM4IPROC)load("glUniform4i");
	glad_glUniform1fv = (PFNGLUNIFORM1FVPROC)load("glUniform1fv");
	glad_glUniform2fv = (PFNGLUNIFORM2FVPROC)load("glUniform2fv");
	glad_glUniform3fv = (PFNGLUNIFORM3FVPROC)load("glUniform3fv");
	glad_glUniform4fv = (PFNGLUNIFORM4FVPROC)load("glUniform4fv");
	glad_glUniform1iv = (PFNGLUNIFORM1IVPROC)load("glUniform1iv");
	glad_glUniform2iv = (PFNGLUNIFORM2IVPROC)load("glUniform2iv");
	glad_glUniform3iv = (PFNGLUNIFORM3IVPROC)load("glUniform3iv");
	glad_glUniform4iv = (PFNGLUNIFORM4IVPROC)load("glUniform4iv");
	glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)load("glUniformMatrix2fv");
	glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)load("glUniformMatrix3fv");
	glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)load("glUniformMatrix4fv");
	glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)load("glValidateProgram");
	glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)load("glVertexAttrib1d");
	glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)load("glVertexAttrib1dv");
	glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)load("glVertexAttrib1f");
	glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)load("glVertexAttrib1fv");
	glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)load("glVertexAttrib1s");
	glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)load("glVertexAttrib1sv");
	glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)load("glVertexAttrib2d");
	glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)load("glVertexAttrib2dv");
	glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)load("glVertexAttrib2f");
	glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)load("glVertexAttrib2fv");
	glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)load("glVertexAttrib2s");
	glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)load("glVertexAttrib2sv");
	glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)load("glVertexAttrib3d");
	glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)load("glVertexAttrib3dv");
	glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)load("glVertexAttrib3f");
	glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)load("glVertexAttrib3fv");
	glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)load("glVertexAttrib3s");
	glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)load("glVertexAttrib3sv");
	glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)load("glVertexAttrib4Nbv");
	glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)load("glVertexAttrib4Niv");
	glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)load("glVertexAttrib4Nsv");
	glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)load("glVertexAttrib4Nub");
	glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)load("glVertexAttrib4Nubv");
	glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)load("glVertexAttrib4Nuiv");
	glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)load("glVertexAttrib4Nusv");
	glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)load("glVertexAttrib4bv");
	glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)load("glVertexAttrib4d");
	glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)load("glVertexAttrib4dv");
	glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)load("glVertexAttrib4f");
	glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)load("glVertexAttrib4fv");
	glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)load("glVertexAttrib4iv");
	glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)load("glVertexAttrib4s");
	glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)load("glVertexAttrib4sv");
	glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)load("glVertexAttrib4ubv");
	glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)load("glVertexAttrib4uiv");
	glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)load("glVertexAttrib4usv");
	glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)load("glVertexAttribPointer");
}
static void load_GL_VERSION_2_1(GLADloadproc load) {
	if(!GLAD_GL_VERSION_2_1) return;
	glad_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)load("glUniformMatrix2x3fv");
	glad_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)load("glUniformMatrix3x2fv");
	glad_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)load("glUniformMatrix2x4fv");
	glad_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)load("glUniformMatrix4x2fv");
	glad_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)load("glUniformMatrix3x4fv");
	glad_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)load("glUniformMatrix4x3fv");
}
static void load_GL_VERSION_3_0(GLADloadproc load) {
	if(!GLAD_GL_VERSION_3_0) return;
	glad_glColorMaski = (PFNGLCOLORMASKIPROC)load("glColorMaski");
	glad_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)load("glGetBooleani_v");
	glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)load("glGetIntegeri_v");
	glad_glEnablei = (PFNGLENABLEIPROC)load("glEnablei");
	glad_glDisablei = (PFNGLDISABLEIPROC)load("glDisablei");
	glad_glIsEnabledi = (PFNGLISENABLEDIPROC)load("glIsEnabledi");
	glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)load("glBeginTransformFeedback");
	glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)load("glEndTransformFeedback");
	glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)load("glBindBufferRange");
	glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)load("glBindBufferBase");
	glad_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)load("glTransformFeedbackVaryings");
	glad_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)load("glGetTransformFeedbackVarying");
	glad_glClampColor = (PFNGLCLAMPCOLORPROC)load("glClampColor");
	glad_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)load("glBeginConditionalRender");
	glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)load("glEndConditionalRender");
	glad_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)load("glVertexAttribIPointer");
	glad_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)load("glGetVertexAttribIiv");
	glad_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)load("glGetVertexAttribIuiv");
	glad_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)load("glVertexAttribI1i");
	glad_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)load("glVertexAttribI2i");
	glad_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)load("glVertexAttribI3i");
	glad_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)load("glVertexAttribI4i");
	glad_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)load("glVertexAttribI1ui");
	glad_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)load("glVertexAttribI2ui");
	glad_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)load("glVertexAttribI3ui");
	glad_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)load("glVertexAttribI4ui");
	glad_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)load("glVertexAttribI1iv");
	glad_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)load("glVertexAttribI2iv");
	glad_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)load("glVertexAttribI3iv");
	glad_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)load("glVertexAttribI4iv");
	glad_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)load("glVertexAttribI1uiv");
	glad_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)load("glVertexAttribI2uiv");
	glad_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)load("glVertexAttribI3uiv");
	glad_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)load("glVertexAttribI4uiv");
	glad_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)load("glVertexAttribI4bv");
	glad_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)load("glVertexAttribI4sv");
	glad_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)load("glVertexAttribI4ubv");
	glad_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)load("glVertexAttribI4usv");
	glad_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)load("glGetUniformuiv");
	glad_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)load("glBindFragDataLocation");
	glad_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)load("glGetFragDataLocation");
	glad_glUniform1ui = (PFNGLUNIFORM1UIPROC)load("glUniform1ui");
	glad_glUniform2ui = (PFNGLUNIFORM2UIPROC)load("glUniform2ui");
	glad_glUniform3ui = (PFNGLUNIFORM3UIPROC)load("glUniform3ui");
	glad_glUniform4ui = (PFNGLUNIFORM4UIPROC)load("glUniform4ui");
	glad_glUniform1uiv = (PFNGLUNIFORM1UIVPROC)load("glUniform1uiv");
	glad_glUniform2uiv = (PFNGLUNIFORM2UIVPROC)load("glUniform2uiv");
	glad_glUniform3uiv = (PFNGLUNIFORM3UIVPROC)load("glUniform3uiv");
	glad_glUniform4uiv = (PFNGLUNIFORM4UIVPROC)load("glUniform4uiv");
	glad_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)load("glTexParameterIiv");
	glad_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)load("glTexParameterIuiv");
	glad_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)load("glGetTexParameterIiv");
	glad_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)load("glGetTexParameterIuiv");
	glad_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)load("glClearBufferiv");
	glad_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)load("glClearBufferuiv");
	glad_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)load("glClearBufferfv");
	glad_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)load("glClearBufferfi");
	glad_glGetStringi = (PFNGLGETSTRINGIPROC)load("glGetStringi");
	glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)load("glIsRenderbuffer");
	glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)load("glBindRenderbuffer");
	glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)load("glDeleteRenderbuffers");
	glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)load("glGenRenderbuffers");
	glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)load("glRenderbufferStorage");
	glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)load("glGetRenderbufferParameteriv");
	glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)load("glIsFramebuffer");
	glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)load("glBindFramebuffer");
	glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)load("glDeleteFramebuffers");
	glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)load("glGenFramebuffers");
	glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)load("glCheckFramebufferStatus");
	glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)load("glFramebufferTexture1D");
	glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)load("glFramebufferTexture2D");
	glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)load("glFramebufferTexture3D");
	glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)load("glFramebufferRenderbuffer");
	glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)load("glGetFramebufferAttachmentParameteriv");
	glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)load("glGenerateMipmap");
	glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)load("glBlitFramebuffer");
	glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)load("glRenderbufferStorageMultisample");
	glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)load("glFramebufferTextureLayer");
	glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)load("glMapBufferRange");
	glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)load("glFlushMappedBufferRange");
	glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)load("glBindVertexArray");
	glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)load("glDeleteVertexArrays");
	glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)load("glGenVertexArrays");
	glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)load("glIsVertexArray");
}
static void load_GL_VERSION_3_1(GLADloadproc load) {
	if(!GLAD_GL_VERSION_3_1) return;
	glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)load("glDrawArraysInstanced");
	glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)load("glDrawElementsInstanced");
	glad_glTexBuffer = (PFNGLTEXBUFFERPROC)load("glTexBuffer");
	glad_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)load("glPrimitiveRestartIndex");
	glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)load("glCopyBufferSubData");
	glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)load("glGetUniformIndices");
	glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)load("glGetActiveUniformsiv");
	glad_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)load("glGetActiveUniformName");
	glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)load("glGetUniformBlockIndex");
	glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)load("glGetActiveUniformBlockiv");
	glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)load("glGetActiveUniformBlockName");
	glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)load("glUniformBlockBinding");
	glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)load("glBindBufferRange");
	glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)load("glBindBufferBase");
	glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)load("glGetIntegeri_v");
}
static void load_GL_VERSION_3_2(GLADloadproc load) {
	if(!GLAD_GL_VERSION_3_2) return;
	glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)load("glDrawElementsBaseVertex");
	glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)load("glDrawRangeElementsBaseVertex");
	glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)load("glDrawElementsInstancedBaseVertex");
	glad_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)load("glMultiDrawElementsBaseVertex");
	glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)load("glProvokingVertex");
	glad_glFenceSync = (PFNGLFENCESYNCPROC)load("glFenceSync");
	glad_glIsSync = (PFNGLISSYNCPROC)load("glIsSync");
	glad_glDeleteSync = (PFNGLDELETESYNCPROC)load("glDeleteSync");
	glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)load("glClientWaitSync");
	glad_glWaitSync = (PFNGLWAITSYNCPROC)load("glWaitSync");
	glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC)load("glGetInteger64v");
	glad_glGetSynciv = (PFNGLGETSYNCIVPROC)load("glGetSynciv");
	glad_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)load("glGetInteger64i_v");
	glad_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)load("glGetBufferParameteri64v");
	glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)load("glFramebufferTexture");
	glad_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)load("glTexImage2DMultisample");
	glad_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)load("glTexImage3DMultisample");
	glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)load("glGetMultisamplefv");
	glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC)load("glSampleMaski");
}
static void load_GL_VERSION_3_3(GLADloadproc load) {
	if(!GLAD_GL_VERSION_3_3) return;
	glad_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)load("glBindFragDataLocationIndexed");
	glad_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)load("glGetFragDataIndex");
	glad_glGenSamplers = (PFNGLGENSAMPLERSPROC)load("glGenSamplers");
	glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)load("glDeleteSamplers");
	glad_glIsSampler = (PFNGLISSAMPLERPROC)load("glIsSampler");
	glad_glBindSampler = (PFNGLBINDSAMPLERPROC)load("glBindSampler");
	glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)load("glSamplerParameteri");
	glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)load("glSamplerParameteriv");
	glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)load("glSamplerParameterf");
	glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)load("glSamplerParameterfv");
	glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)load("glSamplerParameterIiv");
	glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)load("glSamplerParameterIuiv");
	glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)load("glGetSamplerParameteriv");
	glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)load("glGetSamplerParameterIiv");
	glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)load("glGetSamplerParameterfv");
	glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)load("glGetSamplerParameterIuiv");
	glad_glQueryCounter = (PFNGLQUERYCOUNTERPROC)load("glQueryCounter");
	glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)load("glGetQueryObjecti64v");
	glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)load("glGetQueryObjectui64v");
	glad_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)load("glVertexAttribDivisor");
	glad_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)load("glVertexAttribP1ui");
	glad_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)load("glVertexAttribP1uiv");
	glad_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)load("glVertexAttribP2ui");
	glad_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)load("glVertexAttribP2uiv");
	glad_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)load("glVertexAttribP3ui");
	glad_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)load("glVertexAttribP3uiv");
	glad_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)load("glVertexAttribP4ui");
	glad_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)load("glVertexAttribP4uiv");
	glad_glVertexP2ui = (PFNGLVERTEXP2UIPROC)load("glVertexP2ui");
	glad_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)load("glVertexP2uiv");
	glad_glVertexP3ui = (PFNGLVERTEXP3UIPROC)load("glVertexP3ui");
	glad_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)load("glVertexP3uiv");
	glad_glVertexP4ui = (PFNGLVERTEXP4UIPROC)load("glVertexP4ui");
	glad_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)load("glVertexP4uiv");
	glad_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)load("glTexCoordP1ui");
	glad_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)load("glTexCoordP1uiv");
	glad_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)load("glTexCoordP2ui");
	glad_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)load("glTexCoordP2uiv");
	glad_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)load("glTexCoordP3ui");
	glad_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)load("glTexCoordP3uiv");
	glad_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)load("glTexCoordP4ui");
	glad_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)load("glTexCoordP4uiv");
	glad_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)load("glMultiTexCoordP1ui");
	glad_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)load("glMultiTexCoordP1uiv");
	glad_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)load("glMultiTexCoordP2ui");
	glad_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)load("glMultiTexCoordP2uiv");
	glad_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)load("glMultiTexCoordP3ui");
	glad_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)load("glMultiTexCoordP3uiv");
	glad_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)load("glMultiTexCoordP4ui");
	glad_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)load("glMultiTexCoordP4uiv");
	glad_glNormalP3ui = (PFNGLNORMALP3UIPROC)load("glNormalP3ui");
	glad_glNormalP3uiv = (PFNGLNORMALP3UIVPROC)load("glNormalP3uiv");
	glad_glColorP3ui = (PFNGLCOLORP3UIPROC)load("glColorP3ui");
	glad_glColorP3uiv = (PFNGLCOLORP3UIVPROC)load("glColorP3uiv");
	glad_glColorP4ui = (PFNGLCOLORP4UIPROC)load("glColorP4ui");
	glad_glColorP4uiv = (PFNGLCOLORP4UIVPROC)load("glColorP4uiv");
	glad_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)load("glSecondaryColorP3ui");
	glad_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)load("glSecondaryColorP3uiv");
}
static void load_GL_APPLE_element_array(GLADloadproc load) {
	if(!GLAD_GL_APPLE_element_array) return;
	glad_glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC)load("glElementPointerAPPLE");
	glad_glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC)load("glDrawElementArrayAPPLE");
	glad_glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)load("glDrawRangeElementArrayAPPLE");
	glad_glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)load("glMultiDrawElementArrayAPPLE");
	glad_glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)load("glMultiDrawRangeElementArrayAPPLE");
}
static void load_GL_AMD_multi_draw_indirect(GLADloadproc load) {
	if(!GLAD_GL_AMD_multi_draw_indirect) return;
	glad_glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)load("glMultiDrawArraysIndirectAMD");
	glad_glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)load("glMultiDrawElementsIndirectAMD");
}
static void load_GL_SGIX_tag_sample_buffer(GLADloadproc load) {
	if(!GLAD_GL_SGIX_tag_sample_buffer) return;
	glad_glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC)load("glTagSampleBufferSGIX");
}
static void load_GL_NV_point_sprite(GLADloadproc load) {
	if(!GLAD_GL_NV_point_sprite) return;
	glad_glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)load("glPointParameteriNV");
	glad_glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)load("glPointParameterivNV");
}
static void load_GL_ATI_separate_stencil(GLADloadproc load) {
	if(!GLAD_GL_ATI_separate_stencil) return;
	glad_glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)load("glStencilOpSeparateATI");
	glad_glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC)load("glStencilFuncSeparateATI");
}
static void load_GL_EXT_texture_buffer_object(GLADloadproc load) {
	if(!GLAD_GL_EXT_texture_buffer_object) return;
	glad_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)load("glTexBufferEXT");
}
static void load_GL_ARB_vertex_blend(GLADloadproc load) {
	if(!GLAD_GL_ARB_vertex_blend) return;
	glad_glWeightbvARB = (PFNGLWEIGHTBVARBPROC)load("glWeightbvARB");
	glad_glWeightsvARB = (PFNGLWEIGHTSVARBPROC)load("glWeightsvARB");
	glad_glWeightivARB = (PFNGLWEIGHTIVARBPROC)load("glWeightivARB");
	glad_glWeightfvARB = (PFNGLWEIGHTFVARBPROC)load("glWeightfvARB");
	glad_glWeightdvARB = (PFNGLWEIGHTDVARBPROC)load("glWeightdvARB");
	glad_glWeightubvARB = (PFNGLWEIGHTUBVARBPROC)load("glWeightubvARB");
	glad_glWeightusvARB = (PFNGLWEIGHTUSVARBPROC)load("glWeightusvARB");
	glad_glWeightuivARB = (PFNGLWEIGHTUIVARBPROC)load("glWeightuivARB");
	glad_glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC)load("glWeightPointerARB");
	glad_glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC)load("glVertexBlendARB");
}
static void load_GL_OVR_multiview(GLADloadproc load) {
	if(!GLAD_GL_OVR_multiview) return;
	glad_glFramebufferTextureMultiviewOVR = (PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC)load("glFramebufferTextureMultiviewOVR");
}
static void load_GL_ARB_program_interface_query(GLADloadproc load) {
	if(!GLAD_GL_ARB_program_interface_query) return;
	glad_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)load("glGetProgramInterfaceiv");
	glad_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)load("glGetProgramResourceIndex");
	glad_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)load("glGetProgramResourceName");
	glad_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)load("glGetProgramResourceiv");
	glad_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)load("glGetProgramResourceLocation");
	glad_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)load("glGetProgramResourceLocationIndex");
}
static void load_GL_EXT_index_func(GLADloadproc load) {
	if(!GLAD_GL_EXT_index_func) return;
	glad_glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC)load("glIndexFuncEXT");
}
static void load_GL_NV_shader_buffer_load(GLADloadproc load) {
	if(!GLAD_GL_NV_shader_buffer_load) return;
	glad_glMakeBufferResidentNV = (PFNGLMAKEBUFFERRESIDENTNVPROC)load("glMakeBufferResidentNV");
	glad_glMakeBufferNonResidentNV = (PFNGLMAKEBUFFERNONRESIDENTNVPROC)load("glMakeBufferNonResidentNV");
	glad_glIsBufferResidentNV = (PFNGLISBUFFERRESIDENTNVPROC)load("glIsBufferResidentNV");
	glad_glMakeNamedBufferResidentNV = (PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)load("glMakeNamedBufferResidentNV");
	glad_glMakeNamedBufferNonResidentNV = (PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)load("glMakeNamedBufferNonResidentNV");
	glad_glIsNamedBufferResidentNV = (PFNGLISNAMEDBUFFERRESIDENTNVPROC)load("glIsNamedBufferResidentNV");
	glad_glGetBufferParameterui64vNV = (PFNGLGETBUFFERPARAMETERUI64VNVPROC)load("glGetBufferParameterui64vNV");
	glad_glGetNamedBufferParameterui64vNV = (PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)load("glGetNamedBufferParameterui64vNV");
	glad_glGetIntegerui64vNV = (PFNGLGETINTEGERUI64VNVPROC)load("glGetIntegerui64vNV");
	glad_glUniformui64NV = (PFNGLUNIFORMUI64NVPROC)load("glUniformui64NV");
	glad_glUniformui64vNV = (PFNGLUNIFORMUI64VNVPROC)load("glUniformui64vNV");
	glad_glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC)load("glGetUniformui64vNV");
	glad_glProgramUniformui64NV = (PFNGLPROGRAMUNIFORMUI64NVPROC)load("glProgramUniformui64NV");
	glad_glProgramUniformui64vNV = (PFNGLPROGRAMUNIFORMUI64VNVPROC)load("glProgramUniformui64vNV");
}
static void load_GL_EXT_color_subtable(GLADloadproc load) {
	if(!GLAD_GL_EXT_color_subtable) return;
	glad_glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)load("glColorSubTableEXT");
	glad_glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC)load("glCopyColorSubTableEXT");
}
static void load_GL_SUNX_constant_data(GLADloadproc load) {
	if(!GLAD_GL_SUNX_constant_data) return;
	glad_glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC)load("glFinishTextureSUNX");
}
static void load_GL_EXT_multi_draw_arrays(GLADloadproc load) {
	if(!GLAD_GL_EXT_multi_draw_arrays) return;
	glad_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)load("glMultiDrawArraysEXT");
	glad_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)load("glMultiDrawElementsEXT");
}
static void load_GL_ARB_shader_atomic_counters(GLADloadproc load) {
	if(!GLAD_GL_ARB_shader_atomic_counters) return;
	glad_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)load("glGetActiveAtomicCounterBufferiv");
}
static void load_GL_NV_conditional_render(GLADloadproc load) {
	if(!GLAD_GL_NV_conditional_render) return;
	glad_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)load("glBeginConditionalRenderNV");
	glad_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)load("glEndConditionalRenderNV");
}
static void load_GL_MESA_resize_buffers(GLADloadproc load) {
	if(!GLAD_GL_MESA_resize_buffers) return;
	glad_glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC)load("glResizeBuffersMESA");
}
static void load_GL_ARB_texture_view(GLADloadproc load) {
	if(!GLAD_GL_ARB_texture_view) return;
	glad_glTextureView = (PFNGLTEXTUREVIEWPROC)load("glTextureView");
}
static void load_GL_ARB_map_buffer_range(GLADloadproc load) {
	if(!GLAD_GL_ARB_map_buffer_range) return;
	glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)load("glMapBufferRange");
	glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)load("glFlushMappedBufferRange");
}
static void load_GL_EXT_convolution(GLADloadproc load) {
	if(!GLAD_GL_EXT_convolution) return;
	glad_glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC)load("glConvolutionFilter1DEXT");
	glad_glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC)load("glConvolutionFilter2DEXT");
	glad_glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)load("glConvolutionParameterfEXT");
	glad_glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)load("glConvolutionParameterfvEXT");
	glad_glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)load("glConvolutionParameteriEXT");
	glad_glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)load("glConvolutionParameterivEXT");
	glad_glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)load("glCopyConvolutionFilter1DEXT");
	glad_glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)load("glCopyConvolutionFilter2DEXT");
	glad_glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC)load("glGetConvolutionFilterEXT");
	glad_glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)load("glGetConvolutionParameterfvEXT");
	glad_glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)load("glGetConvolutionParameterivEXT");
	glad_glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC)load("glGetSeparableFilterEXT");
	glad_glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC)load("glSeparableFilter2DEXT");
}
static void load_GL_NV_vertex_attrib_integer_64bit(GLADloadproc load) {
	if(!GLAD_GL_NV_vertex_attrib_integer_64bit) return;
	glad_glVertexAttribL1i64NV = (PFNGLVERTEXATTRIBL1I64NVPROC)load("glVertexAttribL1i64NV");
	glad_glVertexAttribL2i64NV = (PFNGLVERTEXATTRIBL2I64NVPROC)load("glVertexAttribL2i64NV");
	glad_glVertexAttribL3i64NV = (PFNGLVERTEXATTRIBL3I64NVPROC)load("glVertexAttribL3i64NV");
	glad_glVertexAttribL4i64NV = (PFNGLVERTEXATTRIBL4I64NVPROC)load("glVertexAttribL4i64NV");
	glad_glVertexAttribL1i64vNV = (PFNGLVERTEXATTRIBL1I64VNVPROC)load("glVertexAttribL1i64vNV");
	glad_glVertexAttribL2i64vNV = (PFNGLVERTEXATTRIBL2I64VNVPROC)load("glVertexAttribL2i64vNV");
	glad_glVertexAttribL3i64vNV = (PFNGLVERTEXATTRIBL3I64VNVPROC)load("glVertexAttribL3i64vNV");
	glad_glVertexAttribL4i64vNV = (PFNGLVERTEXATTRIBL4I64VNVPROC)load("glVertexAttribL4i64vNV");
	glad_glVertexAttribL1ui64NV = (PFNGLVERTEXATTRIBL1UI64NVPROC)load("glVertexAttribL1ui64NV");
	glad_glVertexAttribL2ui64NV = (PFNGLVERTEXATTRIBL2UI64NVPROC)load("glVertexAttribL2ui64NV");
	glad_glVertexAttribL3ui64NV = (PFNGLVERTEXATTRIBL3UI64NVPROC)load("glVertexAttribL3ui64NV");
	glad_glVertexAttribL4ui64NV = (PFNGLVERTEXATTRIBL4UI64NVPROC)load("glVertexAttribL4ui64NV");
	glad_glVertexAttribL1ui64vNV = (PFNGLVERTEXATTRIBL1UI64VNVPROC)load("glVertexAttribL1ui64vNV");
	glad_glVertexAttribL2ui64vNV = (PFNGLVERTEXATTRIBL2UI64VNVPROC)load("glVertexAttribL2ui64vNV");
	glad_glVertexAttribL3ui64vNV = (PFNGLVERTEXATTRIBL3UI64VNVPROC)load("glVertexAttribL3ui64vNV");
	glad_glVertexAttribL4ui64vNV = (PFNGLVERTEXATTRIBL4UI64VNVPROC)load("glVertexAttribL4ui64vNV");
	glad_glGetVertexAttribLi64vNV = (PFNGLGETVERTEXATTRIBLI64VNVPROC)load("glGetVertexAttribLi64vNV");
	glad_glGetVertexAttribLui64vNV = (PFNGLGETVERTEXATTRIBLUI64VNVPROC)load("glGetVertexAttribLui64vNV");
	glad_glVertexAttribLFormatNV = (PFNGLVERTEXATTRIBLFORMATNVPROC)load("glVertexAttribLFormatNV");
}
static void load_GL_EXT_paletted_texture(GLADloadproc load) {
	if(!GLAD_GL_EXT_paletted_texture) return;
	glad_glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)load("glColorTableEXT");
	glad_glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)load("glGetColorTableEXT");
	glad_glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)load("glGetColorTableParameterivEXT");
	glad_glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)load("glGetColorTableParameterfvEXT");
}
static void load_GL_ARB_texture_buffer_object(GLADloadproc load) {
	if(!GLAD_GL_ARB_texture_buffer_object) return;
	glad_glTexBufferARB = (PFNGLTEXBUFFERARBPROC)load("glTexBufferARB");
}
static void load_GL_ATI_pn_triangles(GLADloadproc load) {
	if(!GLAD_GL_ATI_pn_triangles) return;
	glad_glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC)load("glPNTrianglesiATI");
	glad_glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC)load("glPNTrianglesfATI");
}
static void load_GL_SGIX_flush_raster(GLADloadproc load) {
	if(!GLAD_GL_SGIX_flush_raster) return;
	glad_glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC)load("glFlushRasterSGIX");
}
static void load_GL_EXT_light_texture(GLADloadproc load) {
	if(!GLAD_GL_EXT_light_texture) return;
	glad_glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC)load("glApplyTextureEXT");
	glad_glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC)load("glTextureLightEXT");
	glad_glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC)load("glTextureMaterialEXT");
}
static void load_GL_AMD_draw_buffers_blend(GLADloadproc load) {
	if(!GLAD_GL_AMD_draw_buffers_blend) return;
	glad_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)load("glBlendFuncIndexedAMD");
	glad_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)load("glBlendFuncSeparateIndexedAMD");
	glad_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)load("glBlendEquationIndexedAMD");
	glad_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)load("glBlendEquationSeparateIndexedAMD");
}
static void load_GL_APPLE_texture_range(GLADloadproc load) {
	if(!GLAD_GL_APPLE_texture_range) return;
	glad_glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC)load("glTextureRangeAPPLE");
	glad_glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)load("glGetTexParameterPointervAPPLE");
}
static void load_GL_EXT_texture_array(GLADloadproc load) {
	if(!GLAD_GL_EXT_texture_array) return;
	glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)load("glFramebufferTextureLayerEXT");
}
static void load_GL_NV_texture_barrier(GLADloadproc load) {
	if(!GLAD_GL_NV_texture_barrier) return;
	glad_glTextureBarrierNV = (PFNGLTEXTUREBARRIERNVPROC)load("glTextureBarrierNV");
}
static void load_GL_ARB_vertex_type_2_10_10_10_rev(GLADloadproc load) {
	if(!GLAD_GL_ARB_vertex_type_2_10_10_10_rev) return;
	glad_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)load("glVertexAttribP1ui");
	glad_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)load("glVertexAttribP1uiv");
	glad_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)load("glVertexAttribP2ui");
	glad_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)load("glVertexAttribP2uiv");
	glad_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)load("glVertexAttribP3ui");
	glad_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)load("glVertexAttribP3uiv");
	glad_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)load("glVertexAttribP4ui");
	glad_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)load("glVertexAttribP4uiv");
	glad_glVertexP2ui = (PFNGLVERTEXP2UIPROC)load("glVertexP2ui");
	glad_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)load("glVertexP2uiv");
	glad_glVertexP3ui = (PFNGLVERTEXP3UIPROC)load("glVertexP3ui");
	glad_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)load("glVertexP3uiv");
	glad_glVertexP4ui = (PFNGLVERTEXP4UIPROC)load("glVertexP4ui");
	glad_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)load("glVertexP4uiv");
	glad_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)load("glTexCoordP1ui");
	glad_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)load("glTexCoordP1uiv");
	glad_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)load("glTexCoordP2ui");
	glad_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)load("glTexCoordP2uiv");
	glad_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)load("glTexCoordP3ui");
	glad_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)load("glTexCoordP3uiv");
	glad_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)load("glTexCoordP4ui");
	glad_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)load("glTexCoordP4uiv");
	glad_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)load("glMultiTexCoordP1ui");
	glad_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)load("glMultiTexCoordP1uiv");
	glad_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)load("glMultiTexCoordP2ui");
	glad_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)load("glMultiTexCoordP2uiv");
	glad_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)load("glMultiTexCoordP3ui");
	glad_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)load("glMultiTexCoordP3uiv");
	glad_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)load("glMultiTexCoordP4ui");
	glad_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)load("glMultiTexCoordP4uiv");
	glad_glNormalP3ui = (PFNGLNORMALP3UIPROC)load("glNormalP3ui");
	glad_glNormalP3uiv = (PFNGLNORMALP3UIVPROC)load("glNormalP3uiv");
	glad_glColorP3ui = (PFNGLCOLORP3UIPROC)load("glColorP3ui");
	glad_glColorP3uiv = (PFNGLCOLORP3UIVPROC)load("glColorP3uiv");
	glad_glColorP4ui = (PFNGLCOLORP4UIPROC)load("glColorP4ui");
	glad_glColorP4uiv = (PFNGLCOLORP4UIVPROC)load("glColorP4uiv");
	glad_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)load("glSecondaryColorP3ui");
	glad_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)load("glSecondaryColorP3uiv");
}
static void load_GL_3DFX_tbuffer(GLADloadproc load) {
	if(!GLAD_GL_3DFX_tbuffer) return;
	glad_glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC)load("glTbufferMask3DFX");
}
static void load_GL_GREMEDY_frame_terminator(GLADloadproc load) {
	if(!GLAD_GL_GREMEDY_frame_terminator) return;
	glad_glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC)load("glFrameTerminatorGREMEDY");
}
static void load_GL_ARB_blend_func_extended(GLADloadproc load) {
	if(!GLAD_GL_ARB_blend_func_extended) return;
	glad_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)load("glBindFragDataLocationIndexed");
	glad_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)load("glGetFragDataIndex");
}
static void load_GL_EXT_separate_shader_objects(GLADloadproc load) {
	if(!GLAD_GL_EXT_separate_shader_objects) return;
	glad_glUseShaderProgramEXT = (PFNGLUSESHADERPROGRAMEXTPROC)load("glUseShaderProgramEXT");
	glad_glActiveProgramEXT = (PFNGLACTIVEPROGRAMEXTPROC)load("glActiveProgramEXT");
	glad_glCreateShaderProgramEXT = (PFNGLCREATESHADERPROGRAMEXTPROC)load("glCreateShaderProgramEXT");
	glad_glActiveShaderProgramEXT = (PFNGLACTIVESHADERPROGRAMEXTPROC)load("glActiveShaderProgramEXT");
	glad_glBindProgramPipelineEXT = (PFNGLBINDPROGRAMPIPELINEEXTPROC)load("glBindProgramPipelineEXT");
	glad_glCreateShaderProgramvEXT = (PFNGLCREATESHADERPROGRAMVEXTPROC)load("glCreateShaderProgramvEXT");
	glad_glDeleteProgramPipelinesEXT = (PFNGLDELETEPROGRAMPIPELINESEXTPROC)load("glDeleteProgramPipelinesEXT");
	glad_glGenProgramPipelinesEXT = (PFNGLGENPROGRAMPIPELINESEXTPROC)load("glGenProgramPipelinesEXT");
	glad_glGetProgramPipelineInfoLogEXT = (PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC)load("glGetProgramPipelineInfoLogEXT");
	glad_glGetProgramPipelineivEXT = (PFNGLGETPROGRAMPIPELINEIVEXTPROC)load("glGetProgramPipelineivEXT");
	glad_glIsProgramPipelineEXT = (PFNGLISPROGRAMPIPELINEEXTPROC)load("glIsProgramPipelineEXT");
	glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)load("glProgramParameteriEXT");
	glad_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)load("glProgramUniform1fEXT");
	glad_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)load("glProgramUniform1fvEXT");
	glad_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)load("glProgramUniform1iEXT");
	glad_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)load("glProgramUniform1ivEXT");
	glad_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)load("glProgramUniform2fEXT");
	glad_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)load("glProgramUniform2fvEXT");
	glad_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)load("glProgramUniform2iEXT");
	glad_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)load("glProgramUniform2ivEXT");
	glad_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)load("glProgramUniform3fEXT");
	glad_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)load("glProgramUniform3fvEXT");
	glad_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)load("glProgramUniform3iEXT");
	glad_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)load("glProgramUniform3ivEXT");
	glad_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)load("glProgramUniform4fEXT");
	glad_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)load("glProgramUniform4fvEXT");
	glad_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)load("glProgramUniform4iEXT");
	glad_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)load("glProgramUniform4ivEXT");
	glad_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)load("glProgramUniformMatrix2fvEXT");
	glad_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)load("glProgramUniformMatrix3fvEXT");
	glad_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)load("glProgramUniformMatrix4fvEXT");
	glad_glUseProgramStagesEXT = (PFNGLUSEPROGRAMSTAGESEXTPROC)load("glUseProgramStagesEXT");
	glad_glValidateProgramPipelineEXT = (PFNGLVALIDATEPROGRAMPIPELINEEXTPROC)load("glValidateProgramPipelineEXT");
	glad_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)load("glProgramUniform1uiEXT");
	glad_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)load("glProgramUniform2uiEXT");
	glad_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)load("glProgramUniform3uiEXT");
	glad_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)load("glProgramUniform4uiEXT");
	glad_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)load("glProgramUniform1uivEXT");
	glad_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)load("glProgramUniform2uivEXT");
	glad_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)load("glProgramUniform3uivEXT");
	glad_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)load("glProgramUniform4uivEXT");
	glad_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)load("glProgramUniformMatrix4fvEXT");
	glad_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)load("glProgramUniformMatrix2x3fvEXT");
	glad_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)load("glProgramUniformMatrix3x2fvEXT");
	glad_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)load("glProgramUniformMatrix2x4fvEXT");
	glad_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)load("glProgramUniformMatrix4x2fvEXT");
	glad_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)load("glProgramUniformMatrix3x4fvEXT");
	glad_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)load("glProgramUniformMatrix4x3fvEXT");
}
static void load_GL_NV_texture_multisample(GLADloadproc load) {
	if(!GLAD_GL_NV_texture_multisample) return;
	glad_glTexImage2DMultisampleCoverageNV = (PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)load("glTexImage2DMultisampleCoverageNV");
	glad_glTexImage3DMultisampleCoverageNV = (PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)load("glTexImage3DMultisampleCoverageNV");
	glad_glTextureImage2DMultisampleNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)load("glTextureImage2DMultisampleNV");
	glad_glTextureImage3DMultisampleNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)load("glTextureImage3DMultisampleNV");
	glad_glTextureImage2DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)load("glTextureImage2DMultisampleCoverageNV");
	glad_glTextureImage3DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)load("glTextureImage3DMultisampleCoverageNV");
}
static void load_GL_ARB_shader_objects(GLADloadproc load) {
	if(!GLAD_GL_ARB_shader_objects) return;
	glad_glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC)load("glDeleteObjectARB");
	glad_glGetHandleARB = (PFNGLGETHANDLEARBPROC)load("glGetHandleARB");
	glad_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)load("glDetachObjectARB");
	glad_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)load("glCreateShaderObjectARB");
	glad_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)load("glShaderSourceARB");
	glad_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)load("glCompileShaderARB");
	glad_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)load("glCreateProgramObjectARB");
	glad_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)load("glAttachObjectARB");
	glad_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)load("glLinkProgramARB");
	glad_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)load("glUseProgramObjectARB");
	glad_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)load("glValidateProgramARB");
	glad_glUniform1fARB = (PFNGLUNIFORM1FARBPROC)load("glUniform1fARB");
	glad_glUniform2fARB = (PFNGLUNIFORM2FARBPROC)load("glUniform2fARB");
	glad_glUniform3fARB = (PFNGLUNIFORM3FARBPROC)load("glUniform3fARB");
	glad_glUniform4fARB = (PFNGLUNIFORM4FARBPROC)load("glUniform4fARB");
	glad_glUniform1iARB = (PFNGLUNIFORM1IARBPROC)load("glUniform1iARB");
	glad_glUniform2iARB = (PFNGLUNIFORM2IARBPROC)load("glUniform2iARB");
	glad_glUniform3iARB = (PFNGLUNIFORM3IARBPROC)load("glUniform3iARB");
	glad_glUniform4iARB = (PFNGLUNIFORM4IARBPROC)load("glUniform4iARB");
	glad_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)load("glUniform1fvARB");
	glad_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)load("glUniform2fvARB");
	glad_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)load("glUniform3fvARB");
	glad_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)load("glUniform4fvARB");
	glad_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)load("glUniform1ivARB");
	glad_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)load("glUniform2ivARB");
	glad_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)load("glUniform3ivARB");
	glad_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)load("glUniform4ivARB");
	glad_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)load("glUniformMatrix2fvARB");
	glad_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)load("glUniformMatrix3fvARB");
	glad_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)load("glUniformMatrix4fvARB");
	glad_glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC)load("glGetObjectParameterfvARB");
	glad_glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC)load("glGetObjectParameterivARB");
	glad_glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC)load("glGetInfoLogARB");
	glad_glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC)load("glGetAttachedObjectsARB");
	glad_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)load("glGetUniformLocationARB");
	glad_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)load("glGetActiveUniformARB");
	glad_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)load("glGetUniformfvARB");
	glad_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)load("glGetUniformivARB");
	glad_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)load("glGetShaderSourceARB");
}
static void load_GL_ARB_framebuffer_object(GLADloadproc load) {
	if(!GLAD_GL_ARB_framebuffer_object) return;
	glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)load("glIsRenderbuffer");
	glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)load("glBindRenderbuffer");
	glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)load("glDeleteRenderbuffers");
	glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)load("glGenRenderbuffers");
	glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)load("glRenderbufferStorage");
	glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)load("glGetRenderbufferParameteriv");
	glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)load("glIsFramebuffer");
	glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)load("glBindFramebuffer");
	glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)load("glDeleteFramebuffers");
	glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)load("glGenFramebuffers");
	glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)load("glCheckFramebufferStatus");
	glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)load("glFramebufferTexture1D");
	glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)load("glFramebufferTexture2D");
	glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)load("glFramebufferTexture3D");
	glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)load("glFramebufferRenderbuffer");
	glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)load("glGetFramebufferAttachmentParameteriv");
	glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)load("glGenerateMipmap");
	glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)load("glBlitFramebuffer");
	glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)load("glRenderbufferStorageMultisample");
	glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)load("glFramebufferTextureLayer");
}
static void load_GL_ATI_envmap_bumpmap(GLADloadproc load) {
	if(!GLAD_GL_ATI_envmap_bumpmap) return;
	glad_glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC)load("glTexBumpParameterivATI");
	glad_glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC)load("glTexBumpParameterfvATI");
	glad_glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)load("glGetTexBumpParameterivATI");
	glad_glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)load("glGetTexBumpParameterfvATI");
}
static void load_GL_NV_viewport_swizzle(GLADloadproc load) {
	if(!GLAD_GL_NV_viewport_swizzle) return;
	glad_glViewportSwizzleNV = (PFNGLVIEWPORTSWIZZLENVPROC)load("glViewportSwizzleNV");
}
static void load_GL_ATI_map_object_buffer(GLADloadproc load) {
	if(!GLAD_GL_ATI_map_object_buffer) return;
	glad_glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC)load("glMapObjectBufferATI");
	glad_glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC)load("glUnmapObjectBufferATI");
}
static void load_GL_ARB_robustness(GLADloadproc load) {
	if(!GLAD_GL_ARB_robustness) return;
	glad_glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC)load("glGetGraphicsResetStatusARB");
	glad_glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC)load("glGetnTexImageARB");
	glad_glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC)load("glReadnPixelsARB");
	glad_glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)load("glGetnCompressedTexImageARB");
	glad_glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC)load("glGetnUniformfvARB");
	glad_glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC)load("glGetnUniformivARB");
	glad_glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC)load("glGetnUniformuivARB");
	glad_glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC)load("glGetnUniformdvARB");
	glad_glGetnMapdvARB = (PFNGLGETNMAPDVARBPROC)load("glGetnMapdvARB");
	glad_glGetnMapfvARB = (PFNGLGETNMAPFVARBPROC)load("glGetnMapfvARB");
	glad_glGetnMapivARB = (PFNGLGETNMAPIVARBPROC)load("glGetnMapivARB");
	glad_glGetnPixelMapfvARB = (PFNGLGETNPIXELMAPFVARBPROC)load("glGetnPixelMapfvARB");
	glad_glGetnPixelMapuivARB = (PFNGLGETNPIXELMAPUIVARBPROC)load("glGetnPixelMapuivARB");
	glad_glGetnPixelMapusvARB = (PFNGLGETNPIXELMAPUSVARBPROC)load("glGetnPixelMapusvARB");
	glad_glGetnPolygonStippleARB = (PFNGLGETNPOLYGONSTIPPLEARBPROC)load("glGetnPolygonStippleARB");
	glad_glGetnColorTableARB = (PFNGLGETNCOLORTABLEARBPROC)load("glGetnColorTableARB");
	glad_glGetnConvolutionFilterARB = (PFNGLGETNCONVOLUTIONFILTERARBPROC)load("glGetnConvolutionFilterARB");
	glad_glGetnSeparableFilterARB = (PFNGLGETNSEPARABLEFILTERARBPROC)load("glGetnSeparableFilterARB");
	glad_glGetnHistogramARB = (PFNGLGETNHISTOGRAMARBPROC)load("glGetnHistogramARB");
	glad_glGetnMinmaxARB = (PFNGLGETNMINMAXARBPROC)load("glGetnMinmaxARB");
}
static void load_GL_NV_pixel_data_range(GLADloadproc load) {
	if(!GLAD_GL_NV_pixel_data_range) return;
	glad_glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC)load("glPixelDataRangeNV");
	glad_glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC)load("glFlushPixelDataRangeNV");
}
static void load_GL_EXT_framebuffer_blit(GLADloadproc load) {
	if(!GLAD_GL_EXT_framebuffer_blit) return;
	glad_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)load("glBlitFramebufferEXT");
}
static void load_GL_ARB_gpu_shader_fp64(GLADloadproc load) {
	if(!GLAD_GL_ARB_gpu_shader_fp64) return;
	glad_glUniform1d = (PFNGLUNIFORM1DPROC)load("glUniform1d");
	glad_glUniform2d = (PFNGLUNIFORM2DPROC)load("glUniform2d");
	glad_glUniform3d = (PFNGLUNIFORM3DPROC)load("glUniform3d");
	glad_glUniform4d = (PFNGLUNIFORM4DPROC)load("glUniform4d");
	glad_glUniform1dv = (PFNGLUNIFORM1DVPROC)load("glUniform1dv");
	glad_glUniform2dv = (PFNGLUNIFORM2DVPROC)load("glUniform2dv");
	glad_glUniform3dv = (PFNGLUNIFORM3DVPROC)load("glUniform3dv");
	glad_glUniform4dv = (PFNGLUNIFORM4DVPROC)load("glUniform4dv");
	glad_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)load("glUniformMatrix2dv");
	glad_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)load("glUniformMatrix3dv");
	glad_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)load("glUniformMatrix4dv");
	glad_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)load("glUniformMatrix2x3dv");
	glad_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)load("glUniformMatrix2x4dv");
	glad_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)load("glUniformMatrix3x2dv");
	glad_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)load("glUniformMatrix3x4dv");
	glad_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)load("glUniformMatrix4x2dv");
	glad_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)load("glUniformMatrix4x3dv");
	glad_glGetUniformdv = (PFNGLGETUNIFORMDVPROC)load("glGetUniformdv");
}
static void load_GL_NV_command_list(GLADloadproc load) {
	if(!GLAD_GL_NV_command_list) return;
	glad_glCreateStatesNV = (PFNGLCREATESTATESNVPROC)load("glCreateStatesNV");
	glad_glDeleteStatesNV = (PFNGLDELETESTATESNVPROC)load("glDeleteStatesNV");
	glad_glIsStateNV = (PFNGLISSTATENVPROC)load("glIsStateNV");
	glad_glStateCaptureNV = (PFNGLSTATECAPTURENVPROC)load("glStateCaptureNV");
	glad_glGetCommandHeaderNV = (PFNGLGETCOMMANDHEADERNVPROC)load("glGetCommandHeaderNV");
	glad_glGetStageIndexNV = (PFNGLGETSTAGEINDEXNVPROC)load("glGetStageIndexNV");
	glad_glDrawCommandsNV = (PFNGLDRAWCOMMANDSNVPROC)load("glDrawCommandsNV");
	glad_glDrawCommandsAddressNV = (PFNGLDRAWCOMMANDSADDRESSNVPROC)load("glDrawCommandsAddressNV");
	glad_glDrawCommandsStatesNV = (PFNGLDRAWCOMMANDSSTATESNVPROC)load("glDrawCommandsStatesNV");
	glad_glDrawCommandsStatesAddressNV = (PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC)load("glDrawCommandsStatesAddressNV");
	glad_glCreateCommandListsNV = (PFNGLCREATECOMMANDLISTSNVPROC)load("glCreateCommandListsNV");
	glad_glDeleteCommandListsNV = (PFNGLDELETECOMMANDLISTSNVPROC)load("glDeleteCommandListsNV");
	glad_glIsCommandListNV = (PFNGLISCOMMANDLISTNVPROC)load("glIsCommandListNV");
	glad_glListDrawCommandsStatesClientNV = (PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC)load("glListDrawCommandsStatesClientNV");
	glad_glCommandListSegmentsNV = (PFNGLCOMMANDLISTSEGMENTSNVPROC)load("glCommandListSegmentsNV");
	glad_glCompileCommandListNV = (PFNGLCOMPILECOMMANDLISTNVPROC)load("glCompileCommandListNV");
	glad_glCallCommandListNV = (PFNGLCALLCOMMANDLISTNVPROC)load("glCallCommandListNV");
}
static void load_GL_EXT_vertex_weighting(GLADloadproc load) {
	if(!GLAD_GL_EXT_vertex_weighting) return;
	glad_glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC)load("glVertexWeightfEXT");
	glad_glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC)load("glVertexWeightfvEXT");
	glad_glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)load("glVertexWeightPointerEXT");
}
static void load_GL_GREMEDY_string_marker(GLADloadproc load) {
	if(!GLAD_GL_GREMEDY_string_marker) return;
	glad_glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC)load("glStringMarkerGREMEDY");
}
static void load_GL_EXT_subtexture(GLADloadproc load) {
	if(!GLAD_GL_EXT_subtexture) return;
	glad_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)load("glTexSubImage1DEXT");
	glad_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)load("glTexSubImage2DEXT");
}
static void load_GL_EXT_gpu_program_parameters(GLADloadproc load) {
	if(!GLAD_GL_EXT_gpu_program_parameters) return;
	glad_glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)load("glProgramEnvParameters4fvEXT");
	glad_glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)load("glProgramLocalParameters4fvEXT");
}
static void load_GL_NV_evaluators(GLADloadproc load) {
	if(!GLAD_GL_NV_evaluators) return;
	glad_glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC)load("glMapControlPointsNV");
	glad_glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC)load("glMapParameterivNV");
	glad_glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC)load("glMapParameterfvNV");
	glad_glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC)load("glGetMapControlPointsNV");
	glad_glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC)load("glGetMapParameterivNV");
	glad_glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC)load("glGetMapParameterfvNV");
	glad_glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)load("glGetMapAttribParameterivNV");
	glad_glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)load("glGetMapAttribParameterfvNV");
	glad_glEvalMapsNV = (PFNGLEVALMAPSNVPROC)load("glEvalMapsNV");
}
static void load_GL_SGIS_texture_filter4(GLADloadproc load) {
	if(!GLAD_GL_SGIS_texture_filter4) return;
	glad_glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC)load("glGetTexFilterFuncSGIS");
	glad_glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC)load("glTexFilterFuncSGIS");
}
static void load_GL_AMD_performance_monitor(GLADloadproc load) {
	if(!GLAD_GL_AMD_performance_monitor) return;
	glad_glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC)load("glGetPerfMonitorGroupsAMD");
	glad_glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC)load("glGetPerfMonitorCountersAMD");
	glad_glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)load("glGetPerfMonitorGroupStringAMD");
	glad_glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)load("glGetPerfMonitorCounterStringAMD");
	glad_glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)load("glGetPerfMonitorCounterInfoAMD");
	glad_glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC)load("glGenPerfMonitorsAMD");
	glad_glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC)load("glDeletePerfMonitorsAMD");
	glad_glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)load("glSelectPerfMonitorCountersAMD");
	glad_glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC)load("glBeginPerfMonitorAMD");
	glad_glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC)load("glEndPerfMonitorAMD");
	glad_glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)load("glGetPerfMonitorCounterDataAMD");
}
static void load_GL_EXT_stencil_clear_tag(GLADloadproc load) {
	if(!GLAD_GL_EXT_stencil_clear_tag) return;
	glad_glStencilClearTagEXT = (PFNGLSTENCILCLEARTAGEXTPROC)load("glStencilClearTagEXT");
}
static void load_GL_NV_present_video(GLADloadproc load) {
	if(!GLAD_GL_NV_present_video) return;
	glad_glPresentFrameKeyedNV = (PFNGLPRESENTFRAMEKEYEDNVPROC)load("glPresentFrameKeyedNV");
	glad_glPresentFrameDualFillNV = (PFNGLPRESENTFRAMEDUALFILLNVPROC)load("glPresentFrameDualFillNV");
	glad_glGetVideoivNV = (PFNGLGETVIDEOIVNVPROC)load("glGetVideoivNV");
	glad_glGetVideouivNV = (PFNGLGETVIDEOUIVNVPROC)load("glGetVideouivNV");
	glad_glGetVideoi64vNV = (PFNGLGETVIDEOI64VNVPROC)load("glGetVideoi64vNV");
	glad_glGetVideoui64vNV = (PFNGLGETVIDEOUI64VNVPROC)load("glGetVideoui64vNV");
}
static void load_GL_SGIX_framezoom(GLADloadproc load) {
	if(!GLAD_GL_SGIX_framezoom) return;
	glad_glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC)load("glFrameZoomSGIX");
}
static void load_GL_ARB_draw_elements_base_vertex(GLADloadproc load) {
	if(!GLAD_GL_ARB_draw_elements_base_vertex) return;
	glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)load("glDrawElementsBaseVertex");
	glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)load("glDrawRangeElementsBaseVertex");
	glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)load("glDrawElementsInstancedBaseVertex");
	glad_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)load("glMultiDrawElementsBaseVertex");
}
static void load_GL_NV_transform_feedback(GLADloadproc load) {
	if(!GLAD_GL_NV_transform_feedback) return;
	glad_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)load("glBeginTransformFeedbackNV");
	glad_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)load("glEndTransformFeedbackNV");
	glad_glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)load("glTransformFeedbackAttribsNV");
	glad_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)load("glBindBufferRangeNV");
	glad_glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)load("glBindBufferOffsetNV");
	glad_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)load("glBindBufferBaseNV");
	glad_glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)load("glTransformFeedbackVaryingsNV");
	glad_glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC)load("glActiveVaryingNV");
	glad_glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC)load("glGetVaryingLocationNV");
	glad_glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC)load("glGetActiveVaryingNV");
	glad_glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)load("glGetTransformFeedbackVaryingNV");
	glad_glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)load("glTransformFeedbackStreamAttribsNV");
}
static void load_GL_NV_fragment_program(GLADloadproc load) {
	if(!GLAD_GL_NV_fragment_program) return;
	glad_glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)load("glProgramNamedParameter4fNV");
	glad_glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)load("glProgramNamedParameter4fvNV");
	glad_glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)load("glProgramNamedParameter4dNV");
	glad_glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)load("glProgramNamedParameter4dvNV");
	glad_glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)load("glGetProgramNamedParameterfvNV");
	glad_glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)load("glGetProgramNamedParameterdvNV");
}
static void load_GL_AMD_stencil_operation_extended(GLADloadproc load) {
	if(!GLAD_GL_AMD_stencil_operation_extended) return;
	glad_glStencilOpValueAMD = (PFNGLSTENCILOPVALUEAMDPROC)load("glStencilOpValueAMD");
}
static void load_GL_ARB_instanced_arrays(GLADloadproc load) {
	if(!GLAD_GL_ARB_instanced_arrays) return;
	glad_glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC)load("glVertexAttribDivisorARB");
}
static void load_GL_ARB_get_texture_sub_image(GLADloadproc load) {
	if(!GLAD_GL_ARB_get_texture_sub_image) return;
	glad_glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC)load("glGetTextureSubImage");
	glad_glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)load("glGetCompressedTextureSubImage");
}
static void load_GL_KHR_robustness(GLADloadproc load) {
	if(!GLAD_GL_KHR_robustness) return;
	glad_glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC)load("glGetGraphicsResetStatus");
	glad_glReadnPixels = (PFNGLREADNPIXELSPROC)load("glReadnPixels");
	glad_glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC)load("glGetnUniformfv");
	glad_glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC)load("glGetnUniformiv");
	glad_glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC)load("glGetnUniformuiv");
	glad_glGetGraphicsResetStatusKHR = (PFNGLGETGRAPHICSRESETSTATUSKHRPROC)load("glGetGraphicsResetStatusKHR");
	glad_glReadnPixelsKHR = (PFNGLREADNPIXELSKHRPROC)load("glReadnPixelsKHR");
	glad_glGetnUniformfvKHR = (PFNGLGETNUNIFORMFVKHRPROC)load("glGetnUniformfvKHR");
	glad_glGetnUniformivKHR = (PFNGLGETNUNIFORMIVKHRPROC)load("glGetnUniformivKHR");
	glad_glGetnUniformuivKHR = (PFNGLGETNUNIFORMUIVKHRPROC)load("glGetnUniformuivKHR");
}
static void load_GL_AMD_sparse_texture(GLADloadproc load) {
	if(!GLAD_GL_AMD_sparse_texture) return;
	glad_glTexStorageSparseAMD = (PFNGLTEXSTORAGESPARSEAMDPROC)load("glTexStorageSparseAMD");
	glad_glTextureStorageSparseAMD = (PFNGLTEXTURESTORAGESPARSEAMDPROC)load("glTextureStorageSparseAMD");
}
static void load_GL_ARB_clip_control(GLADloadproc load) {
	if(!GLAD_GL_ARB_clip_control) return;
	glad_glClipControl = (PFNGLCLIPCONTROLPROC)load("glClipControl");
}
static void load_GL_NV_fragment_coverage_to_color(GLADloadproc load) {
	if(!GLAD_GL_NV_fragment_coverage_to_color) return;
	glad_glFragmentCoverageColorNV = (PFNGLFRAGMENTCOVERAGECOLORNVPROC)load("glFragmentCoverageColorNV");
}
static void load_GL_NV_fence(GLADloadproc load) {
	if(!GLAD_GL_NV_fence) return;
	glad_glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)load("glDeleteFencesNV");
	glad_glGenFencesNV = (PFNGLGENFENCESNVPROC)load("glGenFencesNV");
	glad_glIsFenceNV = (PFNGLISFENCENVPROC)load("glIsFenceNV");
	glad_glTestFenceNV = (PFNGLTESTFENCENVPROC)load("glTestFenceNV");
	glad_glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)load("glGetFenceivNV");
	glad_glFinishFenceNV = (PFNGLFINISHFENCENVPROC)load("glFinishFenceNV");
	glad_glSetFenceNV = (PFNGLSETFENCENVPROC)load("glSetFenceNV");
}
static void load_GL_ARB_texture_buffer_range(GLADloadproc load) {
	if(!GLAD_GL_ARB_texture_buffer_range) return;
	glad_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)load("glTexBufferRange");
}
static void load_GL_SUN_mesh_array(GLADloadproc load) {
	if(!GLAD_GL_SUN_mesh_array) return;
	glad_glDrawMeshArraysSUN = (PFNGLDRAWMESHARRAYSSUNPROC)load("glDrawMeshArraysSUN");
}
static void load_GL_ARB_vertex_attrib_binding(GLADloadproc load) {
	if(!GLAD_GL_ARB_vertex_attrib_binding) return;
	glad_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)load("glBindVertexBuffer");
	glad_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)load("glVertexAttribFormat");
	glad_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)load("glVertexAttribIFormat");
	glad_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)load("glVertexAttribLFormat");
	glad_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)load("glVertexAttribBinding");
	glad_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)load("glVertexBindingDivisor");
}
static void load_GL_ARB_framebuffer_no_attachments(GLADloadproc load) {
	if(!GLAD_GL_ARB_framebuffer_no_attachments) return;
	glad_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)load("glFramebufferParameteri");
	glad_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)load("glGetFramebufferParameteriv");
}
static void load_GL_ARB_cl_event(GLADloadproc load) {
	if(!GLAD_GL_ARB_cl_event) return;
	glad_glCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC)load("glCreateSyncFromCLeventARB");
}
static void load_GL_OES_single_precision(GLADloadproc load) {
	if(!GLAD_GL_OES_single_precision) return;
	glad_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)load("glClearDepthfOES");
	glad_glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC)load("glClipPlanefOES");
	glad_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)load("glDepthRangefOES");
	glad_glFrustumfOES = (PFNGLFRUSTUMFOESPROC)load("glFrustumfOES");
	glad_glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC)load("glGetClipPlanefOES");
	glad_glOrthofOES = (PFNGLORTHOFOESPROC)load("glOrthofOES");
}
static void load_GL_NV_primitive_restart(GLADloadproc load) {
	if(!GLAD_GL_NV_primitive_restart) return;
	glad_glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC)load("glPrimitiveRestartNV");
	glad_glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC)load("glPrimitiveRestartIndexNV");
}
static void load_GL_SUN_global_alpha(GLADloadproc load) {
	if(!GLAD_GL_SUN_global_alpha) return;
	glad_glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC)load("glGlobalAlphaFactorbSUN");
	glad_glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC)load("glGlobalAlphaFactorsSUN");
	glad_glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC)load("glGlobalAlphaFactoriSUN");
	glad_glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC)load("glGlobalAlphaFactorfSUN");
	glad_glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC)load("glGlobalAlphaFactordSUN");
	glad_glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC)load("glGlobalAlphaFactorubSUN");
	glad_glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC)load("glGlobalAlphaFactorusSUN");
	glad_glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC)load("glGlobalAlphaFactoruiSUN");
}
static void load_GL_EXT_texture_object(GLADloadproc load) {
	if(!GLAD_GL_EXT_texture_object) return;
	glad_glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC)load("glAreTexturesResidentEXT");
	glad_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)load("glBindTextureEXT");
	glad_glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC)load("glDeleteTexturesEXT");
	glad_glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC)load("glGenTexturesEXT");
	glad_glIsTextureEXT = (PFNGLISTEXTUREEXTPROC)load("glIsTextureEXT");
	glad_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)load("glPrioritizeTexturesEXT");
}
static void load_GL_AMD_name_gen_delete(GLADloadproc load) {
	if(!GLAD_GL_AMD_name_gen_delete) return;
	glad_glGenNamesAMD = (PFNGLGENNAMESAMDPROC)load("glGenNamesAMD");
	glad_glDeleteNamesAMD = (PFNGLDELETENAMESAMDPROC)load("glDeleteNamesAMD");
	glad_glIsNameAMD = (PFNGLISNAMEAMDPROC)load("glIsNameAMD");
}
static void load_GL_ARB_buffer_storage(GLADloadproc load) {
	if(!GLAD_GL_ARB_buffer_storage) return;
	glad_glBufferStorage = (PFNGLBUFFERSTORAGEPROC)load("glBufferStorage");
}
static void load_GL_APPLE_vertex_program_evaluators(GLADloadproc load) {
	if(!GLAD_GL_APPLE_vertex_program_evaluators) return;
	glad_glEnableVertexAttribAPPLE = (PFNGLENABLEVERTEXATTRIBAPPLEPROC)load("glEnableVertexAttribAPPLE");
	glad_glDisableVertexAttribAPPLE = (PFNGLDISABLEVERTEXATTRIBAPPLEPROC)load("glDisableVertexAttribAPPLE");
	glad_glIsVertexAttribEnabledAPPLE = (PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)load("glIsVertexAttribEnabledAPPLE");
	glad_glMapVertexAttrib1dAPPLE = (PFNGLMAPVERTEXATTRIB1DAPPLEPROC)load("glMapVertexAttrib1dAPPLE");
	glad_glMapVertexAttrib1fAPPLE = (PFNGLMAPVERTEXATTRIB1FAPPLEPROC)load("glMapVertexAttrib1fAPPLE");
	glad_glMapVertexAttrib2dAPPLE = (PFNGLMAPVERTEXATTRIB2DAPPLEPROC)load("glMapVertexAttrib2dAPPLE");
	glad_glMapVertexAttrib2fAPPLE = (PFNGLMAPVERTEXATTRIB2FAPPLEPROC)load("glMapVertexAttrib2fAPPLE");
}
static void load_GL_ARB_multi_bind(GLADloadproc load) {
	if(!GLAD_GL_ARB_multi_bind) return;
	glad_glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC)load("glBindBuffersBase");
	glad_glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC)load("glBindBuffersRange");
	glad_glBindTextures = (PFNGLBINDTEXTURESPROC)load("glBindTextures");
	glad_glBindSamplers = (PFNGLBINDSAMPLERSPROC)load("glBindSamplers");
	glad_glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC)load("glBindImageTextures");
	glad_glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC)load("glBindVertexBuffers");
}
static void load_GL_SGIX_list_priority(GLADloadproc load) {
	if(!GLAD_GL_SGIX_list_priority) return;
	glad_glGetListParameterfvSGIX = (PFNGLGETLISTPARAMETERFVSGIXPROC)load("glGetListParameterfvSGIX");
	glad_glGetListParameterivSGIX = (PFNGLGETLISTPARAMETERIVSGIXPROC)load("glGetListParameterivSGIX");
	glad_glListParameterfSGIX = (PFNGLLISTPARAMETERFSGIXPROC)load("glListParameterfSGIX");
	glad_glListParameterfvSGIX = (PFNGLLISTPARAMETERFVSGIXPROC)load("glListParameterfvSGIX");
	glad_glListParameteriSGIX = (PFNGLLISTPARAMETERISGIXPROC)load("glListParameteriSGIX");
	glad_glListParameterivSGIX = (PFNGLLISTPARAMETERIVSGIXPROC)load("glListParameterivSGIX");
}
static void load_GL_NV_vertex_buffer_unified_memory(GLADloadproc load) {
	if(!GLAD_GL_NV_vertex_buffer_unified_memory) return;
	glad_glBufferAddressRangeNV = (PFNGLBUFFERADDRESSRANGENVPROC)load("glBufferAddressRangeNV");
	glad_glVertexFormatNV = (PFNGLVERTEXFORMATNVPROC)load("glVertexFormatNV");
	glad_glNormalFormatNV = (PFNGLNORMALFORMATNVPROC)load("glNormalFormatNV");
	glad_glColorFormatNV = (PFNGLCOLORFORMATNVPROC)load("glColorFormatNV");
	glad_glIndexFormatNV = (PFNGLINDEXFORMATNVPROC)load("glIndexFormatNV");
	glad_glTexCoordFormatNV = (PFNGLTEXCOORDFORMATNVPROC)load("glTexCoordFormatNV");
	glad_glEdgeFlagFormatNV = (PFNGLEDGEFLAGFORMATNVPROC)load("glEdgeFlagFormatNV");
	glad_glSecondaryColorFormatNV = (PFNGLSECONDARYCOLORFORMATNVPROC)load("glSecondaryColorFormatNV");
	glad_glFogCoordFormatNV = (PFNGLFOGCOORDFORMATNVPROC)load("glFogCoordFormatNV");
	glad_glVertexAttribFormatNV = (PFNGLVERTEXATTRIBFORMATNVPROC)load("glVertexAttribFormatNV");
	glad_glVertexAttribIFormatNV = (PFNGLVERTEXATTRIBIFORMATNVPROC)load("glVertexAttribIFormatNV");
	glad_glGetIntegerui64i_vNV = (PFNGLGETINTEGERUI64I_VNVPROC)load("glGetIntegerui64i_vNV");
}
static void load_GL_ARB_clear_texture(GLADloadproc load) {
	if(!GLAD_GL_ARB_clear_texture) return;
	glad_glClearTexImage = (PFNGLCLEARTEXIMAGEPROC)load("glClearTexImage");
	glad_glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC)load("glClearTexSubImage");
}
static void load_GL_NV_blend_equation_advanced(GLADloadproc load) {
	if(!GLAD_GL_NV_blend_equation_advanced) return;
	glad_glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC)load("glBlendParameteriNV");
	glad_glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC)load("glBlendBarrierNV");
}
static void load_GL_SGIS_sharpen_texture(GLADloadproc load) {
	if(!GLAD_GL_SGIS_sharpen_texture) return;
	glad_glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC)load("glSharpenTexFuncSGIS");
	glad_glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC)load("glGetSharpenTexFuncSGIS");
}
static void load_GL_ARB_vertex_program(GLADloadproc load) {
	if(!GLAD_GL_ARB_vertex_program) return;
	glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)load("glVertexAttrib1dARB");
	glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)load("glVertexAttrib1dvARB");
	glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)load("glVertexAttrib1fARB");
	glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)load("glVertexAttrib1fvARB");
	glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)load("glVertexAttrib1sARB");
	glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)load("glVertexAttrib1svARB");
	glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)load("glVertexAttrib2dARB");
	glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)load("glVertexAttrib2dvARB");
	glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)load("glVertexAttrib2fARB");
	glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)load("glVertexAttrib2fvARB");
	glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)load("glVertexAttrib2sARB");
	glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)load("glVertexAttrib2svARB");
	glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)load("glVertexAttrib3dARB");
	glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)load("glVertexAttrib3dvARB");
	glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)load("glVertexAttrib3fARB");
	glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)load("glVertexAttrib3fvARB");
	glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)load("glVertexAttrib3sARB");
	glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)load("glVertexAttrib3svARB");
	glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)load("glVertexAttrib4NbvARB");
	glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)load("glVertexAttrib4NivARB");
	glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)load("glVertexAttrib4NsvARB");
	glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)load("glVertexAttrib4NubARB");
	glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)load("glVertexAttrib4NubvARB");
	glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)load("glVertexAttrib4NuivARB");
	glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)load("glVertexAttrib4NusvARB");
	glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)load("glVertexAttrib4bvARB");
	glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)load("glVertexAttrib4dARB");
	glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)load("glVertexAttrib4dvARB");
	glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)load("glVertexAttrib4fARB");
	glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)load("glVertexAttrib4fvARB");
	glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)load("glVertexAttrib4ivARB");
	glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)load("glVertexAttrib4sARB");
	glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)load("glVertexAttrib4svARB");
	glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)load("glVertexAttrib4ubvARB");
	glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)load("glVertexAttrib4uivARB");
	glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)load("glVertexAttrib4usvARB");
	glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)load("glVertexAttribPointerARB");
	glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)load("glEnableVertexAttribArrayARB");
	glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)load("glDisableVertexAttribArrayARB");
	glad_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC)load("glProgramStringARB");
	glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)load("glBindProgramARB");
	glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)load("glDeleteProgramsARB");
	glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)load("glGenProgramsARB");
	glad_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC)load("glProgramEnvParameter4dARB");
	glad_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)load("glProgramEnvParameter4dvARB");
	glad_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC)load("glProgramEnvParameter4fARB");
	glad_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)load("glProgramEnvParameter4fvARB");
	glad_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)load("glProgramLocalParameter4dARB");
	glad_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)load("glProgramLocalParameter4dvARB");
	glad_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)load("glProgramLocalParameter4fARB");
	glad_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)load("glProgramLocalParameter4fvARB");
	glad_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)load("glGetProgramEnvParameterdvARB");
	glad_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)load("glGetProgramEnvParameterfvARB");
	glad_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)load("glGetProgramLocalParameterdvARB");
	glad_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)load("glGetProgramLocalParameterfvARB");
	glad_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC)load("glGetProgramivARB");
	glad_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC)load("glGetProgramStringARB");
	glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)load("glGetVertexAttribdvARB");
	glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)load("glGetVertexAttribfvARB");
	glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)load("glGetVertexAttribivARB");
	glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)load("glGetVertexAttribPointervARB");
	glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC)load("glIsProgramARB");
}
static void load_GL_NV_clip_space_w_scaling(GLADloadproc load) {
	if(!GLAD_GL_NV_clip_space_w_scaling) return;
	glad_glViewportPositionWScaleNV = (PFNGLVIEWPORTPOSITIONWSCALENVPROC)load("glViewportPositionWScaleNV");
}
static void load_GL_ARB_vertex_buffer_object(GLADloadproc load) {
	if(!GLAD_GL_ARB_vertex_buffer_object) return;
	glad_glBindBufferARB = (PFNGLBINDBUFFERARBPROC)load("glBindBufferARB");
	glad_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)load("glDeleteBuffersARB");
	glad_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)load("glGenBuffersARB");
	glad_glIsBufferARB = (PFNGLISBUFFERARBPROC)load("glIsBufferARB");
	glad_glBufferDataARB = (PFNGLBUFFERDATAARBPROC)load("glBufferDataARB");
	glad_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)load("glBufferSubDataARB");
	glad_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)load("glGetBufferSubDataARB");
	glad_glMapBufferARB = (PFNGLMAPBUFFERARBPROC)load("glMapBufferARB");
	glad_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)load("glUnmapBufferARB");
	glad_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)load("glGetBufferParameterivARB");
	glad_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)load("glGetBufferPointervARB");
}
static void load_GL_NV_vertex_array_range(GLADloadproc load) {
	if(!GLAD_GL_NV_vertex_array_range) return;
	glad_glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)load("glFlushVertexArrayRangeNV");
	glad_glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)load("glVertexArrayRangeNV");
}
static void load_GL_SGIX_fragment_lighting(GLADloadproc load) {
	if(!GLAD_GL_SGIX_fragment_lighting) return;
	glad_glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)load("glFragmentColorMaterialSGIX");
	glad_glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC)load("glFragmentLightfSGIX");
	glad_glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC)load("glFragmentLightfvSGIX");
	glad_glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC)load("glFragmentLightiSGIX");
	glad_glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC)load("glFragmentLightivSGIX");
	glad_glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)load("glFragmentLightModelfSGIX");
	glad_glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)load("glFragmentLightModelfvSGIX");
	glad_glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)load("glFragmentLightModeliSGIX");
	glad_glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)load("glFragmentLightModelivSGIX");
	glad_glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC)load("glFragmentMaterialfSGIX");
	glad_glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC)load("glFragmentMaterialfvSGIX");
	glad_glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC)load("glFragmentMaterialiSGIX");
	glad_glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC)load("glFragmentMaterialivSGIX");
	glad_glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)load("glGetFragmentLightfvSGIX");
	glad_glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)load("glGetFragmentLightivSGIX");
	glad_glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)load("glGetFragmentMaterialfvSGIX");
	glad_glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)load("glGetFragmentMaterialivSGIX");
	glad_glLightEnviSGIX = (PFNGLLIGHTENVISGIXPROC)load("glLightEnviSGIX");
}
static void load_GL_NV_framebuffer_multisample_coverage(GLADloadproc load) {
	if(!GLAD_GL_NV_framebuffer_multisample_coverage) return;
	glad_glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)load("glRenderbufferStorageMultisampleCoverageNV");
}
static void load_GL_EXT_timer_query(GLADloadproc load) {
	if(!GLAD_GL_EXT_timer_query) return;
	glad_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)load("glGetQueryObjecti64vEXT");
	glad_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)load("glGetQueryObjectui64vEXT");
}
static void load_GL_NV_bindless_texture(GLADloadproc load) {
	if(!GLAD_GL_NV_bindless_texture) return;
	glad_glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC)load("glGetTextureHandleNV");
	glad_glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC)load("glGetTextureSamplerHandleNV");
	glad_glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)load("glMakeTextureHandleResidentNV");
	glad_glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)load("glMakeTextureHandleNonResidentNV");
	glad_glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC)load("glGetImageHandleNV");
	glad_glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)load("glMakeImageHandleResidentNV");
	glad_glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)load("glMakeImageHandleNonResidentNV");
	glad_glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC)load("glUniformHandleui64NV");
	glad_glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC)load("glUniformHandleui64vNV");
	glad_glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)load("glProgramUniformHandleui64NV");
	glad_glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)load("glProgramUniformHandleui64vNV");
	glad_glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC)load("glIsTextureHandleResidentNV");
	glad_glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC)load("glIsImageHandleResidentNV");
}
static void load_GL_KHR_debug(GLADloadproc load) {
	if(!GLAD_GL_KHR_debug) return;
	glad_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)load("glDebugMessageControl");
	glad_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)load("glDebugMessageInsert");
	glad_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)load("glDebugMessageCallback");
	glad_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)load("glGetDebugMessageLog");
	glad_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)load("glPushDebugGroup");
	glad_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)load("glPopDebugGroup");
	glad_glObjectLabel = (PFNGLOBJECTLABELPROC)load("glObjectLabel");
	glad_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)load("glGetObjectLabel");
	glad_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)load("glObjectPtrLabel");
	glad_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)load("glGetObjectPtrLabel");
	glad_glGetPointerv = (PFNGLGETPOINTERVPROC)load("glGetPointerv");
	glad_glDebugMessageControlKHR = (PFNGLDEBUGMESSAGECONTROLKHRPROC)load("glDebugMessageControlKHR");
	glad_glDebugMessageInsertKHR = (PFNGLDEBUGMESSAGEINSERTKHRPROC)load("glDebugMessageInsertKHR");
	glad_glDebugMessageCallbackKHR = (PFNGLDEBUGMESSAGECALLBACKKHRPROC)load("glDebugMessageCallbackKHR");
	glad_glGetDebugMessageLogKHR = (PFNGLGETDEBUGMESSAGELOGKHRPROC)load("glGetDebugMessageLogKHR");
	glad_glPushDebugGroupKHR = (PFNGLPUSHDEBUGGROUPKHRPROC)load("glPushDebugGroupKHR");
	glad_glPopDebugGroupKHR = (PFNGLPOPDEBUGGROUPKHRPROC)load("glPopDebugGroupKHR");
	glad_glObjectLabelKHR = (PFNGLOBJECTLABELKHRPROC)load("glObjectLabelKHR");
	glad_glGetObjectLabelKHR = (PFNGLGETOBJECTLABELKHRPROC)load("glGetObjectLabelKHR");
	glad_glObjectPtrLabelKHR = (PFNGLOBJECTPTRLABELKHRPROC)load("glObjectPtrLabelKHR");
	glad_glGetObjectPtrLabelKHR = (PFNGLGETOBJECTPTRLABELKHRPROC)load("glGetObjectPtrLabelKHR");
	glad_glGetPointervKHR = (PFNGLGETPOINTERVKHRPROC)load("glGetPointervKHR");
}
static void load_GL_ATI_vertex_attrib_array_object(GLADloadproc load) {
	if(!GLAD_GL_ATI_vertex_attrib_array_object) return;
	glad_glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)load("glVertexAttribArrayObjectATI");
	glad_glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)load("glGetVertexAttribArrayObjectfvATI");
	glad_glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)load("glGetVertexAttribArrayObjectivATI");
}
static void load_GL_EXT_geometry_shader4(GLADloadproc load) {
	if(!GLAD_GL_EXT_geometry_shader4) return;
	glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)load("glProgramParameteriEXT");
}
static void load_GL_EXT_bindable_uniform(GLADloadproc load) {
	if(!GLAD_GL_EXT_bindable_uniform) return;
	glad_glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC)load("glUniformBufferEXT");
	glad_glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)load("glGetUniformBufferSizeEXT");
	glad_glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC)load("glGetUniformOffsetEXT");
}
static void load_GL_KHR_blend_equation_advanced(GLADloadproc load) {
	if(!GLAD_GL_KHR_blend_equation_advanced) return;
	glad_glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC)load("glBlendBarrierKHR");
}
static void load_GL_ATI_element_array(GLADloadproc load) {
	if(!GLAD_GL_ATI_element_array) return;
	glad_glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC)load("glElementPointerATI");
	glad_glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC)load("glDrawElementArrayATI");
	glad_glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)load("glDrawRangeElementArrayATI");
}
static void load_GL_SGIX_reference_plane(GLADloadproc load) {
	if(!GLAD_GL_SGIX_reference_plane) return;
	glad_glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC)load("glReferencePlaneSGIX");
}
static void load_GL_EXT_stencil_two_side(GLADloadproc load) {
	if(!GLAD_GL_EXT_stencil_two_side) return;
	glad_glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC)load("glActiveStencilFaceEXT");
}
static void load_GL_NV_explicit_multisample(GLADloadproc load) {
	if(!GLAD_GL_NV_explicit_multisample) return;
	glad_glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC)load("glGetMultisamplefvNV");
	glad_glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC)load("glSampleMaskIndexedNV");
	glad_glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC)load("glTexRenderbufferNV");
}
static void load_GL_IBM_static_data(GLADloadproc load) {
	if(!GLAD_GL_IBM_static_data) return;
	glad_glFlushStaticDataIBM = (PFNGLFLUSHSTATICDATAIBMPROC)load("glFlushStaticDataIBM");
}
static void load_GL_EXT_texture_perturb_normal(GLADloadproc load) {
	if(!GLAD_GL_EXT_texture_perturb_normal) return;
	glad_glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC)load("glTextureNormalEXT");
}
static void load_GL_EXT_point_parameters(GLADloadproc load) {
	if(!GLAD_GL_EXT_point_parameters) return;
	glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)load("glPointParameterfEXT");
	glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)load("glPointParameterfvEXT");
}
static void load_GL_PGI_misc_hints(GLADloadproc load) {
	if(!GLAD_GL_PGI_misc_hints) return;
	glad_glHintPGI = (PFNGLHINTPGIPROC)load("glHintPGI");
}
static void load_GL_ARB_vertex_shader(GLADloadproc load) {
	if(!GLAD_GL_ARB_vertex_shader) return;
	glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)load("glVertexAttrib1fARB");
	glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)load("glVertexAttrib1sARB");
	glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)load("glVertexAttrib1dARB");
	glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)load("glVertexAttrib2fARB");
	glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)load("glVertexAttrib2sARB");
	glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)load("glVertexAttrib2dARB");
	glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)load("glVertexAttrib3fARB");
	glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)load("glVertexAttrib3sARB");
	glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)load("glVertexAttrib3dARB");
	glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)load("glVertexAttrib4fARB");
	glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)load("glVertexAttrib4sARB");
	glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)load("glVertexAttrib4dARB");
	glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)load("glVertexAttrib4NubARB");
	glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)load("glVertexAttrib1fvARB");
	glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)load("glVertexAttrib1svARB");
	glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)load("glVertexAttrib1dvARB");
	glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)load("glVertexAttrib2fvARB");
	glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)load("glVertexAttrib2svARB");
	glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)load("glVertexAttrib2dvARB");
	glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)load("glVertexAttrib3fvARB");
	glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)load("glVertexAttrib3svARB");
	glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)load("glVertexAttrib3dvARB");
	glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)load("glVertexAttrib4fvARB");
	glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)load("glVertexAttrib4svARB");
	glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)load("glVertexAttrib4dvARB");
	glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)load("glVertexAttrib4ivARB");
	glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)load("glVertexAttrib4bvARB");
	glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)load("glVertexAttrib4ubvARB");
	glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)load("glVertexAttrib4usvARB");
	glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)load("glVertexAttrib4uivARB");
	glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)load("glVertexAttrib4NbvARB");
	glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)load("glVertexAttrib4NsvARB");
	glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)load("glVertexAttrib4NivARB");
	glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)load("glVertexAttrib4NubvARB");
	glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)load("glVertexAttrib4NusvARB");
	glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)load("glVertexAttrib4NuivARB");
	glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)load("glVertexAttribPointerARB");
	glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)load("glEnableVertexAttribArrayARB");
	glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)load("glDisableVertexAttribArrayARB");
	glad_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)load("glBindAttribLocationARB");
	glad_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)load("glGetActiveAttribARB");
	glad_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)load("glGetAttribLocationARB");
	glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)load("glGetVertexAttribdvARB");
	glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)load("glGetVertexAttribfvARB");
	glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)load("glGetVertexAttribivARB");
	glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)load("glGetVertexAttribPointervARB");
}
static void load_GL_ARB_tessellation_shader(GLADloadproc load) {
	if(!GLAD_GL_ARB_tessellation_shader) return;
	glad_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)load("glPatchParameteri");
	glad_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)load("glPatchParameterfv");
}
static void load_GL_EXT_draw_buffers2(GLADloadproc load) {
	if(!GLAD_GL_EXT_draw_buffers2) return;
	glad_glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)load("glColorMaskIndexedEXT");
	glad_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)load("glGetBooleanIndexedvEXT");
	glad_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)load("glGetIntegerIndexedvEXT");
	glad_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)load("glEnableIndexedEXT");
	glad_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)load("glDisableIndexedEXT");
	glad_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)load("glIsEnabledIndexedEXT");
}
static void load_GL_ARB_vertex_attrib_64bit(GLADloadproc load) {
	if(!GLAD_GL_ARB_vertex_attrib_64bit) return;
	glad_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)load("glVertexAttribL1d");
	glad_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)load("glVertexAttribL2d");
	glad_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)load("glVertexAttribL3d");
	glad_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)load("glVertexAttribL4d");
	glad_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)load("glVertexAttribL1dv");
	glad_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)load("glVertexAttribL2dv");
	glad_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)load("glVertexAttribL3dv");
	glad_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)load("glVertexAttribL4dv");
	glad_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)load("glVertexAttribLPointer");
	glad_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)load("glGetVertexAttribLdv");
}
static void load_GL_EXT_texture_filter_minmax(GLADloadproc load) {
	if(!GLAD_GL_EXT_texture_filter_minmax) return;
	glad_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC)load("glRasterSamplesEXT");
}
static void load_GL_AMD_interleaved_elements(GLADloadproc load) {
	if(!GLAD_GL_AMD_interleaved_elements) return;
	glad_glVertexAttribParameteriAMD = (PFNGLVERTEXATTRIBPARAMETERIAMDPROC)load("glVertexAttribParameteriAMD");
}
static void load_GL_ARB_fragment_program(GLADloadproc load) {
	if(!GLAD_GL_ARB_fragment_program) return;
	glad_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC)load("glProgramStringARB");
	glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)load("glBindProgramARB");
	glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)load("glDeleteProgramsARB");
	glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)load("glGenProgramsARB");
	glad_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC)load("glProgramEnvParameter4dARB");
	glad_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)load("glProgramEnvParameter4dvARB");
	glad_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC)load("glProgramEnvParameter4fARB");
	glad_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)load("glProgramEnvParameter4fvARB");
	glad_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)load("glProgramLocalParameter4dARB");
	glad_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)load("glProgramLocalParameter4dvARB");
	glad_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)load("glProgramLocalParameter4fARB");
	glad_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)load("glProgramLocalParameter4fvARB");
	glad_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)load("glGetProgramEnvParameterdvARB");
	glad_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)load("glGetProgramEnvParameterfvARB");
	glad_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)load("glGetProgramLocalParameterdvARB");
	glad_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)load("glGetProgramLocalParameterfvARB");
	glad_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC)load("glGetProgramivARB");
	glad_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC)load("glGetProgramStringARB");
	glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC)load("glIsProgramARB");
}
static void load_GL_ARB_texture_storage(GLADloadproc load) {
	if(!GLAD_GL_ARB_texture_storage) return;
	glad_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)load("glTexStorage1D");
	glad_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)load("glTexStorage2D");
	glad_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)load("glTexStorage3D");
}
static void load_GL_ARB_copy_image(GLADloadproc load) {
	if(!GLAD_GL_ARB_copy_image) return;
	glad_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)load("glCopyImageSubData");
}
static void load_GL_SGIS_pixel_texture(GLADloadproc load) {
	if(!GLAD_GL_SGIS_pixel_texture) return;
	glad_glPixelTexGenParameteriSGIS = (PFNGLPIXELTEXGENPARAMETERISGISPROC)load("glPixelTexGenParameteriSGIS");
	glad_glPixelTexGenParameterivSGIS = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC)load("glPixelTexGenParameterivSGIS");
	glad_glPixelTexGenParameterfSGIS = (PFNGLPIXELTEXGENPARAMETERFSGISPROC)load("glPixelTexGenParameterfSGIS");
	glad_glPixelTexGenParameterfvSGIS = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC)load("glPixelTexGenParameterfvSGIS");
	glad_glGetPixelTexGenParameterivSGIS = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)load("glGetPixelTexGenParameterivSGIS");
	glad_glGetPixelTexGenParameterfvSGIS = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)load("glGetPixelTexGenParameterfvSGIS");
}
static void load_GL_SGIX_instruments(GLADloadproc load) {
	if(!GLAD_GL_SGIX_instruments) return;
	glad_glGetInstrumentsSGIX = (PFNGLGETINSTRUMENTSSGIXPROC)load("glGetInstrumentsSGIX");
	glad_glInstrumentsBufferSGIX = (PFNGLINSTRUMENTSBUFFERSGIXPROC)load("glInstrumentsBufferSGIX");
	glad_glPollInstrumentsSGIX = (PFNGLPOLLINSTRUMENTSSGIXPROC)load("glPollInstrumentsSGIX");
	glad_glReadInstrumentsSGIX = (PFNGLREADINSTRUMENTSSGIXPROC)load("glReadInstrumentsSGIX");
	glad_glStartInstrumentsSGIX = (PFNGLSTARTINSTRUMENTSSGIXPROC)load("glStartInstrumentsSGIX");
	glad_glStopInstrumentsSGIX = (PFNGLSTOPINSTRUMENTSSGIXPROC)load("glStopInstrumentsSGIX");
}
static void load_GL_ARB_shader_storage_buffer_object(GLADloadproc load) {
	if(!GLAD_GL_ARB_shader_storage_buffer_object) return;
	glad_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)load("glShaderStorageBlockBinding");
}
static void load_GL_EXT_blend_minmax(GLADloadproc load) {
	if(!GLAD_GL_EXT_blend_minmax) return;
	glad_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)load("glBlendEquationEXT");
}
static void load_GL_ARB_base_instance(GLADloadproc load) {
	if(!GLAD_GL_ARB_base_instance) return;
	glad_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)load("glDrawArraysInstancedBaseInstance");
	glad_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)load("glDrawElementsInstancedBaseInstance");
	glad_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)load("glDrawElementsInstancedBaseVertexBaseInstance");
}
static void load_GL_ARB_ES3_1_compatibility(GLADloadproc load) {
	if(!GLAD_GL_ARB_ES3_1_compatibility) return;
	glad_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC)load("glMemoryBarrierByRegion");
}
static void load_GL_EXT_texture_integer(GLADloadproc load) {
	if(!GLAD_GL_EXT_texture_integer) return;
	glad_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)load("glTexParameterIivEXT");
	glad_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)load("glTexParameterIuivEXT");
	glad_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)load("glGetTexParameterIivEXT");
	glad_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)load("glGetTexParameterIuivEXT");
	glad_glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC)load("glClearColorIiEXT");
	glad_glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC)load("glClearColorIuiEXT");
}
static void load_GL_ARB_texture_multisample(GLADloadproc load) {
	if(!GLAD_GL_ARB_texture_multisample) return;
	glad_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)load("glTexImage2DMultisample");
	glad_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)load("glTexImage3DMultisample");
	glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)load("glGetMultisamplefv");
	glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC)load("glSampleMaski");
}
static void load_GL_AMD_gpu_shader_int64(GLADloadproc load) {
	if(!GLAD_GL_AMD_gpu_shader_int64) return;
	glad_glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC)load("glUniform1i64NV");
	glad_glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC)load("glUniform2i64NV");
	glad_glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC)load("glUniform3i64NV");
	glad_glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC)load("glUniform4i64NV");
	glad_glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC)load("glUniform1i64vNV");
	glad_glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC)load("glUniform2i64vNV");
	glad_glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC)load("glUniform3i64vNV");
	glad_glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC)load("glUniform4i64vNV");
	glad_glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC)load("glUniform1ui64NV");
	glad_glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC)load("glUniform2ui64NV");
	glad_glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC)load("glUniform3ui64NV");
	glad_glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC)load("glUniform4ui64NV");
	glad_glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC)load("glUniform1ui64vNV");
	glad_glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC)load("glUniform2ui64vNV");
	glad_glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC)load("glUniform3ui64vNV");
	glad_glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC)load("glUniform4ui64vNV");
	glad_glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC)load("glGetUniformi64vNV");
	glad_glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC)load("glGetUniformui64vNV");
	glad_glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC)load("glProgramUniform1i64NV");
	glad_glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC)load("glProgramUniform2i64NV");
	glad_glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC)load("glProgramUniform3i64NV");
	glad_glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC)load("glProgramUniform4i64NV");
	glad_glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC)load("glProgramUniform1i64vNV");
	glad_glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC)load("glProgramUniform2i64vNV");
	glad_glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC)load("glProgramUniform3i64vNV");
	glad_glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC)load("glProgramUniform4i64vNV");
	glad_glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC)load("glProgramUniform1ui64NV");
	glad_glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC)load("glProgramUniform2ui64NV");
	glad_glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC)load("glProgramUniform3ui64NV");
	glad_glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC)load("glProgramUniform4ui64NV");
	glad_glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC)load("glProgramUniform1ui64vNV");
	glad_glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC)load("glProgramUniform2ui64vNV");
	glad_glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC)load("glProgramUniform3ui64vNV");
	glad_glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC)load("glProgramUniform4ui64vNV");
}
static void load_GL_AMD_vertex_shader_tessellator(GLADloadproc load) {
	if(!GLAD_GL_AMD_vertex_shader_tessellator) return;
	glad_glTessellationFactorAMD = (PFNGLTESSELLATIONFACTORAMDPROC)load("glTessellationFactorAMD");
	glad_glTessellationModeAMD = (PFNGLTESSELLATIONMODEAMDPROC)load("glTessellationModeAMD");
}
static void load_GL_ARB_invalidate_subdata(GLADloadproc load) {
	if(!GLAD_GL_ARB_invalidate_subdata) return;
	glad_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)load("glInvalidateTexSubImage");
	glad_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)load("glInvalidateTexImage");
	glad_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)load("glInvalidateBufferSubData");
	glad_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)load("glInvalidateBufferData");
	glad_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)load("glInvalidateFramebuffer");
	glad_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)load("glInvalidateSubFramebuffer");
}
static void load_GL_EXT_index_material(GLADloadproc load) {
	if(!GLAD_GL_EXT_index_material) return;
	glad_glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC)load("glIndexMaterialEXT");
}
static void load_GL_INTEL_parallel_arrays(GLADloadproc load) {
	if(!GLAD_GL_INTEL_parallel_arrays) return;
	glad_glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC)load("glVertexPointervINTEL");
	glad_glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC)load("glNormalPointervINTEL");
	glad_glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC)load("glColorPointervINTEL");
	glad_glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC)load("glTexCoordPointervINTEL");
}
static void load_GL_ATI_draw_buffers(GLADloadproc load) {
	if(!GLAD_GL_ATI_draw_buffers) return;
	glad_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)load("glDrawBuffersATI");
}
static void load_GL_SGIX_pixel_texture(GLADloadproc load) {
	if(!GLAD_GL_SGIX_pixel_texture) return;
	glad_glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC)load("glPixelTexGenSGIX");
}
static void load_GL_ARB_timer_query(GLADloadproc load) {
	if(!GLAD_GL_ARB_timer_query) return;
	glad_glQueryCounter = (PFNGLQUERYCOUNTERPROC)load("glQueryCounter");
	glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)load("glGetQueryObjecti64v");
	glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)load("glGetQueryObjectui64v");
}
static void load_GL_NV_parameter_buffer_object(GLADloadproc load) {
	if(!GLAD_GL_NV_parameter_buffer_object) return;
	glad_glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)load("glProgramBufferParametersfvNV");
	glad_glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)load("glProgramBufferParametersIivNV");
	glad_glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)load("glProgramBufferParametersIuivNV");
}
static void load_GL_ARB_direct_state_access(GLADloadproc load) {
	if(!GLAD_GL_ARB_direct_state_access) return;
	glad_glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC)load("glCreateTransformFeedbacks");
	glad_glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)load("glTransformFeedbackBufferBase");
	glad_glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)load("glTransformFeedbackBufferRange");
	glad_glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC)load("glGetTransformFeedbackiv");
	glad_glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC)load("glGetTransformFeedbacki_v");
	glad_glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC)load("glGetTransformFeedbacki64_v");
	glad_glCreateBuffers = (PFNGLCREATEBUFFERSPROC)load("glCreateBuffers");
	glad_glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC)load("glNamedBufferStorage");
	glad_glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC)load("glNamedBufferData");
	glad_glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC)load("glNamedBufferSubData");
	glad_glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC)load("glCopyNamedBufferSubData");
	glad_glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC)load("glClearNamedBufferData");
	glad_glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC)load("glClearNamedBufferSubData");
	glad_glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC)load("glMapNamedBuffer");
	glad_glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC)load("glMapNamedBufferRange");
	glad_glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC)load("glUnmapNamedBuffer");
	glad_glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)load("glFlushMappedNamedBufferRange");
	glad_glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC)load("glGetNamedBufferParameteriv");
	glad_glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)load("glGetNamedBufferParameteri64v");
	glad_glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC)load("glGetNamedBufferPointerv");
	glad_glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC)load("glGetNamedBufferSubData");
	glad_glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC)load("glCreateFramebuffers");
	glad_glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)load("glNamedFramebufferRenderbuffer");
	glad_glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)load("glNamedFramebufferParameteri");
	glad_glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)load("glNamedFramebufferTexture");
	glad_glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)load("glNamedFramebufferTextureLayer");
	glad_glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)load("glNamedFramebufferDrawBuffer");
	glad_glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)load("glNamedFramebufferDrawBuffers");
	glad_glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)load("glNamedFramebufferReadBuffer");
	glad_glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)load("glInvalidateNamedFramebufferData");
	glad_glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)load("glInvalidateNamedFramebufferSubData");
	glad_glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)load("glClearNamedFramebufferiv");
	glad_glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)load("glClearNamedFramebufferuiv");
	glad_glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)load("glClearNamedFramebufferfv");
	glad_glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)load("glClearNamedFramebufferfi");
	glad_glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC)load("glBlitNamedFramebuffer");
	glad_glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)load("glCheckNamedFramebufferStatus");
	glad_glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)load("glGetNamedFramebufferParameteriv");
	glad_glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)load("glGetNamedFramebufferAttachmentParameteriv");
	glad_glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC)load("glCreateRenderbuffers");
	glad_glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC)load("glNamedRenderbufferStorage");
	glad_glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)load("glNamedRenderbufferStorageMultisample");
	glad_glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)load("glGetNamedRenderbufferParameteriv");
	glad_glCreateTextures = (PFNGLCREATETEXTURESPROC)load("glCreateTextures");
	glad_glTextureBuffer = (PFNGLTEXTUREBUFFERPROC)load("glTextureBuffer");
	glad_glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC)load("glTextureBufferRange");
	glad_glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC)load("glTextureStorage1D");
	glad_glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC)load("glTextureStorage2D");
	glad_glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC)load("glTextureStorage3D");
	glad_glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)load("glTextureStorage2DMultisample");
	glad_glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)load("glTextureStorage3DMultisample");
	glad_glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC)load("glTextureSubImage1D");
	glad_glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC)load("glTextureSubImage2D");
	glad_glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC)load("glTextureSubImage3D");
	glad_glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)load("glCompressedTextureSubImage1D");
	glad_glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)load("glCompressedTextureSubImage2D");
	glad_glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)load("glCompressedTextureSubImage3D");
	glad_glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC)load("glCopyTextureSubImage1D");
	glad_glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC)load("glCopyTextureSubImage2D");
	glad_glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC)load("glCopyTextureSubImage3D");
	glad_glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC)load("glTextureParameterf");
	glad_glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC)load("glTextureParameterfv");
	glad_glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC)load("glTextureParameteri");
	glad_glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC)load("glTextureParameterIiv");
	glad_glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC)load("glTextureParameterIuiv");
	glad_glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC)load("glTextureParameteriv");
	glad_glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC)load("glGenerateTextureMipmap");
	glad_glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC)load("glBindTextureUnit");
	glad_glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC)load("glGetTextureImage");
	glad_glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)load("glGetCompressedTextureImage");
	glad_glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC)load("glGetTextureLevelParameterfv");
	glad_glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC)load("glGetTextureLevelParameteriv");
	glad_glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC)load("glGetTextureParameterfv");
	glad_glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC)load("glGetTextureParameterIiv");
	glad_glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC)load("glGetTextureParameterIuiv");
	glad_glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC)load("glGetTextureParameteriv");
	glad_glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC)load("glCreateVertexArrays");
	glad_glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC)load("glDisableVertexArrayAttrib");
	glad_glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC)load("glEnableVertexArrayAttrib");
	glad_glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC)load("glVertexArrayElementBuffer");
	glad_glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC)load("glVertexArrayVertexBuffer");
	glad_glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC)load("glVertexArrayVertexBuffers");
	glad_glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC)load("glVertexArrayAttribBinding");
	glad_glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC)load("glVertexArrayAttribFormat");
	glad_glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC)load("glVertexArrayAttribIFormat");
	glad_glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC)load("glVertexArrayAttribLFormat");
	glad_glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC)load("glVertexArrayBindingDivisor");
	glad_glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC)load("glGetVertexArrayiv");
	glad_glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC)load("glGetVertexArrayIndexediv");
	glad_glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC)load("glGetVertexArrayIndexed64iv");
	glad_glCreateSamplers = (PFNGLCREATESAMPLERSPROC)load("glCreateSamplers");
	glad_glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC)load("glCreateProgramPipelines");
	glad_glCreateQueries = (PFNGLCREATEQUERIESPROC)load("glCreateQueries");
	glad_glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC)load("glGetQueryBufferObjecti64v");
	glad_glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC)load("glGetQueryBufferObjectiv");
	glad_glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC)load("glGetQueryBufferObjectui64v");
	glad_glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC)load("glGetQueryBufferObjectuiv");
}
static void load_GL_ARB_uniform_buffer_object(GLADloadproc load) {
	if(!GLAD_GL_ARB_uniform_buffer_object) return;
	glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)load("glGetUniformIndices");
	glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)load("glGetActiveUniformsiv");
	glad_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)load("glGetActiveUniformName");
	glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)load("glGetUniformBlockIndex");
	glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)load("glGetActiveUniformBlockiv");
	glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)load("glGetActiveUniformBlockName");
	glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)load("glUniformBlockBinding");
	glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)load("glBindBufferRange");
	glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)load("glBindBufferBase");
	glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)load("glGetIntegeri_v");
}
static void load_GL_NV_transform_feedback2(GLADloadproc load) {
	if(!GLAD_GL_NV_transform_feedback2) return;
	glad_glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC)load("glBindTransformFeedbackNV");
	glad_glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC)load("glDeleteTransformFeedbacksNV");
	glad_glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC)load("glGenTransformFeedbacksNV");
	glad_glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC)load("glIsTransformFeedbackNV");
	glad_glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC)load("glPauseTransformFeedbackNV");
	glad_glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC)load("glResumeTransformFeedbackNV");
	glad_glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC)load("glDrawTransformFeedbackNV");
}
static void load_GL_EXT_blend_color(GLADloadproc load) {
	if(!GLAD_GL_EXT_blend_color) return;
	glad_glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)load("glBlendColorEXT");
}
static void load_GL_EXT_histogram(GLADloadproc load) {
	if(!GLAD_GL_EXT_histogram) return;
	glad_glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC)load("glGetHistogramEXT");
	glad_glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)load("glGetHistogramParameterfvEXT");
	glad_glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)load("glGetHistogramParameterivEXT");
	glad_glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC)load("glGetMinmaxEXT");
	glad_glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC)load("glGetMinmaxParameterfvEXT");
	glad_glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC)load("glGetMinmaxParameterivEXT");
	glad_glHistogramEXT = (PFNGLHISTOGRAMEXTPROC)load("glHistogramEXT");
	glad_glMinmaxEXT = (PFNGLMINMAXEXTPROC)load("glMinmaxEXT");
	glad_glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC)load("glResetHistogramEXT");
	glad_glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC)load("glResetMinmaxEXT");
}
static void load_GL_EXT_polygon_offset(GLADloadproc load) {
	if(!GLAD_GL_EXT_polygon_offset) return;
	glad_glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC)load("glPolygonOffsetEXT");
}
static void load_GL_SGIS_point_parameters(GLADloadproc load) {
	if(!GLAD_GL_SGIS_point_parameters) return;
	glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)load("glPointParameterfSGIS");
	glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)load("glPointParameterfvSGIS");
}
static void load_GL_EXT_direct_state_access(GLADloadproc load) {
	if(!GLAD_GL_EXT_direct_state_access) return;
	glad_glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC)load("glMatrixLoadfEXT");
	glad_glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC)load("glMatrixLoaddEXT");
	glad_glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC)load("glMatrixMultfEXT");
	glad_glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC)load("glMatrixMultdEXT");
	glad_glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC)load("glMatrixLoadIdentityEXT");
	glad_glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC)load("glMatrixRotatefEXT");
	glad_glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC)load("glMatrixRotatedEXT");
	glad_glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC)load("glMatrixScalefEXT");
	glad_glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC)load("glMatrixScaledEXT");
	glad_glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC)load("glMatrixTranslatefEXT");
	glad_glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC)load("glMatrixTranslatedEXT");
	glad_glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC)load("glMatrixFrustumEXT");
	glad_glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC)load("glMatrixOrthoEXT");
	glad_glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC)load("glMatrixPopEXT");
	glad_glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC)load("glMatrixPushEXT");
	glad_glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC)load("glClientAttribDefaultEXT");
	glad_glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)load("glPushClientAttribDefaultEXT");
	glad_glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC)load("glTextureParameterfEXT");
	glad_glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC)load("glTextureParameterfvEXT");
	glad_glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC)load("glTextureParameteriEXT");
	glad_glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC)load("glTextureParameterivEXT");
	glad_glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC)load("glTextureImage1DEXT");
	glad_glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC)load("glTextureImage2DEXT");
	glad_glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC)load("glTextureSubImage1DEXT");
	glad_glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC)load("glTextureSubImage2DEXT");
	glad_glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC)load("glCopyTextureImage1DEXT");
	glad_glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC)load("glCopyTextureImage2DEXT");
	glad_glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)load("glCopyTextureSubImage1DEXT");
	glad_glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)load("glCopyTextureSubImage2DEXT");
	glad_glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC)load("glGetTextureImageEXT");
	glad_glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC)load("glGetTextureParameterfvEXT");
	glad_glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC)load("glGetTextureParameterivEXT");
	glad_glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)load("glGetTextureLevelParameterfvEXT");
	glad_glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)load("glGetTextureLevelParameterivEXT");
	glad_glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC)load("glTextureImage3DEXT");
	glad_glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC)load("glTextureSubImage3DEXT");
	glad_glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)load("glCopyTextureSubImage3DEXT");
	glad_glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC)load("glBindMultiTextureEXT");
	glad_glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC)load("glMultiTexCoordPointerEXT");
	glad_glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC)load("glMultiTexEnvfEXT");
	glad_glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC)load("glMultiTexEnvfvEXT");
	glad_glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC)load("glMultiTexEnviEXT");
	glad_glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC)load("glMultiTexEnvivEXT");
	glad_glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC)load("glMultiTexGendEXT");
	glad_glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC)load("glMultiTexGendvEXT");
	glad_glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC)load("glMultiTexGenfEXT");
	glad_glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC)load("glMultiTexGenfvEXT");
	glad_glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC)load("glMultiTexGeniEXT");
	glad_glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC)load("glMultiTexGenivEXT");
	glad_glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC)load("glGetMultiTexEnvfvEXT");
	glad_glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC)load("glGetMultiTexEnvivEXT");
	glad_glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC)load("glGetMultiTexGendvEXT");
	glad_glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC)load("glGetMultiTexGenfvEXT");
	glad_glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC)load("glGetMultiTexGenivEXT");
	glad_glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC)load("glMultiTexParameteriEXT");
	glad_glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC)load("glMultiTexParameterivEXT");
	glad_glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC)load("glMultiTexParameterfEXT");
	glad_glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC)load("glMultiTexParameterfvEXT");
	glad_glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC)load("glMultiTexImage1DEXT");
	glad_glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC)load("glMultiTexImage2DEXT");
	glad_glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC)load("glMultiTexSubImage1DEXT");
	glad_glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC)load("glMultiTexSubImage2DEXT");
	glad_glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC)load("glCopyMultiTexImage1DEXT");
	glad_glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC)load("glCopyMultiTexImage2DEXT");
	glad_glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)load("glCopyMultiTexSubImage1DEXT");
	glad_glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)load("glCopyMultiTexSubImage2DEXT");
	glad_glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC)load("glGetMultiTexImageEXT");
	glad_glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC)load("glGetMultiTexParameterfvEXT");
	glad_glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC)load("glGetMultiTexParameterivEXT");
	glad_glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)load("glGetMultiTexLevelParameterfvEXT");
	glad_glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)load("glGetMultiTexLevelParameterivEXT");
	glad_glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC)load("glMultiTexImage3DEXT");
	glad_glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC)load("glMultiTexSubImage3DEXT");
	glad_glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)load("glCopyMultiTexSubImage3DEXT");
	glad_glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)load("glEnableClientStateIndexedEXT");
	glad_glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)load("glDisableClientStateIndexedEXT");
	glad_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)load("glGetFloatIndexedvEXT");
	glad_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)load("glGetDoubleIndexedvEXT");
	glad_glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC)load("glGetPointerIndexedvEXT");
	glad_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)load("glEnableIndexedEXT");
	glad_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)load("glDisableIndexedEXT");
	glad_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)load("glIsEnabledIndexedEXT");
	glad_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)load("glGetIntegerIndexedvEXT");
	glad_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)load("glGetBooleanIndexedvEXT");
	glad_glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)load("glCompressedTextureImage3DEXT");
	glad_glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)load("glCompressedTextureImage2DEXT");
	glad_glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)load("glCompressedTextureImage1DEXT");
	glad_glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)load("glCompressedTextureSubImage3DEXT");
	glad_glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)load("glCompressedTextureSubImage2DEXT");
	glad_glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)load("glCompressedTextureSubImage1DEXT");
	glad_glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)load("glGetCompressedTextureImageEXT");
	glad_glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)load("glCompressedMultiTexImage3DEXT");
	glad_glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)load("glCompressedMultiTexImage2DEXT");
	glad_glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)load("glCompressedMultiTexImage1DEXT");
	glad_glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)load("glCompressedMultiTexSubImage3DEXT");
	glad_glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)load("glCompressedMultiTexSubImage2DEXT");
	glad_glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)load("glCompressedMultiTexSubImage1DEXT");
	glad_glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)load("glGetCompressedMultiTexImageEXT");
	glad_glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC)load("glMatrixLoadTransposefEXT");
	glad_glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC)load("glMatrixLoadTransposedEXT");
	glad_glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC)load("glMatrixMultTransposefEXT");
	glad_glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC)load("glMatrixMultTransposedEXT");
	glad_glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC)load("glNamedBufferDataEXT");
	glad_glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC)load("glNamedBufferSubDataEXT");
	glad_glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC)load("glMapNamedBufferEXT");
	glad_glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC)load("glUnmapNamedBufferEXT");
	glad_glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)load("glGetNamedBufferParameterivEXT");
	glad_glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)load("glGetNamedBufferPointervEXT");
	glad_glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)load("glGetNamedBufferSubDataEXT");
	glad_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)load("glProgramUniform1fEXT");
	glad_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)load("glProgramUniform2fEXT");
	glad_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)load("glProgramUniform3fEXT");
	glad_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)load("glProgramUniform4fEXT");
	glad_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)load("glProgramUniform1iEXT");
	glad_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)load("glProgramUniform2iEXT");
	glad_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)load("glProgramUniform3iEXT");
	glad_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)load("glProgramUniform4iEXT");
	glad_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)load("glProgramUniform1fvEXT");
	glad_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)load("glProgramUniform2fvEXT");
	glad_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)load("glProgramUniform3fvEXT");
	glad_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)load("glProgramUniform4fvEXT");
	glad_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)load("glProgramUniform1ivEXT");
	glad_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)load("glProgramUniform2ivEXT");
	glad_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)load("glProgramUniform3ivEXT");
	glad_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)load("glProgramUniform4ivEXT");
	glad_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)load("glProgramUniformMatrix2fvEXT");
	glad_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)load("glProgramUniformMatrix3fvEXT");
	glad_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)load("glProgramUniformMatrix4fvEXT");
	glad_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)load("glProgramUniformMatrix2x3fvEXT");
	glad_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)load("glProgramUniformMatrix3x2fvEXT");
	glad_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)load("glProgramUniformMatrix2x4fvEXT");
	glad_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)load("glProgramUniformMatrix4x2fvEXT");
	glad_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)load("glProgramUniformMatrix3x4fvEXT");
	glad_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)load("glProgramUniformMatrix4x3fvEXT");
	glad_glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC)load("glTextureBufferEXT");
	glad_glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC)load("glMultiTexBufferEXT");
	glad_glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC)load("glTextureParameterIivEXT");
	glad_glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC)load("glTextureParameterIuivEXT");
	glad_glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC)load("glGetTextureParameterIivEXT");
	glad_glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)load("glGetTextureParameterIuivEXT");
	glad_glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC)load("glMultiTexParameterIivEXT");
	glad_glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC)load("glMultiTexParameterIuivEXT");
	glad_glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC)load("glGetMultiTexParameterIivEXT");
	glad_glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)load("glGetMultiTexParameterIuivEXT");
	glad_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)load("glProgramUniform1uiEXT");
	glad_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)load("glProgramUniform2uiEXT");
	glad_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)load("glProgramUniform3uiEXT");
	glad_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)load("glProgramUniform4uiEXT");
	glad_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)load("glProgramUniform1uivEXT");
	glad_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)load("glProgramUniform2uivEXT");
	glad_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)load("glProgramUniform3uivEXT");
	glad_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)load("glProgramUniform4uivEXT");
	glad_glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)load("glNamedProgramLocalParameters4fvEXT");
	glad_glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)load("glNamedProgramLocalParameterI4iEXT");
	glad_glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)load("glNamedProgramLocalParameterI4ivEXT");
	glad_glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)load("glNamedProgramLocalParametersI4ivEXT");
	glad_glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)load("glNamedProgramLocalParameterI4uiEXT");
	glad_glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)load("glNamedProgramLocalParameterI4uivEXT");
	glad_glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)load("glNamedProgramLocalParametersI4uivEXT");
	glad_glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)load("glGetNamedProgramLocalParameterIivEXT");
	glad_glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)load("glGetNamedProgramLocalParameterIuivEXT");
	glad_glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC)load("glEnableClientStateiEXT");
	glad_glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC)load("glDisableClientStateiEXT");
	glad_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)load("glGetFloati_vEXT");
	glad_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)load("glGetDoublei_vEXT");
	glad_glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC)load("glGetPointeri_vEXT");
	glad_glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC)load("glNamedProgramStringEXT");
	glad_glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)load("glNamedProgramLocalParameter4dEXT");
	glad_glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)load("glNamedProgramLocalParameter4dvEXT");
	glad_glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)load("glNamedProgramLocalParameter4fEXT");
	glad_glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)load("glNamedProgramLocalParameter4fvEXT");
	glad_glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)load("glGetNamedProgramLocalParameterdvEXT");
	glad_glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)load("glGetNamedProgramLocalParameterfvEXT");
	glad_glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC)load("glGetNamedProgramivEXT");
	glad_glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)load("glGetNamedProgramStringEXT");
	glad_glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)load("glNamedRenderbufferStorageEXT");
	glad_glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)load("glGetNamedRenderbufferParameterivEXT");
	glad_glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)load("glNamedRenderbufferStorageMultisampleEXT");
	glad_glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)load("glNamedRenderbufferStorageMultisampleCoverageEXT");
	glad_glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)load("glCheckNamedFramebufferStatusEXT");
	glad_glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)load("glNamedFramebufferTexture1DEXT");
	glad_glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)load("glNamedFramebufferTexture2DEXT");
	glad_glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)load("glNamedFramebufferTexture3DEXT");
	glad_glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)load("glNamedFramebufferRenderbufferEXT");
	glad_glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)load("glGetNamedFramebufferAttachmentParameterivEXT");
	glad_glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC)load("glGenerateTextureMipmapEXT");
	glad_glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC)load("glGenerateMultiTexMipmapEXT");
	glad_glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)load("glFramebufferDrawBufferEXT");
	glad_glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)load("glFramebufferDrawBuffersEXT");
	glad_glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC)load("glFramebufferReadBufferEXT");
	glad_glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)load("glGetFramebufferParameterivEXT");
	glad_glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)load("glNamedCopyBufferSubDataEXT");
	glad_glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)load("glNamedFramebufferTextureEXT");
	glad_glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)load("glNamedFramebufferTextureLayerEXT");
	glad_glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)load("glNamedFramebufferTextureFaceEXT");
	glad_glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC)load("glTextureRenderbufferEXT");
	glad_glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC)load("glMultiTexRenderbufferEXT");
	glad_glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)load("glVertexArrayVertexOffsetEXT");
	glad_glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)load("glVertexArrayColorOffsetEXT");
	glad_glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)load("glVertexArrayEdgeFlagOffsetEXT");
	glad_glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)load("glVertexArrayIndexOffsetEXT");
	glad_glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)load("glVertexArrayNormalOffsetEXT");
	glad_glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)load("glVertexArrayTexCoordOffsetEXT");
	glad_glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)load("glVertexArrayMultiTexCoordOffsetEXT");
	glad_glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)load("glVertexArrayFogCoordOffsetEXT");
	glad_glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)load("glVertexArraySecondaryColorOffsetEXT");
	glad_glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)load("glVertexArrayVertexAttribOffsetEXT");
	glad_glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)load("glVertexArrayVertexAttribIOffsetEXT");
	glad_glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC)load("glEnableVertexArrayEXT");
	glad_glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC)load("glDisableVertexArrayEXT");
	glad_glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)load("glEnableVertexArrayAttribEXT");
	glad_glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)load("glDisableVertexArrayAttribEXT");
	glad_glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC)load("glGetVertexArrayIntegervEXT");
	glad_glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC)load("glGetVertexArrayPointervEXT");
	glad_glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)load("glGetVertexArrayIntegeri_vEXT");
	glad_glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)load("glGetVertexArrayPointeri_vEXT");
	glad_glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC)load("glMapNamedBufferRangeEXT");
	glad_glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)load("glFlushMappedNamedBufferRangeEXT");
	glad_glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC)load("glNamedBufferStorageEXT");
	glad_glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)load("glClearNamedBufferDataEXT");
	glad_glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)load("glClearNamedBufferSubDataEXT");
	glad_glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)load("glNamedFramebufferParameteriEXT");
	glad_glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)load("glGetNamedFramebufferParameterivEXT");
	glad_glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC)load("glProgramUniform1dEXT");
	glad_glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC)load("glProgramUniform2dEXT");
	glad_glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC)load("glProgramUniform3dEXT");
	glad_glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC)load("glProgramUniform4dEXT");
	glad_glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC)load("glProgramUniform1dvEXT");
	glad_glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC)load("glProgramUniform2dvEXT");
	glad_glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC)load("glProgramUniform3dvEXT");
	glad_glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC)load("glProgramUniform4dvEXT");
	glad_glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)load("glProgramUniformMatrix2dvEXT");
	glad_glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)load("glProgramUniformMatrix3dvEXT");
	glad_glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)load("glProgramUniformMatrix4dvEXT");
	glad_glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)load("glProgramUniformMatrix2x3dvEXT");
	glad_glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)load("glProgramUniformMatrix2x4dvEXT");
	glad_glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)load("glProgramUniformMatrix3x2dvEXT");
	glad_glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)load("glProgramUniformMatrix3x4dvEXT");
	glad_glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)load("glProgramUniformMatrix4x2dvEXT");
	glad_glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)load("glProgramUniformMatrix4x3dvEXT");
	glad_glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC)load("glTextureBufferRangeEXT");
	glad_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC)load("glTextureStorage1DEXT");
	glad_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC)load("glTextureStorage2DEXT");
	glad_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC)load("glTextureStorage3DEXT");
	glad_glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)load("glTextureStorage2DMultisampleEXT");
	glad_glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)load("glTextureStorage3DMultisampleEXT");
	glad_glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)load("glVertexArrayBindVertexBufferEXT");
	glad_glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)load("glVertexArrayVertexAttribFormatEXT");
	glad_glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)load("glVertexArrayVertexAttribIFormatEXT");
	glad_glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)load("glVertexArrayVertexAttribLFormatEXT");
	glad_glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)load("glVertexArrayVertexAttribBindingEXT");
	glad_glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)load("glVertexArrayVertexBindingDivisorEXT");
	glad_glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)load("glVertexArrayVertexAttribLOffsetEXT");
	glad_glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC)load("glTexturePageCommitmentEXT");
	glad_glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)load("glVertexArrayVertexAttribDivisorEXT");
}
static void load_GL_AMD_sample_positions(GLADloadproc load) {
	if(!GLAD_GL_AMD_sample_positions) return;
	glad_glSetMultisamplefvAMD = (PFNGLSETMULTISAMPLEFVAMDPROC)load("glSetMultisamplefvAMD");
}
static void load_GL_NV_vertex_program(GLADloadproc load) {
	if(!GLAD_GL_NV_vertex_program) return;
	glad_glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC)load("glAreProgramsResidentNV");
	glad_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)load("glBindProgramNV");
	glad_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)load("glDeleteProgramsNV");
	glad_glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC)load("glExecuteProgramNV");
	glad_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)load("glGenProgramsNV");
	glad_glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC)load("glGetProgramParameterdvNV");
	glad_glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC)load("glGetProgramParameterfvNV");
	glad_glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC)load("glGetProgramivNV");
	glad_glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC)load("glGetProgramStringNV");
	glad_glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC)load("glGetTrackMatrixivNV");
	glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)load("glGetVertexAttribdvNV");
	glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)load("glGetVertexAttribfvNV");
	glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)load("glGetVertexAttribivNV");
	glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)load("glGetVertexAttribPointervNV");
	glad_glIsProgramNV = (PFNGLISPROGRAMNVPROC)load("glIsProgramNV");
	glad_glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC)load("glLoadProgramNV");
	glad_glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC)load("glProgramParameter4dNV");
	glad_glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC)load("glProgramParameter4dvNV");
	glad_glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC)load("glProgramParameter4fNV");
	glad_glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC)load("glProgramParameter4fvNV");
	glad_glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC)load("glProgramParameters4dvNV");
	glad_glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC)load("glProgramParameters4fvNV");
	glad_glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)load("glRequestResidentProgramsNV");
	glad_glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC)load("glTrackMatrixNV");
	glad_glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC)load("glVertexAttribPointerNV");
	glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)load("glVertexAttrib1dNV");
	glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)load("glVertexAttrib1dvNV");
	glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)load("glVertexAttrib1fNV");
	glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)load("glVertexAttrib1fvNV");
	glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)load("glVertexAttrib1sNV");
	glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)load("glVertexAttrib1svNV");
	glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)load("glVertexAttrib2dNV");
	glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)load("glVertexAttrib2dvNV");
	glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)load("glVertexAttrib2fNV");
	glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)load("glVertexAttrib2fvNV");
	glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)load("glVertexAttrib2sNV");
	glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)load("glVertexAttrib2svNV");
	glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)load("glVertexAttrib3dNV");
	glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)load("glVertexAttrib3dvNV");
	glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)load("glVertexAttrib3fNV");
	glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)load("glVertexAttrib3fvNV");
	glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)load("glVertexAttrib3sNV");
	glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)load("glVertexAttrib3svNV");
	glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)load("glVertexAttrib4dNV");
	glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)load("glVertexAttrib4dvNV");
	glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)load("glVertexAttrib4fNV");
	glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)load("glVertexAttrib4fvNV");
	glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)load("glVertexAttrib4sNV");
	glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)load("glVertexAttrib4svNV");
	glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)load("glVertexAttrib4ubNV");
	glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)load("glVertexAttrib4ubvNV");
	glad_glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC)load("glVertexAttribs1dvNV");
	glad_glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC)load("glVertexAttribs1fvNV");
	glad_glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC)load("glVertexAttribs1svNV");
	glad_glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC)load("glVertexAttribs2dvNV");
	glad_glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC)load("glVertexAttribs2fvNV");
	glad_glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC)load("glVertexAttribs2svNV");
	glad_glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC)load("glVertexAttribs3dvNV");
	glad_glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC)load("glVertexAttribs3fvNV");
	glad_glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC)load("glVertexAttribs3svNV");
	glad_glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC)load("glVertexAttribs4dvNV");
	glad_glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC)load("glVertexAttribs4fvNV");
	glad_glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC)load("glVertexAttribs4svNV");
	glad_glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC)load("glVertexAttribs4ubvNV");
}
static void load_GL_EXT_vertex_shader(GLADloadproc load) {
	if(!GLAD_GL_EXT_vertex_shader) return;
	glad_glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC)load("glBeginVertexShaderEXT");
	glad_glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC)load("glEndVertexShaderEXT");
	glad_glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC)load("glBindVertexShaderEXT");
	glad_glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC)load("glGenVertexShadersEXT");
	glad_glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC)load("glDeleteVertexShaderEXT");
	glad_glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC)load("glShaderOp1EXT");
	glad_glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC)load("glShaderOp2EXT");
	glad_glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC)load("glShaderOp3EXT");
	glad_glSwizzleEXT = (PFNGLSWIZZLEEXTPROC)load("glSwizzleEXT");
	glad_glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC)load("glWriteMaskEXT");
	glad_glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC)load("glInsertComponentEXT");
	glad_glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC)load("glExtractComponentEXT");
	glad_glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC)load("glGenSymbolsEXT");
	glad_glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC)load("glSetInvariantEXT");
	glad_glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC)load("glSetLocalConstantEXT");
	glad_glVariantbvEXT = (PFNGLVARIANTBVEXTPROC)load("glVariantbvEXT");
	glad_glVariantsvEXT = (PFNGLVARIANTSVEXTPROC)load("glVariantsvEXT");
	glad_glVariantivEXT = (PFNGLVARIANTIVEXTPROC)load("glVariantivEXT");
	glad_glVariantfvEXT = (PFNGLVARIANTFVEXTPROC)load("glVariantfvEXT");
	glad_glVariantdvEXT = (PFNGLVARIANTDVEXTPROC)load("glVariantdvEXT");
	glad_glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC)load("glVariantubvEXT");
	glad_glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC)load("glVariantusvEXT");
	glad_glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC)load("glVariantuivEXT");
	glad_glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC)load("glVariantPointerEXT");
	glad_glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)load("glEnableVariantClientStateEXT");
	glad_glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)load("glDisableVariantClientStateEXT");
	glad_glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC)load("glBindLightParameterEXT");
	glad_glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC)load("glBindMaterialParameterEXT");
	glad_glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC)load("glBindTexGenParameterEXT");
	glad_glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)load("glBindTextureUnitParameterEXT");
	glad_glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC)load("glBindParameterEXT");
	glad_glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC)load("glIsVariantEnabledEXT");
	glad_glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC)load("glGetVariantBooleanvEXT");
	glad_glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC)load("glGetVariantIntegervEXT");
	glad_glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC)load("glGetVariantFloatvEXT");
	glad_glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC)load("glGetVariantPointervEXT");
	glad_glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC)load("glGetInvariantBooleanvEXT");
	glad_glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC)load("glGetInvariantIntegervEXT");
	glad_glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC)load("glGetInvariantFloatvEXT");
	glad_glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)load("glGetLocalConstantBooleanvEXT");
	glad_glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)load("glGetLocalConstantIntegervEXT");
	glad_glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)load("glGetLocalConstantFloatvEXT");
}
static void load_GL_EXT_blend_func_separate(GLADloadproc load) {
	if(!GLAD_GL_EXT_blend_func_separate) return;
	glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)load("glBlendFuncSeparateEXT");
}
static void load_GL_APPLE_fence(GLADloadproc load) {
	if(!GLAD_GL_APPLE_fence) return;
	glad_glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC)load("glGenFencesAPPLE");
	glad_glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC)load("glDeleteFencesAPPLE");
	glad_glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC)load("glSetFenceAPPLE");
	glad_glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC)load("glIsFenceAPPLE");
	glad_glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC)load("glTestFenceAPPLE");
	glad_glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC)load("glFinishFenceAPPLE");
	glad_glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC)load("glTestObjectAPPLE");
	glad_glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC)load("glFinishObjectAPPLE");
}
static void load_GL_OES_byte_coordinates(GLADloadproc load) {
	if(!GLAD_GL_OES_byte_coordinates) return;
	glad_glMultiTexCoord1bOES = (PFNGLMULTITEXCOORD1BOESPROC)load("glMultiTexCoord1bOES");
	glad_glMultiTexCoord1bvOES = (PFNGLMULTITEXCOORD1BVOESPROC)load("glMultiTexCoord1bvOES");
	glad_glMultiTexCoord2bOES = (PFNGLMULTITEXCOORD2BOESPROC)load("glMultiTexCoord2bOES");
	glad_glMultiTexCoord2bvOES = (PFNGLMULTITEXCOORD2BVOESPROC)load("glMultiTexCoord2bvOES");
	glad_glMultiTexCoord3bOES = (PFNGLMULTITEXCOORD3BOESPROC)load("glMultiTexCoord3bOES");
	glad_glMultiTexCoord3bvOES = (PFNGLMULTITEXCOORD3BVOESPROC)load("glMultiTexCoord3bvOES");
	glad_glMultiTexCoord4bOES = (PFNGLMULTITEXCOORD4BOESPROC)load("glMultiTexCoord4bOES");
	glad_glMultiTexCoord4bvOES = (PFNGLMULTITEXCOORD4BVOESPROC)load("glMultiTexCoord4bvOES");
	glad_glTexCoord1bOES = (PFNGLTEXCOORD1BOESPROC)load("glTexCoord1bOES");
	glad_glTexCoord1bvOES = (PFNGLTEXCOORD1BVOESPROC)load("glTexCoord1bvOES");
	glad_glTexCoord2bOES = (PFNGLTEXCOORD2BOESPROC)load("glTexCoord2bOES");
	glad_glTexCoord2bvOES = (PFNGLTEXCOORD2BVOESPROC)load("glTexCoord2bvOES");
	glad_glTexCoord3bOES = (PFNGLTEXCOORD3BOESPROC)load("glTexCoord3bOES");
	glad_glTexCoord3bvOES = (PFNGLTEXCOORD3BVOESPROC)load("glTexCoord3bvOES");
	glad_glTexCoord4bOES = (PFNGLTEXCOORD4BOESPROC)load("glTexCoord4bOES");
	glad_glTexCoord4bvOES = (PFNGLTEXCOORD4BVOESPROC)load("glTexCoord4bvOES");
	glad_glVertex2bOES = (PFNGLVERTEX2BOESPROC)load("glVertex2bOES");
	glad_glVertex2bvOES = (PFNGLVERTEX2BVOESPROC)load("glVertex2bvOES");
	glad_glVertex3bOES = (PFNGLVERTEX3BOESPROC)load("glVertex3bOES");
	glad_glVertex3bvOES = (PFNGLVERTEX3BVOESPROC)load("glVertex3bvOES");
	glad_glVertex4bOES = (PFNGLVERTEX4BOESPROC)load("glVertex4bOES");
	glad_glVertex4bvOES = (PFNGLVERTEX4BVOESPROC)load("glVertex4bvOES");
}
static void load_GL_ARB_transpose_matrix(GLADloadproc load) {
	if(!GLAD_GL_ARB_transpose_matrix) return;
	glad_glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)load("glLoadTransposeMatrixfARB");
	glad_glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)load("glLoadTransposeMatrixdARB");
	glad_glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)load("glMultTransposeMatrixfARB");
	glad_glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)load("glMultTransposeMatrixdARB");
}
static void load_GL_ARB_provoking_vertex(GLADloadproc load) {
	if(!GLAD_GL_ARB_provoking_vertex) return;
	glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)load("glProvokingVertex");
}
static void load_GL_EXT_fog_coord(GLADloadproc load) {
	if(!GLAD_GL_EXT_fog_coord) return;
	glad_glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)load("glFogCoordfEXT");
	glad_glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)load("glFogCoordfvEXT");
	glad_glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)load("glFogCoorddEXT");
	glad_glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)load("glFogCoorddvEXT");
	glad_glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)load("glFogCoordPointerEXT");
}
static void load_GL_EXT_vertex_array(GLADloadproc load) {
	if(!GLAD_GL_EXT_vertex_array) return;
	glad_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)load("glArrayElementEXT");
	glad_glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC)load("glColorPointerEXT");
	glad_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)load("glDrawArraysEXT");
	glad_glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC)load("glEdgeFlagPointerEXT");
	glad_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)load("glGetPointervEXT");
	glad_glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC)load("glIndexPointerEXT");
	glad_glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC)load("glNormalPointerEXT");
	glad_glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC)load("glTexCoordPointerEXT");
	glad_glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC)load("glVertexPointerEXT");
}
static void load_GL_EXT_blend_equation_separate(GLADloadproc load) {
	if(!GLAD_GL_EXT_blend_equation_separate) return;
	glad_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)load("glBlendEquationSeparateEXT");
}
static void load_GL_NV_framebuffer_mixed_samples(GLADloadproc load) {
	if(!GLAD_GL_NV_framebuffer_mixed_samples) return;
	glad_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC)load("glRasterSamplesEXT");
	glad_glCoverageModulationTableNV = (PFNGLCOVERAGEMODULATIONTABLENVPROC)load("glCoverageModulationTableNV");
	glad_glGetCoverageModulationTableNV = (PFNGLGETCOVERAGEMODULATIONTABLENVPROC)load("glGetCoverageModulationTableNV");
	glad_glCoverageModulationNV = (PFNGLCOVERAGEMODULATIONNVPROC)load("glCoverageModulationNV");
}
static void load_GL_NVX_conditional_render(GLADloadproc load) {
	if(!GLAD_GL_NVX_conditional_render) return;
	glad_glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC)load("glBeginConditionalRenderNVX");
	glad_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)load("glEndConditionalRenderNVX");
}
static void load_GL_ARB_multi_draw_indirect(GLADloadproc load) {
	if(!GLAD_GL_ARB_multi_draw_indirect) return;
	glad_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)load("glMultiDrawArraysIndirect");
	glad_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)load("glMultiDrawElementsIndirect");
}
static void load_GL_EXT_raster_multisample(GLADloadproc load) {
	if(!GLAD_GL_EXT_raster_multisample) return;
	glad_glRasterSamplesEXT = (PFNGLRASTERSAMPLESEXTPROC)load("glRasterSamplesEXT");
}
static void load_GL_NV_copy_image(GLADloadproc load) {
	if(!GLAD_GL_NV_copy_image) return;
	glad_glCopyImageSubDataNV = (PFNGLCOPYIMAGESUBDATANVPROC)load("glCopyImageSubDataNV");
}
static void load_GL_INTEL_framebuffer_CMAA(GLADloadproc load) {
	if(!GLAD_GL_INTEL_framebuffer_CMAA) return;
	glad_glApplyFramebufferAttachmentCMAAINTEL = (PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC)load("glApplyFramebufferAttachmentCMAAINTEL");
}
static void load_GL_ARB_transform_feedback2(GLADloadproc load) {
	if(!GLAD_GL_ARB_transform_feedback2) return;
	glad_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)load("glBindTransformFeedback");
	glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)load("glDeleteTransformFeedbacks");
	glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)load("glGenTransformFeedbacks");
	glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)load("glIsTransformFeedback");
	glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)load("glPauseTransformFeedback");
	glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)load("glResumeTransformFeedback");
	glad_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)load("glDrawTransformFeedback");
}
static void load_GL_ARB_transform_feedback3(GLADloadproc load) {
	if(!GLAD_GL_ARB_transform_feedback3) return;
	glad_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)load("glDrawTransformFeedbackStream");
	glad_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)load("glBeginQueryIndexed");
	glad_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)load("glEndQueryIndexed");
	glad_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)load("glGetQueryIndexediv");
}
static void load_GL_EXT_debug_marker(GLADloadproc load) {
	if(!GLAD_GL_EXT_debug_marker) return;
	glad_glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC)load("glInsertEventMarkerEXT");
	glad_glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC)load("glPushGroupMarkerEXT");
	glad_glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC)load("glPopGroupMarkerEXT");
}
static void load_GL_EXT_pixel_transform(GLADloadproc load) {
	if(!GLAD_GL_EXT_pixel_transform) return;
	glad_glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)load("glPixelTransformParameteriEXT");
	glad_glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)load("glPixelTransformParameterfEXT");
	glad_glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)load("glPixelTransformParameterivEXT");
	glad_glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)load("glPixelTransformParameterfvEXT");
	glad_glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)load("glGetPixelTransformParameterivEXT");
	glad_glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)load("glGetPixelTransformParameterfvEXT");
}
static void load_GL_ATI_fragment_shader(GLADloadproc load) {
	if(!GLAD_GL_ATI_fragment_shader) return;
	glad_glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC)load("glGenFragmentShadersATI");
	glad_glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC)load("glBindFragmentShaderATI");
	glad_glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC)load("glDeleteFragmentShaderATI");
	glad_glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC)load("glBeginFragmentShaderATI");
	glad_glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC)load("glEndFragmentShaderATI");
	glad_glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC)load("glPassTexCoordATI");
	glad_glSampleMapATI = (PFNGLSAMPLEMAPATIPROC)load("glSampleMapATI");
	glad_glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC)load("glColorFragmentOp1ATI");
	glad_glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC)load("glColorFragmentOp2ATI");
	glad_glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC)load("glColorFragmentOp3ATI");
	glad_glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC)load("glAlphaFragmentOp1ATI");
	glad_glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC)load("glAlphaFragmentOp2ATI");
	glad_glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC)load("glAlphaFragmentOp3ATI");
	glad_glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)load("glSetFragmentShaderConstantATI");
}
static void load_GL_ARB_vertex_array_object(GLADloadproc load) {
	if(!GLAD_GL_ARB_vertex_array_object) return;
	glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)load("glBindVertexArray");
	glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)load("glDeleteVertexArrays");
	glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)load("glGenVertexArrays");
	glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)load("glIsVertexArray");
}
static void load_GL_SUN_triangle_list(GLADloadproc load) {
	if(!GLAD_GL_SUN_triangle_list) return;
	glad_glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC)load("glReplacementCodeuiSUN");
	glad_glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC)load("glReplacementCodeusSUN");
	glad_glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC)load("glReplacementCodeubSUN");
	glad_glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC)load("glReplacementCodeuivSUN");
	glad_glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC)load("glReplacementCodeusvSUN");
	glad_glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC)load("glReplacementCodeubvSUN");
	glad_glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)load("glReplacementCodePointerSUN");
}
static void load_GL_ARB_transform_feedback_instanced(GLADloadproc load) {
	if(!GLAD_GL_ARB_transform_feedback_instanced) return;
	glad_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)load("glDrawTransformFeedbackInstanced");
	glad_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)load("glDrawTransformFeedbackStreamInstanced");
}
static void load_GL_SGIX_async(GLADloadproc load) {
	if(!GLAD_GL_SGIX_async) return;
	glad_glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC)load("glAsyncMarkerSGIX");
	glad_glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC)load("glFinishAsyncSGIX");
	glad_glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC)load("glPollAsyncSGIX");
	glad_glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC)load("glGenAsyncMarkersSGIX");
	glad_glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC)load("glDeleteAsyncMarkersSGIX");
	glad_glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC)load("glIsAsyncMarkerSGIX");
}
static void load_GL_INTEL_performance_query(GLADloadproc load) {
	if(!GLAD_GL_INTEL_performance_query) return;
	glad_glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC)load("glBeginPerfQueryINTEL");
	glad_glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC)load("glCreatePerfQueryINTEL");
	glad_glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC)load("glDeletePerfQueryINTEL");
	glad_glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC)load("glEndPerfQueryINTEL");
	glad_glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC)load("glGetFirstPerfQueryIdINTEL");
	glad_glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC)load("glGetNextPerfQueryIdINTEL");
	glad_glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC)load("glGetPerfCounterInfoINTEL");
	glad_glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC)load("glGetPerfQueryDataINTEL");
	glad_glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC)load("glGetPerfQueryIdByNameINTEL");
	glad_glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC)load("glGetPerfQueryInfoINTEL");
}
static void load_GL_NV_gpu_shader5(GLADloadproc load) {
	if(!GLAD_GL_NV_gpu_shader5) return;
	glad_glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC)load("glUniform1i64NV");
	glad_glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC)load("glUniform2i64NV");
	glad_glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC)load("glUniform3i64NV");
	glad_glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC)load("glUniform4i64NV");
	glad_glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC)load("glUniform1i64vNV");
	glad_glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC)load("glUniform2i64vNV");
	glad_glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC)load("glUniform3i64vNV");
	glad_glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC)load("glUniform4i64vNV");
	glad_glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC)load("glUniform1ui64NV");
	glad_glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC)load("glUniform2ui64NV");
	glad_glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC)load("glUniform3ui64NV");
	glad_glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC)load("glUniform4ui64NV");
	glad_glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC)load("glUniform1ui64vNV");
	glad_glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC)load("glUniform2ui64vNV");
	glad_glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC)load("glUniform3ui64vNV");
	glad_glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC)load("glUniform4ui64vNV");
	glad_glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC)load("glGetUniformi64vNV");
	glad_glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC)load("glProgramUniform1i64NV");
	glad_glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC)load("glProgramUniform2i64NV");
	glad_glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC)load("glProgramUniform3i64NV");
	glad_glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC)load("glProgramUniform4i64NV");
	glad_glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC)load("glProgramUniform1i64vNV");
	glad_glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC)load("glProgramUniform2i64vNV");
	glad_glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC)load("glProgramUniform3i64vNV");
	glad_glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC)load("glProgramUniform4i64vNV");
	glad_glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC)load("glProgramUniform1ui64NV");
	glad_glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC)load("glProgramUniform2ui64NV");
	glad_glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC)load("glProgramUniform3ui64NV");
	glad_glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC)load("glProgramUniform4ui64NV");
	glad_glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC)load("glProgramUniform1ui64vNV");
	glad_glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC)load("glProgramUniform2ui64vNV");
	glad_glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC)load("glProgramUniform3ui64vNV");
	glad_glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC)load("glProgramUniform4ui64vNV");
}
static void load_GL_NV_bindless_multi_draw_indirect_count(GLADloadproc load) {
	if(!GLAD_GL_NV_bindless_multi_draw_indirect_count) return;
	glad_glMultiDrawArraysIndirectBindlessCountNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC)load("glMultiDrawArraysIndirectBindlessCountNV");
	glad_glMultiDrawElementsIndirectBindlessCountNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC)load("glMultiDrawElementsIndirectBindlessCountNV");
}
static void load_GL_ARB_ES2_compatibility(GLADloadproc load) {
	if(!GLAD_GL_ARB_ES2_compatibility) return;
	glad_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)load("glReleaseShaderCompiler");
	glad_glShaderBinary = (PFNGLSHADERBINARYPROC)load("glShaderBinary");
	glad_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)load("glGetShaderPrecisionFormat");
	glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC)load("glDepthRangef");
	glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC)load("glClearDepthf");
}
static void load_GL_ARB_indirect_parameters(GLADloadproc load) {
	if(!GLAD_GL_ARB_indirect_parameters) return;
	glad_glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)load("glMultiDrawArraysIndirectCountARB");
	glad_glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)load("glMultiDrawElementsIndirectCountARB");
}
static void load_GL_EXT_window_rectangles(GLADloadproc load) {
	if(!GLAD_GL_EXT_window_rectangles) return;
	glad_glWindowRectanglesEXT = (PFNGLWINDOWRECTANGLESEXTPROC)load("glWindowRectanglesEXT");
}
static void load_GL_NV_half_float(GLADloadproc load) {
	if(!GLAD_GL_NV_half_float) return;
	glad_glVertex2hNV = (PFNGLVERTEX2HNVPROC)load("glVertex2hNV");
	glad_glVertex2hvNV = (PFNGLVERTEX2HVNVPROC)load("glVertex2hvNV");
	glad_glVertex3hNV = (PFNGLVERTEX3HNVPROC)load("glVertex3hNV");
	glad_glVertex3hvNV = (PFNGLVERTEX3HVNVPROC)load("glVertex3hvNV");
	glad_glVertex4hNV = (PFNGLVERTEX4HNVPROC)load("glVertex4hNV");
	glad_glVertex4hvNV = (PFNGLVERTEX4HVNVPROC)load("glVertex4hvNV");
	glad_glNormal3hNV = (PFNGLNORMAL3HNVPROC)load("glNormal3hNV");
	glad_glNormal3hvNV = (PFNGLNORMAL3HVNVPROC)load("glNormal3hvNV");
	glad_glColor3hNV = (PFNGLCOLOR3HNVPROC)load("glColor3hNV");
	glad_glColor3hvNV = (PFNGLCOLOR3HVNVPROC)load("glColor3hvNV");
	glad_glColor4hNV = (PFNGLCOLOR4HNVPROC)load("glColor4hNV");
	glad_glColor4hvNV = (PFNGLCOLOR4HVNVPROC)load("glColor4hvNV");
	glad_glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC)load("glTexCoord1hNV");
	glad_glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC)load("glTexCoord1hvNV");
	glad_glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC)load("glTexCoord2hNV");
	glad_glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC)load("glTexCoord2hvNV");
	glad_glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC)load("glTexCoord3hNV");
	glad_glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC)load("glTexCoord3hvNV");
	glad_glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC)load("glTexCoord4hNV");
	glad_glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC)load("glTexCoord4hvNV");
	glad_glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC)load("glMultiTexCoord1hNV");
	glad_glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC)load("glMultiTexCoord1hvNV");
	glad_glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC)load("glMultiTexCoord2hNV");
	glad_glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC)load("glMultiTexCoord2hvNV");
	glad_glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC)load("glMultiTexCoord3hNV");
	glad_glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC)load("glMultiTexCoord3hvNV");
	glad_glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC)load("glMultiTexCoord4hNV");
	glad_glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC)load("glMultiTexCoord4hvNV");
	glad_glFogCoordhNV = (PFNGLFOGCOORDHNVPROC)load("glFogCoordhNV");
	glad_glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC)load("glFogCoordhvNV");
	glad_glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC)load("glSecondaryColor3hNV");
	glad_glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC)load("glSecondaryColor3hvNV");
	glad_glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC)load("glVertexWeighthNV");
	glad_glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC)load("glVertexWeighthvNV");
	glad_glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC)load("glVertexAttrib1hNV");
	glad_glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC)load("glVertexAttrib1hvNV");
	glad_glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC)load("glVertexAttrib2hNV");
	glad_glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC)load("glVertexAttrib2hvNV");
	glad_glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC)load("glVertexAttrib3hNV");
	glad_glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC)load("glVertexAttrib3hvNV");
	glad_glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC)load("glVertexAttrib4hNV");
	glad_glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC)load("glVertexAttrib4hvNV");
	glad_glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC)load("glVertexAttribs1hvNV");
	glad_glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC)load("glVertexAttribs2hvNV");
	glad_glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC)load("glVertexAttribs3hvNV");
	glad_glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC)load("glVertexAttribs4hvNV");
}
static void load_GL_ARB_ES3_2_compatibility(GLADloadproc load) {
	if(!GLAD_GL_ARB_ES3_2_compatibility) return;
	glad_glPrimitiveBoundingBoxARB = (PFNGLPRIMITIVEBOUNDINGBOXARBPROC)load("glPrimitiveBoundingBoxARB");
}
static void load_GL_EXT_polygon_offset_clamp(GLADloadproc load) {
	if(!GLAD_GL_EXT_polygon_offset_clamp) return;
	glad_glPolygonOffsetClampEXT = (PFNGLPOLYGONOFFSETCLAMPEXTPROC)load("glPolygonOffsetClampEXT");
}
static void load_GL_EXT_compiled_vertex_array(GLADloadproc load) {
	if(!GLAD_GL_EXT_compiled_vertex_array) return;
	glad_glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC)load("glLockArraysEXT");
	glad_glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC)load("glUnlockArraysEXT");
}
static void load_GL_NV_depth_buffer_float(GLADloadproc load) {
	if(!GLAD_GL_NV_depth_buffer_float) return;
	glad_glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC)load("glDepthRangedNV");
	glad_glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC)load("glClearDepthdNV");
	glad_glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC)load("glDepthBoundsdNV");
}
static void load_GL_NV_occlusion_query(GLADloadproc load) {
	if(!GLAD_GL_NV_occlusion_query) return;
	glad_glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC)load("glGenOcclusionQueriesNV");
	glad_glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)load("glDeleteOcclusionQueriesNV");
	glad_glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC)load("glIsOcclusionQueryNV");
	glad_glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC)load("glBeginOcclusionQueryNV");
	glad_glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC)load("glEndOcclusionQueryNV");
	glad_glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC)load("glGetOcclusionQueryivNV");
	glad_glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)load("glGetOcclusionQueryuivNV");
}
static void load_GL_APPLE_flush_buffer_range(GLADloadproc load) {
	if(!GLAD_GL_APPLE_flush_buffer_range) return;
	glad_glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC)load("glBufferParameteriAPPLE");
	glad_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)load("glFlushMappedBufferRangeAPPLE");
}
static void load_GL_ARB_imaging(GLADloadproc load) {
	if(!GLAD_GL_ARB_imaging) return;
	glad_glBlendColor = (PFNGLBLENDCOLORPROC)load("glBlendColor");
	glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC)load("glBlendEquation");
	glad_glColorTable = (PFNGLCOLORTABLEPROC)load("glColorTable");
	glad_glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)load("glColorTableParameterfv");
	glad_glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)load("glColorTableParameteriv");
	glad_glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)load("glCopyColorTable");
	glad_glGetColorTable = (PFNGLGETCOLORTABLEPROC)load("glGetColorTable");
	glad_glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)load("glGetColorTableParameterfv");
	glad_glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)load("glGetColorTableParameteriv");
	glad_glColorSubTable = (PFNGLCOLORSUBTABLEPROC)load("glColorSubTable");
	glad_glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)load("glCopyColorSubTable");
	glad_glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)load("glConvolutionFilter1D");
	glad_glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)load("glConvolutionFilter2D");
	glad_glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)load("glConvolutionParameterf");
	glad_glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)load("glConvolutionParameterfv");
	glad_glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)load("glConvolutionParameteri");
	glad_glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)load("glConvolutionParameteriv");
	glad_glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)load("glCopyConvolutionFilter1D");
	glad_glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)load("glCopyConvolutionFilter2D");
	glad_glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)load("glGetConvolutionFilter");
	glad_glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)load("glGetConvolutionParameterfv");
	glad_glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)load("glGetConvolutionParameteriv");
	glad_glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)load("glGetSeparableFilter");
	glad_glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)load("glSeparableFilter2D");
	glad_glGetHistogram = (PFNGLGETHISTOGRAMPROC)load("glGetHistogram");
	glad_glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)load("glGetHistogramParameterfv");
	glad_glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)load("glGetHistogramParameteriv");
	glad_glGetMinmax = (PFNGLGETMINMAXPROC)load("glGetMinmax");
	glad_glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)load("glGetMinmaxParameterfv");
	glad_glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)load("glGetMinmaxParameteriv");
	glad_glHistogram = (PFNGLHISTOGRAMPROC)load("glHistogram");
	glad_glMinmax = (PFNGLMINMAXPROC)load("glMinmax");
	glad_glResetHistogram = (PFNGLRESETHISTOGRAMPROC)load("glResetHistogram");
	glad_glResetMinmax = (PFNGLRESETMINMAXPROC)load("glResetMinmax");
}
static void load_GL_ARB_draw_buffers_blend(GLADloadproc load) {
	if(!GLAD_GL_ARB_draw_buffers_blend) return;
	glad_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)load("glBlendEquationiARB");
	glad_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)load("glBlendEquationSeparateiARB");
	glad_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)load("glBlendFunciARB");
	glad_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)load("glBlendFuncSeparateiARB");
}
static void load_GL_ARB_clear_buffer_object(GLADloadproc load) {
	if(!GLAD_GL_ARB_clear_buffer_object) return;
	glad_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)load("glClearBufferData");
	glad_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)load("glClearBufferSubData");
}
static void load_GL_ARB_multisample(GLADloadproc load) {
	if(!GLAD_GL_ARB_multisample) return;
	glad_glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)load("glSampleCoverageARB");
}
static void load_GL_EXT_debug_label(GLADloadproc load) {
	if(!GLAD_GL_EXT_debug_label) return;
	glad_glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC)load("glLabelObjectEXT");
	glad_glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC)load("glGetObjectLabelEXT");
}
static void load_GL_ARB_sample_shading(GLADloadproc load) {
	if(!GLAD_GL_ARB_sample_shading) return;
	glad_glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC)load("glMinSampleShadingARB");
}
static void load_GL_NV_internalformat_sample_query(GLADloadproc load) {
	if(!GLAD_GL_NV_internalformat_sample_query) return;
	glad_glGetInternalformatSampleivNV = (PFNGLGETINTERNALFORMATSAMPLEIVNVPROC)load("glGetInternalformatSampleivNV");
}
static void load_GL_INTEL_map_texture(GLADloadproc load) {
	if(!GLAD_GL_INTEL_map_texture) return;
	glad_glSyncTextureINTEL = (PFNGLSYNCTEXTUREINTELPROC)load("glSyncTextureINTEL");
	glad_glUnmapTexture2DINTEL = (PFNGLUNMAPTEXTURE2DINTELPROC)load("glUnmapTexture2DINTEL");
	glad_glMapTexture2DINTEL = (PFNGLMAPTEXTURE2DINTELPROC)load("glMapTexture2DINTEL");
}
static void load_GL_NV_conservative_raster_pre_snap_triangles(GLADloadproc load) {
	if(!GLAD_GL_NV_conservative_raster_pre_snap_triangles) return;
	glad_glConservativeRasterParameteriNV = (PFNGLCONSERVATIVERASTERPARAMETERINVPROC)load("glConservativeRasterParameteriNV");
}
static void load_GL_ARB_compute_shader(GLADloadproc load) {
	if(!GLAD_GL_ARB_compute_shader) return;
	glad_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)load("glDispatchCompute");
	glad_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)load("glDispatchComputeIndirect");
}
static void load_GL_IBM_vertex_array_lists(GLADloadproc load) {
	if(!GLAD_GL_IBM_vertex_array_lists) return;
	glad_glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC)load("glColorPointerListIBM");
	glad_glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)load("glSecondaryColorPointerListIBM");
	glad_glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)load("glEdgeFlagPointerListIBM");
	glad_glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC)load("glFogCoordPointerListIBM");
	glad_glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC)load("glIndexPointerListIBM");
	glad_glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC)load("glNormalPointerListIBM");
	glad_glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC)load("glTexCoordPointerListIBM");
	glad_glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC)load("glVertexPointerListIBM");
}
static void load_GL_ARB_color_buffer_float(GLADloadproc load) {
	if(!GLAD_GL_ARB_color_buffer_float) return;
	glad_glClampColorARB = (PFNGLCLAMPCOLORARBPROC)load("glClampColorARB");
}
static void load_GL_ARB_bindless_texture(GLADloadproc load) {
	if(!GLAD_GL_ARB_bindless_texture) return;
	glad_glGetTextureHandleARB = (PFNGLGETTEXTUREHANDLEARBPROC)load("glGetTextureHandleARB");
	glad_glGetTextureSamplerHandleARB = (PFNGLGETTEXTURESAMPLERHANDLEARBPROC)load("glGetTextureSamplerHandleARB");
	glad_glMakeTextureHandleResidentARB = (PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)load("glMakeTextureHandleResidentARB");
	glad_glMakeTextureHandleNonResidentARB = (PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)load("glMakeTextureHandleNonResidentARB");
	glad_glGetImageHandleARB = (PFNGLGETIMAGEHANDLEARBPROC)load("glGetImageHandleARB");
	glad_glMakeImageHandleResidentARB = (PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)load("glMakeImageHandleResidentARB");
	glad_glMakeImageHandleNonResidentARB = (PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)load("glMakeImageHandleNonResidentARB");
	glad_glUniformHandleui64ARB = (PFNGLUNIFORMHANDLEUI64ARBPROC)load("glUniformHandleui64ARB");
	glad_glUniformHandleui64vARB = (PFNGLUNIFORMHANDLEUI64VARBPROC)load("glUniformHandleui64vARB");
	glad_glProgramUniformHandleui64ARB = (PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)load("glProgramUniformHandleui64ARB");
	glad_glProgramUniformHandleui64vARB = (PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)load("glProgramUniformHandleui64vARB");
	glad_glIsTextureHandleResidentARB = (PFNGLISTEXTUREHANDLERESIDENTARBPROC)load("glIsTextureHandleResidentARB");
	glad_glIsImageHandleResidentARB = (PFNGLISIMAGEHANDLERESIDENTARBPROC)load("glIsImageHandleResidentARB");
	glad_glVertexAttribL1ui64ARB = (PFNGLVERTEXATTRIBL1UI64ARBPROC)load("glVertexAttribL1ui64ARB");
	glad_glVertexAttribL1ui64vARB = (PFNGLVERTEXATTRIBL1UI64VARBPROC)load("glVertexAttribL1ui64vARB");
	glad_glGetVertexAttribLui64vARB = (PFNGLGETVERTEXATTRIBLUI64VARBPROC)load("glGetVertexAttribLui64vARB");
}
static void load_GL_ARB_window_pos(GLADloadproc load) {
	if(!GLAD_GL_ARB_window_pos) return;
	glad_glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)load("glWindowPos2dARB");
	glad_glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)load("glWindowPos2dvARB");
	glad_glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)load("glWindowPos2fARB");
	glad_glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)load("glWindowPos2fvARB");
	glad_glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)load("glWindowPos2iARB");
	glad_glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)load("glWindowPos2ivARB");
	glad_glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)load("glWindowPos2sARB");
	glad_glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)load("glWindowPos2svARB");
	glad_glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)load("glWindowPos3dARB");
	glad_glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)load("glWindowPos3dvARB");
	glad_glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)load("glWindowPos3fARB");
	glad_glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)load("glWindowPos3fvARB");
	glad_glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)load("glWindowPos3iARB");
	glad_glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)load("glWindowPos3ivARB");
	glad_glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)load("glWindowPos3sARB");
	glad_glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)load("glWindowPos3svARB");
}
static void load_GL_ARB_internalformat_query(GLADloadproc load) {
	if(!GLAD_GL_ARB_internalformat_query) return;
	glad_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)load("glGetInternalformativ");
}
static void load_GL_EXT_shader_image_load_store(GLADloadproc load) {
	if(!GLAD_GL_EXT_shader_image_load_store) return;
	glad_glBindImageTextureEXT = (PFNGLBINDIMAGETEXTUREEXTPROC)load("glBindImageTextureEXT");
	glad_glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC)load("glMemoryBarrierEXT");
}
static void load_GL_EXT_copy_texture(GLADloadproc load) {
	if(!GLAD_GL_EXT_copy_texture) return;
	glad_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)load("glCopyTexImage1DEXT");
	glad_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)load("glCopyTexImage2DEXT");
	glad_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)load("glCopyTexSubImage1DEXT");
	glad_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)load("glCopyTexSubImage2DEXT");
	glad_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)load("glCopyTexSubImage3DEXT");
}
static void load_GL_NV_register_combiners2(GLADloadproc load) {
	if(!GLAD_GL_NV_register_combiners2) return;
	glad_glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)load("glCombinerStageParameterfvNV");
	glad_glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)load("glGetCombinerStageParameterfvNV");
}
static void load_GL_NV_draw_texture(GLADloadproc load) {
	if(!GLAD_GL_NV_draw_texture) return;
	glad_glDrawTextureNV = (PFNGLDRAWTEXTURENVPROC)load("glDrawTextureNV");
}
static void load_GL_EXT_draw_instanced(GLADloadproc load) {
	if(!GLAD_GL_EXT_draw_instanced) return;
	glad_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)load("glDrawArraysInstancedEXT");
	glad_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)load("glDrawElementsInstancedEXT");
}
static void load_GL_ARB_viewport_array(GLADloadproc load) {
	if(!GLAD_GL_ARB_viewport_array) return;
	glad_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)load("glViewportArrayv");
	glad_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)load("glViewportIndexedf");
	glad_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)load("glViewportIndexedfv");
	glad_glScissorArrayv = (PFNGLSCISSORARRAYVPROC)load("glScissorArrayv");
	glad_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)load("glScissorIndexed");
	glad_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)load("glScissorIndexedv");
	glad_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)load("glDepthRangeArrayv");
	glad_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)load("glDepthRangeIndexed");
	glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC)load("glGetFloati_v");
	glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)load("glGetDoublei_v");
}
static void load_GL_ARB_separate_shader_objects(GLADloadproc load) {
	if(!GLAD_GL_ARB_separate_shader_objects) return;
	glad_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)load("glUseProgramStages");
	glad_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)load("glActiveShaderProgram");
	glad_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)load("glCreateShaderProgramv");
	glad_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)load("glBindProgramPipeline");
	glad_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)load("glDeleteProgramPipelines");
	glad_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)load("glGenProgramPipelines");
	glad_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)load("glIsProgramPipeline");
	glad_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)load("glGetProgramPipelineiv");
	glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)load("glProgramUniform1i");
	glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)load("glProgramUniform1iv");
	glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)load("glProgramUniform1f");
	glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)load("glProgramUniform1fv");
	glad_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)load("glProgramUniform1d");
	glad_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)load("glProgramUniform1dv");
	glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)load("glProgramUniform1ui");
	glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)load("glProgramUniform1uiv");
	glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)load("glProgramUniform2i");
	glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)load("glProgramUniform2iv");
	glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)load("glProgramUniform2f");
	glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)load("glProgramUniform2fv");
	glad_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)load("glProgramUniform2d");
	glad_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)load("glProgramUniform2dv");
	glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)load("glProgramUniform2ui");
	glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)load("glProgramUniform2uiv");
	glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)load("glProgramUniform3i");
	glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)load("glProgramUniform3iv");
	glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)load("glProgramUniform3f");
	glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)load("glProgramUniform3fv");
	glad_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)load("glProgramUniform3d");
	glad_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)load("glProgramUniform3dv");
	glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)load("glProgramUniform3ui");
	glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)load("glProgramUniform3uiv");
	glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)load("glProgramUniform4i");
	glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)load("glProgramUniform4iv");
	glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)load("glProgramUniform4f");
	glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)load("glProgramUniform4fv");
	glad_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)load("glProgramUniform4d");
	glad_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)load("glProgramUniform4dv");
	glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)load("glProgramUniform4ui");
	glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)load("glProgramUniform4uiv");
	glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)load("glProgramUniformMatrix2fv");
	glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)load("glProgramUniformMatrix3fv");
	glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)load("glProgramUniformMatrix4fv");
	glad_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)load("glProgramUniformMatrix2dv");
	glad_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)load("glProgramUniformMatrix3dv");
	glad_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)load("glProgramUniformMatrix4dv");
	glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)load("glProgramUniformMatrix2x3fv");
	glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)load("glProgramUniformMatrix3x2fv");
	glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)load("glProgramUniformMatrix2x4fv");
	glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)load("glProgramUniformMatrix4x2fv");
	glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)load("glProgramUniformMatrix3x4fv");
	glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)load("glProgramUniformMatrix4x3fv");
	glad_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)load("glProgramUniformMatrix2x3dv");
	glad_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)load("glProgramUniformMatrix3x2dv");
	glad_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)load("glProgramUniformMatrix2x4dv");
	glad_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)load("glProgramUniformMatrix4x2dv");
	glad_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)load("glProgramUniformMatrix3x4dv");
	glad_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)load("glProgramUniformMatrix4x3dv");
	glad_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)load("glValidateProgramPipeline");
	glad_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)load("glGetProgramPipelineInfoLog");
}
static void load_GL_EXT_depth_bounds_test(GLADloadproc load) {
	if(!GLAD_GL_EXT_depth_bounds_test) return;
	glad_glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC)load("glDepthBoundsEXT");
}
static void load_GL_HP_image_transform(GLADloadproc load) {
	if(!GLAD_GL_HP_image_transform) return;
	glad_glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)load("glImageTransformParameteriHP");
	glad_glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)load("glImageTransformParameterfHP");
	glad_glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)load("glImageTransformParameterivHP");
	glad_glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)load("glImageTransformParameterfvHP");
	glad_glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)load("glGetImageTransformParameterivHP");
	glad_glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)load("glGetImageTransformParameterfvHP");
}
static void load_GL_NV_video_capture(GLADloadproc load) {
	if(!GLAD_GL_NV_video_capture) return;
	glad_glBeginVideoCaptureNV = (PFNGLBEGINVIDEOCAPTURENVPROC)load("glBeginVideoCaptureNV");
	glad_glBindVideoCaptureStreamBufferNV = (PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)load("glBindVideoCaptureStreamBufferNV");
	glad_glBindVideoCaptureStreamTextureNV = (PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)load("glBindVideoCaptureStreamTextureNV");
	glad_glEndVideoCaptureNV = (PFNGLENDVIDEOCAPTURENVPROC)load("glEndVideoCaptureNV");
	glad_glGetVideoCaptureivNV = (PFNGLGETVIDEOCAPTUREIVNVPROC)load("glGetVideoCaptureivNV");
	glad_glGetVideoCaptureStreamivNV = (PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)load("glGetVideoCaptureStreamivNV");
	glad_glGetVideoCaptureStreamfvNV = (PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)load("glGetVideoCaptureStreamfvNV");
	glad_glGetVideoCaptureStreamdvNV = (PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)load("glGetVideoCaptureStreamdvNV");
	glad_glVideoCaptureNV = (PFNGLVIDEOCAPTURENVPROC)load("glVideoCaptureNV");
	glad_glVideoCaptureStreamParameterivNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)load("glVideoCaptureStreamParameterivNV");
	glad_glVideoCaptureStreamParameterfvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)load("glVideoCaptureStreamParameterfvNV");
	glad_glVideoCaptureStreamParameterdvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)load("glVideoCaptureStreamParameterdvNV");
}
static void load_GL_ARB_sampler_objects(GLADloadproc load) {
	if(!GLAD_GL_ARB_sampler_objects) return;
	glad_glGenSamplers = (PFNGLGENSAMPLERSPROC)load("glGenSamplers");
	glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)load("glDeleteSamplers");
	glad_glIsSampler = (PFNGLISSAMPLERPROC)load("glIsSampler");
	glad_glBindSampler = (PFNGLBINDSAMPLERPROC)load("glBindSampler");
	glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)load("glSamplerParameteri");
	glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)load("glSamplerParameteriv");
	glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)load("glSamplerParameterf");
	glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)load("glSamplerParameterfv");
	glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)load("glSamplerParameterIiv");
	glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)load("glSamplerParameterIuiv");
	glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)load("glGetSamplerParameteriv");
	glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)load("glGetSamplerParameterIiv");
	glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)load("glGetSamplerParameterfv");
	glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)load("glGetSamplerParameterIuiv");
}
static void load_GL_ARB_matrix_palette(GLADloadproc load) {
	if(!GLAD_GL_ARB_matrix_palette) return;
	glad_glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC)load("glCurrentPaletteMatrixARB");
	glad_glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC)load("glMatrixIndexubvARB");
	glad_glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC)load("glMatrixIndexusvARB");
	glad_glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC)load("glMatrixIndexuivARB");
	glad_glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC)load("glMatrixIndexPointerARB");
}
static void load_GL_SGIS_texture_color_mask(GLADloadproc load) {
	if(!GLAD_GL_SGIS_texture_color_mask) return;
	glad_glTextureColorMaskSGIS = (PFNGLTEXTURECOLORMASKSGISPROC)load("glTextureColorMaskSGIS");
}
static void load_GL_EXT_coordinate_frame(GLADloadproc load) {
	if(!GLAD_GL_EXT_coordinate_frame) return;
	glad_glTangent3bEXT = (PFNGLTANGENT3BEXTPROC)load("glTangent3bEXT");
	glad_glTangent3bvEXT = (PFNGLTANGENT3BVEXTPROC)load("glTangent3bvEXT");
	glad_glTangent3dEXT = (PFNGLTANGENT3DEXTPROC)load("glTangent3dEXT");
	glad_glTangent3dvEXT = (PFNGLTANGENT3DVEXTPROC)load("glTangent3dvEXT");
	glad_glTangent3fEXT = (PFNGLTANGENT3FEXTPROC)load("glTangent3fEXT");
	glad_glTangent3fvEXT = (PFNGLTANGENT3FVEXTPROC)load("glTangent3fvEXT");
	glad_glTangent3iEXT = (PFNGLTANGENT3IEXTPROC)load("glTangent3iEXT");
	glad_glTangent3ivEXT = (PFNGLTANGENT3IVEXTPROC)load("glTangent3ivEXT");
	glad_glTangent3sEXT = (PFNGLTANGENT3SEXTPROC)load("glTangent3sEXT");
	glad_glTangent3svEXT = (PFNGLTANGENT3SVEXTPROC)load("glTangent3svEXT");
	glad_glBinormal3bEXT = (PFNGLBINORMAL3BEXTPROC)load("glBinormal3bEXT");
	glad_glBinormal3bvEXT = (PFNGLBINORMAL3BVEXTPROC)load("glBinormal3bvEXT");
	glad_glBinormal3dEXT = (PFNGLBINORMAL3DEXTPROC)load("glBinormal3dEXT");
	glad_glBinormal3dvEXT = (PFNGLBINORMAL3DVEXTPROC)load("glBinormal3dvEXT");
	glad_glBinormal3fEXT = (PFNGLBINORMAL3FEXTPROC)load("glBinormal3fEXT");
	glad_glBinormal3fvEXT = (PFNGLBINORMAL3FVEXTPROC)load("glBinormal3fvEXT");
	glad_glBinormal3iEXT = (PFNGLBINORMAL3IEXTPROC)load("glBinormal3iEXT");
	glad_glBinormal3ivEXT = (PFNGLBINORMAL3IVEXTPROC)load("glBinormal3ivEXT");
	glad_glBinormal3sEXT = (PFNGLBINORMAL3SEXTPROC)load("glBinormal3sEXT");
	glad_glBinormal3svEXT = (PFNGLBINORMAL3SVEXTPROC)load("glBinormal3svEXT");
	glad_glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC)load("glTangentPointerEXT");
	glad_glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC)load("glBinormalPointerEXT");
}
static void load_GL_ARB_texture_compression(GLADloadproc load) {
	if(!GLAD_GL_ARB_texture_compression) return;
	glad_glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)load("glCompressedTexImage3DARB");
	glad_glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)load("glCompressedTexImage2DARB");
	glad_glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)load("glCompressedTexImage1DARB");
	glad_glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)load("glCompressedTexSubImage3DARB");
	glad_glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)load("glCompressedTexSubImage2DARB");
	glad_glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)load("glCompressedTexSubImage1DARB");
	glad_glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)load("glGetCompressedTexImageARB");
}
static void load_GL_ARB_shader_subroutine(GLADloadproc load) {
	if(!GLAD_GL_ARB_shader_subroutine) return;
	glad_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)load("glGetSubroutineUniformLocation");
	glad_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)load("glGetSubroutineIndex");
	glad_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)load("glGetActiveSubroutineUniformiv");
	glad_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)load("glGetActiveSubroutineUniformName");
	glad_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)load("glGetActiveSubroutineName");
	glad_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)load("glUniformSubroutinesuiv");
	glad_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)load("glGetUniformSubroutineuiv");
	glad_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)load("glGetProgramStageiv");
}
static void load_GL_ARB_texture_storage_multisample(GLADloadproc load) {
	if(!GLAD_GL_ARB_texture_storage_multisample) return;
	glad_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)load("glTexStorage2DMultisample");
	glad_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)load("glTexStorage3DMultisample");
}
static void load_GL_EXT_vertex_attrib_64bit(GLADloadproc load) {
	if(!GLAD_GL_EXT_vertex_attrib_64bit) return;
	glad_glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC)load("glVertexAttribL1dEXT");
	glad_glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC)load("glVertexAttribL2dEXT");
	glad_glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC)load("glVertexAttribL3dEXT");
	glad_glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC)load("glVertexAttribL4dEXT");
	glad_glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC)load("glVertexAttribL1dvEXT");
	glad_glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC)load("glVertexAttribL2dvEXT");
	glad_glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC)load("glVertexAttribL3dvEXT");
	glad_glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC)load("glVertexAttribL4dvEXT");
	glad_glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC)load("glVertexAttribLPointerEXT");
	glad_glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC)load("glGetVertexAttribLdvEXT");
}
static void load_GL_OES_query_matrix(GLADloadproc load) {
	if(!GLAD_GL_OES_query_matrix) return;
	glad_glQueryMatrixxOES = (PFNGLQUERYMATRIXXOESPROC)load("glQueryMatrixxOES");
}
static void load_GL_MESA_window_pos(GLADloadproc load) {
	if(!GLAD_GL_MESA_window_pos) return;
	glad_glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)load("glWindowPos2dMESA");
	glad_glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)load("glWindowPos2dvMESA");
	glad_glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)load("glWindowPos2fMESA");
	glad_glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)load("glWindowPos2fvMESA");
	glad_glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)load("glWindowPos2iMESA");
	glad_glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)load("glWindowPos2ivMESA");
	glad_glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)load("glWindowPos2sMESA");
	glad_glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)load("glWindowPos2svMESA");
	glad_glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)load("glWindowPos3dMESA");
	glad_glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)load("glWindowPos3dvMESA");
	glad_glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)load("glWindowPos3fMESA");
	glad_glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)load("glWindowPos3fvMESA");
	glad_glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)load("glWindowPos3iMESA");
	glad_glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)load("glWindowPos3ivMESA");
	glad_glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)load("glWindowPos3sMESA");
	glad_glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)load("glWindowPos3svMESA");
	glad_glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC)load("glWindowPos4dMESA");
	glad_glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC)load("glWindowPos4dvMESA");
	glad_glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC)load("glWindowPos4fMESA");
	glad_glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC)load("glWindowPos4fvMESA");
	glad_glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC)load("glWindowPos4iMESA");
	glad_glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC)load("glWindowPos4ivMESA");
	glad_glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC)load("glWindowPos4sMESA");
	glad_glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC)load("glWindowPos4svMESA");
}
static void load_GL_ARB_copy_buffer(GLADloadproc load) {
	if(!GLAD_GL_ARB_copy_buffer) return;
	glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)load("glCopyBufferSubData");
}
static void load_GL_APPLE_object_purgeable(GLADloadproc load) {
	if(!GLAD_GL_APPLE_object_purgeable) return;
	glad_glObjectPurgeableAPPLE = (PFNGLOBJECTPURGEABLEAPPLEPROC)load("glObjectPurgeableAPPLE");
	glad_glObjectUnpurgeableAPPLE = (PFNGLOBJECTUNPURGEABLEAPPLEPROC)load("glObjectUnpurgeableAPPLE");
	glad_glGetObjectParameterivAPPLE = (PFNGLGETOBJECTPARAMETERIVAPPLEPROC)load("glGetObjectParameterivAPPLE");
}
static void load_GL_ARB_occlusion_query(GLADloadproc load) {
	if(!GLAD_GL_ARB_occlusion_query) return;
	glad_glGenQueriesARB = (PFNGLGENQUERIESARBPROC)load("glGenQueriesARB");
	glad_glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)load("glDeleteQueriesARB");
	glad_glIsQueryARB = (PFNGLISQUERYARBPROC)load("glIsQueryARB");
	glad_glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)load("glBeginQueryARB");
	glad_glEndQueryARB = (PFNGLENDQUERYARBPROC)load("glEndQueryARB");
	glad_glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)load("glGetQueryivARB");
	glad_glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)load("glGetQueryObjectivARB");
	glad_glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)load("glGetQueryObjectuivARB");
}
static void load_GL_SGI_color_table(GLADloadproc load) {
	if(!GLAD_GL_SGI_color_table) return;
	glad_glColorTableSGI = (PFNGLCOLORTABLESGIPROC)load("glColorTableSGI");
	glad_glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)load("glColorTableParameterfvSGI");
	glad_glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)load("glColorTableParameterivSGI");
	glad_glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC)load("glCopyColorTableSGI");
	glad_glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC)load("glGetColorTableSGI");
	glad_glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)load("glGetColorTableParameterfvSGI");
	glad_glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)load("glGetColorTableParameterivSGI");
}
static void load_GL_EXT_gpu_shader4(GLADloadproc load) {
	if(!GLAD_GL_EXT_gpu_shader4) return;
	glad_glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)load("glGetUniformuivEXT");
	glad_glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)load("glBindFragDataLocationEXT");
	glad_glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)load("glGetFragDataLocationEXT");
	glad_glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)load("glUniform1uiEXT");
	glad_glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)load("glUniform2uiEXT");
	glad_glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)load("glUniform3uiEXT");
	glad_glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)load("glUniform4uiEXT");
	glad_glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)load("glUniform1uivEXT");
	glad_glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)load("glUniform2uivEXT");
	glad_glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)load("glUniform3uivEXT");
	glad_glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)load("glUniform4uivEXT");
}
static void load_GL_NV_geometry_program4(GLADloadproc load) {
	if(!GLAD_GL_NV_geometry_program4) return;
	glad_glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC)load("glProgramVertexLimitNV");
	glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)load("glFramebufferTextureEXT");
	glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)load("glFramebufferTextureLayerEXT");
	glad_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)load("glFramebufferTextureFaceEXT");
}
static void load_GL_AMD_debug_output(GLADloadproc load) {
	if(!GLAD_GL_AMD_debug_output) return;
	glad_glDebugMessageEnableAMD = (PFNGLDEBUGMESSAGEENABLEAMDPROC)load("glDebugMessageEnableAMD");
	glad_glDebugMessageInsertAMD = (PFNGLDEBUGMESSAGEINSERTAMDPROC)load("glDebugMessageInsertAMD");
	glad_glDebugMessageCallbackAMD = (PFNGLDEBUGMESSAGECALLBACKAMDPROC)load("glDebugMessageCallbackAMD");
	glad_glGetDebugMessageLogAMD = (PFNGLGETDEBUGMESSAGELOGAMDPROC)load("glGetDebugMessageLogAMD");
}
static void load_GL_ARB_multitexture(GLADloadproc load) {
	if(!GLAD_GL_ARB_multitexture) return;
	glad_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)load("glActiveTextureARB");
	glad_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)load("glClientActiveTextureARB");
	glad_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)load("glMultiTexCoord1dARB");
	glad_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)load("glMultiTexCoord1dvARB");
	glad_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)load("glMultiTexCoord1fARB");
	glad_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)load("glMultiTexCoord1fvARB");
	glad_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)load("glMultiTexCoord1iARB");
	glad_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)load("glMultiTexCoord1ivARB");
	glad_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)load("glMultiTexCoord1sARB");
	glad_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)load("glMultiTexCoord1svARB");
	glad_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)load("glMultiTexCoord2dARB");
	glad_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)load("glMultiTexCoord2dvARB");
	glad_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)load("glMultiTexCoord2fARB");
	glad_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)load("glMultiTexCoord2fvARB");
	glad_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)load("glMultiTexCoord2iARB");
	glad_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)load("glMultiTexCoord2ivARB");
	glad_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)load("glMultiTexCoord2sARB");
	glad_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)load("glMultiTexCoord2svARB");
	glad_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)load("glMultiTexCoord3dARB");
	glad_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)load("glMultiTexCoord3dvARB");
	glad_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)load("glMultiTexCoord3fARB");
	glad_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)load("glMultiTexCoord3fvARB");
	glad_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)load("glMultiTexCoord3iARB");
	glad_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)load("glMultiTexCoord3ivARB");
	glad_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)load("glMultiTexCoord3sARB");
	glad_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)load("glMultiTexCoord3svARB");
	glad_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)load("glMultiTexCoord4dARB");
	glad_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)load("glMultiTexCoord4dvARB");
	glad_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)load("glMultiTexCoord4fARB");
	glad_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)load("glMultiTexCoord4fvARB");
	glad_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)load("glMultiTexCoord4iARB");
	glad_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)load("glMultiTexCoord4ivARB");
	glad_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)load("glMultiTexCoord4sARB");
	glad_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)load("glMultiTexCoord4svARB");
}
static void load_GL_SGIX_polynomial_ffd(GLADloadproc load) {
	if(!GLAD_GL_SGIX_polynomial_ffd) return;
	glad_glDeformationMap3dSGIX = (PFNGLDEFORMATIONMAP3DSGIXPROC)load("glDeformationMap3dSGIX");
	glad_glDeformationMap3fSGIX = (PFNGLDEFORMATIONMAP3FSGIXPROC)load("glDeformationMap3fSGIX");
	glad_glDeformSGIX = (PFNGLDEFORMSGIXPROC)load("glDeformSGIX");
	glad_glLoadIdentityDeformationMapSGIX = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)load("glLoadIdentityDeformationMapSGIX");
}
static void load_GL_EXT_provoking_vertex(GLADloadproc load) {
	if(!GLAD_GL_EXT_provoking_vertex) return;
	glad_glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC)load("glProvokingVertexEXT");
}
static void load_GL_ARB_point_parameters(GLADloadproc load) {
	if(!GLAD_GL_ARB_point_parameters) return;
	glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)load("glPointParameterfARB");
	glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)load("glPointParameterfvARB");
}
static void load_GL_ARB_shader_image_load_store(GLADloadproc load) {
	if(!GLAD_GL_ARB_shader_image_load_store) return;
	glad_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)load("glBindImageTexture");
	glad_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)load("glMemoryBarrier");
}
static void load_GL_ARB_texture_barrier(GLADloadproc load) {
	if(!GLAD_GL_ARB_texture_barrier) return;
	glad_glTextureBarrier = (PFNGLTEXTUREBARRIERPROC)load("glTextureBarrier");
}
static void load_GL_NV_bindless_multi_draw_indirect(GLADloadproc load) {
	if(!GLAD_GL_NV_bindless_multi_draw_indirect) return;
	glad_glMultiDrawArraysIndirectBindlessNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC)load("glMultiDrawArraysIndirectBindlessNV");
	glad_glMultiDrawElementsIndirectBindlessNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC)load("glMultiDrawElementsIndirectBindlessNV");
}
static void load_GL_EXT_transform_feedback(GLADloadproc load) {
	if(!GLAD_GL_EXT_transform_feedback) return;
	glad_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)load("glBeginTransformFeedbackEXT");
	glad_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)load("glEndTransformFeedbackEXT");
	glad_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)load("glBindBufferRangeEXT");
	glad_glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC)load("glBindBufferOffsetEXT");
	glad_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)load("glBindBufferBaseEXT");
	glad_glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)load("glTransformFeedbackVaryingsEXT");
	glad_glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)load("glGetTransformFeedbackVaryingEXT");
}
static void load_GL_NV_gpu_program4(GLADloadproc load) {
	if(!GLAD_GL_NV_gpu_program4) return;
	glad_glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)load("glProgramLocalParameterI4iNV");
	glad_glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)load("glProgramLocalParameterI4ivNV");
	glad_glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)load("glProgramLocalParametersI4ivNV");
	glad_glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)load("glProgramLocalParameterI4uiNV");
	glad_glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)load("glProgramLocalParameterI4uivNV");
	glad_glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)load("glProgramLocalParametersI4uivNV");
	glad_glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC)load("glProgramEnvParameterI4iNV");
	glad_glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)load("glProgramEnvParameterI4ivNV");
	glad_glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)load("glProgramEnvParametersI4ivNV");
	glad_glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)load("glProgramEnvParameterI4uiNV");
	glad_glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)load("glProgramEnvParameterI4uivNV");
	glad_glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)load("glProgramEnvParametersI4uivNV");
	glad_glGetProgramLocalParameterIivNV = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)load("glGetProgramLocalParameterIivNV");
	glad_glGetProgramLocalParameterIuivNV = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)load("glGetProgramLocalParameterIuivNV");
	glad_glGetProgramEnvParameterIivNV = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)load("glGetProgramEnvParameterIivNV");
	glad_glGetProgramEnvParameterIuivNV = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)load("glGetProgramEnvParameterIuivNV");
}
static void load_GL_NV_gpu_program5(GLADloadproc load) {
	if(!GLAD_GL_NV_gpu_program5) return;
	glad_glProgramSubroutineParametersuivNV = (PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)load("glProgramSubroutineParametersuivNV");
	glad_glGetProgramSubroutineParameteruivNV = (PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)load("glGetProgramSubroutineParameteruivNV");
}
static void load_GL_ARB_geometry_shader4(GLADloadproc load) {
	if(!GLAD_GL_ARB_geometry_shader4) return;
	glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)load("glProgramParameteriARB");
	glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)load("glFramebufferTextureARB");
	glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)load("glFramebufferTextureLayerARB");
	glad_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)load("glFramebufferTextureFaceARB");
}
static void load_GL_NV_conservative_raster(GLADloadproc load) {
	if(!GLAD_GL_NV_conservative_raster) return;
	glad_glSubpixelPrecisionBiasNV = (PFNGLSUBPIXELPRECISIONBIASNVPROC)load("glSubpixelPrecisionBiasNV");
}
static void load_GL_SGIX_sprite(GLADloadproc load) {
	if(!GLAD_GL_SGIX_sprite) return;
	glad_glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC)load("glSpriteParameterfSGIX");
	glad_glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC)load("glSpriteParameterfvSGIX");
	glad_glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC)load("glSpriteParameteriSGIX");
	glad_glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC)load("glSpriteParameterivSGIX");
}
static void load_GL_ARB_get_program_binary(GLADloadproc load) {
	if(!GLAD_GL_ARB_get_program_binary) return;
	glad_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)load("glGetProgramBinary");
	glad_glProgramBinary = (PFNGLPROGRAMBINARYPROC)load("glProgramBinary");
	glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)load("glProgramParameteri");
}
static void load_GL_AMD_occlusion_query_event(GLADloadproc load) {
	if(!GLAD_GL_AMD_occlusion_query_event) return;
	glad_glQueryObjectParameteruiAMD = (PFNGLQUERYOBJECTPARAMETERUIAMDPROC)load("glQueryObjectParameteruiAMD");
}
static void load_GL_SGIS_multisample(GLADloadproc load) {
	if(!GLAD_GL_SGIS_multisample) return;
	glad_glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC)load("glSampleMaskSGIS");
	glad_glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC)load("glSamplePatternSGIS");
}
static void load_GL_EXT_framebuffer_object(GLADloadproc load) {
	if(!GLAD_GL_EXT_framebuffer_object) return;
	glad_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)load("glIsRenderbufferEXT");
	glad_glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC)load("glBindRenderbufferEXT");
	glad_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)load("glDeleteRenderbuffersEXT");
	glad_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)load("glGenRenderbuffersEXT");
	glad_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)load("glRenderbufferStorageEXT");
	glad_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)load("glGetRenderbufferParameterivEXT");
	glad_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)load("glIsFramebufferEXT");
	glad_glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC)load("glBindFramebufferEXT");
	glad_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)load("glDeleteFramebuffersEXT");
	glad_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)load("glGenFramebuffersEXT");
	glad_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)load("glCheckFramebufferStatusEXT");
	glad_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)load("glFramebufferTexture1DEXT");
	glad_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)load("glFramebufferTexture2DEXT");
	glad_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)load("glFramebufferTexture3DEXT");
	glad_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)load("glFramebufferRenderbufferEXT");
	glad_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)load("glGetFramebufferAttachmentParameterivEXT");
	glad_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)load("glGenerateMipmapEXT");
}
static void load_GL_APPLE_vertex_array_range(GLADloadproc load) {
	if(!GLAD_GL_APPLE_vertex_array_range) return;
	glad_glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC)load("glVertexArrayRangeAPPLE");
	glad_glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)load("glFlushVertexArrayRangeAPPLE");
	glad_glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)load("glVertexArrayParameteriAPPLE");
}
static void load_GL_NV_register_combiners(GLADloadproc load) {
	if(!GLAD_GL_NV_register_combiners) return;
	glad_glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)load("glCombinerParameterfvNV");
	glad_glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)load("glCombinerParameterfNV");
	glad_glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)load("glCombinerParameterivNV");
	glad_glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)load("glCombinerParameteriNV");
	glad_glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)load("glCombinerInputNV");
	glad_glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)load("glCombinerOutputNV");
	glad_glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)load("glFinalCombinerInputNV");
	glad_glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)load("glGetCombinerInputParameterfvNV");
	glad_glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)load("glGetCombinerInputParameterivNV");
	glad_glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)load("glGetCombinerOutputParameterfvNV");
	glad_glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)load("glGetCombinerOutputParameterivNV");
	glad_glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)load("glGetFinalCombinerInputParameterfvNV");
	glad_glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)load("glGetFinalCombinerInputParameterivNV");
}
static void load_GL_ARB_draw_buffers(GLADloadproc load) {
	if(!GLAD_GL_ARB_draw_buffers) return;
	glad_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)load("glDrawBuffersARB");
}
static void load_GL_ARB_debug_output(GLADloadproc load) {
	if(!GLAD_GL_ARB_debug_output) return;
	glad_glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC)load("glDebugMessageControlARB");
	glad_glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC)load("glDebugMessageInsertARB");
	glad_glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC)load("glDebugMessageCallbackARB");
	glad_glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC)load("glGetDebugMessageLogARB");
}
static void load_GL_EXT_cull_vertex(GLADloadproc load) {
	if(!GLAD_GL_EXT_cull_vertex) return;
	glad_glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC)load("glCullParameterdvEXT");
	glad_glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC)load("glCullParameterfvEXT");
}
static void load_GL_IBM_multimode_draw_arrays(GLADloadproc load) {
	if(!GLAD_GL_IBM_multimode_draw_arrays) return;
	glad_glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)load("glMultiModeDrawArraysIBM");
	glad_glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)load("glMultiModeDrawElementsIBM");
}
static void load_GL_APPLE_vertex_array_object(GLADloadproc load) {
	if(!GLAD_GL_APPLE_vertex_array_object) return;
	glad_glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC)load("glBindVertexArrayAPPLE");
	glad_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)load("glDeleteVertexArraysAPPLE");
	glad_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)load("glGenVertexArraysAPPLE");
	glad_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)load("glIsVertexArrayAPPLE");
}
static void load_GL_SGIS_detail_texture(GLADloadproc load) {
	if(!GLAD_GL_SGIS_detail_texture) return;
	glad_glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC)load("glDetailTexFuncSGIS");
	glad_glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC)load("glGetDetailTexFuncSGIS");
}
static void load_GL_ARB_draw_instanced(GLADloadproc load) {
	if(!GLAD_GL_ARB_draw_instanced) return;
	glad_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)load("glDrawArraysInstancedARB");
	glad_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)load("glDrawElementsInstancedARB");
}
static void load_GL_ARB_shading_language_include(GLADloadproc load) {
	if(!GLAD_GL_ARB_shading_language_include) return;
	glad_glNamedStringARB = (PFNGLNAMEDSTRINGARBPROC)load("glNamedStringARB");
	glad_glDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC)load("glDeleteNamedStringARB");
	glad_glCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC)load("glCompileShaderIncludeARB");
	glad_glIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC)load("glIsNamedStringARB");
	glad_glGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC)load("glGetNamedStringARB");
	glad_glGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC)load("glGetNamedStringivARB");
}
static void load_GL_INGR_blend_func_separate(GLADloadproc load) {
	if(!GLAD_GL_INGR_blend_func_separate) return;
	glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)load("glBlendFuncSeparateINGR");
}
static void load_GL_NV_path_rendering(GLADloadproc load) {
	if(!GLAD_GL_NV_path_rendering) return;
	glad_glGenPathsNV = (PFNGLGENPATHSNVPROC)load("glGenPathsNV");
	glad_glDeletePathsNV = (PFNGLDELETEPATHSNVPROC)load("glDeletePathsNV");
	glad_glIsPathNV = (PFNGLISPATHNVPROC)load("glIsPathNV");
	glad_glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC)load("glPathCommandsNV");
	glad_glPathCoordsNV = (PFNGLPATHCOORDSNVPROC)load("glPathCoordsNV");
	glad_glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC)load("glPathSubCommandsNV");
	glad_glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC)load("glPathSubCoordsNV");
	glad_glPathStringNV = (PFNGLPATHSTRINGNVPROC)load("glPathStringNV");
	glad_glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC)load("glPathGlyphsNV");
	glad_glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC)load("glPathGlyphRangeNV");
	glad_glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC)load("glWeightPathsNV");
	glad_glCopyPathNV = (PFNGLCOPYPATHNVPROC)load("glCopyPathNV");
	glad_glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC)load("glInterpolatePathsNV");
	glad_glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC)load("glTransformPathNV");
	glad_glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC)load("glPathParameterivNV");
	glad_glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC)load("glPathParameteriNV");
	glad_glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC)load("glPathParameterfvNV");
	glad_glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC)load("glPathParameterfNV");
	glad_glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC)load("glPathDashArrayNV");
	glad_glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC)load("glPathStencilFuncNV");
	glad_glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC)load("glPathStencilDepthOffsetNV");
	glad_glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC)load("glStencilFillPathNV");
	glad_glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC)load("glStencilStrokePathNV");
	glad_glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC)load("glStencilFillPathInstancedNV");
	glad_glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)load("glStencilStrokePathInstancedNV");
	glad_glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC)load("glPathCoverDepthFuncNV");
	glad_glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC)load("glCoverFillPathNV");
	glad_glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC)load("glCoverStrokePathNV");
	glad_glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC)load("glCoverFillPathInstancedNV");
	glad_glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)load("glCoverStrokePathInstancedNV");
	glad_glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC)load("glGetPathParameterivNV");
	glad_glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC)load("glGetPathParameterfvNV");
	glad_glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC)load("glGetPathCommandsNV");
	glad_glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC)load("glGetPathCoordsNV");
	glad_glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC)load("glGetPathDashArrayNV");
	glad_glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC)load("glGetPathMetricsNV");
	glad_glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC)load("glGetPathMetricRangeNV");
	glad_glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC)load("glGetPathSpacingNV");
	glad_glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC)load("glIsPointInFillPathNV");
	glad_glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC)load("glIsPointInStrokePathNV");
	glad_glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC)load("glGetPathLengthNV");
	glad_glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC)load("glPointAlongPathNV");
	glad_glMatrixLoad3x2fNV = (PFNGLMATRIXLOAD3X2FNVPROC)load("glMatrixLoad3x2fNV");
	glad_glMatrixLoad3x3fNV = (PFNGLMATRIXLOAD3X3FNVPROC)load("glMatrixLoad3x3fNV");
	glad_glMatrixLoadTranspose3x3fNV = (PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC)load("glMatrixLoadTranspose3x3fNV");
	glad_glMatrixMult3x2fNV = (PFNGLMATRIXMULT3X2FNVPROC)load("glMatrixMult3x2fNV");
	glad_glMatrixMult3x3fNV = (PFNGLMATRIXMULT3X3FNVPROC)load("glMatrixMult3x3fNV");
	glad_glMatrixMultTranspose3x3fNV = (PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC)load("glMatrixMultTranspose3x3fNV");
	glad_glStencilThenCoverFillPathNV = (PFNGLSTENCILTHENCOVERFILLPATHNVPROC)load("glStencilThenCoverFillPathNV");
	glad_glStencilThenCoverStrokePathNV = (PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC)load("glStencilThenCoverStrokePathNV");
	glad_glStencilThenCoverFillPathInstancedNV = (PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC)load("glStencilThenCoverFillPathInstancedNV");
	glad_glStencilThenCoverStrokePathInstancedNV = (PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC)load("glStencilThenCoverStrokePathInstancedNV");
	glad_glPathGlyphIndexRangeNV = (PFNGLPATHGLYPHINDEXRANGENVPROC)load("glPathGlyphIndexRangeNV");
	glad_glPathGlyphIndexArrayNV = (PFNGLPATHGLYPHINDEXARRAYNVPROC)load("glPathGlyphIndexArrayNV");
	glad_glPathMemoryGlyphIndexArrayNV = (PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC)load("glPathMemoryGlyphIndexArrayNV");
	glad_glProgramPathFragmentInputGenNV = (PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC)load("glProgramPathFragmentInputGenNV");
	glad_glGetProgramResourcefvNV = (PFNGLGETPROGRAMRESOURCEFVNVPROC)load("glGetProgramResourcefvNV");
	glad_glPathColorGenNV = (PFNGLPATHCOLORGENNVPROC)load("glPathColorGenNV");
	glad_glPathTexGenNV = (PFNGLPATHTEXGENNVPROC)load("glPathTexGenNV");
	glad_glPathFogGenNV = (PFNGLPATHFOGGENNVPROC)load("glPathFogGenNV");
	glad_glGetPathColorGenivNV = (PFNGLGETPATHCOLORGENIVNVPROC)load("glGetPathColorGenivNV");
	glad_glGetPathColorGenfvNV = (PFNGLGETPATHCOLORGENFVNVPROC)load("glGetPathColorGenfvNV");
	glad_glGetPathTexGenivNV = (PFNGLGETPATHTEXGENIVNVPROC)load("glGetPathTexGenivNV");
	glad_glGetPathTexGenfvNV = (PFNGLGETPATHTEXGENFVNVPROC)load("glGetPathTexGenfvNV");
}
static void load_GL_NV_conservative_raster_dilate(GLADloadproc load) {
	if(!GLAD_GL_NV_conservative_raster_dilate) return;
	glad_glConservativeRasterParameterfNV = (PFNGLCONSERVATIVERASTERPARAMETERFNVPROC)load("glConservativeRasterParameterfNV");
}
static void load_GL_ATI_vertex_streams(GLADloadproc load) {
	if(!GLAD_GL_ATI_vertex_streams) return;
	glad_glVertexStream1sATI = (PFNGLVERTEXSTREAM1SATIPROC)load("glVertexStream1sATI");
	glad_glVertexStream1svATI = (PFNGLVERTEXSTREAM1SVATIPROC)load("glVertexStream1svATI");
	glad_glVertexStream1iATI = (PFNGLVERTEXSTREAM1IATIPROC)load("glVertexStream1iATI");
	glad_glVertexStream1ivATI = (PFNGLVERTEXSTREAM1IVATIPROC)load("glVertexStream1ivATI");
	glad_glVertexStream1fATI = (PFNGLVERTEXSTREAM1FATIPROC)load("glVertexStream1fATI");
	glad_glVertexStream1fvATI = (PFNGLVERTEXSTREAM1FVATIPROC)load("glVertexStream1fvATI");
	glad_glVertexStream1dATI = (PFNGLVERTEXSTREAM1DATIPROC)load("glVertexStream1dATI");
	glad_glVertexStream1dvATI = (PFNGLVERTEXSTREAM1DVATIPROC)load("glVertexStream1dvATI");
	glad_glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC)load("glVertexStream2sATI");
	glad_glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC)load("glVertexStream2svATI");
	glad_glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC)load("glVertexStream2iATI");
	glad_glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC)load("glVertexStream2ivATI");
	glad_glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC)load("glVertexStream2fATI");
	glad_glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC)load("glVertexStream2fvATI");
	glad_glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC)load("glVertexStream2dATI");
	glad_glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC)load("glVertexStream2dvATI");
	glad_glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC)load("glVertexStream3sATI");
	glad_glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC)load("glVertexStream3svATI");
	glad_glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC)load("glVertexStream3iATI");
	glad_glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC)load("glVertexStream3ivATI");
	glad_glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC)load("glVertexStream3fATI");
	glad_glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC)load("glVertexStream3fvATI");
	glad_glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC)load("glVertexStream3dATI");
	glad_glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC)load("glVertexStream3dvATI");
	glad_glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC)load("glVertexStream4sATI");
	glad_glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC)load("glVertexStream4svATI");
	glad_glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC)load("glVertexStream4iATI");
	glad_glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC)load("glVertexStream4ivATI");
	glad_glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC)load("glVertexStream4fATI");
	glad_glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC)load("glVertexStream4fvATI");
	glad_glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC)load("glVertexStream4dATI");
	glad_glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC)load("glVertexStream4dvATI");
	glad_glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC)load("glNormalStream3bATI");
	glad_glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC)load("glNormalStream3bvATI");
	glad_glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC)load("glNormalStream3sATI");
	glad_glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC)load("glNormalStream3svATI");
	glad_glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC)load("glNormalStream3iATI");
	glad_glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC)load("glNormalStream3ivATI");
	glad_glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC)load("glNormalStream3fATI");
	glad_glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC)load("glNormalStream3fvATI");
	glad_glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC)load("glNormalStream3dATI");
	glad_glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC)load("glNormalStream3dvATI");
	glad_glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)load("glClientActiveVertexStreamATI");
	glad_glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC)load("glVertexBlendEnviATI");
	glad_glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC)load("glVertexBlendEnvfATI");
}
static void load_GL_ARB_gpu_shader_int64(GLADloadproc load) {
	if(!GLAD_GL_ARB_gpu_shader_int64) return;
	glad_glUniform1i64ARB = (PFNGLUNIFORM1I64ARBPROC)load("glUniform1i64ARB");
	glad_glUniform2i64ARB = (PFNGLUNIFORM2I64ARBPROC)load("glUniform2i64ARB");
	glad_glUniform3i64ARB = (PFNGLUNIFORM3I64ARBPROC)load("glUniform3i64ARB");
	glad_glUniform4i64ARB = (PFNGLUNIFORM4I64ARBPROC)load("glUniform4i64ARB");
	glad_glUniform1i64vARB = (PFNGLUNIFORM1I64VARBPROC)load("glUniform1i64vARB");
	glad_glUniform2i64vARB = (PFNGLUNIFORM2I64VARBPROC)load("glUniform2i64vARB");
	glad_glUniform3i64vARB = (PFNGLUNIFORM3I64VARBPROC)load("glUniform3i64vARB");
	glad_glUniform4i64vARB = (PFNGLUNIFORM4I64VARBPROC)load("glUniform4i64vARB");
	glad_glUniform1ui64ARB = (PFNGLUNIFORM1UI64ARBPROC)load("glUniform1ui64ARB");
	glad_glUniform2ui64ARB = (PFNGLUNIFORM2UI64ARBPROC)load("glUniform2ui64ARB");
	glad_glUniform3ui64ARB = (PFNGLUNIFORM3UI64ARBPROC)load("glUniform3ui64ARB");
	glad_glUniform4ui64ARB = (PFNGLUNIFORM4UI64ARBPROC)load("glUniform4ui64ARB");
	glad_glUniform1ui64vARB = (PFNGLUNIFORM1UI64VARBPROC)load("glUniform1ui64vARB");
	glad_glUniform2ui64vARB = (PFNGLUNIFORM2UI64VARBPROC)load("glUniform2ui64vARB");
	glad_glUniform3ui64vARB = (PFNGLUNIFORM3UI64VARBPROC)load("glUniform3ui64vARB");
	glad_glUniform4ui64vARB = (PFNGLUNIFORM4UI64VARBPROC)load("glUniform4ui64vARB");
	glad_glGetUniformi64vARB = (PFNGLGETUNIFORMI64VARBPROC)load("glGetUniformi64vARB");
	glad_glGetUniformui64vARB = (PFNGLGETUNIFORMUI64VARBPROC)load("glGetUniformui64vARB");
	glad_glGetnUniformi64vARB = (PFNGLGETNUNIFORMI64VARBPROC)load("glGetnUniformi64vARB");
	glad_glGetnUniformui64vARB = (PFNGLGETNUNIFORMUI64VARBPROC)load("glGetnUniformui64vARB");
	glad_glProgramUniform1i64ARB = (PFNGLPROGRAMUNIFORM1I64ARBPROC)load("glProgramUniform1i64ARB");
	glad_glProgramUniform2i64ARB = (PFNGLPROGRAMUNIFORM2I64ARBPROC)load("glProgramUniform2i64ARB");
	glad_glProgramUniform3i64ARB = (PFNGLPROGRAMUNIFORM3I64ARBPROC)load("glProgramUniform3i64ARB");
	glad_glProgramUniform4i64ARB = (PFNGLPROGRAMUNIFORM4I64ARBPROC)load("glProgramUniform4i64ARB");
	glad_glProgramUniform1i64vARB = (PFNGLPROGRAMUNIFORM1I64VARBPROC)load("glProgramUniform1i64vARB");
	glad_glProgramUniform2i64vARB = (PFNGLPROGRAMUNIFORM2I64VARBPROC)load("glProgramUniform2i64vARB");
	glad_glProgramUniform3i64vARB = (PFNGLPROGRAMUNIFORM3I64VARBPROC)load("glProgramUniform3i64vARB");
	glad_glProgramUniform4i64vARB = (PFNGLPROGRAMUNIFORM4I64VARBPROC)load("glProgramUniform4i64vARB");
	glad_glProgramUniform1ui64ARB = (PFNGLPROGRAMUNIFORM1UI64ARBPROC)load("glProgramUniform1ui64ARB");
	glad_glProgramUniform2ui64ARB = (PFNGLPROGRAMUNIFORM2UI64ARBPROC)load("glProgramUniform2ui64ARB");
	glad_glProgramUniform3ui64ARB = (PFNGLPROGRAMUNIFORM3UI64ARBPROC)load("glProgramUniform3ui64ARB");
	glad_glProgramUniform4ui64ARB = (PFNGLPROGRAMUNIFORM4UI64ARBPROC)load("glProgramUniform4ui64ARB");
	glad_glProgramUniform1ui64vARB = (PFNGLPROGRAMUNIFORM1UI64VARBPROC)load("glProgramUniform1ui64vARB");
	glad_glProgramUniform2ui64vARB = (PFNGLPROGRAMUNIFORM2UI64VARBPROC)load("glProgramUniform2ui64vARB");
	glad_glProgramUniform3ui64vARB = (PFNGLPROGRAMUNIFORM3UI64VARBPROC)load("glProgramUniform3ui64vARB");
	glad_glProgramUniform4ui64vARB = (PFNGLPROGRAMUNIFORM4UI64VARBPROC)load("glProgramUniform4ui64vARB");
}
static void load_GL_NV_vdpau_interop(GLADloadproc load) {
	if(!GLAD_GL_NV_vdpau_interop) return;
	glad_glVDPAUInitNV = (PFNGLVDPAUINITNVPROC)load("glVDPAUInitNV");
	glad_glVDPAUFiniNV = (PFNGLVDPAUFININVPROC)load("glVDPAUFiniNV");
	glad_glVDPAURegisterVideoSurfaceNV = (PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)load("glVDPAURegisterVideoSurfaceNV");
	glad_glVDPAURegisterOutputSurfaceNV = (PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)load("glVDPAURegisterOutputSurfaceNV");
	glad_glVDPAUIsSurfaceNV = (PFNGLVDPAUISSURFACENVPROC)load("glVDPAUIsSurfaceNV");
	glad_glVDPAUUnregisterSurfaceNV = (PFNGLVDPAUUNREGISTERSURFACENVPROC)load("glVDPAUUnregisterSurfaceNV");
	glad_glVDPAUGetSurfaceivNV = (PFNGLVDPAUGETSURFACEIVNVPROC)load("glVDPAUGetSurfaceivNV");
	glad_glVDPAUSurfaceAccessNV = (PFNGLVDPAUSURFACEACCESSNVPROC)load("glVDPAUSurfaceAccessNV");
	glad_glVDPAUMapSurfacesNV = (PFNGLVDPAUMAPSURFACESNVPROC)load("glVDPAUMapSurfacesNV");
	glad_glVDPAUUnmapSurfacesNV = (PFNGLVDPAUUNMAPSURFACESNVPROC)load("glVDPAUUnmapSurfacesNV");
}
static void load_GL_ARB_internalformat_query2(GLADloadproc load) {
	if(!GLAD_GL_ARB_internalformat_query2) return;
	glad_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)load("glGetInternalformati64v");
}
static void load_GL_SUN_vertex(GLADloadproc load) {
	if(!GLAD_GL_SUN_vertex) return;
	glad_glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC)load("glColor4ubVertex2fSUN");
	glad_glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)load("glColor4ubVertex2fvSUN");
	glad_glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC)load("glColor4ubVertex3fSUN");
	glad_glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)load("glColor4ubVertex3fvSUN");
	glad_glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC)load("glColor3fVertex3fSUN");
	glad_glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC)load("glColor3fVertex3fvSUN");
	glad_glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC)load("glNormal3fVertex3fSUN");
	glad_glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC)load("glNormal3fVertex3fvSUN");
	glad_glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)load("glColor4fNormal3fVertex3fSUN");
	glad_glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)load("glColor4fNormal3fVertex3fvSUN");
	glad_glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)load("glTexCoord2fVertex3fSUN");
	glad_glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)load("glTexCoord2fVertex3fvSUN");
	glad_glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)load("glTexCoord4fVertex4fSUN");
	glad_glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)load("glTexCoord4fVertex4fvSUN");
	glad_glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)load("glTexCoord2fColor4ubVertex3fSUN");
	glad_glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)load("glTexCoord2fColor4ubVertex3fvSUN");
	glad_glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)load("glTexCoord2fColor3fVertex3fSUN");
	glad_glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)load("glTexCoord2fColor3fVertex3fvSUN");
	glad_glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)load("glTexCoord2fNormal3fVertex3fSUN");
	glad_glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)load("glTexCoord2fNormal3fVertex3fvSUN");
	glad_glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)load("glTexCoord2fColor4fNormal3fVertex3fSUN");
	glad_glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)load("glTexCoord2fColor4fNormal3fVertex3fvSUN");
	glad_glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)load("glTexCoord4fColor4fNormal3fVertex4fSUN");
	glad_glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)load("glTexCoord4fColor4fNormal3fVertex4fvSUN");
	glad_glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)load("glReplacementCodeuiVertex3fSUN");
	glad_glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)load("glReplacementCodeuiVertex3fvSUN");
	glad_glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)load("glReplacementCodeuiColor4ubVertex3fSUN");
	glad_glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)load("glReplacementCodeuiColor4ubVertex3fvSUN");
	glad_glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)load("glReplacementCodeuiColor3fVertex3fSUN");
	glad_glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)load("glReplacementCodeuiColor3fVertex3fvSUN");
	glad_glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)load("glReplacementCodeuiNormal3fVertex3fSUN");
	glad_glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)load("glReplacementCodeuiNormal3fVertex3fvSUN");
	glad_glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)load("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
	glad_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)load("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
	glad_glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)load("glReplacementCodeuiTexCoord2fVertex3fSUN");
	glad_glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)load("glReplacementCodeuiTexCoord2fVertex3fvSUN");
	glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)load("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
	glad_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)load("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
	glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)load("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
	glad_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)load("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
}
static void load_GL_SGIX_igloo_interface(GLADloadproc load) {
	if(!GLAD_GL_SGIX_igloo_interface) return;
	glad_glIglooInterfaceSGIX = (PFNGLIGLOOINTERFACESGIXPROC)load("glIglooInterfaceSGIX");
}
static void load_GL_ARB_draw_indirect(GLADloadproc load) {
	if(!GLAD_GL_ARB_draw_indirect) return;
	glad_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)load("glDrawArraysIndirect");
	glad_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)load("glDrawElementsIndirect");
}
static void load_GL_NV_vertex_program4(GLADloadproc load) {
	if(!GLAD_GL_NV_vertex_program4) return;
	glad_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)load("glVertexAttribI1iEXT");
	glad_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)load("glVertexAttribI2iEXT");
	glad_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)load("glVertexAttribI3iEXT");
	glad_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)load("glVertexAttribI4iEXT");
	glad_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)load("glVertexAttribI1uiEXT");
	glad_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)load("glVertexAttribI2uiEXT");
	glad_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)load("glVertexAttribI3uiEXT");
	glad_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)load("glVertexAttribI4uiEXT");
	glad_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)load("glVertexAttribI1ivEXT");
	glad_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)load("glVertexAttribI2ivEXT");
	glad_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)load("glVertexAttribI3ivEXT");
	glad_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)load("glVertexAttribI4ivEXT");
	glad_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)load("glVertexAttribI1uivEXT");
	glad_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)load("glVertexAttribI2uivEXT");
	glad_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)load("glVertexAttribI3uivEXT");
	glad_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)load("glVertexAttribI4uivEXT");
	glad_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)load("glVertexAttribI4bvEXT");
	glad_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)load("glVertexAttribI4svEXT");
	glad_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)load("glVertexAttribI4ubvEXT");
	glad_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)load("glVertexAttribI4usvEXT");
	glad_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)load("glVertexAttribIPointerEXT");
	glad_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)load("glGetVertexAttribIivEXT");
	glad_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)load("glGetVertexAttribIuivEXT");
}
static void load_GL_SGIS_fog_function(GLADloadproc load) {
	if(!GLAD_GL_SGIS_fog_function) return;
	glad_glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC)load("glFogFuncSGIS");
	glad_glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC)load("glGetFogFuncSGIS");
}
static void load_GL_EXT_x11_sync_object(GLADloadproc load) {
	if(!GLAD_GL_EXT_x11_sync_object) return;
	glad_glImportSyncEXT = (PFNGLIMPORTSYNCEXTPROC)load("glImportSyncEXT");
}
static void load_GL_ARB_sync(GLADloadproc load) {
	if(!GLAD_GL_ARB_sync) return;
	glad_glFenceSync = (PFNGLFENCESYNCPROC)load("glFenceSync");
	glad_glIsSync = (PFNGLISSYNCPROC)load("glIsSync");
	glad_glDeleteSync = (PFNGLDELETESYNCPROC)load("glDeleteSync");
	glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)load("glClientWaitSync");
	glad_glWaitSync = (PFNGLWAITSYNCPROC)load("glWaitSync");
	glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC)load("glGetInteger64v");
	glad_glGetSynciv = (PFNGLGETSYNCIVPROC)load("glGetSynciv");
}
static void load_GL_NV_sample_locations(GLADloadproc load) {
	if(!GLAD_GL_NV_sample_locations) return;
	glad_glFramebufferSampleLocationsfvNV = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)load("glFramebufferSampleLocationsfvNV");
	glad_glNamedFramebufferSampleLocationsfvNV = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC)load("glNamedFramebufferSampleLocationsfvNV");
	glad_glResolveDepthValuesNV = (PFNGLRESOLVEDEPTHVALUESNVPROC)load("glResolveDepthValuesNV");
}
static void load_GL_ARB_compute_variable_group_size(GLADloadproc load) {
	if(!GLAD_GL_ARB_compute_variable_group_size) return;
	glad_glDispatchComputeGroupSizeARB = (PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)load("glDispatchComputeGroupSizeARB");
}
static void load_GL_OES_fixed_point(GLADloadproc load) {
	if(!GLAD_GL_OES_fixed_point) return;
	glad_glAlphaFuncxOES = (PFNGLALPHAFUNCXOESPROC)load("glAlphaFuncxOES");
	glad_glClearColorxOES = (PFNGLCLEARCOLORXOESPROC)load("glClearColorxOES");
	glad_glClearDepthxOES = (PFNGLCLEARDEPTHXOESPROC)load("glClearDepthxOES");
	glad_glClipPlanexOES = (PFNGLCLIPPLANEXOESPROC)load("glClipPlanexOES");
	glad_glColor4xOES = (PFNGLCOLOR4XOESPROC)load("glColor4xOES");
	glad_glDepthRangexOES = (PFNGLDEPTHRANGEXOESPROC)load("glDepthRangexOES");
	glad_glFogxOES = (PFNGLFOGXOESPROC)load("glFogxOES");
	glad_glFogxvOES = (PFNGLFOGXVOESPROC)load("glFogxvOES");
	glad_glFrustumxOES = (PFNGLFRUSTUMXOESPROC)load("glFrustumxOES");
	glad_glGetClipPlanexOES = (PFNGLGETCLIPPLANEXOESPROC)load("glGetClipPlanexOES");
	glad_glGetFixedvOES = (PFNGLGETFIXEDVOESPROC)load("glGetFixedvOES");
	glad_glGetTexEnvxvOES = (PFNGLGETTEXENVXVOESPROC)load("glGetTexEnvxvOES");
	glad_glGetTexParameterxvOES = (PFNGLGETTEXPARAMETERXVOESPROC)load("glGetTexParameterxvOES");
	glad_glLightModelxOES = (PFNGLLIGHTMODELXOESPROC)load("glLightModelxOES");
	glad_glLightModelxvOES = (PFNGLLIGHTMODELXVOESPROC)load("glLightModelxvOES");
	glad_glLightxOES = (PFNGLLIGHTXOESPROC)load("glLightxOES");
	glad_glLightxvOES = (PFNGLLIGHTXVOESPROC)load("glLightxvOES");
	glad_glLineWidthxOES = (PFNGLLINEWIDTHXOESPROC)load("glLineWidthxOES");
	glad_glLoadMatrixxOES = (PFNGLLOADMATRIXXOESPROC)load("glLoadMatrixxOES");
	glad_glMaterialxOES = (PFNGLMATERIALXOESPROC)load("glMaterialxOES");
	glad_glMaterialxvOES = (PFNGLMATERIALXVOESPROC)load("glMaterialxvOES");
	glad_glMultMatrixxOES = (PFNGLMULTMATRIXXOESPROC)load("glMultMatrixxOES");
	glad_glMultiTexCoord4xOES = (PFNGLMULTITEXCOORD4XOESPROC)load("glMultiTexCoord4xOES");
	glad_glNormal3xOES = (PFNGLNORMAL3XOESPROC)load("glNormal3xOES");
	glad_glOrthoxOES = (PFNGLORTHOXOESPROC)load("glOrthoxOES");
	glad_glPointParameterxvOES = (PFNGLPOINTPARAMETERXVOESPROC)load("glPointParameterxvOES");
	glad_glPointSizexOES = (PFNGLPOINTSIZEXOESPROC)load("glPointSizexOES");
	glad_glPolygonOffsetxOES = (PFNGLPOLYGONOFFSETXOESPROC)load("glPolygonOffsetxOES");
	glad_glRotatexOES = (PFNGLROTATEXOESPROC)load("glRotatexOES");
	glad_glScalexOES = (PFNGLSCALEXOESPROC)load("glScalexOES");
	glad_glTexEnvxOES = (PFNGLTEXENVXOESPROC)load("glTexEnvxOES");
	glad_glTexEnvxvOES = (PFNGLTEXENVXVOESPROC)load("glTexEnvxvOES");
	glad_glTexParameterxOES = (PFNGLTEXPARAMETERXOESPROC)load("glTexParameterxOES");
	glad_glTexParameterxvOES = (PFNGLTEXPARAMETERXVOESPROC)load("glTexParameterxvOES");
	glad_glTranslatexOES = (PFNGLTRANSLATEXOESPROC)load("glTranslatexOES");
	glad_glGetLightxvOES = (PFNGLGETLIGHTXVOESPROC)load("glGetLightxvOES");
	glad_glGetMaterialxvOES = (PFNGLGETMATERIALXVOESPROC)load("glGetMaterialxvOES");
	glad_glPointParameterxOES = (PFNGLPOINTPARAMETERXOESPROC)load("glPointParameterxOES");
	glad_glSampleCoveragexOES = (PFNGLSAMPLECOVERAGEXOESPROC)load("glSampleCoveragexOES");
	glad_glAccumxOES = (PFNGLACCUMXOESPROC)load("glAccumxOES");
	glad_glBitmapxOES = (PFNGLBITMAPXOESPROC)load("glBitmapxOES");
	glad_glBlendColorxOES = (PFNGLBLENDCOLORXOESPROC)load("glBlendColorxOES");
	glad_glClearAccumxOES = (PFNGLCLEARACCUMXOESPROC)load("glClearAccumxOES");
	glad_glColor3xOES = (PFNGLCOLOR3XOESPROC)load("glColor3xOES");
	glad_glColor3xvOES = (PFNGLCOLOR3XVOESPROC)load("glColor3xvOES");
	glad_glColor4xvOES = (PFNGLCOLOR4XVOESPROC)load("glColor4xvOES");
	glad_glConvolutionParameterxOES = (PFNGLCONVOLUTIONPARAMETERXOESPROC)load("glConvolutionParameterxOES");
	glad_glConvolutionParameterxvOES = (PFNGLCONVOLUTIONPARAMETERXVOESPROC)load("glConvolutionParameterxvOES");
	glad_glEvalCoord1xOES = (PFNGLEVALCOORD1XOESPROC)load("glEvalCoord1xOES");
	glad_glEvalCoord1xvOES = (PFNGLEVALCOORD1XVOESPROC)load("glEvalCoord1xvOES");
	glad_glEvalCoord2xOES = (PFNGLEVALCOORD2XOESPROC)load("glEvalCoord2xOES");
	glad_glEvalCoord2xvOES = (PFNGLEVALCOORD2XVOESPROC)load("glEvalCoord2xvOES");
	glad_glFeedbackBufferxOES = (PFNGLFEEDBACKBUFFERXOESPROC)load("glFeedbackBufferxOES");
	glad_glGetConvolutionParameterxvOES = (PFNGLGETCONVOLUTIONPARAMETERXVOESPROC)load("glGetConvolutionParameterxvOES");
	glad_glGetHistogramParameterxvOES = (PFNGLGETHISTOGRAMPARAMETERXVOESPROC)load("glGetHistogramParameterxvOES");
	glad_glGetLightxOES = (PFNGLGETLIGHTXOESPROC)load("glGetLightxOES");
	glad_glGetMapxvOES = (PFNGLGETMAPXVOESPROC)load("glGetMapxvOES");
	glad_glGetMaterialxOES = (PFNGLGETMATERIALXOESPROC)load("glGetMaterialxOES");
	glad_glGetPixelMapxv = (PFNGLGETPIXELMAPXVPROC)load("glGetPixelMapxv");
	glad_glGetTexGenxvOES = (PFNGLGETTEXGENXVOESPROC)load("glGetTexGenxvOES");
	glad_glGetTexLevelParameterxvOES = (PFNGLGETTEXLEVELPARAMETERXVOESPROC)load("glGetTexLevelParameterxvOES");
	glad_glIndexxOES = (PFNGLINDEXXOESPROC)load("glIndexxOES");
	glad_glIndexxvOES = (PFNGLINDEXXVOESPROC)load("glIndexxvOES");
	glad_glLoadTransposeMatrixxOES = (PFNGLLOADTRANSPOSEMATRIXXOESPROC)load("glLoadTransposeMatrixxOES");
	glad_glMap1xOES = (PFNGLMAP1XOESPROC)load("glMap1xOES");
	glad_glMap2xOES = (PFNGLMAP2XOESPROC)load("glMap2xOES");
	glad_glMapGrid1xOES = (PFNGLMAPGRID1XOESPROC)load("glMapGrid1xOES");
	glad_glMapGrid2xOES = (PFNGLMAPGRID2XOESPROC)load("glMapGrid2xOES");
	glad_glMultTransposeMatrixxOES = (PFNGLMULTTRANSPOSEMATRIXXOESPROC)load("glMultTransposeMatrixxOES");
	glad_glMultiTexCoord1xOES = (PFNGLMULTITEXCOORD1XOESPROC)load("glMultiTexCoord1xOES");
	glad_glMultiTexCoord1xvOES = (PFNGLMULTITEXCOORD1XVOESPROC)load("glMultiTexCoord1xvOES");
	glad_glMultiTexCoord2xOES = (PFNGLMULTITEXCOORD2XOESPROC)load("glMultiTexCoord2xOES");
	glad_glMultiTexCoord2xvOES = (PFNGLMULTITEXCOORD2XVOESPROC)load("glMultiTexCoord2xvOES");
	glad_glMultiTexCoord3xOES = (PFNGLMULTITEXCOORD3XOESPROC)load("glMultiTexCoord3xOES");
	glad_glMultiTexCoord3xvOES = (PFNGLMULTITEXCOORD3XVOESPROC)load("glMultiTexCoord3xvOES");
	glad_glMultiTexCoord4xvOES = (PFNGLMULTITEXCOORD4XVOESPROC)load("glMultiTexCoord4xvOES");
	glad_glNormal3xvOES = (PFNGLNORMAL3XVOESPROC)load("glNormal3xvOES");
	glad_glPassThroughxOES = (PFNGLPASSTHROUGHXOESPROC)load("glPassThroughxOES");
	glad_glPixelMapx = (PFNGLPIXELMAPXPROC)load("glPixelMapx");
	glad_glPixelStorex = (PFNGLPIXELSTOREXPROC)load("glPixelStorex");
	glad_glPixelTransferxOES = (PFNGLPIXELTRANSFERXOESPROC)load("glPixelTransferxOES");
	glad_glPixelZoomxOES = (PFNGLPIXELZOOMXOESPROC)load("glPixelZoomxOES");
	glad_glPrioritizeTexturesxOES = (PFNGLPRIORITIZETEXTURESXOESPROC)load("glPrioritizeTexturesxOES");
	glad_glRasterPos2xOES = (PFNGLRASTERPOS2XOESPROC)load("glRasterPos2xOES");
	glad_glRasterPos2xvOES = (PFNGLRASTERPOS2XVOESPROC)load("glRasterPos2xvOES");
	glad_glRasterPos3xOES = (PFNGLRASTERPOS3XOESPROC)load("glRasterPos3xOES");
	glad_glRasterPos3xvOES = (PFNGLRASTERPOS3XVOESPROC)load("glRasterPos3xvOES");
	glad_glRasterPos4xOES = (PFNGLRASTERPOS4XOESPROC)load("glRasterPos4xOES");
	glad_glRasterPos4xvOES = (PFNGLRASTERPOS4XVOESPROC)load("glRasterPos4xvOES");
	glad_glRectxOES = (PFNGLRECTXOESPROC)load("glRectxOES");
	glad_glRectxvOES = (PFNGLRECTXVOESPROC)load("glRectxvOES");
	glad_glTexCoord1xOES = (PFNGLTEXCOORD1XOESPROC)load("glTexCoord1xOES");
	glad_glTexCoord1xvOES = (PFNGLTEXCOORD1XVOESPROC)load("glTexCoord1xvOES");
	glad_glTexCoord2xOES = (PFNGLTEXCOORD2XOESPROC)load("glTexCoord2xOES");
	glad_glTexCoord2xvOES = (PFNGLTEXCOORD2XVOESPROC)load("glTexCoord2xvOES");
	glad_glTexCoord3xOES = (PFNGLTEXCOORD3XOESPROC)load("glTexCoord3xOES");
	glad_glTexCoord3xvOES = (PFNGLTEXCOORD3XVOESPROC)load("glTexCoord3xvOES");
	glad_glTexCoord4xOES = (PFNGLTEXCOORD4XOESPROC)load("glTexCoord4xOES");
	glad_glTexCoord4xvOES = (PFNGLTEXCOORD4XVOESPROC)load("glTexCoord4xvOES");
	glad_glTexGenxOES = (PFNGLTEXGENXOESPROC)load("glTexGenxOES");
	glad_glTexGenxvOES = (PFNGLTEXGENXVOESPROC)load("glTexGenxvOES");
	glad_glVertex2xOES = (PFNGLVERTEX2XOESPROC)load("glVertex2xOES");
	glad_glVertex2xvOES = (PFNGLVERTEX2XVOESPROC)load("glVertex2xvOES");
	glad_glVertex3xOES = (PFNGLVERTEX3XOESPROC)load("glVertex3xOES");
	glad_glVertex3xvOES = (PFNGLVERTEX3XVOESPROC)load("glVertex3xvOES");
	glad_glVertex4xOES = (PFNGLVERTEX4XOESPROC)load("glVertex4xOES");
	glad_glVertex4xvOES = (PFNGLVERTEX4XVOESPROC)load("glVertex4xvOES");
}
static void load_GL_EXT_framebuffer_multisample(GLADloadproc load) {
	if(!GLAD_GL_EXT_framebuffer_multisample) return;
	glad_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)load("glRenderbufferStorageMultisampleEXT");
}
static void load_GL_SGIS_texture4D(GLADloadproc load) {
	if(!GLAD_GL_SGIS_texture4D) return;
	glad_glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC)load("glTexImage4DSGIS");
	glad_glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC)load("glTexSubImage4DSGIS");
}
static void load_GL_EXT_texture3D(GLADloadproc load) {
	if(!GLAD_GL_EXT_texture3D) return;
	glad_glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)load("glTexImage3DEXT");
	glad_glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)load("glTexSubImage3DEXT");
}
static void load_GL_EXT_multisample(GLADloadproc load) {
	if(!GLAD_GL_EXT_multisample) return;
	glad_glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC)load("glSampleMaskEXT");
	glad_glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC)load("glSamplePatternEXT");
}
static void load_GL_EXT_secondary_color(GLADloadproc load) {
	if(!GLAD_GL_EXT_secondary_color) return;
	glad_glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)load("glSecondaryColor3bEXT");
	glad_glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)load("glSecondaryColor3bvEXT");
	glad_glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)load("glSecondaryColor3dEXT");
	glad_glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)load("glSecondaryColor3dvEXT");
	glad_glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)load("glSecondaryColor3fEXT");
	glad_glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)load("glSecondaryColor3fvEXT");
	glad_glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)load("glSecondaryColor3iEXT");
	glad_glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)load("glSecondaryColor3ivEXT");
	glad_glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)load("glSecondaryColor3sEXT");
	glad_glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)load("glSecondaryColor3svEXT");
	glad_glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)load("glSecondaryColor3ubEXT");
	glad_glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)load("glSecondaryColor3ubvEXT");
	glad_glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)load("glSecondaryColor3uiEXT");
	glad_glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)load("glSecondaryColor3uivEXT");
	glad_glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)load("glSecondaryColor3usEXT");
	glad_glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)load("glSecondaryColor3usvEXT");
	glad_glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)load("glSecondaryColorPointerEXT");
}
static void load_GL_ATI_vertex_array_object(GLADloadproc load) {
	if(!GLAD_GL_ATI_vertex_array_object) return;
	glad_glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC)load("glNewObjectBufferATI");
	glad_glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC)load("glIsObjectBufferATI");
	glad_glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC)load("glUpdateObjectBufferATI");
	glad_glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC)load("glGetObjectBufferfvATI");
	glad_glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC)load("glGetObjectBufferivATI");
	glad_glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC)load("glFreeObjectBufferATI");
	glad_glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC)load("glArrayObjectATI");
	glad_glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC)load("glGetArrayObjectfvATI");
	glad_glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC)load("glGetArrayObjectivATI");
	glad_glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC)load("glVariantArrayObjectATI");
	glad_glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)load("glGetVariantArrayObjectfvATI");
	glad_glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)load("glGetVariantArrayObjectivATI");
}
static void load_GL_ARB_parallel_shader_compile(GLADloadproc load) {
	if(!GLAD_GL_ARB_parallel_shader_compile) return;
	glad_glMaxShaderCompilerThreadsARB = (PFNGLMAXSHADERCOMPILERTHREADSARBPROC)load("glMaxShaderCompilerThreadsARB");
}
static void load_GL_ARB_sparse_texture(GLADloadproc load) {
	if(!GLAD_GL_ARB_sparse_texture) return;
	glad_glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC)load("glTexPageCommitmentARB");
}
static void load_GL_ARB_sample_locations(GLADloadproc load) {
	if(!GLAD_GL_ARB_sample_locations) return;
	glad_glFramebufferSampleLocationsfvARB = (PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)load("glFramebufferSampleLocationsfvARB");
	glad_glNamedFramebufferSampleLocationsfvARB = (PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC)load("glNamedFramebufferSampleLocationsfvARB");
	glad_glEvaluateDepthValuesARB = (PFNGLEVALUATEDEPTHVALUESARBPROC)load("glEvaluateDepthValuesARB");
}
static void load_GL_ARB_sparse_buffer(GLADloadproc load) {
	if(!GLAD_GL_ARB_sparse_buffer) return;
	glad_glBufferPageCommitmentARB = (PFNGLBUFFERPAGECOMMITMENTARBPROC)load("glBufferPageCommitmentARB");
	glad_glNamedBufferPageCommitmentEXT = (PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC)load("glNamedBufferPageCommitmentEXT");
	glad_glNamedBufferPageCommitmentARB = (PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC)load("glNamedBufferPageCommitmentARB");
}
static void load_GL_EXT_draw_range_elements(GLADloadproc load) {
	if(!GLAD_GL_EXT_draw_range_elements) return;
	glad_glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)load("glDrawRangeElementsEXT");
}
static int find_extensionsGL(void) {
	if (!get_exts()) return 0;
	GLAD_GL_SGIX_pixel_tiles = has_ext("GL_SGIX_pixel_tiles");
	GLAD_GL_EXT_post_depth_coverage = has_ext("GL_EXT_post_depth_coverage");
	GLAD_GL_APPLE_element_array = has_ext("GL_APPLE_element_array");
	GLAD_GL_AMD_multi_draw_indirect = has_ext("GL_AMD_multi_draw_indirect");
	GLAD_GL_EXT_blend_subtract = has_ext("GL_EXT_blend_subtract");
	GLAD_GL_SGIX_tag_sample_buffer = has_ext("GL_SGIX_tag_sample_buffer");
	GLAD_GL_NV_point_sprite = has_ext("GL_NV_point_sprite");
	GLAD_GL_IBM_texture_mirrored_repeat = has_ext("GL_IBM_texture_mirrored_repeat");
	GLAD_GL_APPLE_transform_hint = has_ext("GL_APPLE_transform_hint");
	GLAD_GL_ATI_separate_stencil = has_ext("GL_ATI_separate_stencil");
	GLAD_GL_NV_shader_atomic_int64 = has_ext("GL_NV_shader_atomic_int64");
	GLAD_GL_NV_vertex_program2_option = has_ext("GL_NV_vertex_program2_option");
	GLAD_GL_EXT_texture_buffer_object = has_ext("GL_EXT_texture_buffer_object");
	GLAD_GL_ARB_vertex_blend = has_ext("GL_ARB_vertex_blend");
	GLAD_GL_OVR_multiview = has_ext("GL_OVR_multiview");
	GLAD_GL_NV_vertex_program2 = has_ext("GL_NV_vertex_program2");
	GLAD_GL_ARB_program_interface_query = has_ext("GL_ARB_program_interface_query");
	GLAD_GL_EXT_misc_attribute = has_ext("GL_EXT_misc_attribute");
	GLAD_GL_NV_multisample_coverage = has_ext("GL_NV_multisample_coverage");
	GLAD_GL_ARB_shading_language_packing = has_ext("GL_ARB_shading_language_packing");
	GLAD_GL_EXT_texture_cube_map = has_ext("GL_EXT_texture_cube_map");
	GLAD_GL_NV_viewport_array2 = has_ext("GL_NV_viewport_array2");
	GLAD_GL_ARB_texture_stencil8 = has_ext("GL_ARB_texture_stencil8");
	GLAD_GL_EXT_index_func = has_ext("GL_EXT_index_func");
	GLAD_GL_OES_compressed_paletted_texture = has_ext("GL_OES_compressed_paletted_texture");
	GLAD_GL_NV_depth_clamp = has_ext("GL_NV_depth_clamp");
	GLAD_GL_NV_shader_buffer_load = has_ext("GL_NV_shader_buffer_load");
	GLAD_GL_EXT_color_subtable = has_ext("GL_EXT_color_subtable");
	GLAD_GL_SUNX_constant_data = has_ext("GL_SUNX_constant_data");
	GLAD_GL_EXT_texture_compression_s3tc = has_ext("GL_EXT_texture_compression_s3tc");
	GLAD_GL_EXT_multi_draw_arrays = has_ext("GL_EXT_multi_draw_arrays");
	GLAD_GL_ARB_shader_atomic_counters = has_ext("GL_ARB_shader_atomic_counters");
	GLAD_GL_ARB_arrays_of_arrays = has_ext("GL_ARB_arrays_of_arrays");
	GLAD_GL_NV_conditional_render = has_ext("GL_NV_conditional_render");
	GLAD_GL_EXT_texture_env_combine = has_ext("GL_EXT_texture_env_combine");
	GLAD_GL_NV_fog_distance = has_ext("GL_NV_fog_distance");
	GLAD_GL_SGIX_async_histogram = has_ext("GL_SGIX_async_histogram");
	GLAD_GL_MESA_resize_buffers = has_ext("GL_MESA_resize_buffers");
	GLAD_GL_NV_light_max_exponent = has_ext("GL_NV_light_max_exponent");
	GLAD_GL_NV_texture_env_combine4 = has_ext("GL_NV_texture_env_combine4");
	GLAD_GL_ARB_texture_view = has_ext("GL_ARB_texture_view");
	GLAD_GL_ARB_texture_env_combine = has_ext("GL_ARB_texture_env_combine");
	GLAD_GL_ARB_map_buffer_range = has_ext("GL_ARB_map_buffer_range");
	GLAD_GL_EXT_convolution = has_ext("GL_EXT_convolution");
	GLAD_GL_NV_compute_program5 = has_ext("GL_NV_compute_program5");
	GLAD_GL_NV_vertex_attrib_integer_64bit = has_ext("GL_NV_vertex_attrib_integer_64bit");
	GLAD_GL_EXT_paletted_texture = has_ext("GL_EXT_paletted_texture");
	GLAD_GL_ARB_texture_buffer_object = has_ext("GL_ARB_texture_buffer_object");
	GLAD_GL_ATI_pn_triangles = has_ext("GL_ATI_pn_triangles");
	GLAD_GL_SGIX_resample = has_ext("GL_SGIX_resample");
	GLAD_GL_SGIX_flush_raster = has_ext("GL_SGIX_flush_raster");
	GLAD_GL_EXT_light_texture = has_ext("GL_EXT_light_texture");
	GLAD_GL_ARB_point_sprite = has_ext("GL_ARB_point_sprite");
	GLAD_GL_SUN_convolution_border_modes = has_ext("GL_SUN_convolution_border_modes");
	GLAD_GL_NV_parameter_buffer_object2 = has_ext("GL_NV_parameter_buffer_object2");
	GLAD_GL_ARB_half_float_pixel = has_ext("GL_ARB_half_float_pixel");
	GLAD_GL_NV_tessellation_program5 = has_ext("GL_NV_tessellation_program5");
	GLAD_GL_REND_screen_coordinates = has_ext("GL_REND_screen_coordinates");
	GLAD_GL_EXT_shared_texture_palette = has_ext("GL_EXT_shared_texture_palette");
	GLAD_GL_EXT_packed_float = has_ext("GL_EXT_packed_float");
	GLAD_GL_OML_subsample = has_ext("GL_OML_subsample");
	GLAD_GL_SGIX_vertex_preclip = has_ext("GL_SGIX_vertex_preclip");
	GLAD_GL_SGIX_texture_scale_bias = has_ext("GL_SGIX_texture_scale_bias");
	GLAD_GL_AMD_draw_buffers_blend = has_ext("GL_AMD_draw_buffers_blend");
	GLAD_GL_APPLE_texture_range = has_ext("GL_APPLE_texture_range");
	GLAD_GL_EXT_texture_array = has_ext("GL_EXT_texture_array");
	GLAD_GL_NV_texture_barrier = has_ext("GL_NV_texture_barrier");
	GLAD_GL_ARB_texture_query_levels = has_ext("GL_ARB_texture_query_levels");
	GLAD_GL_NV_texgen_emboss = has_ext("GL_NV_texgen_emboss");
	GLAD_GL_EXT_texture_swizzle = has_ext("GL_EXT_texture_swizzle");
	GLAD_GL_ARB_texture_rg = has_ext("GL_ARB_texture_rg");
	GLAD_GL_ARB_vertex_type_2_10_10_10_rev = has_ext("GL_ARB_vertex_type_2_10_10_10_rev");
	GLAD_GL_ARB_fragment_shader = has_ext("GL_ARB_fragment_shader");
	GLAD_GL_3DFX_tbuffer = has_ext("GL_3DFX_tbuffer");
	GLAD_GL_GREMEDY_frame_terminator = has_ext("GL_GREMEDY_frame_terminator");
	GLAD_GL_ARB_blend_func_extended = has_ext("GL_ARB_blend_func_extended");
	GLAD_GL_EXT_separate_shader_objects = has_ext("GL_EXT_separate_shader_objects");
	GLAD_GL_NV_texture_multisample = has_ext("GL_NV_texture_multisample");
	GLAD_GL_ARB_shader_objects = has_ext("GL_ARB_shader_objects");
	GLAD_GL_ARB_framebuffer_object = has_ext("GL_ARB_framebuffer_object");
	GLAD_GL_ATI_envmap_bumpmap = has_ext("GL_ATI_envmap_bumpmap");
	GLAD_GL_AMD_shader_explicit_vertex_parameter = has_ext("GL_AMD_shader_explicit_vertex_parameter");
	GLAD_GL_ARB_robust_buffer_access_behavior = has_ext("GL_ARB_robust_buffer_access_behavior");
	GLAD_GL_ARB_shader_stencil_export = has_ext("GL_ARB_shader_stencil_export");
	GLAD_GL_NV_texture_rectangle = has_ext("GL_NV_texture_rectangle");
	GLAD_GL_ARB_enhanced_layouts = has_ext("GL_ARB_enhanced_layouts");
	GLAD_GL_ARB_texture_rectangle = has_ext("GL_ARB_texture_rectangle");
	GLAD_GL_SGI_texture_color_table = has_ext("GL_SGI_texture_color_table");
	GLAD_GL_NV_viewport_swizzle = has_ext("GL_NV_viewport_swizzle");
	GLAD_GL_ATI_map_object_buffer = has_ext("GL_ATI_map_object_buffer");
	GLAD_GL_ARB_robustness = has_ext("GL_ARB_robustness");
	GLAD_GL_NV_pixel_data_range = has_ext("GL_NV_pixel_data_range");
	GLAD_GL_EXT_framebuffer_blit = has_ext("GL_EXT_framebuffer_blit");
	GLAD_GL_ARB_gpu_shader_fp64 = has_ext("GL_ARB_gpu_shader_fp64");
	GLAD_GL_NV_command_list = has_ext("GL_NV_command_list");
	GLAD_GL_SGIX_depth_texture = has_ext("GL_SGIX_depth_texture");
	GLAD_GL_EXT_vertex_weighting = has_ext("GL_EXT_vertex_weighting");
	GLAD_GL_GREMEDY_string_marker = has_ext("GL_GREMEDY_string_marker");
	GLAD_GL_ARB_texture_compression_bptc = has_ext("GL_ARB_texture_compression_bptc");
	GLAD_GL_EXT_subtexture = has_ext("GL_EXT_subtexture");
	GLAD_GL_EXT_pixel_transform_color_table = has_ext("GL_EXT_pixel_transform_color_table");
	GLAD_GL_EXT_texture_compression_rgtc = has_ext("GL_EXT_texture_compression_rgtc");
	GLAD_GL_ARB_shader_atomic_counter_ops = has_ext("GL_ARB_shader_atomic_counter_ops");
	GLAD_GL_SGIX_depth_pass_instrument = has_ext("GL_SGIX_depth_pass_instrument");
	GLAD_GL_EXT_gpu_program_parameters = has_ext("GL_EXT_gpu_program_parameters");
	GLAD_GL_NV_evaluators = has_ext("GL_NV_evaluators");
	GLAD_GL_SGIS_texture_filter4 = has_ext("GL_SGIS_texture_filter4");
	GLAD_GL_AMD_performance_monitor = has_ext("GL_AMD_performance_monitor");
	GLAD_GL_NV_geometry_shader4 = has_ext("GL_NV_geometry_shader4");
	GLAD_GL_EXT_stencil_clear_tag = has_ext("GL_EXT_stencil_clear_tag");
	GLAD_GL_NV_vertex_program1_1 = has_ext("GL_NV_vertex_program1_1");
	GLAD_GL_NV_present_video = has_ext("GL_NV_present_video");
	GLAD_GL_ARB_texture_compression_rgtc = has_ext("GL_ARB_texture_compression_rgtc");
	GLAD_GL_HP_convolution_border_modes = has_ext("GL_HP_convolution_border_modes");
	GLAD_GL_EXT_shader_integer_mix = has_ext("GL_EXT_shader_integer_mix");
	GLAD_GL_SGIX_framezoom = has_ext("GL_SGIX_framezoom");
	GLAD_GL_ARB_stencil_texturing = has_ext("GL_ARB_stencil_texturing");
	GLAD_GL_ARB_shader_clock = has_ext("GL_ARB_shader_clock");
	GLAD_GL_NV_shader_atomic_fp16_vector = has_ext("GL_NV_shader_atomic_fp16_vector");
	GLAD_GL_SGIX_fog_offset = has_ext("GL_SGIX_fog_offset");
	GLAD_GL_ARB_draw_elements_base_vertex = has_ext("GL_ARB_draw_elements_base_vertex");
	GLAD_GL_INGR_interlace_read = has_ext("GL_INGR_interlace_read");
	GLAD_GL_NV_transform_feedback = has_ext("GL_NV_transform_feedback");
	GLAD_GL_NV_fragment_program = has_ext("GL_NV_fragment_program");
	GLAD_GL_AMD_stencil_operation_extended = has_ext("GL_AMD_stencil_operation_extended");
	GLAD_GL_ARB_seamless_cubemap_per_texture = has_ext("GL_ARB_seamless_cubemap_per_texture");
	GLAD_GL_ARB_instanced_arrays = has_ext("GL_ARB_instanced_arrays");
	GLAD_GL_ARB_get_texture_sub_image = has_ext("GL_ARB_get_texture_sub_image");
	GLAD_GL_NV_vertex_array_range2 = has_ext("GL_NV_vertex_array_range2");
	GLAD_GL_KHR_robustness = has_ext("GL_KHR_robustness");
	GLAD_GL_AMD_sparse_texture = has_ext("GL_AMD_sparse_texture");
	GLAD_GL_ARB_clip_control = has_ext("GL_ARB_clip_control");
	GLAD_GL_NV_fragment_coverage_to_color = has_ext("GL_NV_fragment_coverage_to_color");
	GLAD_GL_NV_fence = has_ext("GL_NV_fence");
	GLAD_GL_ARB_texture_buffer_range = has_ext("GL_ARB_texture_buffer_range");
	GLAD_GL_SUN_mesh_array = has_ext("GL_SUN_mesh_array");
	GLAD_GL_ARB_vertex_attrib_binding = has_ext("GL_ARB_vertex_attrib_binding");
	GLAD_GL_ARB_framebuffer_no_attachments = has_ext("GL_ARB_framebuffer_no_attachments");
	GLAD_GL_ARB_cl_event = has_ext("GL_ARB_cl_event");
	GLAD_GL_ARB_derivative_control = has_ext("GL_ARB_derivative_control");
	GLAD_GL_NV_packed_depth_stencil = has_ext("GL_NV_packed_depth_stencil");
	GLAD_GL_OES_single_precision = has_ext("GL_OES_single_precision");
	GLAD_GL_NV_primitive_restart = has_ext("GL_NV_primitive_restart");
	GLAD_GL_SUN_global_alpha = has_ext("GL_SUN_global_alpha");
	GLAD_GL_ARB_fragment_shader_interlock = has_ext("GL_ARB_fragment_shader_interlock");
	GLAD_GL_EXT_texture_object = has_ext("GL_EXT_texture_object");
	GLAD_GL_AMD_name_gen_delete = has_ext("GL_AMD_name_gen_delete");
	GLAD_GL_NV_texture_compression_vtc = has_ext("GL_NV_texture_compression_vtc");
	GLAD_GL_NV_sample_mask_override_coverage = has_ext("GL_NV_sample_mask_override_coverage");
	GLAD_GL_NV_texture_shader3 = has_ext("GL_NV_texture_shader3");
	GLAD_GL_NV_texture_shader2 = has_ext("GL_NV_texture_shader2");
	GLAD_GL_EXT_texture = has_ext("GL_EXT_texture");
	GLAD_GL_ARB_buffer_storage = has_ext("GL_ARB_buffer_storage");
	GLAD_GL_AMD_shader_atomic_counter_ops = has_ext("GL_AMD_shader_atomic_counter_ops");
	GLAD_GL_APPLE_vertex_program_evaluators = has_ext("GL_APPLE_vertex_program_evaluators");
	GLAD_GL_ARB_multi_bind = has_ext("GL_ARB_multi_bind");
	GLAD_GL_ARB_explicit_uniform_location = has_ext("GL_ARB_explicit_uniform_location");
	GLAD_GL_ARB_depth_buffer_float = has_ext("GL_ARB_depth_buffer_float");
	GLAD_GL_NV_path_rendering_shared_edge = has_ext("GL_NV_path_rendering_shared_edge");
	GLAD_GL_SGIX_shadow_ambient = has_ext("GL_SGIX_shadow_ambient");
	GLAD_GL_ARB_texture_cube_map = has_ext("GL_ARB_texture_cube_map");
	GLAD_GL_AMD_vertex_shader_viewport_index = has_ext("GL_AMD_vertex_shader_viewport_index");
	GLAD_GL_SGIX_list_priority = has_ext("GL_SGIX_list_priority");
	GLAD_GL_NV_vertex_buffer_unified_memory = has_ext("GL_NV_vertex_buffer_unified_memory");
	GLAD_GL_NV_uniform_buffer_unified_memory = has_ext("GL_NV_uniform_buffer_unified_memory");
	GLAD_GL_ARB_clear_texture = has_ext("GL_ARB_clear_texture");
	GLAD_GL_ATI_texture_env_combine3 = has_ext("GL_ATI_texture_env_combine3");
	GLAD_GL_ARB_map_buffer_alignment = has_ext("GL_ARB_map_buffer_alignment");
	GLAD_GL_NV_blend_equation_advanced = has_ext("GL_NV_blend_equation_advanced");
	GLAD_GL_SGIS_sharpen_texture = has_ext("GL_SGIS_sharpen_texture");
	GLAD_GL_KHR_robust_buffer_access_behavior = has_ext("GL_KHR_robust_buffer_access_behavior");
	GLAD_GL_ARB_pipeline_statistics_query = has_ext("GL_ARB_pipeline_statistics_query");
	GLAD_GL_ARB_vertex_program = has_ext("GL_ARB_vertex_program");
	GLAD_GL_ARB_texture_rgb10_a2ui = has_ext("GL_ARB_texture_rgb10_a2ui");
	GLAD_GL_OML_interlace = has_ext("GL_OML_interlace");
	GLAD_GL_ATI_pixel_format_float = has_ext("GL_ATI_pixel_format_float");
	GLAD_GL_NV_clip_space_w_scaling = has_ext("GL_NV_clip_space_w_scaling");
	GLAD_GL_ARB_vertex_buffer_object = has_ext("GL_ARB_vertex_buffer_object");
	GLAD_GL_EXT_shadow_funcs = has_ext("GL_EXT_shadow_funcs");
	GLAD_GL_ATI_text_fragment_shader = has_ext("GL_ATI_text_fragment_shader");
	GLAD_GL_NV_vertex_array_range = has_ext("GL_NV_vertex_array_range");
	GLAD_GL_SGIX_fragment_lighting = has_ext("GL_SGIX_fragment_lighting");
	GLAD_GL_NV_texture_expand_normal = has_ext("GL_NV_texture_expand_normal");
	GLAD_GL_NV_framebuffer_multisample_coverage = has_ext("GL_NV_framebuffer_multisample_coverage");
	GLAD_GL_EXT_timer_query = has_ext("GL_EXT_timer_query");
	GLAD_GL_EXT_vertex_array_bgra = has_ext("GL_EXT_vertex_array_bgra");
	GLAD_GL_NV_bindless_texture = has_ext("GL_NV_bindless_texture");
	GLAD_GL_KHR_debug = has_ext("GL_KHR_debug");
	GLAD_GL_SGIS_texture_border_clamp = has_ext("GL_SGIS_texture_border_clamp");
	GLAD_GL_ATI_vertex_attrib_array_object = has_ext("GL_ATI_vertex_attrib_array_object");
	GLAD_GL_SGIX_clipmap = has_ext("GL_SGIX_clipmap");
	GLAD_GL_EXT_geometry_shader4 = has_ext("GL_EXT_geometry_shader4");
	GLAD_GL_ARB_shader_texture_image_samples = has_ext("GL_ARB_shader_texture_image_samples");
	GLAD_GL_MESA_ycbcr_texture = has_ext("GL_MESA_ycbcr_texture");
	GLAD_GL_MESAX_texture_stack = has_ext("GL_MESAX_texture_stack");
	GLAD_GL_AMD_seamless_cubemap_per_texture = has_ext("GL_AMD_seamless_cubemap_per_texture");
	GLAD_GL_EXT_bindable_uniform = has_ext("GL_EXT_bindable_uniform");
	GLAD_GL_KHR_texture_compression_astc_hdr = has_ext("GL_KHR_texture_compression_astc_hdr");
	GLAD_GL_ARB_shader_ballot = has_ext("GL_ARB_shader_ballot");
	GLAD_GL_KHR_blend_equation_advanced = has_ext("GL_KHR_blend_equation_advanced");
	GLAD_GL_ARB_fragment_program_shadow = has_ext("GL_ARB_fragment_program_shadow");
	GLAD_GL_ATI_element_array = has_ext("GL_ATI_element_array");
	GLAD_GL_AMD_texture_texture4 = has_ext("GL_AMD_texture_texture4");
	GLAD_GL_SGIX_reference_plane = has_ext("GL_SGIX_reference_plane");
	GLAD_GL_EXT_stencil_two_side = has_ext("GL_EXT_stencil_two_side");
	GLAD_GL_ARB_transform_feedback_overflow_query = has_ext("GL_ARB_transform_feedback_overflow_query");
	GLAD_GL_SGIX_texture_lod_bias = has_ext("GL_SGIX_texture_lod_bias");
	GLAD_GL_KHR_no_error = has_ext("GL_KHR_no_error");
	GLAD_GL_NV_explicit_multisample = has_ext("GL_NV_explicit_multisample");
	GLAD_GL_NV_stereo_view_rendering = has_ext("GL_NV_stereo_view_rendering");
	GLAD_GL_IBM_static_data = has_ext("GL_IBM_static_data");
	GLAD_GL_EXT_clip_volume_hint = has_ext("GL_EXT_clip_volume_hint");
	GLAD_GL_EXT_texture_perturb_normal = has_ext("GL_EXT_texture_perturb_normal");
	GLAD_GL_NV_fragment_program2 = has_ext("GL_NV_fragment_program2");
	GLAD_GL_NV_fragment_program4 = has_ext("GL_NV_fragment_program4");
	GLAD_GL_EXT_point_parameters = has_ext("GL_EXT_point_parameters");
	GLAD_GL_PGI_misc_hints = has_ext("GL_PGI_misc_hints");
	GLAD_GL_SGIX_subsample = has_ext("GL_SGIX_subsample");
	GLAD_GL_AMD_shader_stencil_export = has_ext("GL_AMD_shader_stencil_export");
	GLAD_GL_ARB_shader_texture_lod = has_ext("GL_ARB_shader_texture_lod");
	GLAD_GL_ARB_vertex_shader = has_ext("GL_ARB_vertex_shader");
	GLAD_GL_ARB_depth_clamp = has_ext("GL_ARB_depth_clamp");
	GLAD_GL_SGIS_texture_select = has_ext("GL_SGIS_texture_select");
	GLAD_GL_NV_texture_shader = has_ext("GL_NV_texture_shader");
	GLAD_GL_ARB_tessellation_shader = has_ext("GL_ARB_tessellation_shader");
	GLAD_GL_EXT_draw_buffers2 = has_ext("GL_EXT_draw_buffers2");
	GLAD_GL_ARB_vertex_attrib_64bit = has_ext("GL_ARB_vertex_attrib_64bit");
	GLAD_GL_EXT_texture_filter_minmax = has_ext("GL_EXT_texture_filter_minmax");
	GLAD_GL_WIN_specular_fog = has_ext("GL_WIN_specular_fog");
	GLAD_GL_AMD_interleaved_elements = has_ext("GL_AMD_interleaved_elements");
	GLAD_GL_ARB_fragment_program = has_ext("GL_ARB_fragment_program");
	GLAD_GL_OML_resample = has_ext("GL_OML_resample");
	GLAD_GL_APPLE_ycbcr_422 = has_ext("GL_APPLE_ycbcr_422");
	GLAD_GL_SGIX_texture_add_env = has_ext("GL_SGIX_texture_add_env");
	GLAD_GL_ARB_shadow_ambient = has_ext("GL_ARB_shadow_ambient");
	GLAD_GL_ARB_texture_storage = has_ext("GL_ARB_texture_storage");
	GLAD_GL_EXT_pixel_buffer_object = has_ext("GL_EXT_pixel_buffer_object");
	GLAD_GL_ARB_copy_image = has_ext("GL_ARB_copy_image");
	GLAD_GL_SGIS_pixel_texture = has_ext("GL_SGIS_pixel_texture");
	GLAD_GL_SGIS_generate_mipmap = has_ext("GL_SGIS_generate_mipmap");
	GLAD_GL_SGIX_instruments = has_ext("GL_SGIX_instruments");
	GLAD_GL_HP_texture_lighting = has_ext("GL_HP_texture_lighting");
	GLAD_GL_ARB_shader_storage_buffer_object = has_ext("GL_ARB_shader_storage_buffer_object");
	GLAD_GL_EXT_sparse_texture2 = has_ext("GL_EXT_sparse_texture2");
	GLAD_GL_EXT_blend_minmax = has_ext("GL_EXT_blend_minmax");
	GLAD_GL_MESA_pack_invert = has_ext("GL_MESA_pack_invert");
	GLAD_GL_ARB_base_instance = has_ext("GL_ARB_base_instance");
	GLAD_GL_SGIX_convolution_accuracy = has_ext("GL_SGIX_convolution_accuracy");
	GLAD_GL_PGI_vertex_hints = has_ext("GL_PGI_vertex_hints");
	GLAD_GL_AMD_transform_feedback4 = has_ext("GL_AMD_transform_feedback4");
	GLAD_GL_ARB_ES3_1_compatibility = has_ext("GL_ARB_ES3_1_compatibility");
	GLAD_GL_EXT_texture_integer = has_ext("GL_EXT_texture_integer");
	GLAD_GL_ARB_texture_multisample = has_ext("GL_ARB_texture_multisample");
	GLAD_GL_AMD_gpu_shader_int64 = has_ext("GL_AMD_gpu_shader_int64");
	GLAD_GL_S3_s3tc = has_ext("GL_S3_s3tc");
	GLAD_GL_ARB_query_buffer_object = has_ext("GL_ARB_query_buffer_object");
	GLAD_GL_AMD_vertex_shader_tessellator = has_ext("GL_AMD_vertex_shader_tessellator");
	GLAD_GL_ARB_invalidate_subdata = has_ext("GL_ARB_invalidate_subdata");
	GLAD_GL_EXT_index_material = has_ext("GL_EXT_index_material");
	GLAD_GL_NV_blend_equation_advanced_coherent = has_ext("GL_NV_blend_equation_advanced_coherent");
	GLAD_GL_KHR_texture_compression_astc_sliced_3d = has_ext("GL_KHR_texture_compression_astc_sliced_3d");
	GLAD_GL_INTEL_parallel_arrays = has_ext("GL_INTEL_parallel_arrays");
	GLAD_GL_ATI_draw_buffers = has_ext("GL_ATI_draw_buffers");
	GLAD_GL_EXT_cmyka = has_ext("GL_EXT_cmyka");
	GLAD_GL_SGIX_pixel_texture = has_ext("GL_SGIX_pixel_texture");
	GLAD_GL_APPLE_specular_vector = has_ext("GL_APPLE_specular_vector");
	GLAD_GL_ARB_compatibility = has_ext("GL_ARB_compatibility");
	GLAD_GL_ARB_timer_query = has_ext("GL_ARB_timer_query");
	GLAD_GL_SGIX_interlace = has_ext("GL_SGIX_interlace");
	GLAD_GL_NV_parameter_buffer_object = has_ext("GL_NV_parameter_buffer_object");
	GLAD_GL_AMD_shader_trinary_minmax = has_ext("GL_AMD_shader_trinary_minmax");
	GLAD_GL_ARB_direct_state_access = has_ext("GL_ARB_direct_state_access");
	GLAD_GL_EXT_rescale_normal = has_ext("GL_EXT_rescale_normal");
	GLAD_GL_ARB_pixel_buffer_object = has_ext("GL_ARB_pixel_buffer_object");
	GLAD_GL_ARB_uniform_buffer_object = has_ext("GL_ARB_uniform_buffer_object");
	GLAD_GL_ARB_vertex_type_10f_11f_11f_rev = has_ext("GL_ARB_vertex_type_10f_11f_11f_rev");
	GLAD_GL_ARB_texture_swizzle = has_ext("GL_ARB_texture_swizzle");
	GLAD_GL_NV_transform_feedback2 = has_ext("GL_NV_transform_feedback2");
	GLAD_GL_SGIX_async_pixel = has_ext("GL_SGIX_async_pixel");
	GLAD_GL_NV_fragment_program_option = has_ext("GL_NV_fragment_program_option");
	GLAD_GL_ARB_explicit_attrib_location = has_ext("GL_ARB_explicit_attrib_location");
	GLAD_GL_EXT_blend_color = has_ext("GL_EXT_blend_color");
	GLAD_GL_NV_shader_thread_group = has_ext("GL_NV_shader_thread_group");
	GLAD_GL_EXT_stencil_wrap = has_ext("GL_EXT_stencil_wrap");
	GLAD_GL_EXT_index_array_formats = has_ext("GL_EXT_index_array_formats");
	GLAD_GL_OVR_multiview2 = has_ext("GL_OVR_multiview2");
	GLAD_GL_EXT_histogram = has_ext("GL_EXT_histogram");
	GLAD_GL_EXT_polygon_offset = has_ext("GL_EXT_polygon_offset");
	GLAD_GL_SGIS_point_parameters = has_ext("GL_SGIS_point_parameters");
	GLAD_GL_SGIX_ycrcb = has_ext("GL_SGIX_ycrcb");
	GLAD_GL_EXT_direct_state_access = has_ext("GL_EXT_direct_state_access");
	GLAD_GL_ARB_cull_distance = has_ext("GL_ARB_cull_distance");
	GLAD_GL_AMD_sample_positions = has_ext("GL_AMD_sample_positions");
	GLAD_GL_NV_vertex_program = has_ext("GL_NV_vertex_program");
	GLAD_GL_NV_shader_thread_shuffle = has_ext("GL_NV_shader_thread_shuffle");
	GLAD_GL_ARB_shader_precision = has_ext("GL_ARB_shader_precision");
	GLAD_GL_EXT_vertex_shader = has_ext("GL_EXT_vertex_shader");
	GLAD_GL_EXT_blend_func_separate = has_ext("GL_EXT_blend_func_separate");
	GLAD_GL_APPLE_fence = has_ext("GL_APPLE_fence");
	GLAD_GL_OES_byte_coordinates = has_ext("GL_OES_byte_coordinates");
	GLAD_GL_ARB_transpose_matrix = has_ext("GL_ARB_transpose_matrix");
	GLAD_GL_ARB_provoking_vertex = has_ext("GL_ARB_provoking_vertex");
	GLAD_GL_EXT_fog_coord = has_ext("GL_EXT_fog_coord");
	GLAD_GL_EXT_vertex_array = has_ext("GL_EXT_vertex_array");
	GLAD_GL_ARB_half_float_vertex = has_ext("GL_ARB_half_float_vertex");
	GLAD_GL_EXT_blend_equation_separate = has_ext("GL_EXT_blend_equation_separate");
	GLAD_GL_NV_framebuffer_mixed_samples = has_ext("GL_NV_framebuffer_mixed_samples");
	GLAD_GL_NVX_conditional_render = has_ext("GL_NVX_conditional_render");
	GLAD_GL_ARB_multi_draw_indirect = has_ext("GL_ARB_multi_draw_indirect");
	GLAD_GL_EXT_raster_multisample = has_ext("GL_EXT_raster_multisample");
	GLAD_GL_NV_copy_image = has_ext("GL_NV_copy_image");
	GLAD_GL_ARB_fragment_layer_viewport = has_ext("GL_ARB_fragment_layer_viewport");
	GLAD_GL_INTEL_framebuffer_CMAA = has_ext("GL_INTEL_framebuffer_CMAA");
	GLAD_GL_ARB_transform_feedback2 = has_ext("GL_ARB_transform_feedback2");
	GLAD_GL_ARB_transform_feedback3 = has_ext("GL_ARB_transform_feedback3");
	GLAD_GL_SGIX_ycrcba = has_ext("GL_SGIX_ycrcba");
	GLAD_GL_EXT_debug_marker = has_ext("GL_EXT_debug_marker");
	GLAD_GL_EXT_bgra = has_ext("GL_EXT_bgra");
	GLAD_GL_ARB_sparse_texture_clamp = has_ext("GL_ARB_sparse_texture_clamp");
	GLAD_GL_EXT_pixel_transform = has_ext("GL_EXT_pixel_transform");
	GLAD_GL_ARB_conservative_depth = has_ext("GL_ARB_conservative_depth");
	GLAD_GL_ATI_fragment_shader = has_ext("GL_ATI_fragment_shader");
	GLAD_GL_ARB_vertex_array_object = has_ext("GL_ARB_vertex_array_object");
	GLAD_GL_SUN_triangle_list = has_ext("GL_SUN_triangle_list");
	GLAD_GL_EXT_texture_env_add = has_ext("GL_EXT_texture_env_add");
	GLAD_GL_EXT_packed_depth_stencil = has_ext("GL_EXT_packed_depth_stencil");
	GLAD_GL_EXT_texture_mirror_clamp = has_ext("GL_EXT_texture_mirror_clamp");
	GLAD_GL_NV_multisample_filter_hint = has_ext("GL_NV_multisample_filter_hint");
	GLAD_GL_APPLE_float_pixels = has_ext("GL_APPLE_float_pixels");
	GLAD_GL_ARB_transform_feedback_instanced = has_ext("GL_ARB_transform_feedback_instanced");
	GLAD_GL_SGIX_async = has_ext("GL_SGIX_async");
	GLAD_GL_EXT_texture_compression_latc = has_ext("GL_EXT_texture_compression_latc");
	GLAD_GL_NV_robustness_video_memory_purge = has_ext("GL_NV_robustness_video_memory_purge");
	GLAD_GL_ARB_shading_language_100 = has_ext("GL_ARB_shading_language_100");
	GLAD_GL_INTEL_performance_query = has_ext("GL_INTEL_performance_query");
	GLAD_GL_ARB_texture_mirror_clamp_to_edge = has_ext("GL_ARB_texture_mirror_clamp_to_edge");
	GLAD_GL_NV_gpu_shader5 = has_ext("GL_NV_gpu_shader5");
	GLAD_GL_NV_bindless_multi_draw_indirect_count = has_ext("GL_NV_bindless_multi_draw_indirect_count");
	GLAD_GL_ARB_ES2_compatibility = has_ext("GL_ARB_ES2_compatibility");
	GLAD_GL_ARB_indirect_parameters = has_ext("GL_ARB_indirect_parameters");
	GLAD_GL_EXT_window_rectangles = has_ext("GL_EXT_window_rectangles");
	GLAD_GL_NV_half_float = has_ext("GL_NV_half_float");
	GLAD_GL_ARB_ES3_2_compatibility = has_ext("GL_ARB_ES3_2_compatibility");
	GLAD_GL_ATI_texture_mirror_once = has_ext("GL_ATI_texture_mirror_once");
	GLAD_GL_IBM_rasterpos_clip = has_ext("GL_IBM_rasterpos_clip");
	GLAD_GL_SGIX_shadow = has_ext("GL_SGIX_shadow");
	GLAD_GL_EXT_polygon_offset_clamp = has_ext("GL_EXT_polygon_offset_clamp");
	GLAD_GL_NV_deep_texture3D = has_ext("GL_NV_deep_texture3D");
	GLAD_GL_ARB_shader_draw_parameters = has_ext("GL_ARB_shader_draw_parameters");
	GLAD_GL_SGIX_calligraphic_fragment = has_ext("GL_SGIX_calligraphic_fragment");
	GLAD_GL_ARB_shader_bit_encoding = has_ext("GL_ARB_shader_bit_encoding");
	GLAD_GL_EXT_compiled_vertex_array = has_ext("GL_EXT_compiled_vertex_array");
	GLAD_GL_NV_depth_buffer_float = has_ext("GL_NV_depth_buffer_float");
	GLAD_GL_NV_occlusion_query = has_ext("GL_NV_occlusion_query");
	GLAD_GL_APPLE_flush_buffer_range = has_ext("GL_APPLE_flush_buffer_range");
	GLAD_GL_ARB_imaging = has_ext("GL_ARB_imaging");
	GLAD_GL_NV_shader_atomic_float = has_ext("GL_NV_shader_atomic_float");
	GLAD_GL_ARB_draw_buffers_blend = has_ext("GL_ARB_draw_buffers_blend");
	GLAD_GL_AMD_gcn_shader = has_ext("GL_AMD_gcn_shader");
	GLAD_GL_AMD_blend_minmax_factor = has_ext("GL_AMD_blend_minmax_factor");
	GLAD_GL_EXT_texture_sRGB_decode = has_ext("GL_EXT_texture_sRGB_decode");
	GLAD_GL_ARB_shading_language_420pack = has_ext("GL_ARB_shading_language_420pack");
	GLAD_GL_ARB_shader_viewport_layer_array = has_ext("GL_ARB_shader_viewport_layer_array");
	GLAD_GL_ATI_meminfo = has_ext("GL_ATI_meminfo");
	GLAD_GL_EXT_abgr = has_ext("GL_EXT_abgr");
	GLAD_GL_AMD_pinned_memory = has_ext("GL_AMD_pinned_memory");
	GLAD_GL_EXT_texture_snorm = has_ext("GL_EXT_texture_snorm");
	GLAD_GL_SGIX_texture_coordinate_clamp = has_ext("GL_SGIX_texture_coordinate_clamp");
	GLAD_GL_ARB_clear_buffer_object = has_ext("GL_ARB_clear_buffer_object");
	GLAD_GL_ARB_multisample = has_ext("GL_ARB_multisample");
	GLAD_GL_EXT_debug_label = has_ext("GL_EXT_debug_label");
	GLAD_GL_ARB_sample_shading = has_ext("GL_ARB_sample_shading");
	GLAD_GL_NV_internalformat_sample_query = has_ext("GL_NV_internalformat_sample_query");
	GLAD_GL_INTEL_map_texture = has_ext("GL_INTEL_map_texture");
	GLAD_GL_ARB_texture_env_crossbar = has_ext("GL_ARB_texture_env_crossbar");
	GLAD_GL_EXT_422_pixels = has_ext("GL_EXT_422_pixels");
	GLAD_GL_NV_conservative_raster_pre_snap_triangles = has_ext("GL_NV_conservative_raster_pre_snap_triangles");
	GLAD_GL_ARB_compute_shader = has_ext("GL_ARB_compute_shader");
	GLAD_GL_EXT_blend_logic_op = has_ext("GL_EXT_blend_logic_op");
	GLAD_GL_IBM_cull_vertex = has_ext("GL_IBM_cull_vertex");
	GLAD_GL_IBM_vertex_array_lists = has_ext("GL_IBM_vertex_array_lists");
	GLAD_GL_ARB_color_buffer_float = has_ext("GL_ARB_color_buffer_float");
	GLAD_GL_ARB_bindless_texture = has_ext("GL_ARB_bindless_texture");
	GLAD_GL_ARB_window_pos = has_ext("GL_ARB_window_pos");
	GLAD_GL_ARB_internalformat_query = has_ext("GL_ARB_internalformat_query");
	GLAD_GL_ARB_shadow = has_ext("GL_ARB_shadow");
	GLAD_GL_ARB_texture_mirrored_repeat = has_ext("GL_ARB_texture_mirrored_repeat");
	GLAD_GL_EXT_shader_image_load_store = has_ext("GL_EXT_shader_image_load_store");
	GLAD_GL_EXT_copy_texture = has_ext("GL_EXT_copy_texture");
	GLAD_GL_NV_register_combiners2 = has_ext("GL_NV_register_combiners2");
	GLAD_GL_SGIX_ycrcb_subsample = has_ext("GL_SGIX_ycrcb_subsample");
	GLAD_GL_SGIX_ir_instrument1 = has_ext("GL_SGIX_ir_instrument1");
	GLAD_GL_NV_draw_texture = has_ext("GL_NV_draw_texture");
	GLAD_GL_EXT_texture_shared_exponent = has_ext("GL_EXT_texture_shared_exponent");
	GLAD_GL_EXT_draw_instanced = has_ext("GL_EXT_draw_instanced");
	GLAD_GL_NV_copy_depth_to_color = has_ext("GL_NV_copy_depth_to_color");
	GLAD_GL_ARB_viewport_array = has_ext("GL_ARB_viewport_array");
	GLAD_GL_ARB_separate_shader_objects = has_ext("GL_ARB_separate_shader_objects");
	GLAD_GL_EXT_depth_bounds_test = has_ext("GL_EXT_depth_bounds_test");
	GLAD_GL_HP_image_transform = has_ext("GL_HP_image_transform");
	GLAD_GL_ARB_texture_env_add = has_ext("GL_ARB_texture_env_add");
	GLAD_GL_NV_video_capture = has_ext("GL_NV_video_capture");
	GLAD_GL_ARB_sampler_objects = has_ext("GL_ARB_sampler_objects");
	GLAD_GL_ARB_matrix_palette = has_ext("GL_ARB_matrix_palette");
	GLAD_GL_SGIS_texture_color_mask = has_ext("GL_SGIS_texture_color_mask");
	GLAD_GL_EXT_packed_pixels = has_ext("GL_EXT_packed_pixels");
	GLAD_GL_EXT_coordinate_frame = has_ext("GL_EXT_coordinate_frame");
	GLAD_GL_ARB_texture_compression = has_ext("GL_ARB_texture_compression");
	GLAD_GL_APPLE_aux_depth_stencil = has_ext("GL_APPLE_aux_depth_stencil");
	GLAD_GL_ARB_shader_subroutine = has_ext("GL_ARB_shader_subroutine");
	GLAD_GL_EXT_framebuffer_sRGB = has_ext("GL_EXT_framebuffer_sRGB");
	GLAD_GL_ARB_texture_storage_multisample = has_ext("GL_ARB_texture_storage_multisample");
	GLAD_GL_KHR_blend_equation_advanced_coherent = has_ext("GL_KHR_blend_equation_advanced_coherent");
	GLAD_GL_EXT_vertex_attrib_64bit = has_ext("GL_EXT_vertex_attrib_64bit");
	GLAD_GL_NV_shader_atomic_float64 = has_ext("GL_NV_shader_atomic_float64");
	GLAD_GL_ARB_depth_texture = has_ext("GL_ARB_depth_texture");
	GLAD_GL_NV_shader_buffer_store = has_ext("GL_NV_shader_buffer_store");
	GLAD_GL_OES_query_matrix = has_ext("GL_OES_query_matrix");
	GLAD_GL_MESA_window_pos = has_ext("GL_MESA_window_pos");
	GLAD_GL_NV_fill_rectangle = has_ext("GL_NV_fill_rectangle");
	GLAD_GL_NV_shader_storage_buffer_object = has_ext("GL_NV_shader_storage_buffer_object");
	GLAD_GL_ARB_texture_query_lod = has_ext("GL_ARB_texture_query_lod");
	GLAD_GL_ARB_copy_buffer = has_ext("GL_ARB_copy_buffer");
	GLAD_GL_ARB_shader_image_size = has_ext("GL_ARB_shader_image_size");
	GLAD_GL_NV_shader_atomic_counters = has_ext("GL_NV_shader_atomic_counters");
	GLAD_GL_APPLE_object_purgeable = has_ext("GL_APPLE_object_purgeable");
	GLAD_GL_ARB_occlusion_query = has_ext("GL_ARB_occlusion_query");
	GLAD_GL_INGR_color_clamp = has_ext("GL_INGR_color_clamp");
	GLAD_GL_SGI_color_table = has_ext("GL_SGI_color_table");
	GLAD_GL_NV_gpu_program5_mem_extended = has_ext("GL_NV_gpu_program5_mem_extended");
	GLAD_GL_ARB_texture_cube_map_array = has_ext("GL_ARB_texture_cube_map_array");
	GLAD_GL_SGIX_scalebias_hint = has_ext("GL_SGIX_scalebias_hint");
	GLAD_GL_EXT_gpu_shader4 = has_ext("GL_EXT_gpu_shader4");
	GLAD_GL_NV_geometry_program4 = has_ext("GL_NV_geometry_program4");
	GLAD_GL_EXT_framebuffer_multisample_blit_scaled = has_ext("GL_EXT_framebuffer_multisample_blit_scaled");
	GLAD_GL_AMD_debug_output = has_ext("GL_AMD_debug_output");
	GLAD_GL_ARB_texture_border_clamp = has_ext("GL_ARB_texture_border_clamp");
	GLAD_GL_ARB_fragment_coord_conventions = has_ext("GL_ARB_fragment_coord_conventions");
	GLAD_GL_ARB_multitexture = has_ext("GL_ARB_multitexture");
	GLAD_GL_SGIX_polynomial_ffd = has_ext("GL_SGIX_polynomial_ffd");
	GLAD_GL_EXT_provoking_vertex = has_ext("GL_EXT_provoking_vertex");
	GLAD_GL_ARB_point_parameters = has_ext("GL_ARB_point_parameters");
	GLAD_GL_ARB_shader_image_load_store = has_ext("GL_ARB_shader_image_load_store");
	GLAD_GL_ARB_conditional_render_inverted = has_ext("GL_ARB_conditional_render_inverted");
	GLAD_GL_HP_occlusion_test = has_ext("GL_HP_occlusion_test");
	GLAD_GL_ARB_ES3_compatibility = has_ext("GL_ARB_ES3_compatibility");
	GLAD_GL_ARB_texture_barrier = has_ext("GL_ARB_texture_barrier");
	GLAD_GL_ARB_texture_buffer_object_rgb32 = has_ext("GL_ARB_texture_buffer_object_rgb32");
	GLAD_GL_NV_bindless_multi_draw_indirect = has_ext("GL_NV_bindless_multi_draw_indirect");
	GLAD_GL_SGIX_texture_multi_buffer = has_ext("GL_SGIX_texture_multi_buffer");
	GLAD_GL_EXT_transform_feedback = has_ext("GL_EXT_transform_feedback");
	GLAD_GL_KHR_texture_compression_astc_ldr = has_ext("GL_KHR_texture_compression_astc_ldr");
	GLAD_GL_3DFX_multisample = has_ext("GL_3DFX_multisample");
	GLAD_GL_INTEL_fragment_shader_ordering = has_ext("GL_INTEL_fragment_shader_ordering");
	GLAD_GL_ARB_texture_env_dot3 = has_ext("GL_ARB_texture_env_dot3");
	GLAD_GL_NV_gpu_program4 = has_ext("GL_NV_gpu_program4");
	GLAD_GL_NV_gpu_program5 = has_ext("GL_NV_gpu_program5");
	GLAD_GL_NV_float_buffer = has_ext("GL_NV_float_buffer");
	GLAD_GL_SGIS_texture_edge_clamp = has_ext("GL_SGIS_texture_edge_clamp");
	GLAD_GL_ARB_framebuffer_sRGB = has_ext("GL_ARB_framebuffer_sRGB");
	GLAD_GL_SUN_slice_accum = has_ext("GL_SUN_slice_accum");
	GLAD_GL_EXT_index_texture = has_ext("GL_EXT_index_texture");
	GLAD_GL_EXT_shader_image_load_formatted = has_ext("GL_EXT_shader_image_load_formatted");
	GLAD_GL_ARB_geometry_shader4 = has_ext("GL_ARB_geometry_shader4");
	GLAD_GL_EXT_separate_specular_color = has_ext("GL_EXT_separate_specular_color");
	GLAD_GL_AMD_depth_clamp_separate = has_ext("GL_AMD_depth_clamp_separate");
	GLAD_GL_NV_conservative_raster = has_ext("GL_NV_conservative_raster");
	GLAD_GL_ARB_sparse_texture2 = has_ext("GL_ARB_sparse_texture2");
	GLAD_GL_SGIX_sprite = has_ext("GL_SGIX_sprite");
	GLAD_GL_ARB_get_program_binary = has_ext("GL_ARB_get_program_binary");
	GLAD_GL_AMD_occlusion_query_event = has_ext("GL_AMD_occlusion_query_event");
	GLAD_GL_SGIS_multisample = has_ext("GL_SGIS_multisample");
	GLAD_GL_EXT_framebuffer_object = has_ext("GL_EXT_framebuffer_object");
	GLAD_GL_ARB_robustness_isolation = has_ext("GL_ARB_robustness_isolation");
	GLAD_GL_ARB_vertex_array_bgra = has_ext("GL_ARB_vertex_array_bgra");
	GLAD_GL_APPLE_vertex_array_range = has_ext("GL_APPLE_vertex_array_range");
	GLAD_GL_AMD_query_buffer_object = has_ext("GL_AMD_query_buffer_object");
	GLAD_GL_NV_register_combiners = has_ext("GL_NV_register_combiners");
	GLAD_GL_ARB_draw_buffers = has_ext("GL_ARB_draw_buffers");
	GLAD_GL_EXT_texture_env_dot3 = has_ext("GL_EXT_texture_env_dot3");
	GLAD_GL_ARB_debug_output = has_ext("GL_ARB_debug_output");
	GLAD_GL_SGI_color_matrix = has_ext("GL_SGI_color_matrix");
	GLAD_GL_EXT_cull_vertex = has_ext("GL_EXT_cull_vertex");
	GLAD_GL_EXT_texture_sRGB = has_ext("GL_EXT_texture_sRGB");
	GLAD_GL_APPLE_row_bytes = has_ext("GL_APPLE_row_bytes");
	GLAD_GL_NV_texgen_reflection = has_ext("GL_NV_texgen_reflection");
	GLAD_GL_IBM_multimode_draw_arrays = has_ext("GL_IBM_multimode_draw_arrays");
	GLAD_GL_APPLE_vertex_array_object = has_ext("GL_APPLE_vertex_array_object");
	GLAD_GL_3DFX_texture_compression_FXT1 = has_ext("GL_3DFX_texture_compression_FXT1");
	GLAD_GL_NV_fragment_shader_interlock = has_ext("GL_NV_fragment_shader_interlock");
	GLAD_GL_AMD_conservative_depth = has_ext("GL_AMD_conservative_depth");
	GLAD_GL_ARB_texture_float = has_ext("GL_ARB_texture_float");
	GLAD_GL_ARB_compressed_texture_pixel_storage = has_ext("GL_ARB_compressed_texture_pixel_storage");
	GLAD_GL_SGIS_detail_texture = has_ext("GL_SGIS_detail_texture");
	GLAD_GL_NV_geometry_shader_passthrough = has_ext("GL_NV_geometry_shader_passthrough");
	GLAD_GL_ARB_draw_instanced = has_ext("GL_ARB_draw_instanced");
	GLAD_GL_OES_read_format = has_ext("GL_OES_read_format");
	GLAD_GL_ATI_texture_float = has_ext("GL_ATI_texture_float");
	GLAD_GL_ARB_texture_gather = has_ext("GL_ARB_texture_gather");
	GLAD_GL_AMD_vertex_shader_layer = has_ext("GL_AMD_vertex_shader_layer");
	GLAD_GL_ARB_shading_language_include = has_ext("GL_ARB_shading_language_include");
	GLAD_GL_APPLE_client_storage = has_ext("GL_APPLE_client_storage");
	GLAD_GL_WIN_phong_shading = has_ext("GL_WIN_phong_shading");
	GLAD_GL_INGR_blend_func_separate = has_ext("GL_INGR_blend_func_separate");
	GLAD_GL_NV_path_rendering = has_ext("GL_NV_path_rendering");
	GLAD_GL_NV_conservative_raster_dilate = has_ext("GL_NV_conservative_raster_dilate");
	GLAD_GL_ATI_vertex_streams = has_ext("GL_ATI_vertex_streams");
	GLAD_GL_ARB_post_depth_coverage = has_ext("GL_ARB_post_depth_coverage");
	GLAD_GL_ARB_texture_non_power_of_two = has_ext("GL_ARB_texture_non_power_of_two");
	GLAD_GL_APPLE_rgb_422 = has_ext("GL_APPLE_rgb_422");
	GLAD_GL_EXT_texture_lod_bias = has_ext("GL_EXT_texture_lod_bias");
	GLAD_GL_ARB_gpu_shader_int64 = has_ext("GL_ARB_gpu_shader_int64");
	GLAD_GL_ARB_seamless_cube_map = has_ext("GL_ARB_seamless_cube_map");
	GLAD_GL_ARB_shader_group_vote = has_ext("GL_ARB_shader_group_vote");
	GLAD_GL_NV_vdpau_interop = has_ext("GL_NV_vdpau_interop");
	GLAD_GL_ARB_occlusion_query2 = has_ext("GL_ARB_occlusion_query2");
	GLAD_GL_ARB_internalformat_query2 = has_ext("GL_ARB_internalformat_query2");
	GLAD_GL_EXT_texture_filter_anisotropic = has_ext("GL_EXT_texture_filter_anisotropic");
	GLAD_GL_SUN_vertex = has_ext("GL_SUN_vertex");
	GLAD_GL_SGIX_igloo_interface = has_ext("GL_SGIX_igloo_interface");
	GLAD_GL_SGIS_texture_lod = has_ext("GL_SGIS_texture_lod");
	GLAD_GL_NV_vertex_program3 = has_ext("GL_NV_vertex_program3");
	GLAD_GL_ARB_draw_indirect = has_ext("GL_ARB_draw_indirect");
	GLAD_GL_NV_vertex_program4 = has_ext("GL_NV_vertex_program4");
	GLAD_GL_AMD_transform_feedback3_lines_triangles = has_ext("GL_AMD_transform_feedback3_lines_triangles");
	GLAD_GL_SGIS_fog_function = has_ext("GL_SGIS_fog_function");
	GLAD_GL_EXT_x11_sync_object = has_ext("GL_EXT_x11_sync_object");
	GLAD_GL_ARB_sync = has_ext("GL_ARB_sync");
	GLAD_GL_NV_sample_locations = has_ext("GL_NV_sample_locations");
	GLAD_GL_ARB_compute_variable_group_size = has_ext("GL_ARB_compute_variable_group_size");
	GLAD_GL_OES_fixed_point = has_ext("GL_OES_fixed_point");
	GLAD_GL_NV_blend_square = has_ext("GL_NV_blend_square");
	GLAD_GL_EXT_framebuffer_multisample = has_ext("GL_EXT_framebuffer_multisample");
	GLAD_GL_ARB_gpu_shader5 = has_ext("GL_ARB_gpu_shader5");
	GLAD_GL_SGIS_texture4D = has_ext("GL_SGIS_texture4D");
	GLAD_GL_EXT_texture3D = has_ext("GL_EXT_texture3D");
	GLAD_GL_EXT_multisample = has_ext("GL_EXT_multisample");
	GLAD_GL_EXT_secondary_color = has_ext("GL_EXT_secondary_color");
	GLAD_GL_ARB_texture_filter_minmax = has_ext("GL_ARB_texture_filter_minmax");
	GLAD_GL_ATI_vertex_array_object = has_ext("GL_ATI_vertex_array_object");
	GLAD_GL_ARB_parallel_shader_compile = has_ext("GL_ARB_parallel_shader_compile");
	GLAD_GL_NVX_gpu_memory_info = has_ext("GL_NVX_gpu_memory_info");
	GLAD_GL_ARB_sparse_texture = has_ext("GL_ARB_sparse_texture");
	GLAD_GL_SGIS_point_line_texgen = has_ext("GL_SGIS_point_line_texgen");
	GLAD_GL_ARB_sample_locations = has_ext("GL_ARB_sample_locations");
	GLAD_GL_ARB_sparse_buffer = has_ext("GL_ARB_sparse_buffer");
	GLAD_GL_EXT_draw_range_elements = has_ext("GL_EXT_draw_range_elements");
	GLAD_GL_SGIX_blend_alpha_minmax = has_ext("GL_SGIX_blend_alpha_minmax");
	GLAD_GL_KHR_context_flush_control = has_ext("GL_KHR_context_flush_control");
	free_exts();
	return 1;
}

static void find_coreGL(void) {

    /* Thank you @elmindreda
     * https://github.com/elmindreda/greg/blob/master/templates/greg.c.in#L176
     * https://github.com/glfw/glfw/blob/master/src/context.c#L36
     */
    int i, major, minor;

    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        NULL
    };

    version = (const char*) glGetString(GL_VERSION);
    if (!version) return;

    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }

/* PR #18 */
#ifdef _MSC_VER
    sscanf_s(version, "%d.%d", &major, &minor);
#else
    sscanf(version, "%d.%d", &major, &minor);
#endif

    GLVersion.major = major; GLVersion.minor = minor;
    max_loaded_major = major; max_loaded_minor = minor;
	GLAD_GL_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
	GLAD_GL_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
	GLAD_GL_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
	GLAD_GL_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
	GLAD_GL_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
	GLAD_GL_VERSION_1_5 = (major == 1 && minor >= 5) || major > 1;
	GLAD_GL_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
	GLAD_GL_VERSION_2_1 = (major == 2 && minor >= 1) || major > 2;
	GLAD_GL_VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
	GLAD_GL_VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
	GLAD_GL_VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;
	GLAD_GL_VERSION_3_3 = (major == 3 && minor >= 3) || major > 3;
	if (GLVersion.major > 3 || (GLVersion.major >= 3 && GLVersion.minor >= 3)) {
		max_loaded_major = 3;
		max_loaded_minor = 3;
	}
}

int gladLoadGLLoader(GLADloadproc load) {
	GLVersion.major = 0; GLVersion.minor = 0;
	glGetString = (PFNGLGETSTRINGPROC)load("glGetString");
	if(glGetString == NULL) return 0;
	if(glGetString(GL_VERSION) == NULL) return 0;
	find_coreGL();
	load_GL_VERSION_1_0(load);
	load_GL_VERSION_1_1(load);
	load_GL_VERSION_1_2(load);
	load_GL_VERSION_1_3(load);
	load_GL_VERSION_1_4(load);
	load_GL_VERSION_1_5(load);
	load_GL_VERSION_2_0(load);
	load_GL_VERSION_2_1(load);
	load_GL_VERSION_3_0(load);
	load_GL_VERSION_3_1(load);
	load_GL_VERSION_3_2(load);
	load_GL_VERSION_3_3(load);

	if (!find_extensionsGL()) return 0;
	load_GL_APPLE_element_array(load);
	load_GL_AMD_multi_draw_indirect(load);
	load_GL_SGIX_tag_sample_buffer(load);
	load_GL_NV_point_sprite(load);
	load_GL_ATI_separate_stencil(load);
	load_GL_EXT_texture_buffer_object(load);
	load_GL_ARB_vertex_blend(load);
	load_GL_OVR_multiview(load);
	load_GL_ARB_program_interface_query(load);
	load_GL_EXT_index_func(load);
	load_GL_NV_shader_buffer_load(load);
	load_GL_EXT_color_subtable(load);
	load_GL_SUNX_constant_data(load);
	load_GL_EXT_multi_draw_arrays(load);
	load_GL_ARB_shader_atomic_counters(load);
	load_GL_NV_conditional_render(load);
	load_GL_MESA_resize_buffers(load);
	load_GL_ARB_texture_view(load);
	load_GL_ARB_map_buffer_range(load);
	load_GL_EXT_convolution(load);
	load_GL_NV_vertex_attrib_integer_64bit(load);
	load_GL_EXT_paletted_texture(load);
	load_GL_ARB_texture_buffer_object(load);
	load_GL_ATI_pn_triangles(load);
	load_GL_SGIX_flush_raster(load);
	load_GL_EXT_light_texture(load);
	load_GL_AMD_draw_buffers_blend(load);
	load_GL_APPLE_texture_range(load);
	load_GL_EXT_texture_array(load);
	load_GL_NV_texture_barrier(load);
	load_GL_ARB_vertex_type_2_10_10_10_rev(load);
	load_GL_3DFX_tbuffer(load);
	load_GL_GREMEDY_frame_terminator(load);
	load_GL_ARB_blend_func_extended(load);
	load_GL_EXT_separate_shader_objects(load);
	load_GL_NV_texture_multisample(load);
	load_GL_ARB_shader_objects(load);
	load_GL_ARB_framebuffer_object(load);
	load_GL_ATI_envmap_bumpmap(load);
	load_GL_NV_viewport_swizzle(load);
	load_GL_ATI_map_object_buffer(load);
	load_GL_ARB_robustness(load);
	load_GL_NV_pixel_data_range(load);
	load_GL_EXT_framebuffer_blit(load);
	load_GL_ARB_gpu_shader_fp64(load);
	load_GL_NV_command_list(load);
	load_GL_EXT_vertex_weighting(load);
	load_GL_GREMEDY_string_marker(load);
	load_GL_EXT_subtexture(load);
	load_GL_EXT_gpu_program_parameters(load);
	load_GL_NV_evaluators(load);
	load_GL_SGIS_texture_filter4(load);
	load_GL_AMD_performance_monitor(load);
	load_GL_EXT_stencil_clear_tag(load);
	load_GL_NV_present_video(load);
	load_GL_SGIX_framezoom(load);
	load_GL_ARB_draw_elements_base_vertex(load);
	load_GL_NV_transform_feedback(load);
	load_GL_NV_fragment_program(load);
	load_GL_AMD_stencil_operation_extended(load);
	load_GL_ARB_instanced_arrays(load);
	load_GL_ARB_get_texture_sub_image(load);
	load_GL_KHR_robustness(load);
	load_GL_AMD_sparse_texture(load);
	load_GL_ARB_clip_control(load);
	load_GL_NV_fragment_coverage_to_color(load);
	load_GL_NV_fence(load);
	load_GL_ARB_texture_buffer_range(load);
	load_GL_SUN_mesh_array(load);
	load_GL_ARB_vertex_attrib_binding(load);
	load_GL_ARB_framebuffer_no_attachments(load);
	load_GL_ARB_cl_event(load);
	load_GL_OES_single_precision(load);
	load_GL_NV_primitive_restart(load);
	load_GL_SUN_global_alpha(load);
	load_GL_EXT_texture_object(load);
	load_GL_AMD_name_gen_delete(load);
	load_GL_ARB_buffer_storage(load);
	load_GL_APPLE_vertex_program_evaluators(load);
	load_GL_ARB_multi_bind(load);
	load_GL_SGIX_list_priority(load);
	load_GL_NV_vertex_buffer_unified_memory(load);
	load_GL_ARB_clear_texture(load);
	load_GL_NV_blend_equation_advanced(load);
	load_GL_SGIS_sharpen_texture(load);
	load_GL_ARB_vertex_program(load);
	load_GL_NV_clip_space_w_scaling(load);
	load_GL_ARB_vertex_buffer_object(load);
	load_GL_NV_vertex_array_range(load);
	load_GL_SGIX_fragment_lighting(load);
	load_GL_NV_framebuffer_multisample_coverage(load);
	load_GL_EXT_timer_query(load);
	load_GL_NV_bindless_texture(load);
	load_GL_KHR_debug(load);
	load_GL_ATI_vertex_attrib_array_object(load);
	load_GL_EXT_geometry_shader4(load);
	load_GL_EXT_bindable_uniform(load);
	load_GL_KHR_blend_equation_advanced(load);
	load_GL_ATI_element_array(load);
	load_GL_SGIX_reference_plane(load);
	load_GL_EXT_stencil_two_side(load);
	load_GL_NV_explicit_multisample(load);
	load_GL_IBM_static_data(load);
	load_GL_EXT_texture_perturb_normal(load);
	load_GL_EXT_point_parameters(load);
	load_GL_PGI_misc_hints(load);
	load_GL_ARB_vertex_shader(load);
	load_GL_ARB_tessellation_shader(load);
	load_GL_EXT_draw_buffers2(load);
	load_GL_ARB_vertex_attrib_64bit(load);
	load_GL_EXT_texture_filter_minmax(load);
	load_GL_AMD_interleaved_elements(load);
	load_GL_ARB_fragment_program(load);
	load_GL_ARB_texture_storage(load);
	load_GL_ARB_copy_image(load);
	load_GL_SGIS_pixel_texture(load);
	load_GL_SGIX_instruments(load);
	load_GL_ARB_shader_storage_buffer_object(load);
	load_GL_EXT_blend_minmax(load);
	load_GL_ARB_base_instance(load);
	load_GL_ARB_ES3_1_compatibility(load);
	load_GL_EXT_texture_integer(load);
	load_GL_ARB_texture_multisample(load);
	load_GL_AMD_gpu_shader_int64(load);
	load_GL_AMD_vertex_shader_tessellator(load);
	load_GL_ARB_invalidate_subdata(load);
	load_GL_EXT_index_material(load);
	load_GL_INTEL_parallel_arrays(load);
	load_GL_ATI_draw_buffers(load);
	load_GL_SGIX_pixel_texture(load);
	load_GL_ARB_timer_query(load);
	load_GL_NV_parameter_buffer_object(load);
	load_GL_ARB_direct_state_access(load);
	load_GL_ARB_uniform_buffer_object(load);
	load_GL_NV_transform_feedback2(load);
	load_GL_EXT_blend_color(load);
	load_GL_EXT_histogram(load);
	load_GL_EXT_polygon_offset(load);
	load_GL_SGIS_point_parameters(load);
	load_GL_EXT_direct_state_access(load);
	load_GL_AMD_sample_positions(load);
	load_GL_NV_vertex_program(load);
	load_GL_EXT_vertex_shader(load);
	load_GL_EXT_blend_func_separate(load);
	load_GL_APPLE_fence(load);
	load_GL_OES_byte_coordinates(load);
	load_GL_ARB_transpose_matrix(load);
	load_GL_ARB_provoking_vertex(load);
	load_GL_EXT_fog_coord(load);
	load_GL_EXT_vertex_array(load);
	load_GL_EXT_blend_equation_separate(load);
	load_GL_NV_framebuffer_mixed_samples(load);
	load_GL_NVX_conditional_render(load);
	load_GL_ARB_multi_draw_indirect(load);
	load_GL_EXT_raster_multisample(load);
	load_GL_NV_copy_image(load);
	load_GL_INTEL_framebuffer_CMAA(load);
	load_GL_ARB_transform_feedback2(load);
	load_GL_ARB_transform_feedback3(load);
	load_GL_EXT_debug_marker(load);
	load_GL_EXT_pixel_transform(load);
	load_GL_ATI_fragment_shader(load);
	load_GL_ARB_vertex_array_object(load);
	load_GL_SUN_triangle_list(load);
	load_GL_ARB_transform_feedback_instanced(load);
	load_GL_SGIX_async(load);
	load_GL_INTEL_performance_query(load);
	load_GL_NV_gpu_shader5(load);
	load_GL_NV_bindless_multi_draw_indirect_count(load);
	load_GL_ARB_ES2_compatibility(load);
	load_GL_ARB_indirect_parameters(load);
	load_GL_EXT_window_rectangles(load);
	load_GL_NV_half_float(load);
	load_GL_ARB_ES3_2_compatibility(load);
	load_GL_EXT_polygon_offset_clamp(load);
	load_GL_EXT_compiled_vertex_array(load);
	load_GL_NV_depth_buffer_float(load);
	load_GL_NV_occlusion_query(load);
	load_GL_APPLE_flush_buffer_range(load);
	load_GL_ARB_imaging(load);
	load_GL_ARB_draw_buffers_blend(load);
	load_GL_ARB_clear_buffer_object(load);
	load_GL_ARB_multisample(load);
	load_GL_EXT_debug_label(load);
	load_GL_ARB_sample_shading(load);
	load_GL_NV_internalformat_sample_query(load);
	load_GL_INTEL_map_texture(load);
	load_GL_NV_conservative_raster_pre_snap_triangles(load);
	load_GL_ARB_compute_shader(load);
	load_GL_IBM_vertex_array_lists(load);
	load_GL_ARB_color_buffer_float(load);
	load_GL_ARB_bindless_texture(load);
	load_GL_ARB_window_pos(load);
	load_GL_ARB_internalformat_query(load);
	load_GL_EXT_shader_image_load_store(load);
	load_GL_EXT_copy_texture(load);
	load_GL_NV_register_combiners2(load);
	load_GL_NV_draw_texture(load);
	load_GL_EXT_draw_instanced(load);
	load_GL_ARB_viewport_array(load);
	load_GL_ARB_separate_shader_objects(load);
	load_GL_EXT_depth_bounds_test(load);
	load_GL_HP_image_transform(load);
	load_GL_NV_video_capture(load);
	load_GL_ARB_sampler_objects(load);
	load_GL_ARB_matrix_palette(load);
	load_GL_SGIS_texture_color_mask(load);
	load_GL_EXT_coordinate_frame(load);
	load_GL_ARB_texture_compression(load);
	load_GL_ARB_shader_subroutine(load);
	load_GL_ARB_texture_storage_multisample(load);
	load_GL_EXT_vertex_attrib_64bit(load);
	load_GL_OES_query_matrix(load);
	load_GL_MESA_window_pos(load);
	load_GL_ARB_copy_buffer(load);
	load_GL_APPLE_object_purgeable(load);
	load_GL_ARB_occlusion_query(load);
	load_GL_SGI_color_table(load);
	load_GL_EXT_gpu_shader4(load);
	load_GL_NV_geometry_program4(load);
	load_GL_AMD_debug_output(load);
	load_GL_ARB_multitexture(load);
	load_GL_SGIX_polynomial_ffd(load);
	load_GL_EXT_provoking_vertex(load);
	load_GL_ARB_point_parameters(load);
	load_GL_ARB_shader_image_load_store(load);
	load_GL_ARB_texture_barrier(load);
	load_GL_NV_bindless_multi_draw_indirect(load);
	load_GL_EXT_transform_feedback(load);
	load_GL_NV_gpu_program4(load);
	load_GL_NV_gpu_program5(load);
	load_GL_ARB_geometry_shader4(load);
	load_GL_NV_conservative_raster(load);
	load_GL_SGIX_sprite(load);
	load_GL_ARB_get_program_binary(load);
	load_GL_AMD_occlusion_query_event(load);
	load_GL_SGIS_multisample(load);
	load_GL_EXT_framebuffer_object(load);
	load_GL_APPLE_vertex_array_range(load);
	load_GL_NV_register_combiners(load);
	load_GL_ARB_draw_buffers(load);
	load_GL_ARB_debug_output(load);
	load_GL_EXT_cull_vertex(load);
	load_GL_IBM_multimode_draw_arrays(load);
	load_GL_APPLE_vertex_array_object(load);
	load_GL_SGIS_detail_texture(load);
	load_GL_ARB_draw_instanced(load);
	load_GL_ARB_shading_language_include(load);
	load_GL_INGR_blend_func_separate(load);
	load_GL_NV_path_rendering(load);
	load_GL_NV_conservative_raster_dilate(load);
	load_GL_ATI_vertex_streams(load);
	load_GL_ARB_gpu_shader_int64(load);
	load_GL_NV_vdpau_interop(load);
	load_GL_ARB_internalformat_query2(load);
	load_GL_SUN_vertex(load);
	load_GL_SGIX_igloo_interface(load);
	load_GL_ARB_draw_indirect(load);
	load_GL_NV_vertex_program4(load);
	load_GL_SGIS_fog_function(load);
	load_GL_EXT_x11_sync_object(load);
	load_GL_ARB_sync(load);
	load_GL_NV_sample_locations(load);
	load_GL_ARB_compute_variable_group_size(load);
	load_GL_OES_fixed_point(load);
	load_GL_EXT_framebuffer_multisample(load);
	load_GL_SGIS_texture4D(load);
	load_GL_EXT_texture3D(load);
	load_GL_EXT_multisample(load);
	load_GL_EXT_secondary_color(load);
	load_GL_ATI_vertex_array_object(load);
	load_GL_ARB_parallel_shader_compile(load);
	load_GL_ARB_sparse_texture(load);
	load_GL_ARB_sample_locations(load);
	load_GL_ARB_sparse_buffer(load);
	load_GL_EXT_draw_range_elements(load);
	return GLVersion.major != 0 || GLVersion.minor != 0;
}

#endif // GLAD_IMPLEMENTATION

#ifdef __cplusplus
}
#endif

#endif // __glad_h_
